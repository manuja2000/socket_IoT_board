
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	f0 44 00 20 fd 3b 00 08 e5 04 01 08 d1 3b 00 08     .D. .;.......;..
 8000010:	d1 3b 00 08 d1 3b 00 08 d1 3b 00 08 00 00 00 00     .;...;...;......
	...
 800002c:	ed 38 00 08 d1 3b 00 08 00 00 00 00 95 38 00 08     .8...;.......8..
 800003c:	0d b2 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000050:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000060:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000070:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000080:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000090:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 80000a0:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 80000b0:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 80000c0:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 80000d0:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 80000e0:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 80000f0:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000100:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000110:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000120:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000130:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000140:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000150:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000160:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000170:	a1 39 00 08 a1 39 00 08 a1 39 00 08 a1 39 00 08     .9...9...9...9..
 8000180:	a1 39 00 08 a1 39 00 08                             .9...9..

Disassembly of section text:

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b80c 	b.w	8000260 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f808 	bl	8000264 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__aeabi_idiv0>:
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	4607      	mov	r7, r0
 800026a:	468c      	mov	ip, r1
 800026c:	4608      	mov	r0, r1
 800026e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000270:	4615      	mov	r5, r2
 8000272:	463c      	mov	r4, r7
 8000274:	4619      	mov	r1, r3
 8000276:	2b00      	cmp	r3, #0
 8000278:	f040 80c6 	bne.w	8000408 <__udivmoddi4+0x1a4>
 800027c:	4282      	cmp	r2, r0
 800027e:	fab2 f782 	clz	r7, r2
 8000282:	d946      	bls.n	8000312 <__udivmoddi4+0xae>
 8000284:	b14f      	cbz	r7, 800029a <__udivmoddi4+0x36>
 8000286:	f1c7 0e20 	rsb	lr, r7, #32
 800028a:	fa24 fe0e 	lsr.w	lr, r4, lr
 800028e:	fa00 f307 	lsl.w	r3, r0, r7
 8000292:	40bd      	lsls	r5, r7
 8000294:	ea4e 0c03 	orr.w	ip, lr, r3
 8000298:	40bc      	lsls	r4, r7
 800029a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800029e:	fa1f fe85 	uxth.w	lr, r5
 80002a2:	fbbc f9f8 	udiv	r9, ip, r8
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	fb08 c319 	mls	r3, r8, r9, ip
 80002ac:	fb09 fa0e 	mul.w	sl, r9, lr
 80002b0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80002b4:	459a      	cmp	sl, r3
 80002b6:	d928      	bls.n	800030a <__udivmoddi4+0xa6>
 80002b8:	18eb      	adds	r3, r5, r3
 80002ba:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80002be:	d204      	bcs.n	80002ca <__udivmoddi4+0x66>
 80002c0:	459a      	cmp	sl, r3
 80002c2:	d902      	bls.n	80002ca <__udivmoddi4+0x66>
 80002c4:	f1a9 0002 	sub.w	r0, r9, #2
 80002c8:	442b      	add	r3, r5
 80002ca:	eba3 030a 	sub.w	r3, r3, sl
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f2f8 	udiv	r2, r3, r8
 80002d4:	fb08 3312 	mls	r3, r8, r2, r3
 80002d8:	fb02 fe0e 	mul.w	lr, r2, lr
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d914      	bls.n	800030e <__udivmoddi4+0xaa>
 80002e4:	192c      	adds	r4, r5, r4
 80002e6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80002ea:	d203      	bcs.n	80002f4 <__udivmoddi4+0x90>
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d901      	bls.n	80002f4 <__udivmoddi4+0x90>
 80002f0:	1e93      	subs	r3, r2, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	eba4 040e 	sub.w	r4, r4, lr
 80002f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40fc      	lsrs	r4, r7
 8000300:	2300      	movs	r3, #0
 8000302:	6034      	str	r4, [r6, #0]
 8000304:	6073      	str	r3, [r6, #4]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	4648      	mov	r0, r9
 800030c:	e7dd      	b.n	80002ca <__udivmoddi4+0x66>
 800030e:	4613      	mov	r3, r2
 8000310:	e7f0      	b.n	80002f4 <__udivmoddi4+0x90>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xb2>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	bb87      	cbnz	r7, 800037a <__udivmoddi4+0x116>
 8000318:	1a83      	subs	r3, r0, r2
 800031a:	2101      	movs	r1, #1
 800031c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000320:	b2aa      	uxth	r2, r5
 8000322:	fbb3 fcfe 	udiv	ip, r3, lr
 8000326:	0c20      	lsrs	r0, r4, #16
 8000328:	fb0e 331c 	mls	r3, lr, ip, r3
 800032c:	fb0c f802 	mul.w	r8, ip, r2
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	4598      	cmp	r8, r3
 8000336:	d963      	bls.n	8000400 <__udivmoddi4+0x19c>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d204      	bcs.n	800034a <__udivmoddi4+0xe6>
 8000340:	4598      	cmp	r8, r3
 8000342:	d902      	bls.n	800034a <__udivmoddi4+0xe6>
 8000344:	f1ac 0002 	sub.w	r0, ip, #2
 8000348:	442b      	add	r3, r5
 800034a:	eba3 0308 	sub.w	r3, r3, r8
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb3 fcfe 	udiv	ip, r3, lr
 8000354:	fb0e 331c 	mls	r3, lr, ip, r3
 8000358:	fb0c f202 	mul.w	r2, ip, r2
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	42a2      	cmp	r2, r4
 8000362:	d94f      	bls.n	8000404 <__udivmoddi4+0x1a0>
 8000364:	192c      	adds	r4, r5, r4
 8000366:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 800036a:	d204      	bcs.n	8000376 <__udivmoddi4+0x112>
 800036c:	42a2      	cmp	r2, r4
 800036e:	d902      	bls.n	8000376 <__udivmoddi4+0x112>
 8000370:	f1ac 0302 	sub.w	r3, ip, #2
 8000374:	442c      	add	r4, r5
 8000376:	1aa4      	subs	r4, r4, r2
 8000378:	e7be      	b.n	80002f8 <__udivmoddi4+0x94>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	fa20 f80c 	lsr.w	r8, r0, ip
 8000382:	fa00 f307 	lsl.w	r3, r0, r7
 8000386:	fa24 fc0c 	lsr.w	ip, r4, ip
 800038a:	40bd      	lsls	r5, r7
 800038c:	ea4c 0203 	orr.w	r2, ip, r3
 8000390:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000394:	b2ab      	uxth	r3, r5
 8000396:	fbb8 fcfe 	udiv	ip, r8, lr
 800039a:	0c11      	lsrs	r1, r2, #16
 800039c:	fb0e 801c 	mls	r0, lr, ip, r8
 80003a0:	fb0c f903 	mul.w	r9, ip, r3
 80003a4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 80003a8:	4581      	cmp	r9, r0
 80003aa:	fa04 f407 	lsl.w	r4, r4, r7
 80003ae:	d923      	bls.n	80003f8 <__udivmoddi4+0x194>
 80003b0:	1828      	adds	r0, r5, r0
 80003b2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80003b6:	d204      	bcs.n	80003c2 <__udivmoddi4+0x15e>
 80003b8:	4581      	cmp	r9, r0
 80003ba:	d902      	bls.n	80003c2 <__udivmoddi4+0x15e>
 80003bc:	f1ac 0102 	sub.w	r1, ip, #2
 80003c0:	4428      	add	r0, r5
 80003c2:	eba0 0009 	sub.w	r0, r0, r9
 80003c6:	b292      	uxth	r2, r2
 80003c8:	fbb0 fcfe 	udiv	ip, r0, lr
 80003cc:	fb0e 001c 	mls	r0, lr, ip, r0
 80003d0:	fb0c f803 	mul.w	r8, ip, r3
 80003d4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 80003d8:	4598      	cmp	r8, r3
 80003da:	d90f      	bls.n	80003fc <__udivmoddi4+0x198>
 80003dc:	18eb      	adds	r3, r5, r3
 80003de:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80003e2:	d204      	bcs.n	80003ee <__udivmoddi4+0x18a>
 80003e4:	4598      	cmp	r8, r3
 80003e6:	d902      	bls.n	80003ee <__udivmoddi4+0x18a>
 80003e8:	f1ac 0202 	sub.w	r2, ip, #2
 80003ec:	442b      	add	r3, r5
 80003ee:	eba3 0308 	sub.w	r3, r3, r8
 80003f2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80003f6:	e791      	b.n	800031c <__udivmoddi4+0xb8>
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0x15e>
 80003fc:	4662      	mov	r2, ip
 80003fe:	e7f6      	b.n	80003ee <__udivmoddi4+0x18a>
 8000400:	4660      	mov	r0, ip
 8000402:	e7a2      	b.n	800034a <__udivmoddi4+0xe6>
 8000404:	4663      	mov	r3, ip
 8000406:	e7b6      	b.n	8000376 <__udivmoddi4+0x112>
 8000408:	4283      	cmp	r3, r0
 800040a:	d905      	bls.n	8000418 <__udivmoddi4+0x1b4>
 800040c:	b10e      	cbz	r6, 8000412 <__udivmoddi4+0x1ae>
 800040e:	e9c6 7000 	strd	r7, r0, [r6]
 8000412:	2100      	movs	r1, #0
 8000414:	4608      	mov	r0, r1
 8000416:	e776      	b.n	8000306 <__udivmoddi4+0xa2>
 8000418:	fab3 f183 	clz	r1, r3
 800041c:	b981      	cbnz	r1, 8000440 <__udivmoddi4+0x1dc>
 800041e:	4283      	cmp	r3, r0
 8000420:	d301      	bcc.n	8000426 <__udivmoddi4+0x1c2>
 8000422:	42ba      	cmp	r2, r7
 8000424:	d80a      	bhi.n	800043c <__udivmoddi4+0x1d8>
 8000426:	1abc      	subs	r4, r7, r2
 8000428:	eb60 0303 	sbc.w	r3, r0, r3
 800042c:	2001      	movs	r0, #1
 800042e:	469c      	mov	ip, r3
 8000430:	2e00      	cmp	r6, #0
 8000432:	d068      	beq.n	8000506 <__udivmoddi4+0x2a2>
 8000434:	e9c6 4c00 	strd	r4, ip, [r6]
 8000438:	2100      	movs	r1, #0
 800043a:	e764      	b.n	8000306 <__udivmoddi4+0xa2>
 800043c:	4608      	mov	r0, r1
 800043e:	e7f7      	b.n	8000430 <__udivmoddi4+0x1cc>
 8000440:	f1c1 0c20 	rsb	ip, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f40c 	lsr.w	r4, r2, ip
 800044a:	431c      	orrs	r4, r3
 800044c:	fa02 f501 	lsl.w	r5, r2, r1
 8000450:	fa00 f301 	lsl.w	r3, r0, r1
 8000454:	fa27 f20c 	lsr.w	r2, r7, ip
 8000458:	fa20 fb0c 	lsr.w	fp, r0, ip
 800045c:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000460:	4313      	orrs	r3, r2
 8000462:	fbbb f8f9 	udiv	r8, fp, r9
 8000466:	fa1f fe84 	uxth.w	lr, r4
 800046a:	fb09 bb18 	mls	fp, r9, r8, fp
 800046e:	0c1a      	lsrs	r2, r3, #16
 8000470:	fb08 fa0e 	mul.w	sl, r8, lr
 8000474:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000478:	4592      	cmp	sl, r2
 800047a:	fa07 f701 	lsl.w	r7, r7, r1
 800047e:	d93e      	bls.n	80004fe <__udivmoddi4+0x29a>
 8000480:	18a2      	adds	r2, r4, r2
 8000482:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000486:	d204      	bcs.n	8000492 <__udivmoddi4+0x22e>
 8000488:	4592      	cmp	sl, r2
 800048a:	d902      	bls.n	8000492 <__udivmoddi4+0x22e>
 800048c:	f1a8 0002 	sub.w	r0, r8, #2
 8000490:	4422      	add	r2, r4
 8000492:	eba2 020a 	sub.w	r2, r2, sl
 8000496:	b29b      	uxth	r3, r3
 8000498:	fbb2 f8f9 	udiv	r8, r2, r9
 800049c:	fb09 2218 	mls	r2, r9, r8, r2
 80004a0:	fb08 fe0e 	mul.w	lr, r8, lr
 80004a4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80004a8:	4596      	cmp	lr, r2
 80004aa:	d92a      	bls.n	8000502 <__udivmoddi4+0x29e>
 80004ac:	18a2      	adds	r2, r4, r2
 80004ae:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80004b2:	d204      	bcs.n	80004be <__udivmoddi4+0x25a>
 80004b4:	4596      	cmp	lr, r2
 80004b6:	d902      	bls.n	80004be <__udivmoddi4+0x25a>
 80004b8:	f1a8 0302 	sub.w	r3, r8, #2
 80004bc:	4422      	add	r2, r4
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	fba0 9305 	umull	r9, r3, r0, r5
 80004c6:	eba2 020e 	sub.w	r2, r2, lr
 80004ca:	429a      	cmp	r2, r3
 80004cc:	46ce      	mov	lr, r9
 80004ce:	4698      	mov	r8, r3
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0x274>
 80004d2:	d106      	bne.n	80004e2 <__udivmoddi4+0x27e>
 80004d4:	454f      	cmp	r7, r9
 80004d6:	d204      	bcs.n	80004e2 <__udivmoddi4+0x27e>
 80004d8:	ebb9 0e05 	subs.w	lr, r9, r5
 80004dc:	eb63 0804 	sbc.w	r8, r3, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	b186      	cbz	r6, 8000506 <__udivmoddi4+0x2a2>
 80004e4:	ebb7 030e 	subs.w	r3, r7, lr
 80004e8:	eb62 0708 	sbc.w	r7, r2, r8
 80004ec:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004f0:	40cb      	lsrs	r3, r1
 80004f2:	ea4c 0303 	orr.w	r3, ip, r3
 80004f6:	40cf      	lsrs	r7, r1
 80004f8:	e9c6 3700 	strd	r3, r7, [r6]
 80004fc:	e79c      	b.n	8000438 <__udivmoddi4+0x1d4>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7c7      	b.n	8000492 <__udivmoddi4+0x22e>
 8000502:	4643      	mov	r3, r8
 8000504:	e7db      	b.n	80004be <__udivmoddi4+0x25a>
 8000506:	4631      	mov	r1, r6
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xa2>

0800050a <strcmp>:
 800050a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800050e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000512:	2a01      	cmp	r2, #1
 8000514:	bf28      	it	cs
 8000516:	429a      	cmpcs	r2, r3
 8000518:	d0f7      	beq.n	800050a <strcmp>
 800051a:	1ad0      	subs	r0, r2, r3
 800051c:	4770      	bx	lr

0800051e <strlen>:
 800051e:	4603      	mov	r3, r0
 8000520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000524:	2a00      	cmp	r2, #0
 8000526:	d1fb      	bne.n	8000520 <strlen+0x2>
 8000528:	1a18      	subs	r0, r3, r0
 800052a:	3801      	subs	r0, #1
 800052c:	4770      	bx	lr
	...

08000530 <handle_ipv4_echo_reply>:
}

static enum net_verdict handle_ipv4_echo_reply(struct net_pkt *pkt,
					       struct net_ipv4_hdr *ip_hdr,
					       struct net_icmp_hdr *icmp_hdr)
{
 8000530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000534:	b08f      	sub	sp, #60	; 0x3c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8000536:	2300      	movs	r3, #0
{
 8000538:	460f      	mov	r7, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800053a:	2404      	movs	r4, #4
					      struct net_icmpv4_echo_req);
	uint32_t cycles;
	struct net_icmpv4_echo_req *icmp_echo;

	icmp_echo = (struct net_icmpv4_echo_req *)net_pkt_get_data(pkt,
 800053c:	a90c      	add	r1, sp, #48	; 0x30
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800053e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
{
 8000542:	4680      	mov	r8, r0
	icmp_echo = (struct net_icmpv4_echo_req *)net_pkt_get_data(pkt,
 8000544:	f011 fcca 	bl	8011edc <net_pkt_get_data>
								&icmp_access);
	if (icmp_echo == NULL) {
 8000548:	4683      	mov	fp, r0
 800054a:	b918      	cbnz	r0, 8000554 <handle_ipv4_echo_reply+0x24>
		return -NET_DROP;
 800054c:	20fe      	movs	r0, #254	; 0xfe
#endif
	k_sem_give(&ping_timeout);

	net_pkt_unref(pkt);
	return NET_OK;
}
 800054e:	b00f      	add	sp, #60	; 0x3c
 8000550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_skip(pkt, sizeof(*icmp_echo));
 8000554:	4621      	mov	r1, r4
 8000556:	4640      	mov	r0, r8
 8000558:	f011 fb21 	bl	8011b9e <net_pkt_skip>
	if (net_pkt_read_be32(pkt, &cycles)) {
 800055c:	a90b      	add	r1, sp, #44	; 0x2c
 800055e:	4640      	mov	r0, r8
 8000560:	f011 fb3c 	bl	8011bdc <net_pkt_read_be32>
 8000564:	4604      	mov	r4, r0
 8000566:	2800      	cmp	r0, #0
 8000568:	d1f0      	bne.n	800054c <handle_ipv4_echo_reply+0x1c>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800056a:	f00a fefd 	bl	800b368 <sys_clock_cycle_get_32>
	cycles = k_cycle_get_32() - cycles;
 800056e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	PR_SHELL(shell_for_ping, "%d bytes from %s to %s: icmp_seq=%d ttl=%d "
 8000570:	887d      	ldrh	r5, [r7, #2]
			return ((t * to_hz + off) / from_hz);
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
 8000572:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8000620 <handle_ipv4_echo_reply+0xf0>
	cycles = k_cycle_get_32() - cycles;
 8000576:	1ac0      	subs	r0, r0, r3
	PR_SHELL(shell_for_ping, "%d bytes from %s to %s: icmp_seq=%d ttl=%d "
 8000578:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <handle_ipv4_echo_reply+0xf4>)
	cycles = k_cycle_get_32() - cycles;
 800057a:	900b      	str	r0, [sp, #44]	; 0x2c
	PR_SHELL(shell_for_ping, "%d bytes from %s to %s: icmp_seq=%d ttl=%d "
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	9307      	str	r3, [sp, #28]
 8000580:	f107 010c 	add.w	r1, r7, #12
 8000584:	2001      	movs	r0, #1
 8000586:	f004 fcad 	bl	8004ee4 <net_sprint_addr>
 800058a:	f107 0110 	add.w	r1, r7, #16
 800058e:	9008      	str	r0, [sp, #32]
 8000590:	2001      	movs	r0, #1
 8000592:	f004 fca7 	bl	8004ee4 <net_sprint_addr>
 8000596:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800059a:	9009      	str	r0, [sp, #36]	; 0x24
 800059c:	4621      	mov	r1, r4
 800059e:	4650      	mov	r0, sl
 80005a0:	a31d      	add	r3, pc, #116	; (adr r3, 8000618 <handle_ipv4_echo_reply+0xe8>)
 80005a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005a6:	f7ff fe43 	bl	8000230 <__aeabi_uldivmod>
 80005aa:	fba2 0109 	umull	r0, r1, r2, r9
 80005ae:	461e      	mov	r6, r3
 80005b0:	fb09 1106 	mla	r1, r9, r6, r1
 80005b4:	a318      	add	r3, pc, #96	; (adr r3, 8000618 <handle_ipv4_echo_reply+0xe8>)
 80005b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ba:	f7ff fe39 	bl	8000230 <__aeabi_uldivmod>
 80005be:	a316      	add	r3, pc, #88	; (adr r3, 8000618 <handle_ipv4_echo_reply+0xe8>)
 80005c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005c4:	4606      	mov	r6, r0
 80005c6:	4621      	mov	r1, r4
 80005c8:	4650      	mov	r0, sl
 80005ca:	f7ff fe31 	bl	8000230 <__aeabi_uldivmod>
 80005ce:	7a3b      	ldrb	r3, [r7, #8]
 80005d0:	9303      	str	r3, [sp, #12]
 80005d2:	fb00 6609 	mla	r6, r0, r9, r6
 80005d6:	4814      	ldr	r0, [pc, #80]	; (8000628 <handle_ipv4_echo_reply+0xf8>)
 80005d8:	fbb6 f6f0 	udiv	r6, r6, r0
 80005dc:	9604      	str	r6, [sp, #16]
 80005de:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <handle_ipv4_echo_reply+0xfc>)
 80005e4:	9807      	ldr	r0, [sp, #28]
 80005e6:	ba5b      	rev16	r3, r3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	ba6d      	rev16	r5, r5
 80005ec:	9302      	str	r3, [sp, #8]
 80005ee:	b2ad      	uxth	r5, r5
 80005f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	3d04      	subs	r5, #4
 80005f6:	9b08      	ldr	r3, [sp, #32]
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2108      	movs	r1, #8
 80005fc:	462b      	mov	r3, r5
 80005fe:	f00e fe51 	bl	800f2a4 <shell_fprintf>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <handle_ipv4_echo_reply+0x100>)
 8000604:	f00b ffcc 	bl	800c5a0 <z_impl_k_sem_give>
	net_pkt_unref(pkt);
 8000608:	4640      	mov	r0, r8
 800060a:	f011 f9f3 	bl	80119f4 <net_pkt_unref>
	return NET_OK;
 800060e:	4620      	mov	r0, r4
 8000610:	e79d      	b.n	800054e <handle_ipv4_echo_reply+0x1e>
 8000612:	bf00      	nop
 8000614:	f3af 8000 	nop.w
 8000618:	04c4b400 	.word	0x04c4b400
 800061c:	00000000 	.word	0x00000000
 8000620:	3b9aca00 	.word	0x3b9aca00
 8000624:	200023dc 	.word	0x200023dc
 8000628:	000f4240 	.word	0x000f4240
 800062c:	08017817 	.word	0x08017817
 8000630:	200004d0 	.word	0x200004d0

08000634 <main>:
#endif

#define BIND_PORT 4242

void main(void)
{
 8000634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000638:	b0b1      	sub	sp, #196	; 0xc4
	Wifi_demo();
 800063a:	f00e f81a 	bl	800e672 <Wifi_demo>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&type, *(uintptr_t *)&proto, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
 800063e:	2101      	movs	r1, #1
 8000640:	2206      	movs	r2, #6
 8000642:	4608      	mov	r0, r1
 8000644:	f002 fee2 	bl	800340c <z_impl_zsock_socket>
	struct sockaddr_in bind_addr;
	static int counter;

	serv = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

	if (serv < 0) {
 8000648:	1e06      	subs	r6, r0, #0
 800064a:	da08      	bge.n	800065e <main+0x2a>
		printf("error: socket: %d\n", errno);
 800064c:	f00f ff81 	bl	8010552 <__errno>
 8000650:	6801      	ldr	r1, [r0, #0]
 8000652:	4840      	ldr	r0, [pc, #256]	; (8000754 <main+0x120>)
	bind_addr.sin_family = AF_INET;
	bind_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	bind_addr.sin_port = htons(BIND_PORT);

	if (bind(serv, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) < 0) {
		printf("error: bind: %d\n", errno);
 8000654:	f00d f866 	bl	800d724 <iprintf>
		exit(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f00c ff9b 	bl	800d594 <exit>
	bind_addr.sin_addr.s_addr = htonl(INADDR_ANY);
 800065e:	4a3e      	ldr	r2, [pc, #248]	; (8000758 <main+0x124>)
 8000660:	2300      	movs	r3, #0
 8000662:	e9cd 2304 	strd	r2, r3, [sp, #16]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sock, *(uintptr_t *)&addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_BIND);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_bind(sock, addr, addrlen);
 8000666:	2208      	movs	r2, #8
 8000668:	a904      	add	r1, sp, #16
 800066a:	f00f fb90 	bl	800fd8e <z_impl_zsock_bind>
	if (bind(serv, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) < 0) {
 800066e:	2800      	cmp	r0, #0
 8000670:	da04      	bge.n	800067c <main+0x48>
		printf("error: bind: %d\n", errno);
 8000672:	f00f ff6e 	bl	8010552 <__errno>
 8000676:	6801      	ldr	r1, [r0, #0]
 8000678:	4838      	ldr	r0, [pc, #224]	; (800075c <main+0x128>)
 800067a:	e7eb      	b.n	8000654 <main+0x20>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sock, *(uintptr_t *)&backlog, K_SYSCALL_ZSOCK_LISTEN);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_listen(sock, backlog);
 800067c:	2105      	movs	r1, #5
 800067e:	4630      	mov	r0, r6
 8000680:	f00f fbb0 	bl	800fde4 <z_impl_zsock_listen>
	}

	if (listen(serv, 5) < 0) {
 8000684:	2800      	cmp	r0, #0
 8000686:	da04      	bge.n	8000692 <main+0x5e>
		printf("error: listen: %d\n", errno);
 8000688:	f00f ff63 	bl	8010552 <__errno>
 800068c:	6801      	ldr	r1, [r0, #0]
 800068e:	4834      	ldr	r0, [pc, #208]	; (8000760 <main+0x12c>)
 8000690:	e7e0      	b.n	8000654 <main+0x20>
		exit(1);
	}

	printf("Single-threaded TCP echo server waits for a connection on "
 8000692:	4834      	ldr	r0, [pc, #208]	; (8000764 <main+0x130>)

	while (1) {
		struct sockaddr_in client_addr;
		socklen_t client_addr_len = sizeof(client_addr);
		char addr_str[32];
		printf("Before Accept\n");
 8000694:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8000768 <main+0x134>
		int client = accept(serv, (struct sockaddr *)&client_addr,
				    &client_addr_len);
		printf("After Accept\n");
 8000698:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800076c <main+0x138>
		}
		

		inet_ntop(client_addr.sin_family, &client_addr.sin_addr,
			  addr_str, sizeof(addr_str));
		printf("Connection #%d from %s\n", counter++, addr_str);
 800069c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000770 <main+0x13c>
	printf("Single-threaded TCP echo server waits for a connection on "
 80006a0:	f241 0192 	movw	r1, #4242	; 0x1092
 80006a4:	f00d f83e 	bl	800d724 <iprintf>
		socklen_t client_addr_len = sizeof(client_addr);
 80006a8:	2308      	movs	r3, #8
		printf("Before Accept\n");
 80006aa:	4648      	mov	r0, r9
		socklen_t client_addr_len = sizeof(client_addr);
 80006ac:	9303      	str	r3, [sp, #12]
		printf("Before Accept\n");
 80006ae:	f00d f839 	bl	800d724 <iprintf>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sock, *(uintptr_t *)&addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_ACCEPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_accept(sock, addr, addrlen);
 80006b2:	aa03      	add	r2, sp, #12
 80006b4:	a906      	add	r1, sp, #24
 80006b6:	4630      	mov	r0, r6
 80006b8:	f00f fbbb 	bl	800fe32 <z_impl_zsock_accept>
 80006bc:	4605      	mov	r5, r0
		printf("After Accept\n");
 80006be:	4650      	mov	r0, sl
 80006c0:	f00d f830 	bl	800d724 <iprintf>
		if (client < 0) {
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	da06      	bge.n	80006d6 <main+0xa2>
			printf("error: accept: %d\n", errno);
 80006c8:	f00f ff43 	bl	8010552 <__errno>
 80006cc:	6801      	ldr	r1, [r0, #0]
 80006ce:	4829      	ldr	r0, [pc, #164]	; (8000774 <main+0x140>)
			} while (len);
		}

error:
		close(client);
		printf("Connection from %s closed\n", addr_str);
 80006d0:	f00d f828 	bl	800d724 <iprintf>
 80006d4:	e7e8      	b.n	80006a8 <main+0x74>
		inet_ntop(client_addr.sin_family, &client_addr.sin_addr,
 80006d6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
		/* coverity[OVERRUN] */
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
 80006da:	2320      	movs	r3, #32
 80006dc:	eb0d 0203 	add.w	r2, sp, r3
 80006e0:	a907      	add	r1, sp, #28
 80006e2:	f004 fb17 	bl	8004d14 <z_impl_net_addr_ntop>
		printf("Connection #%d from %s\n", counter++, addr_str);
 80006e6:	f8d8 1000 	ldr.w	r1, [r8]
 80006ea:	4823      	ldr	r0, [pc, #140]	; (8000778 <main+0x144>)
 80006ec:	1c4b      	adds	r3, r1, #1
 80006ee:	aa08      	add	r2, sp, #32
 80006f0:	f8c8 3000 	str.w	r3, [r8]
 80006f4:	f00d f816 	bl	800d724 <iprintf>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&max_len, *(uintptr_t *)&flags, *(uintptr_t *)&src_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_RECVFROM);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
 80006f8:	2700      	movs	r7, #0
 80006fa:	2300      	movs	r3, #0
 80006fc:	e9cd 7700 	strd	r7, r7, [sp]
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	a910      	add	r1, sp, #64	; 0x40
 8000704:	4628      	mov	r0, r5
 8000706:	f00f fe1b 	bl	8010340 <z_impl_zsock_recvfrom>
			if (len <= 0) {
 800070a:	1e04      	subs	r4, r0, #0
 800070c:	dc0c      	bgt.n	8000728 <main+0xf4>
				if (len < 0) {
 800070e:	d005      	beq.n	800071c <main+0xe8>
					printf("error: recv: %d\n", errno);
 8000710:	f00f ff1f 	bl	8010552 <__errno>
 8000714:	6801      	ldr	r1, [r0, #0]
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <main+0x148>)
					printf("error: send: %d\n", errno);
 8000718:	f00d f804 	bl	800d724 <iprintf>
	return z_impl_zsock_close(sock);
 800071c:	4628      	mov	r0, r5
 800071e:	f00f fb10 	bl	800fd42 <z_impl_zsock_close>
		printf("Connection from %s closed\n", addr_str);
 8000722:	4817      	ldr	r0, [pc, #92]	; (8000780 <main+0x14c>)
 8000724:	a908      	add	r1, sp, #32
 8000726:	e7d3      	b.n	80006d0 <main+0x9c>
			p = buf;
 8000728:	f10d 0b40 	add.w	fp, sp, #64	; 0x40
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
 800072c:	2300      	movs	r3, #0
 800072e:	e9cd 7700 	strd	r7, r7, [sp]
 8000732:	4622      	mov	r2, r4
 8000734:	4659      	mov	r1, fp
 8000736:	4628      	mov	r0, r5
 8000738:	f00f fbad 	bl	800fe96 <z_impl_zsock_sendto>
				if (out_len < 0) {
 800073c:	2800      	cmp	r0, #0
 800073e:	da04      	bge.n	800074a <main+0x116>
					printf("error: send: %d\n", errno);
 8000740:	f00f ff07 	bl	8010552 <__errno>
 8000744:	6801      	ldr	r1, [r0, #0]
 8000746:	480f      	ldr	r0, [pc, #60]	; (8000784 <main+0x150>)
 8000748:	e7e6      	b.n	8000718 <main+0xe4>
			} while (len);
 800074a:	1a24      	subs	r4, r4, r0
				p += out_len;
 800074c:	4483      	add	fp, r0
			} while (len);
 800074e:	d1ed      	bne.n	800072c <main+0xf8>
 8000750:	e7d3      	b.n	80006fa <main+0xc6>
 8000752:	bf00      	nop
 8000754:	080161b6 	.word	0x080161b6
 8000758:	92100001 	.word	0x92100001
 800075c:	080161c9 	.word	0x080161c9
 8000760:	080161da 	.word	0x080161da
 8000764:	080161ed 	.word	0x080161ed
 8000768:	08016233 	.word	0x08016233
 800076c:	08016242 	.word	0x08016242
 8000770:	20001ab8 	.word	0x20001ab8
 8000774:	08016250 	.word	0x08016250
 8000778:	08016263 	.word	0x08016263
 800077c:	0801627b 	.word	0x0801627b
 8000780:	0801629d 	.word	0x0801629d
 8000784:	0801628c 	.word	0x0801628c

08000788 <Wifi_event_listener>:
	}
}


void Wifi_event_listener( struct net_mgmt_event_callback *cb, uint32_t mgmt_event, struct net_if *iface ) {
	switch( mgmt_event ) {
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <Wifi_event_listener+0x14>)
 800078a:	4299      	cmp	r1, r3
 800078c:	d105      	bne.n	800079a <Wifi_event_listener+0x12>
	if (!status->status) {
 800078e:	6883      	ldr	r3, [r0, #8]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	b913      	cbnz	r3, 800079a <Wifi_event_listener+0x12>
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <Wifi_event_listener+0x18>)
 8000796:	f00b bf03 	b.w	800c5a0 <z_impl_k_sem_give>
		case NET_EVENT_WIFI_CONNECT_RESULT:
			Wifi_check_connect_result( iface, cb );
			break;
	}
}
 800079a:	4770      	bx	lr
 800079c:	d1560003 	.word	0xd1560003
 80007a0:	20001ad0 	.word	0x20001ad0

080007a4 <Wifi_autoconnect>:

int Wifi_autoconnect() {
 80007a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct wifi_connect_req_params wifi_args;
	wifi_args.security = WIFI_SECURITY_TYPE_PSK;
	wifi_args.channel = WIFI_CHANNEL_ANY;
 80007a6:	23ff      	movs	r3, #255	; 0xff
	wifi_args.psk = AUTO_CONNECT_SSID_PSK;
 80007a8:	4821      	ldr	r0, [pc, #132]	; (8000830 <Wifi_autoconnect+0x8c>)
	wifi_args.channel = WIFI_CHANNEL_ANY;
 80007aa:	f88d 300d 	strb.w	r3, [sp, #13]
	wifi_args.security = WIFI_SECURITY_TYPE_PSK;
 80007ae:	2601      	movs	r6, #1
 80007b0:	f88d 600e 	strb.w	r6, [sp, #14]
	wifi_args.psk = AUTO_CONNECT_SSID_PSK;
 80007b4:	9002      	str	r0, [sp, #8]
	wifi_args.psk_length = strlen(AUTO_CONNECT_SSID_PSK);
 80007b6:	f7ff feb2 	bl	800051e <strlen>
 80007ba:	f88d 000c 	strb.w	r0, [sp, #12]
	wifi_args.ssid = AUTO_CONNECT_SSID;
 80007be:	481d      	ldr	r0, [pc, #116]	; (8000834 <Wifi_autoconnect+0x90>)
 80007c0:	9000      	str	r0, [sp, #0]
	wifi_args.ssid_length = strlen(AUTO_CONNECT_SSID);
 80007c2:	f7ff feac 	bl	800051e <strlen>
 80007c6:	f88d 0004 	strb.w	r0, [sp, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
 80007ca:	2100      	movs	r1, #0
 80007cc:	4632      	mov	r2, r6
 80007ce:	481a      	ldr	r0, [pc, #104]	; (8000838 <Wifi_autoconnect+0x94>)
 80007d0:	f013 fc3e 	bl	8014050 <z_impl_k_sem_init>
				  uint32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
 80007d4:	4819      	ldr	r0, [pc, #100]	; (800083c <Wifi_autoconnect+0x98>)
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <Wifi_autoconnect+0x9c>)
 80007d8:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <Wifi_autoconnect+0xa0>)
 80007dc:	6103      	str	r3, [r0, #16]
	// Init semaphore
	k_sem_init(&net_cb_sem, 0, 1);

	// Configure Callback
	net_mgmt_init_event_callback(&cb, Wifi_event_listener, WIFI_MGMT_EVENTS );
	net_mgmt_add_event_callback(&cb);
 80007de:	f005 f893 	bl	8005908 <net_mgmt_add_event_callback>

	// Connect interface to network
	struct net_if *iface = net_if_get_default();
 80007e2:	f003 ffa7 	bl	8004734 <net_if_get_default>
	if( net_mgmt( NET_REQUEST_WIFI_CONNECT, iface, &wifi_args, sizeof(wifi_args) ) ) {
 80007e6:	2310      	movs	r3, #16
 80007e8:	4601      	mov	r1, r0
	struct net_if *iface = net_if_get_default();
 80007ea:	4605      	mov	r5, r0
	if( net_mgmt( NET_REQUEST_WIFI_CONNECT, iface, &wifi_args, sizeof(wifi_args) ) ) {
 80007ec:	466a      	mov	r2, sp
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <Wifi_autoconnect+0xa4>)
 80007f0:	f00f ff18 	bl	8010624 <net_mgmt_NET_REQUEST_WIFI_CONNECT>
 80007f4:	4604      	mov	r4, r0
 80007f6:	b130      	cbz	r0, 8000806 <Wifi_autoconnect+0x62>
		perror("Failed to request connection to SSID "AUTO_CONNECT_SSID);
 80007f8:	f00f feab 	bl	8010552 <__errno>
 80007fc:	6801      	ldr	r1, [r0, #0]
 80007fe:	4813      	ldr	r0, [pc, #76]	; (800084c <Wifi_autoconnect+0xa8>)
 8000800:	f00c ff90 	bl	800d724 <iprintf>
 8000804:	e7fe      	b.n	8000804 <Wifi_autoconnect+0x60>
	return z_impl_k_sem_take(sem, timeout);
 8000806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <Wifi_autoconnect+0x94>)
 8000810:	f00b feec 	bl	800c5ec <z_impl_k_sem_take>
	// Wait for connection.....
	k_sem_take(&net_cb_sem, K_FOREVER );

	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
	static char buf[NET_IPV4_ADDR_LEN];
	net_addr_ntop( AF_INET, (const char *)&ipv4->unicast[0].address.in_addr, buf, NET_IPV4_ADDR_LEN);
 8000814:	6869      	ldr	r1, [r5, #4]
 8000816:	3104      	adds	r1, #4
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <Wifi_autoconnect+0xac>)
 800081a:	2310      	movs	r3, #16
 800081c:	4630      	mov	r0, r6
 800081e:	f004 fa79 	bl	8004d14 <z_impl_net_addr_ntop>
	printk("\r\nSucessfull connected to SSID:["AUTO_CONNECT_SSID"]\r\nAssigned IP address [%s] \r\n", buf );
 8000822:	490b      	ldr	r1, [pc, #44]	; (8000850 <Wifi_autoconnect+0xac>)
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <Wifi_autoconnect+0xb0>)
 8000826:	f00d ff9a 	bl	800e75e <printk>

	return 0;
}
 800082a:	4620      	mov	r0, r4
 800082c:	b004      	add	sp, #16
 800082e:	bd70      	pop	{r4, r5, r6, pc}
 8000830:	080162b8 	.word	0x080162b8
 8000834:	080162c2 	.word	0x080162c2
 8000838:	20001ad0 	.word	0x20001ad0
 800083c:	20001abc 	.word	0x20001abc
 8000840:	08000789 	.word	0x08000789
 8000844:	d1560007 	.word	0xd1560007
 8000848:	51560002 	.word	0x51560002
 800084c:	080162cb 	.word	0x080162cb
 8000850:	20002574 	.word	0x20002574
 8000854:	08016307 	.word	0x08016307

08000858 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
 8000858:	2803      	cmp	r0, #3
{
 800085a:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
 800085c:	d906      	bls.n	800086c <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
 800085e:	f00f fe78 	bl	8010552 <__errno>
 8000862:	2309      	movs	r3, #9
 8000864:	6003      	str	r3, [r0, #0]
 8000866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
 800086a:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <_check_fd+0x2c>)
 800086e:	f3bf 8f5b 	dmb	ish
 8000872:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8000876:	6883      	ldr	r3, [r0, #8]
 8000878:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&fdtable[fd].refcount)) {
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0ee      	beq.n	800085e <_check_fd+0x6>
	return 0;
 8000880:	2000      	movs	r0, #0
 8000882:	e7f2      	b.n	800086a <_check_fd+0x12>
 8000884:	20001ae8 	.word	0x20001ae8

08000888 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	4604      	mov	r4, r0
 800088c:	460d      	mov	r5, r1
 800088e:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
 8000890:	f7ff ffe2 	bl	8000858 <_check_fd>
 8000894:	2800      	cmp	r0, #0
 8000896:	db09      	blt.n	80008ac <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <z_get_fd_obj+0x2c>)
 800089a:	0160      	lsls	r0, r4, #5
 800089c:	b145      	cbz	r5, 80008b0 <z_get_fd_obj+0x28>
 800089e:	181a      	adds	r2, r3, r0
 80008a0:	6852      	ldr	r2, [r2, #4]
 80008a2:	42aa      	cmp	r2, r5
 80008a4:	d004      	beq.n	80008b0 <z_get_fd_obj+0x28>
		errno = err;
 80008a6:	f00f fe54 	bl	8010552 <__errno>
 80008aa:	6006      	str	r6, [r0, #0]
		return NULL;
 80008ac:	2000      	movs	r0, #0
 80008ae:	e000      	b.n	80008b2 <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
 80008b0:	5818      	ldr	r0, [r3, r0]
}
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	20001ae8 	.word	0x20001ae8

080008b8 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4604      	mov	r4, r0
 80008bc:	460e      	mov	r6, r1
 80008be:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
 80008c0:	f7ff ffca 	bl	8000858 <_check_fd>
 80008c4:	2800      	cmp	r0, #0
 80008c6:	db0c      	blt.n	80008e2 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <z_get_fd_obj_and_vtable+0x30>)
 80008ca:	0161      	lsls	r1, r4, #5
 80008cc:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 80008d0:	6862      	ldr	r2, [r4, #4]
 80008d2:	6032      	str	r2, [r6, #0]

	if (lock) {
 80008d4:	b11d      	cbz	r5, 80008de <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
 80008d6:	f101 020c 	add.w	r2, r1, #12
 80008da:	441a      	add	r2, r3
 80008dc:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
 80008de:	5858      	ldr	r0, [r3, r1]
}
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80008e2:	2000      	movs	r0, #0
 80008e4:	e7fc      	b.n	80008e0 <z_get_fd_obj_and_vtable+0x28>
 80008e6:	bf00      	nop
 80008e8:	20001ae8 	.word	0x20001ae8

080008ec <z_reserve_fd>:

int z_reserve_fd(void)
{
 80008ec:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 80008ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f2:	4819      	ldr	r0, [pc, #100]	; (8000958 <z_reserve_fd+0x6c>)
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f8:	f00b fd62 	bl	800c3c0 <z_impl_k_mutex_lock>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <z_reserve_fd+0x70>)
 80008fe:	2400      	movs	r4, #0
 8000900:	f3bf 8f5b 	dmb	ish
 8000904:	6811      	ldr	r1, [r2, #0]
 8000906:	f3bf 8f5b 	dmb	ish
 800090a:	0163      	lsls	r3, r4, #5
		if (!atomic_get(&fdtable[fd].refcount)) {
 800090c:	b179      	cbz	r1, 800092e <z_reserve_fd+0x42>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
 800090e:	3401      	adds	r4, #1
 8000910:	2c04      	cmp	r4, #4
 8000912:	f102 0220 	add.w	r2, r2, #32
 8000916:	d1f3      	bne.n	8000900 <z_reserve_fd+0x14>
	errno = ENFILE;
 8000918:	f00f fe1b 	bl	8010552 <__errno>
 800091c:	2317      	movs	r3, #23
 800091e:	6003      	str	r3, [r0, #0]
	return -1;
 8000920:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return z_impl_k_mutex_unlock(mutex);
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <z_reserve_fd+0x6c>)
 8000926:	f00b fdc3 	bl	800c4b0 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
 800092a:	4620      	mov	r0, r4
 800092c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800092e:	f3bf 8f5b 	dmb	ish
 8000932:	e852 0f00 	ldrex	r0, [r2]
 8000936:	3001      	adds	r0, #1
 8000938:	e842 0c00 	strex	ip, r0, [r2]
 800093c:	f1bc 0f00 	cmp.w	ip, #0
 8000940:	d1f7      	bne.n	8000932 <z_reserve_fd+0x46>
 8000942:	f3bf 8f5b 	dmb	ish
		fdtable[fd].obj = NULL;
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <z_reserve_fd+0x74>)
 8000948:	18c2      	adds	r2, r0, r3
 800094a:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
 800094c:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
 800094e:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
 8000950:	4418      	add	r0, r3
 8000952:	f013 fabb 	bl	8013ecc <z_impl_k_mutex_init>
 8000956:	e7e5      	b.n	8000924 <z_reserve_fd+0x38>
 8000958:	20000450 	.word	0x20000450
 800095c:	20001af0 	.word	0x20001af0
 8000960:	20001ae8 	.word	0x20001ae8

08000964 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <z_finalize_fd+0x2c>)
{
 8000966:	b410      	push	{r4}
 8000968:	4604      	mov	r4, r0
 800096a:	4610      	mov	r0, r2
	fdtable[fd].obj = obj;
 800096c:	0162      	lsls	r2, r4, #5
 800096e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8000972:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
 8000974:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
 8000976:	b140      	cbz	r0, 800098a <z_finalize_fd+0x26>
 8000978:	68c4      	ldr	r4, [r0, #12]
 800097a:	b134      	cbz	r4, 800098a <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
 800097c:	320c      	adds	r2, #12
 800097e:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
 8000980:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
 8000982:	f240 1205 	movw	r2, #261	; 0x105
 8000986:	f00d be76 	b.w	800e676 <z_fdtable_call_ioctl.constprop.0>
}
 800098a:	bc10      	pop	{r4}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20001ae8 	.word	0x20001ae8

08000994 <z_free_fd>:

void z_free_fd(int fd)
{
 8000994:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
 8000996:	4910      	ldr	r1, [pc, #64]	; (80009d8 <z_free_fd+0x44>)
 8000998:	0140      	lsls	r0, r0, #5
 800099a:	f100 0308 	add.w	r3, r0, #8
 800099e:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80009a0:	f3bf 8f5b 	dmb	ish
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	f3bf 8f5b 	dmb	ish
		if (!old_rc) {
 80009aa:	b1a2      	cbz	r2, 80009d6 <z_free_fd+0x42>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80009ac:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
 80009b0:	1e54      	subs	r4, r2, #1
 80009b2:	e853 5f00 	ldrex	r5, [r3]
 80009b6:	4295      	cmp	r5, r2
 80009b8:	d104      	bne.n	80009c4 <z_free_fd+0x30>
 80009ba:	e843 4c00 	strex	ip, r4, [r3]
 80009be:	f1bc 0f00 	cmp.w	ip, #0
 80009c2:	d1f6      	bne.n	80009b2 <z_free_fd+0x1e>
 80009c4:	f3bf 8f5b 	dmb	ish
 80009c8:	d1ea      	bne.n	80009a0 <z_free_fd+0xc>
	if (old_rc != 1) {
 80009ca:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
 80009cc:	bf01      	itttt	eq
 80009ce:	2300      	moveq	r3, #0
 80009d0:	180a      	addeq	r2, r1, r0
 80009d2:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
 80009d4:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
 80009d6:	bd30      	pop	{r4, r5, pc}
 80009d8:	20001ae8 	.word	0x20001ae8

080009dc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80009dc:	680b      	ldr	r3, [r1, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80009e2:	4b01      	ldr	r3, [pc, #4]	; (80009e8 <char_out+0xc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4718      	bx	r3
 80009e8:	200000d8 	.word	0x200000d8

080009ec <__printk_hook_install>:
	_char_out = fn;
 80009ec:	4b01      	ldr	r3, [pc, #4]	; (80009f4 <__printk_hook_install+0x8>)
 80009ee:	6018      	str	r0, [r3, #0]
}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	200000d8 	.word	0x200000d8

080009f8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80009f8:	b507      	push	{r0, r1, r2, lr}
 80009fa:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 80009fc:	2100      	movs	r1, #0
{
 80009fe:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
 8000a00:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <vprintk+0x18>)
 8000a04:	a901      	add	r1, sp, #4
 8000a06:	f000 f879 	bl	8000afc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8000a0a:	b003      	add	sp, #12
 8000a0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a10:	080009dd 	.word	0x080009dd

08000a14 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8000a14:	b530      	push	{r4, r5, lr}
 8000a16:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 8000a18:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 8000a1c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8000a1e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 8000a20:	a901      	add	r1, sp, #4
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 8000a24:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 8000a26:	f000 f869 	bl	8000afc <cbvprintf>

	if (ctx.count < ctx.max) {
 8000a2a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8000a2e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8000a30:	bfb8      	it	lt
 8000a32:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8000a34:	b005      	add	sp, #20
 8000a36:	bd30      	pop	{r4, r5, pc}
 8000a38:	0800e739 	.word	0x0800e739

08000a3c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8000a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 8000a3e:	4e08      	ldr	r6, [pc, #32]	; (8000a60 <extract_decimal+0x24>)
 8000a40:	6802      	ldr	r2, [r0, #0]
{
 8000a42:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
 8000a44:	270a      	movs	r7, #10
	size_t val = 0;
 8000a46:	2000      	movs	r0, #0
 8000a48:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
 8000a4a:	3201      	adds	r2, #1
 8000a4c:	780c      	ldrb	r4, [r1, #0]
 8000a4e:	5da5      	ldrb	r5, [r4, r6]
 8000a50:	076d      	lsls	r5, r5, #29
 8000a52:	d401      	bmi.n	8000a58 <extract_decimal+0x1c>
	}
	*str = sp;
 8000a54:	6019      	str	r1, [r3, #0]
	return val;
}
 8000a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8000a58:	fb07 4000 	mla	r0, r7, r0, r4
 8000a5c:	3830      	subs	r0, #48	; 0x30
 8000a5e:	e7f3      	b.n	8000a48 <extract_decimal+0xc>
 8000a60:	08018f48 	.word	0x08018f48

08000a64 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8000a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a68:	4615      	mov	r5, r2
 8000a6a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 8000a6c:	78d3      	ldrb	r3, [r2, #3]
 8000a6e:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <encode_uint+0x94>)
 8000a70:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 8000a74:	2b6f      	cmp	r3, #111	; 0x6f
{
 8000a76:	4680      	mov	r8, r0
 8000a78:	460f      	mov	r7, r1
 8000a7a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8000a7e:	d029      	beq.n	8000ad4 <encode_uint+0x70>
 8000a80:	d824      	bhi.n	8000acc <encode_uint+0x68>
		return 16;
 8000a82:	2b58      	cmp	r3, #88	; 0x58
 8000a84:	bf14      	ite	ne
 8000a86:	260a      	movne	r6, #10
 8000a88:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8000a8a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 8000a8e:	4632      	mov	r2, r6
 8000a90:	2300      	movs	r3, #0
 8000a92:	4640      	mov	r0, r8
 8000a94:	4639      	mov	r1, r7
 8000a96:	f7ff fbcb 	bl	8000230 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8000a9a:	2a09      	cmp	r2, #9
 8000a9c:	b2d4      	uxtb	r4, r2
 8000a9e:	d81e      	bhi.n	8000ade <encode_uint+0x7a>
 8000aa0:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 8000aa2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8000aa4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8000aa6:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8000aaa:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8000aae:	d301      	bcc.n	8000ab4 <encode_uint+0x50>
 8000ab0:	45d1      	cmp	r9, sl
 8000ab2:	d811      	bhi.n	8000ad8 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8000ab4:	782b      	ldrb	r3, [r5, #0]
 8000ab6:	069b      	lsls	r3, r3, #26
 8000ab8:	d505      	bpl.n	8000ac6 <encode_uint+0x62>
		if (radix == 8) {
 8000aba:	2e08      	cmp	r6, #8
 8000abc:	d115      	bne.n	8000aea <encode_uint+0x86>
			conv->altform_0 = true;
 8000abe:	78ab      	ldrb	r3, [r5, #2]
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
 8000ac4:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
 8000ac6:	4648      	mov	r0, r9
 8000ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8000acc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8000ad0:	2b70      	cmp	r3, #112	; 0x70
 8000ad2:	e7d7      	b.n	8000a84 <encode_uint+0x20>
	switch (specifier) {
 8000ad4:	2608      	movs	r6, #8
 8000ad6:	e7d8      	b.n	8000a8a <encode_uint+0x26>
		value /= radix;
 8000ad8:	4680      	mov	r8, r0
 8000ada:	460f      	mov	r7, r1
 8000adc:	e7d7      	b.n	8000a8e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8000ade:	f1bb 0f01 	cmp.w	fp, #1
 8000ae2:	bf0c      	ite	eq
 8000ae4:	3437      	addeq	r4, #55	; 0x37
 8000ae6:	3457      	addne	r4, #87	; 0x57
 8000ae8:	e7db      	b.n	8000aa2 <encode_uint+0x3e>
		} else if (radix == 16) {
 8000aea:	2e10      	cmp	r6, #16
 8000aec:	d1eb      	bne.n	8000ac6 <encode_uint+0x62>
			conv->altform_0c = true;
 8000aee:	78ab      	ldrb	r3, [r5, #2]
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	e7e6      	b.n	8000ac4 <encode_uint+0x60>
 8000af6:	bf00      	nop
 8000af8:	08018f48 	.word	0x08018f48

08000afc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8000afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b00:	4682      	mov	sl, r0
 8000b02:	b093      	sub	sp, #76	; 0x4c
 8000b04:	468b      	mov	fp, r1
 8000b06:	4691      	mov	r9, r2
 8000b08:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000b0a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000b0c:	f899 0000 	ldrb.w	r0, [r9]
 8000b10:	b908      	cbnz	r0, 8000b16 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000b12:	4628      	mov	r0, r5
 8000b14:	e33d      	b.n	8001192 <cbvprintf+0x696>
			OUTC(*fp++);
 8000b16:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
 8000b1a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000b1c:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 8000b1e:	d006      	beq.n	8000b2e <cbvprintf+0x32>
			OUTC('%');
 8000b20:	4659      	mov	r1, fp
 8000b22:	47d0      	blx	sl
 8000b24:	2800      	cmp	r0, #0
 8000b26:	f2c0 8334 	blt.w	8001192 <cbvprintf+0x696>
 8000b2a:	3501      	adds	r5, #1
			break;
 8000b2c:	e1f5      	b.n	8000f1a <cbvprintf+0x41e>
		} state = {
 8000b2e:	2218      	movs	r2, #24
 8000b30:	2100      	movs	r1, #0
 8000b32:	a80c      	add	r0, sp, #48	; 0x30
 8000b34:	f013 fe75 	bl	8014822 <memset>
	if (*sp == '%') {
 8000b38:	f899 3001 	ldrb.w	r3, [r9, #1]
 8000b3c:	2b25      	cmp	r3, #37	; 0x25
 8000b3e:	d05a      	beq.n	8000bf6 <cbvprintf+0xfa>
 8000b40:	f109 0201 	add.w	r2, r9, #1
 8000b44:	4616      	mov	r6, r2
		switch (*sp) {
 8000b46:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000b4a:	2b2b      	cmp	r3, #43	; 0x2b
 8000b4c:	f000 808b 	beq.w	8000c66 <cbvprintf+0x16a>
 8000b50:	d879      	bhi.n	8000c46 <cbvprintf+0x14a>
 8000b52:	2b20      	cmp	r3, #32
 8000b54:	f000 808c 	beq.w	8000c70 <cbvprintf+0x174>
 8000b58:	2b23      	cmp	r3, #35	; 0x23
 8000b5a:	f000 808e 	beq.w	8000c7a <cbvprintf+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
 8000b5e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000b62:	f003 0244 	and.w	r2, r3, #68	; 0x44
 8000b66:	2a44      	cmp	r2, #68	; 0x44
 8000b68:	d103      	bne.n	8000b72 <cbvprintf+0x76>
		conv->flag_zero = false;
 8000b6a:	f36f 1386 	bfc	r3, #6, #1
 8000b6e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 8000b72:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000b76:	9605      	str	r6, [sp, #20]
 8000b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 8000b80:	7833      	ldrb	r3, [r6, #0]
 8000b82:	2b2a      	cmp	r3, #42	; 0x2a
 8000b84:	d17e      	bne.n	8000c84 <cbvprintf+0x188>
		conv->width_star = true;
 8000b86:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 8000b92:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
 8000b94:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
 8000b96:	781a      	ldrb	r2, [r3, #0]
 8000b98:	2a2e      	cmp	r2, #46	; 0x2e
 8000b9a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000b9e:	bf0c      	ite	eq
 8000ba0:	2101      	moveq	r1, #1
 8000ba2:	2100      	movne	r1, #0
 8000ba4:	f361 0241 	bfi	r2, r1, #1, #1
 8000ba8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 8000bac:	d10b      	bne.n	8000bc6 <cbvprintf+0xca>
	++sp;
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
 8000bb2:	785a      	ldrb	r2, [r3, #1]
 8000bb4:	2a2a      	cmp	r2, #42	; 0x2a
 8000bb6:	d17b      	bne.n	8000cb0 <cbvprintf+0x1b4>
		conv->prec_star = true;
 8000bb8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000bbc:	f042 0204 	orr.w	r2, r2, #4
 8000bc0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 8000bc4:	3302      	adds	r3, #2
	switch (*sp) {
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000bcc:	286c      	cmp	r0, #108	; 0x6c
 8000bce:	f000 80b6 	beq.w	8000d3e <cbvprintf+0x242>
 8000bd2:	d87d      	bhi.n	8000cd0 <cbvprintf+0x1d4>
 8000bd4:	2868      	cmp	r0, #104	; 0x68
 8000bd6:	f000 8084 	beq.w	8000ce2 <cbvprintf+0x1e6>
 8000bda:	286a      	cmp	r0, #106	; 0x6a
 8000bdc:	f000 80b9 	beq.w	8000d52 <cbvprintf+0x256>
 8000be0:	284c      	cmp	r0, #76	; 0x4c
 8000be2:	f000 80bd 	beq.w	8000d60 <cbvprintf+0x264>
		conv->length_mod = LENGTH_NONE;
 8000be6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000bea:	f36f 02c6 	bfc	r2, #3, #4
 8000bee:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	e080      	b.n	8000cf8 <cbvprintf+0x1fc>
		conv->specifier = *sp++;
 8000bf6:	f109 0202 	add.w	r2, r9, #2
 8000bfa:	9202      	str	r2, [sp, #8]
 8000bfc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 8000c00:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000c04:	07d9      	lsls	r1, r3, #31
 8000c06:	f140 814a 	bpl.w	8000e9e <cbvprintf+0x3a2>
			width = va_arg(ap, int);
 8000c0a:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000c0e:	f1b8 0f00 	cmp.w	r8, #0
 8000c12:	da07      	bge.n	8000c24 <cbvprintf+0x128>
				conv->flag_dash = true;
 8000c14:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8000c18:	f042 0204 	orr.w	r2, r2, #4
 8000c1c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 8000c20:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 8000c24:	075a      	lsls	r2, r3, #29
 8000c26:	f140 8143 	bpl.w	8000eb0 <cbvprintf+0x3b4>
			int arg = va_arg(ap, int);
 8000c2a:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	f280 8142 	bge.w	8000eb8 <cbvprintf+0x3bc>
				conv->prec_present = false;
 8000c34:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000c38:	f36f 0341 	bfc	r3, #1, #1
 8000c3c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 8000c40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000c44:	e138      	b.n	8000eb8 <cbvprintf+0x3bc>
		switch (*sp) {
 8000c46:	2b2d      	cmp	r3, #45	; 0x2d
 8000c48:	d006      	beq.n	8000c58 <cbvprintf+0x15c>
 8000c4a:	2b30      	cmp	r3, #48	; 0x30
 8000c4c:	d187      	bne.n	8000b5e <cbvprintf+0x62>
			conv->flag_zero = true;
 8000c4e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c56:	e003      	b.n	8000c60 <cbvprintf+0x164>
			conv->flag_dash = true;
 8000c58:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 8000c60:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 8000c64:	e76e      	b.n	8000b44 <cbvprintf+0x48>
			conv->flag_plus = true;
 8000c66:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	e7f7      	b.n	8000c60 <cbvprintf+0x164>
			conv->flag_space = true;
 8000c70:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	e7f2      	b.n	8000c60 <cbvprintf+0x164>
			conv->flag_hash = true;
 8000c7a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000c7e:	f043 0320 	orr.w	r3, r3, #32
 8000c82:	e7ed      	b.n	8000c60 <cbvprintf+0x164>
	size_t width = extract_decimal(&sp);
 8000c84:	a805      	add	r0, sp, #20
 8000c86:	f7ff fed9 	bl	8000a3c <extract_decimal>
	if (sp != wp) {
 8000c8a:	9b05      	ldr	r3, [sp, #20]
 8000c8c:	42b3      	cmp	r3, r6
 8000c8e:	d081      	beq.n	8000b94 <cbvprintf+0x98>
		conv->unsupported |= ((conv->width_value < 0)
 8000c90:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
 8000c94:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8000c96:	f3c1 0240 	ubfx	r2, r1, #1, #1
 8000c9a:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 8000c9e:	0052      	lsls	r2, r2, #1
 8000ca0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ca4:	f001 017d 	and.w	r1, r1, #125	; 0x7d
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8000cae:	e771      	b.n	8000b94 <cbvprintf+0x98>
	size_t prec = extract_decimal(&sp);
 8000cb0:	a805      	add	r0, sp, #20
 8000cb2:	f7ff fec3 	bl	8000a3c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8000cb6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 8000cba:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 8000cbc:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8000cc0:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 8000cc4:	f360 0341 	bfi	r3, r0, #1, #1
 8000cc8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 8000ccc:	9b05      	ldr	r3, [sp, #20]
 8000cce:	e77a      	b.n	8000bc6 <cbvprintf+0xca>
	switch (*sp) {
 8000cd0:	2874      	cmp	r0, #116	; 0x74
 8000cd2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000cd6:	d040      	beq.n	8000d5a <cbvprintf+0x25e>
 8000cd8:	287a      	cmp	r0, #122	; 0x7a
 8000cda:	d184      	bne.n	8000be6 <cbvprintf+0xea>
		conv->length_mod = LENGTH_Z;
 8000cdc:	4613      	mov	r3, r2
 8000cde:	2206      	movs	r2, #6
 8000ce0:	e028      	b.n	8000d34 <cbvprintf+0x238>
		if (*++sp == 'h') {
 8000ce2:	785a      	ldrb	r2, [r3, #1]
 8000ce4:	2a68      	cmp	r2, #104	; 0x68
 8000ce6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000cea:	d121      	bne.n	8000d30 <cbvprintf+0x234>
			conv->length_mod = LENGTH_HH;
 8000cec:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000cee:	f361 02c6 	bfi	r2, r1, #3, #4
 8000cf2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
 8000cf6:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cfe:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 8000d00:	2a78      	cmp	r2, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000d02:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
 8000d06:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 8000d0a:	f200 80c0 	bhi.w	8000e8e <cbvprintf+0x392>
 8000d0e:	2a57      	cmp	r2, #87	; 0x57
 8000d10:	d833      	bhi.n	8000d7a <cbvprintf+0x27e>
 8000d12:	2a41      	cmp	r2, #65	; 0x41
 8000d14:	d003      	beq.n	8000d1e <cbvprintf+0x222>
 8000d16:	3a45      	subs	r2, #69	; 0x45
 8000d18:	2a02      	cmp	r2, #2
 8000d1a:	f200 80b8 	bhi.w	8000e8e <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
 8000d1e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8000d22:	2204      	movs	r2, #4
 8000d24:	f362 0302 	bfi	r3, r2, #0, #3
 8000d28:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
 8000d2c:	2301      	movs	r3, #1
			break;
 8000d2e:	e085      	b.n	8000e3c <cbvprintf+0x340>
			conv->length_mod = LENGTH_H;
 8000d30:	4613      	mov	r3, r2
 8000d32:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
 8000d34:	f362 03c6 	bfi	r3, r2, #3, #4
 8000d38:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8000d3c:	e7dc      	b.n	8000cf8 <cbvprintf+0x1fc>
		if (*++sp == 'l') {
 8000d3e:	785a      	ldrb	r2, [r3, #1]
 8000d40:	2a6c      	cmp	r2, #108	; 0x6c
 8000d42:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8000d46:	d101      	bne.n	8000d4c <cbvprintf+0x250>
			conv->length_mod = LENGTH_LL;
 8000d48:	2104      	movs	r1, #4
 8000d4a:	e7d0      	b.n	8000cee <cbvprintf+0x1f2>
			conv->length_mod = LENGTH_L;
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	2203      	movs	r2, #3
 8000d50:	e7f0      	b.n	8000d34 <cbvprintf+0x238>
		conv->length_mod = LENGTH_J;
 8000d52:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000d56:	2205      	movs	r2, #5
 8000d58:	e7ec      	b.n	8000d34 <cbvprintf+0x238>
		conv->length_mod = LENGTH_T;
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	e7e9      	b.n	8000d34 <cbvprintf+0x238>
		conv->unsupported = true;
 8000d60:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8000d64:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000d68:	f023 0302 	bic.w	r3, r3, #2
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 8000d78:	e7be      	b.n	8000cf8 <cbvprintf+0x1fc>
	switch (conv->specifier) {
 8000d7a:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 8000d7e:	2920      	cmp	r1, #32
 8000d80:	f200 8085 	bhi.w	8000e8e <cbvprintf+0x392>
 8000d84:	a001      	add	r0, pc, #4	; (adr r0, 8000d8c <cbvprintf+0x290>)
 8000d86:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000d8a:	bf00      	nop
 8000d8c:	08000e51 	.word	0x08000e51
 8000d90:	08000e8f 	.word	0x08000e8f
 8000d94:	08000e8f 	.word	0x08000e8f
 8000d98:	08000e8f 	.word	0x08000e8f
 8000d9c:	08000e8f 	.word	0x08000e8f
 8000da0:	08000e8f 	.word	0x08000e8f
 8000da4:	08000e8f 	.word	0x08000e8f
 8000da8:	08000e8f 	.word	0x08000e8f
 8000dac:	08000e8f 	.word	0x08000e8f
 8000db0:	08000d1f 	.word	0x08000d1f
 8000db4:	08000e8f 	.word	0x08000e8f
 8000db8:	08000e51 	.word	0x08000e51
 8000dbc:	08000e11 	.word	0x08000e11
 8000dc0:	08000d1f 	.word	0x08000d1f
 8000dc4:	08000d1f 	.word	0x08000d1f
 8000dc8:	08000d1f 	.word	0x08000d1f
 8000dcc:	08000e8f 	.word	0x08000e8f
 8000dd0:	08000e11 	.word	0x08000e11
 8000dd4:	08000e8f 	.word	0x08000e8f
 8000dd8:	08000e8f 	.word	0x08000e8f
 8000ddc:	08000e8f 	.word	0x08000e8f
 8000de0:	08000e8f 	.word	0x08000e8f
 8000de4:	08000e59 	.word	0x08000e59
 8000de8:	08000e51 	.word	0x08000e51
 8000dec:	08000e75 	.word	0x08000e75
 8000df0:	08000e8f 	.word	0x08000e8f
 8000df4:	08000e8f 	.word	0x08000e8f
 8000df8:	08000e75 	.word	0x08000e75
 8000dfc:	08000e8f 	.word	0x08000e8f
 8000e00:	08000e51 	.word	0x08000e51
 8000e04:	08000e8f 	.word	0x08000e8f
 8000e08:	08000e8f 	.word	0x08000e8f
 8000e0c:	08000e51 	.word	0x08000e51
		conv->specifier_cat = SPECIFIER_SINT;
 8000e10:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8000e14:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000e16:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8000e1a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000e1e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000e20:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
 8000e24:	bf02      	ittt	eq
 8000e26:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 8000e2a:	f041 0101 	orreq.w	r1, r1, #1
 8000e2e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 8000e32:	2a63      	cmp	r2, #99	; 0x63
 8000e34:	d131      	bne.n	8000e9a <cbvprintf+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000e36:	3b00      	subs	r3, #0
 8000e38:	bf18      	it	ne
 8000e3a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8000e3c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8000e40:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000e44:	430b      	orrs	r3, r1
 8000e46:	f363 0241 	bfi	r2, r3, #1, #1
 8000e4a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 8000e4e:	e6d7      	b.n	8000c00 <cbvprintf+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
 8000e50:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8000e54:	2002      	movs	r0, #2
 8000e56:	e7de      	b.n	8000e16 <cbvprintf+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
 8000e58:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000e5c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8000e60:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8000e64:	2103      	movs	r1, #3
 8000e66:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000e6a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 8000e6c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000e70:	4143      	adcs	r3, r0
 8000e72:	e7e3      	b.n	8000e3c <cbvprintf+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
 8000e74:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8000e78:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8000e7a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000e7e:	f361 0202 	bfi	r2, r1, #0, #3
 8000e82:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 8000e86:	bf14      	ite	ne
 8000e88:	2301      	movne	r3, #1
 8000e8a:	2300      	moveq	r3, #0
 8000e8c:	e7d6      	b.n	8000e3c <cbvprintf+0x340>
		conv->invalid = true;
 8000e8e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e7ce      	b.n	8000e3c <cbvprintf+0x340>
		} else if (conv->width_present) {
 8000e9e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 8000ea2:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000ea4:	bfb4      	ite	lt
 8000ea6:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
 8000eaa:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 8000eae:	e6b9      	b.n	8000c24 <cbvprintf+0x128>
		} else if (conv->prec_present) {
 8000eb0:	079f      	lsls	r7, r3, #30
 8000eb2:	f57f aec5 	bpl.w	8000c40 <cbvprintf+0x144>
			precision = conv->prec_value;
 8000eb6:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
 8000eb8:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
 8000ebc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000ebe:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000ec2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
 8000ec6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000eca:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000ecc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000ed0:	d139      	bne.n	8000f46 <cbvprintf+0x44a>
			switch (length_mod) {
 8000ed2:	1ecb      	subs	r3, r1, #3
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d823      	bhi.n	8000f20 <cbvprintf+0x424>
 8000ed8:	e8df f003 	tbb	[pc, r3]
 8000edc:	22090903 	.word	0x22090903
 8000ee0:	22          	.byte	0x22
 8000ee1:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8000ee2:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8000ee6:	17da      	asrs	r2, r3, #31
 8000ee8:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8000eec:	e006      	b.n	8000efc <cbvprintf+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
 8000eee:	3407      	adds	r4, #7
 8000ef0:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8000ef4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000ef8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 8000efc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000f00:	f013 0603 	ands.w	r6, r3, #3
 8000f04:	d057      	beq.n	8000fb6 <cbvprintf+0x4ba>
			OUTS(sp, fp);
 8000f06:	9b02      	ldr	r3, [sp, #8]
 8000f08:	464a      	mov	r2, r9
 8000f0a:	4659      	mov	r1, fp
 8000f0c:	4650      	mov	r0, sl
 8000f0e:	f00d fe10 	bl	800eb32 <outs>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	f2c0 813d 	blt.w	8001192 <cbvprintf+0x696>
 8000f18:	4405      	add	r5, r0
			OUTS(bps, bpe);
 8000f1a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8000f1e:	e5f5      	b.n	8000b0c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000f20:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000f24:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000f26:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000f2a:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8000f2e:	d105      	bne.n	8000f3c <cbvprintf+0x440>
				value->uint = (unsigned char)value->uint;
 8000f30:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 8000f34:	930c      	str	r3, [sp, #48]	; 0x30
 8000f36:	2300      	movs	r3, #0
 8000f38:	930d      	str	r3, [sp, #52]	; 0x34
 8000f3a:	e7df      	b.n	8000efc <cbvprintf+0x400>
			} else if (length_mod == LENGTH_H) {
 8000f3c:	2902      	cmp	r1, #2
 8000f3e:	d1dd      	bne.n	8000efc <cbvprintf+0x400>
				value->sint = (short)value->sint;
 8000f40:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8000f44:	e7cf      	b.n	8000ee6 <cbvprintf+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d123      	bne.n	8000f92 <cbvprintf+0x496>
			switch (length_mod) {
 8000f4a:	1ecb      	subs	r3, r1, #3
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d813      	bhi.n	8000f78 <cbvprintf+0x47c>
 8000f50:	e8df f003 	tbb	[pc, r3]
 8000f54:	120a0a03 	.word	0x120a0a03
 8000f58:	12          	.byte	0x12
 8000f59:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8000f5a:	6822      	ldr	r2, [r4, #0]
 8000f5c:	920c      	str	r2, [sp, #48]	; 0x30
 8000f5e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8000f60:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8000f62:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 8000f64:	4604      	mov	r4, r0
 8000f66:	e7c9      	b.n	8000efc <cbvprintf+0x400>
					(uint_value_type)va_arg(ap,
 8000f68:	1de0      	adds	r0, r4, #7
 8000f6a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 8000f6e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8000f72:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
 8000f76:	e7f5      	b.n	8000f64 <cbvprintf+0x468>
					(uint_value_type)va_arg(ap, size_t);
 8000f78:	f854 3b04 	ldr.w	r3, [r4], #4
 8000f7c:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8000f7e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 8000f86:	d0d3      	beq.n	8000f30 <cbvprintf+0x434>
			} else if (length_mod == LENGTH_H) {
 8000f88:	2902      	cmp	r1, #2
 8000f8a:	d1b7      	bne.n	8000efc <cbvprintf+0x400>
				value->uint = (unsigned short)value->uint;
 8000f8c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8000f90:	e7d0      	b.n	8000f34 <cbvprintf+0x438>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d109      	bne.n	8000faa <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, long long);
 8000f96:	1de3      	adds	r3, r4, #7
 8000f98:	f023 0307 	bic.w	r3, r3, #7
 8000f9c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000fa8:	e7a8      	b.n	8000efc <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000faa:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000fac:	bf04      	itt	eq
 8000fae:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000fb2:	930c      	streq	r3, [sp, #48]	; 0x30
 8000fb4:	e7a2      	b.n	8000efc <cbvprintf+0x400>
		switch (conv->specifier) {
 8000fb6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8000fba:	2878      	cmp	r0, #120	; 0x78
 8000fbc:	d8ad      	bhi.n	8000f1a <cbvprintf+0x41e>
 8000fbe:	2862      	cmp	r0, #98	; 0x62
 8000fc0:	d820      	bhi.n	8001004 <cbvprintf+0x508>
 8000fc2:	2825      	cmp	r0, #37	; 0x25
 8000fc4:	f43f adac 	beq.w	8000b20 <cbvprintf+0x24>
 8000fc8:	2858      	cmp	r0, #88	; 0x58
 8000fca:	d1a6      	bne.n	8000f1a <cbvprintf+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000fcc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000fd6:	ab06      	add	r3, sp, #24
 8000fd8:	aa0e      	add	r2, sp, #56	; 0x38
 8000fda:	f7ff fd43 	bl	8000a64 <encode_uint>
 8000fde:	4681      	mov	r9, r0
			if (precision >= 0) {
 8000fe0:	2f00      	cmp	r7, #0
 8000fe2:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 8000fe6:	db0b      	blt.n	8001000 <cbvprintf+0x504>
				conv->flag_zero = false;
 8000fe8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 8000fec:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
 8000ff0:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000ff4:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8000ff6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 8000ffa:	d901      	bls.n	8001000 <cbvprintf+0x504>
					conv->pad0_value = precision - (int)len;
 8000ffc:	1afb      	subs	r3, r7, r3
 8000ffe:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
 8001000:	4607      	mov	r7, r0
 8001002:	e03c      	b.n	800107e <cbvprintf+0x582>
		switch (conv->specifier) {
 8001004:	3863      	subs	r0, #99	; 0x63
 8001006:	2815      	cmp	r0, #21
 8001008:	d887      	bhi.n	8000f1a <cbvprintf+0x41e>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <cbvprintf+0x514>)
 800100c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8001010:	0800108f 	.word	0x0800108f
 8001014:	080010f1 	.word	0x080010f1
 8001018:	08000f1b 	.word	0x08000f1b
 800101c:	08000f1b 	.word	0x08000f1b
 8001020:	08000f1b 	.word	0x08000f1b
 8001024:	08000f1b 	.word	0x08000f1b
 8001028:	080010f1 	.word	0x080010f1
 800102c:	08000f1b 	.word	0x08000f1b
 8001030:	08000f1b 	.word	0x08000f1b
 8001034:	08000f1b 	.word	0x08000f1b
 8001038:	08000f1b 	.word	0x08000f1b
 800103c:	0800114b 	.word	0x0800114b
 8001040:	08001119 	.word	0x08001119
 8001044:	0800111d 	.word	0x0800111d
 8001048:	08000f1b 	.word	0x08000f1b
 800104c:	08000f1b 	.word	0x08000f1b
 8001050:	08001069 	.word	0x08001069
 8001054:	08000f1b 	.word	0x08000f1b
 8001058:	08001119 	.word	0x08001119
 800105c:	08000f1b 	.word	0x08000f1b
 8001060:	08000f1b 	.word	0x08000f1b
 8001064:	08001119 	.word	0x08001119
			if (precision >= 0) {
 8001068:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
 800106a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
 800106e:	db0a      	blt.n	8001086 <cbvprintf+0x58a>
				len = strnlen(bps, precision);
 8001070:	4639      	mov	r1, r7
 8001072:	4648      	mov	r0, r9
 8001074:	f013 fc27 	bl	80148c6 <strnlen>
			bpe = bps + len;
 8001078:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
 800107c:	2600      	movs	r6, #0
		if (bps == NULL) {
 800107e:	f1b9 0f00 	cmp.w	r9, #0
 8001082:	d10c      	bne.n	800109e <cbvprintf+0x5a2>
 8001084:	e749      	b.n	8000f1a <cbvprintf+0x41e>
				len = strlen(bps);
 8001086:	4648      	mov	r0, r9
 8001088:	f7ff fa49 	bl	800051e <strlen>
 800108c:	e7f4      	b.n	8001078 <cbvprintf+0x57c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 800108e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001090:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
 8001094:	2600      	movs	r6, #0
			bpe = buf + 1;
 8001096:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
 800109a:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
 800109e:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
 80010a2:	b106      	cbz	r6, 80010a6 <cbvprintf+0x5aa>
			nj_len += 1U;
 80010a4:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 80010a6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 80010aa:	06d0      	lsls	r0, r2, #27
 80010ac:	d566      	bpl.n	800117c <cbvprintf+0x680>
			nj_len += 2U;
 80010ae:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 80010b0:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 80010b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
 80010b4:	bf48      	it	mi
 80010b6:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
 80010b8:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 80010ba:	bf48      	it	mi
 80010bc:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 80010be:	f1b8 0f00 	cmp.w	r8, #0
 80010c2:	dd73      	ble.n	80011ac <cbvprintf+0x6b0>
			if (!conv->flag_dash) {
 80010c4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
 80010c8:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
 80010cc:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80010d0:	9303      	str	r3, [sp, #12]
 80010d2:	0753      	lsls	r3, r2, #29
 80010d4:	d46a      	bmi.n	80011ac <cbvprintf+0x6b0>
				if (conv->flag_zero) {
 80010d6:	0650      	lsls	r0, r2, #25
 80010d8:	d55e      	bpl.n	8001198 <cbvprintf+0x69c>
					if (sign != 0) {
 80010da:	b13e      	cbz	r6, 80010ec <cbvprintf+0x5f0>
						OUTC(sign);
 80010dc:	4659      	mov	r1, fp
 80010de:	4630      	mov	r0, r6
 80010e0:	47d0      	blx	sl
 80010e2:	2800      	cmp	r0, #0
 80010e4:	db55      	blt.n	8001192 <cbvprintf+0x696>
						sign = 0;
 80010e6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 80010e8:	3501      	adds	r5, #1
						sign = 0;
 80010ea:	461e      	mov	r6, r3
					pad = '0';
 80010ec:	2330      	movs	r3, #48	; 0x30
 80010ee:	e054      	b.n	800119a <cbvprintf+0x69e>
			if (conv->flag_plus) {
 80010f0:	071e      	lsls	r6, r3, #28
 80010f2:	d40f      	bmi.n	8001114 <cbvprintf+0x618>
				sign = ' ';
 80010f4:	f013 0610 	ands.w	r6, r3, #16
 80010f8:	bf18      	it	ne
 80010fa:	2620      	movne	r6, #32
			sint = value->sint;
 80010fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 8001100:	2b00      	cmp	r3, #0
 8001102:	f6bf af63 	bge.w	8000fcc <cbvprintf+0x4d0>
				value->uint = (uint_value_type)-sint;
 8001106:	4252      	negs	r2, r2
 8001108:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800110c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 8001110:	262d      	movs	r6, #45	; 0x2d
 8001112:	e75b      	b.n	8000fcc <cbvprintf+0x4d0>
				sign = '+';
 8001114:	262b      	movs	r6, #43	; 0x2b
 8001116:	e7f1      	b.n	80010fc <cbvprintf+0x600>
		switch (conv->specifier) {
 8001118:	2600      	movs	r6, #0
 800111a:	e757      	b.n	8000fcc <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
 800111c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800111e:	b340      	cbz	r0, 8001172 <cbvprintf+0x676>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8001120:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	aa0e      	add	r2, sp, #56	; 0x38
 8001128:	ab06      	add	r3, sp, #24
 800112a:	2100      	movs	r1, #0
 800112c:	f7ff fc9a 	bl	8000a64 <encode_uint>
				conv->altform_0c = true;
 8001130:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8001134:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001138:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 800113c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8001140:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8001142:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8001146:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8001148:	e74a      	b.n	8000fe0 <cbvprintf+0x4e4>
				store_count(conv, value->ptr, count);
 800114a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 800114c:	2907      	cmp	r1, #7
 800114e:	f63f aee4 	bhi.w	8000f1a <cbvprintf+0x41e>
 8001152:	e8df f001 	tbb	[pc, r1]
 8001156:	040c      	.short	0x040c
 8001158:	08080c06 	.word	0x08080c06
 800115c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 800115e:	701d      	strb	r5, [r3, #0]
		break;
 8001160:	e6db      	b.n	8000f1a <cbvprintf+0x41e>
		*(short *)dp = (short)count;
 8001162:	801d      	strh	r5, [r3, #0]
		break;
 8001164:	e6d9      	b.n	8000f1a <cbvprintf+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
 8001166:	17ea      	asrs	r2, r5, #31
 8001168:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 800116c:	e6d5      	b.n	8000f1a <cbvprintf+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 800116e:	601d      	str	r5, [r3, #0]
		break;
 8001170:	e6d3      	b.n	8000f1a <cbvprintf+0x41e>
			bpe = bps + 5;
 8001172:	4f2e      	ldr	r7, [pc, #184]	; (800122c <cbvprintf+0x730>)
 8001174:	4606      	mov	r6, r0
			bps = "(nil)";
 8001176:	f1a7 0905 	sub.w	r9, r7, #5
 800117a:	e790      	b.n	800109e <cbvprintf+0x5a2>
		} else if (conv->altform_0) {
 800117c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 800117e:	bf48      	it	mi
 8001180:	3301      	addmi	r3, #1
 8001182:	e795      	b.n	80010b0 <cbvprintf+0x5b4>
					OUTC(pad);
 8001184:	4618      	mov	r0, r3
 8001186:	4659      	mov	r1, fp
 8001188:	9303      	str	r3, [sp, #12]
 800118a:	47d0      	blx	sl
 800118c:	2800      	cmp	r0, #0
 800118e:	9b03      	ldr	r3, [sp, #12]
 8001190:	da04      	bge.n	800119c <cbvprintf+0x6a0>
#undef OUTS
#undef OUTC
}
 8001192:	b013      	add	sp, #76	; 0x4c
 8001194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8001198:	2320      	movs	r3, #32
 800119a:	4445      	add	r5, r8
 800119c:	4642      	mov	r2, r8
				while (width-- > 0) {
 800119e:	2a00      	cmp	r2, #0
 80011a0:	eba5 0108 	sub.w	r1, r5, r8
 80011a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80011a8:	dcec      	bgt.n	8001184 <cbvprintf+0x688>
 80011aa:	460d      	mov	r5, r1
		if (sign != 0) {
 80011ac:	b12e      	cbz	r6, 80011ba <cbvprintf+0x6be>
			OUTC(sign);
 80011ae:	4659      	mov	r1, fp
 80011b0:	4630      	mov	r0, r6
 80011b2:	47d0      	blx	sl
 80011b4:	2800      	cmp	r0, #0
 80011b6:	dbec      	blt.n	8001192 <cbvprintf+0x696>
 80011b8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 80011ba:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80011be:	06d9      	lsls	r1, r3, #27
 80011c0:	d401      	bmi.n	80011c6 <cbvprintf+0x6ca>
 80011c2:	071a      	lsls	r2, r3, #28
 80011c4:	d505      	bpl.n	80011d2 <cbvprintf+0x6d6>
				OUTC('0');
 80011c6:	4659      	mov	r1, fp
 80011c8:	2030      	movs	r0, #48	; 0x30
 80011ca:	47d0      	blx	sl
 80011cc:	2800      	cmp	r0, #0
 80011ce:	dbe0      	blt.n	8001192 <cbvprintf+0x696>
 80011d0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 80011d2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80011d6:	06db      	lsls	r3, r3, #27
 80011d8:	d506      	bpl.n	80011e8 <cbvprintf+0x6ec>
				OUTC(conv->specifier);
 80011da:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 80011de:	4659      	mov	r1, fp
 80011e0:	47d0      	blx	sl
 80011e2:	2800      	cmp	r0, #0
 80011e4:	dbd5      	blt.n	8001192 <cbvprintf+0x696>
 80011e6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 80011e8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80011ea:	442e      	add	r6, r5
 80011ec:	1b73      	subs	r3, r6, r5
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dc15      	bgt.n	800121e <cbvprintf+0x722>
			OUTS(bps, bpe);
 80011f2:	463b      	mov	r3, r7
 80011f4:	464a      	mov	r2, r9
 80011f6:	4659      	mov	r1, fp
 80011f8:	4650      	mov	r0, sl
 80011fa:	f00d fc9a 	bl	800eb32 <outs>
 80011fe:	2800      	cmp	r0, #0
 8001200:	dbc7      	blt.n	8001192 <cbvprintf+0x696>
 8001202:	4405      	add	r5, r0
		while (width > 0) {
 8001204:	44a8      	add	r8, r5
 8001206:	eba8 0305 	sub.w	r3, r8, r5
 800120a:	2b00      	cmp	r3, #0
 800120c:	f77f ae85 	ble.w	8000f1a <cbvprintf+0x41e>
			OUTC(' ');
 8001210:	4659      	mov	r1, fp
 8001212:	2020      	movs	r0, #32
 8001214:	47d0      	blx	sl
 8001216:	2800      	cmp	r0, #0
 8001218:	dbbb      	blt.n	8001192 <cbvprintf+0x696>
 800121a:	3501      	adds	r5, #1
			--width;
 800121c:	e7f3      	b.n	8001206 <cbvprintf+0x70a>
				OUTC('0');
 800121e:	4659      	mov	r1, fp
 8001220:	2030      	movs	r0, #48	; 0x30
 8001222:	47d0      	blx	sl
 8001224:	2800      	cmp	r0, #0
 8001226:	dbb4      	blt.n	8001192 <cbvprintf+0x696>
 8001228:	3501      	adds	r5, #1
 800122a:	e7df      	b.n	80011ec <cbvprintf+0x6f0>
 800122c:	08016353 	.word	0x08016353

08001230 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
 8001230:	070b      	lsls	r3, r1, #28
 8001232:	d506      	bpl.n	8001242 <foldcase+0x12>
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <foldcase+0x14>)
 8001236:	5cc3      	ldrb	r3, [r0, r3]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b01      	cmp	r3, #1
        return tolower(ch);
 800123e:	bf08      	it	eq
 8001240:	3020      	addeq	r0, #32
    return ch;
}
 8001242:	4770      	bx	lr
 8001244:	08018f48 	.word	0x08018f48

08001248 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8001248:	f04f 0210 	mov.w	r2, #16
 800124c:	f3ef 8311 	mrs	r3, BASEPRI
 8001250:	f382 8812 	msr	BASEPRI_MAX, r2
 8001254:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8001258:	f383 8811 	msr	BASEPRI, r3
 800125c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <stm32l4_init+0x24>)
 8001262:	4a03      	ldr	r2, [pc, #12]	; (8001270 <stm32l4_init+0x28>)
 8001264:	601a      	str	r2, [r3, #0]

	return 0;
}
 8001266:	2000      	movs	r0, #0
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000304 	.word	0x20000304
 8001270:	003d0900 	.word	0x003d0900

08001274 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
 8001274:	b513      	push	{r0, r1, r4, lr}
 8001276:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
 8001278:	f012 fe11 	bl	8013e9e <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
 800127c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <cmd_kernel_version+0x28>)
 800128a:	0e03      	lsrs	r3, r0, #24
 800128c:	2108      	movs	r1, #8
 800128e:	4620      	mov	r0, r4
 8001290:	f00e f808 	bl	800f2a4 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
 8001294:	2000      	movs	r0, #0
 8001296:	b002      	add	sp, #8
 8001298:	bd10      	pop	{r4, pc}
 800129a:	bf00      	nop
 800129c:	08016354 	.word	0x08016354

080012a0 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
 80012a0:	b510      	push	{r4, lr}
 80012a2:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
 80012a4:	f013 f8e1 	bl	801446a <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80012a8:	220a      	movs	r2, #10
 80012aa:	2300      	movs	r3, #0
 80012ac:	f7fe ffc0 	bl	8000230 <__aeabi_uldivmod>
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <cmd_kernel_uptime+0x20>)
 80012b2:	4603      	mov	r3, r0
 80012b4:	2108      	movs	r1, #8
 80012b6:	4620      	mov	r0, r4
 80012b8:	f00d fff4 	bl	800f2a4 <shell_fprintf>
	return 0;
}
 80012bc:	2000      	movs	r0, #0
 80012be:	bd10      	pop	{r4, pc}
 80012c0:	0801636d 	.word	0x0801636d

080012c4 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
 80012c4:	b510      	push	{r4, lr}
 80012c6:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
 80012c8:	f00a f830 	bl	800b32c <sys_clock_elapsed>
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <cmd_kernel_threads+0x2c>)
 80012ce:	4603      	mov	r3, r0
 80012d0:	2108      	movs	r1, #8
 80012d2:	4620      	mov	r0, r4
 80012d4:	f00d ffe6 	bl	800f2a4 <shell_fprintf>
	shell_print(shell, "Threads:");
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <cmd_kernel_threads+0x30>)
 80012da:	4620      	mov	r0, r4
 80012dc:	2108      	movs	r1, #8
 80012de:	f00d ffe1 	bl	800f2a4 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <cmd_kernel_threads+0x34>)
 80012e4:	4621      	mov	r1, r4
 80012e6:	f00a ff0b 	bl	800c100 <k_thread_foreach>
	return 0;
}
 80012ea:	2000      	movs	r0, #0
 80012ec:	bd10      	pop	{r4, pc}
 80012ee:	bf00      	nop
 80012f0:	0801637c 	.word	0x0801637c
 80012f4:	0801639b 	.word	0x0801639b
 80012f8:	0800135d 	.word	0x0800135d

080012fc <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
 80012fc:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
 80012fe:	4601      	mov	r1, r0
{
 8001300:	b087      	sub	sp, #28
 8001302:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <cmd_kernel_stacks+0x50>)
 8001306:	f00a fefb 	bl	800c100 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
 800130a:	4a11      	ldr	r2, [pc, #68]	; (8001350 <cmd_kernel_stacks+0x54>)
		unused = 0;
 800130c:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
 800130e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001312:	29aa      	cmp	r1, #170	; 0xaa
 8001314:	d103      	bne.n	800131e <cmd_kernel_stacks+0x22>
				unused++;
 8001316:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
 8001318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800131c:	d1f7      	bne.n	800130e <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
 800131e:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 8001322:	2264      	movs	r2, #100	; 0x64
 8001324:	434a      	muls	r2, r1
 8001326:	0ad2      	lsrs	r2, r2, #11
 8001328:	9205      	str	r2, [sp, #20]
 800132a:	2500      	movs	r5, #0
 800132c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001330:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8001334:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001338:	4620      	mov	r0, r4
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <cmd_kernel_stacks+0x58>)
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <cmd_kernel_stacks+0x5c>)
 800133e:	9500      	str	r5, [sp, #0]
 8001340:	2108      	movs	r1, #8
 8001342:	f00d ffaf 	bl	800f2a4 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
 8001346:	4628      	mov	r0, r5
 8001348:	b007      	add	sp, #28
 800134a:	bd30      	pop	{r4, r5, pc}
 800134c:	0800143d 	.word	0x0800143d
 8001350:	200046a0 	.word	0x200046a0
 8001354:	20004680 	.word	0x20004680
 8001358:	080163a5 	.word	0x080163a5

0800135c <shell_tdata_dump>:
{
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
 8001360:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
 8001364:	4604      	mov	r4, r0
 8001366:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
 8001368:	f012 fd87 	bl	8013e7a <k_thread_name_get>
 800136c:	4606      	mov	r6, r0
	return z_impl_z_current_get();
 800136e:	f00b fdeb 	bl	800cf48 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <shell_tdata_dump+0xa4>)
 8001374:	4a23      	ldr	r2, [pc, #140]	; (8001404 <shell_tdata_dump+0xa8>)
 8001376:	2e00      	cmp	r6, #0
 8001378:	bf08      	it	eq
 800137a:	461e      	moveq	r6, r3
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <shell_tdata_dump+0xac>)
 800137e:	e9cd 4600 	strd	r4, r6, [sp]
 8001382:	4284      	cmp	r4, r0
 8001384:	bf18      	it	ne
 8001386:	4613      	movne	r3, r2
 8001388:	2108      	movs	r1, #8
 800138a:	4628      	mov	r0, r5
 800138c:	4a1f      	ldr	r2, [pc, #124]	; (800140c <shell_tdata_dump+0xb0>)
 800138e:	f00d ff89 	bl	800f2a4 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
 8001392:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8001396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800139a:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <shell_tdata_dump+0xb4>)
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2108      	movs	r1, #8
 80013a4:	7b23      	ldrb	r3, [r4, #12]
 80013a6:	4628      	mov	r0, r5
 80013a8:	f00d ff7c 	bl	800f2a4 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
 80013ac:	4620      	mov	r0, r4
 80013ae:	f00a feef 	bl	800c190 <k_thread_state_str>
 80013b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013b4:	9200      	str	r2, [sp, #0]
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a16      	ldr	r2, [pc, #88]	; (8001414 <shell_tdata_dump+0xb8>)
 80013ba:	2108      	movs	r1, #8
 80013bc:	4628      	mov	r0, r5
 80013be:	f00d ff71 	bl	800f2a4 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
 80013c2:	a905      	add	r1, sp, #20
 80013c4:	4620      	mov	r0, r4
 80013c6:	f012 fd5c 	bl	8013e82 <z_impl_k_thread_stack_space_get>
	if (ret) {
 80013ca:	4603      	mov	r3, r0
 80013cc:	b130      	cbz	r0, 80013dc <shell_tdata_dump+0x80>
		shell_print(shell,
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <shell_tdata_dump+0xbc>)
 80013d0:	2108      	movs	r1, #8
 80013d2:	4628      	mov	r0, r5
 80013d4:	f00d ff66 	bl	800f2a4 <shell_fprintf>
}
 80013d8:	b007      	add	sp, #28
 80013da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
 80013dc:	9a05      	ldr	r2, [sp, #20]
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
 80013e2:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
 80013e6:	434b      	muls	r3, r1
		shell_print(shell,
 80013e8:	4a0c      	ldr	r2, [pc, #48]	; (800141c <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
 80013ea:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
 80013ee:	2108      	movs	r1, #8
 80013f0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80013f4:	4628      	mov	r0, r5
 80013f6:	463b      	mov	r3, r7
 80013f8:	f00d ff54 	bl	800f2a4 <shell_fprintf>
}
 80013fc:	e7ec      	b.n	80013d8 <shell_tdata_dump+0x7c>
 80013fe:	bf00      	nop
 8001400:	080163ed 	.word	0x080163ed
 8001404:	080170d8 	.word	0x080170d8
 8001408:	080163eb 	.word	0x080163eb
 800140c:	080163f0 	.word	0x080163f0
 8001410:	080163fc 	.word	0x080163fc
 8001414:	08016428 	.word	0x08016428
 8001418:	0801643f 	.word	0x0801643f
 800141c:	0801646c 	.word	0x0801646c

08001420 <cmd_kernel_cycles>:
{
 8001420:	b510      	push	{r4, lr}
 8001422:	4604      	mov	r4, r0
 8001424:	f009 ffa0 	bl	800b368 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
 8001428:	4a03      	ldr	r2, [pc, #12]	; (8001438 <cmd_kernel_cycles+0x18>)
 800142a:	4603      	mov	r3, r0
 800142c:	2108      	movs	r1, #8
 800142e:	4620      	mov	r0, r4
 8001430:	f00d ff38 	bl	800f2a4 <shell_fprintf>
}
 8001434:	2000      	movs	r0, #0
 8001436:	bd10      	pop	{r4, pc}
 8001438:	080164a3 	.word	0x080164a3

0800143c <shell_stack_dump>:
{
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
 800143e:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	4604      	mov	r4, r0
 8001446:	460d      	mov	r5, r1
 8001448:	a907      	add	r1, sp, #28
 800144a:	f012 fd1a 	bl	8013e82 <z_impl_k_thread_stack_space_get>
	if (ret) {
 800144e:	4603      	mov	r3, r0
 8001450:	b130      	cbz	r0, 8001460 <shell_stack_dump+0x24>
		shell_print(shell,
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <shell_stack_dump+0x58>)
 8001454:	2108      	movs	r1, #8
 8001456:	4628      	mov	r0, r5
 8001458:	f00d ff24 	bl	800f2a4 <shell_fprintf>
}
 800145c:	b009      	add	sp, #36	; 0x24
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
 8001460:	4620      	mov	r0, r4
 8001462:	f012 fd0a 	bl	8013e7a <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
 8001466:	9907      	ldr	r1, [sp, #28]
	shell_print((const struct shell *)user_data,
 8001468:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
 800146a:	1a77      	subs	r7, r6, r1
	shell_print((const struct shell *)user_data,
 800146c:	2800      	cmp	r0, #0
 800146e:	bf18      	it	ne
 8001470:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
 8001472:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
 8001474:	e9cd 1702 	strd	r1, r7, [sp, #8]
 8001478:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
 800147c:	437b      	muls	r3, r7
	shell_print((const struct shell *)user_data,
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
 8001480:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
 8001484:	2108      	movs	r1, #8
 8001486:	e9cd 6304 	strd	r6, r3, [sp, #16]
 800148a:	4628      	mov	r0, r5
 800148c:	4623      	mov	r3, r4
 800148e:	f00d ff09 	bl	800f2a4 <shell_fprintf>
 8001492:	e7e3      	b.n	800145c <shell_stack_dump+0x20>
 8001494:	0801643f 	.word	0x0801643f
 8001498:	080163ed 	.word	0x080163ed
 800149c:	080164b9 	.word	0x080164b9

080014a0 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
 80014a0:	4603      	mov	r3, r0
	const char *name = dev->name;
 80014a2:	6800      	ldr	r0, [r0, #0]
{
 80014a4:	b510      	push	{r4, lr}
 80014a6:	460c      	mov	r4, r1
 80014a8:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
 80014aa:	b108      	cbz	r0, 80014b0 <get_device_name+0x10>
 80014ac:	7802      	ldrb	r2, [r0, #0]
 80014ae:	b922      	cbnz	r2, 80014ba <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
 80014b0:	4a02      	ldr	r2, [pc, #8]	; (80014bc <get_device_name+0x1c>)
 80014b2:	4620      	mov	r0, r4
 80014b4:	f00c f95e 	bl	800d774 <sniprintf>
 80014b8:	4620      	mov	r0, r4
		name = buf;
	}

	return name;
}
 80014ba:	bd10      	pop	{r4, pc}
 80014bc:	08016590 	.word	0x08016590

080014c0 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
 80014c0:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
 80014c2:	680c      	ldr	r4, [r1, #0]
 80014c4:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
 80014c8:	f7ff ffea 	bl	80014a0 <get_device_name>
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <cmd_device_list_visitor+0x1c>)
 80014ce:	4603      	mov	r3, r0
 80014d0:	2108      	movs	r1, #8
 80014d2:	4620      	mov	r0, r4
 80014d4:	f00d fee6 	bl	800f2a4 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
 80014d8:	2000      	movs	r0, #0
 80014da:	bd10      	pop	{r4, pc}
 80014dc:	08016595 	.word	0x08016595

080014e0 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
 80014e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014e4:	b08a      	sub	sp, #40	; 0x28
 80014e6:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
 80014e8:	a801      	add	r0, sp, #4
 80014ea:	f00a fc9d 	bl	800be28 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
 80014ee:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
 80014f2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001564 <cmd_device_list+0x84>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
 80014f6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001568 <cmd_device_list+0x88>
 80014fa:	f8df a070 	ldr.w	sl, [pc, #112]	; 800156c <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
 80014fe:	2318      	movs	r3, #24
 8001500:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
 8001504:	2108      	movs	r1, #8
 8001506:	4628      	mov	r0, r5
 8001508:	f00d fecc 	bl	800f2a4 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
 800150c:	9c01      	ldr	r4, [sp, #4]
 800150e:	42b4      	cmp	r4, r6
 8001510:	d303      	bcc.n	800151a <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
 8001512:	2000      	movs	r0, #0
 8001514:	b00a      	add	sp, #40	; 0x28
 8001516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
 800151a:	af05      	add	r7, sp, #20
 800151c:	4639      	mov	r1, r7
 800151e:	2214      	movs	r2, #20
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ffbd 	bl	80014a0 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
 8001526:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
 8001528:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
 800152a:	2108      	movs	r1, #8
 800152c:	4628      	mov	r0, r5
 800152e:	f00d feb9 	bl	800f2a4 <shell_fprintf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8001532:	4620      	mov	r0, r4
 8001534:	f012 fbc2 	bl	8013cbc <z_device_is_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <cmd_device_list+0x90>)
 800153a:	2800      	cmp	r0, #0
 800153c:	bf14      	ite	ne
 800153e:	464b      	movne	r3, r9
 8001540:	4653      	moveq	r3, sl
 8001542:	2108      	movs	r1, #8
 8001544:	4628      	mov	r0, r5
 8001546:	f00d fead 	bl	800f2a4 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
 800154a:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 800154c:	4620      	mov	r0, r4
 800154e:	4909      	ldr	r1, [pc, #36]	; (8001574 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
 8001550:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8001552:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
 8001554:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
 8001558:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 800155a:	f012 fbb9 	bl	8013cd0 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
 800155e:	e7d6      	b.n	800150e <cmd_device_list+0x2e>
 8001560:	080165b4 	.word	0x080165b4
 8001564:	080165be 	.word	0x080165be
 8001568:	080165a5 	.word	0x080165a5
 800156c:	080165ab 	.word	0x080165ab
 8001570:	080165c3 	.word	0x080165c3
 8001574:	080014c1 	.word	0x080014c1

08001578 <device_get_config_level>:
{
 8001578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 800157e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80015c8 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8001582:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8001586:	3101      	adds	r1, #1
{
 8001588:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 800158a:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
 800158e:	4606      	mov	r6, r0
	bool devices = false;
 8001590:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 8001592:	45a0      	cmp	r8, r4
 8001594:	d803      	bhi.n	800159e <device_get_config_level+0x26>
}
 8001596:	4638      	mov	r0, r7
 8001598:	b007      	add	sp, #28
 800159a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800159e:	4620      	mov	r0, r4
 80015a0:	f012 fb8c 	bl	8013cbc <z_device_is_ready>
		if (device_is_ready(dev)) {
 80015a4:	4605      	mov	r5, r0
 80015a6:	b158      	cbz	r0, 80015c0 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
 80015a8:	2214      	movs	r2, #20
 80015aa:	a901      	add	r1, sp, #4
 80015ac:	4620      	mov	r0, r4
 80015ae:	f7ff ff77 	bl	80014a0 <get_device_name>
 80015b2:	464a      	mov	r2, r9
 80015b4:	4603      	mov	r3, r0
 80015b6:	2108      	movs	r1, #8
 80015b8:	4630      	mov	r0, r6
 80015ba:	f00d fe73 	bl	800f2a4 <shell_fprintf>
			devices = true;
 80015be:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
 80015c0:	3418      	adds	r4, #24
 80015c2:	e7e6      	b.n	8001592 <device_get_config_level+0x1a>
 80015c4:	080153f4 	.word	0x080153f4
 80015c8:	080165ca 	.word	0x080165ca

080015cc <cmd_device_levels>:
{
 80015cc:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
 80015ce:	2108      	movs	r1, #8
{
 80015d0:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <cmd_device_levels+0x80>)
 80015d4:	f00d fe66 	bl	800f2a4 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
 80015d8:	2100      	movs	r1, #0
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff ffcc 	bl	8001578 <device_get_config_level>
	if (ret == false) {
 80015e0:	b920      	cbnz	r0, 80015ec <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <cmd_device_levels+0x84>)
 80015e4:	2108      	movs	r1, #8
 80015e6:	4620      	mov	r0, r4
 80015e8:	f00d fe5c 	bl	800f2a4 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
 80015ec:	2108      	movs	r1, #8
 80015ee:	4620      	mov	r0, r4
 80015f0:	4a18      	ldr	r2, [pc, #96]	; (8001654 <cmd_device_levels+0x88>)
 80015f2:	f00d fe57 	bl	800f2a4 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
 80015f6:	2101      	movs	r1, #1
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff ffbd 	bl	8001578 <device_get_config_level>
	if (ret == false) {
 80015fe:	b920      	cbnz	r0, 800160a <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <cmd_device_levels+0x84>)
 8001602:	2108      	movs	r1, #8
 8001604:	4620      	mov	r0, r4
 8001606:	f00d fe4d 	bl	800f2a4 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
 800160a:	2108      	movs	r1, #8
 800160c:	4620      	mov	r0, r4
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <cmd_device_levels+0x8c>)
 8001610:	f00d fe48 	bl	800f2a4 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
 8001614:	2102      	movs	r1, #2
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff ffae 	bl	8001578 <device_get_config_level>
	if (ret == false) {
 800161c:	b920      	cbnz	r0, 8001628 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 800161e:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <cmd_device_levels+0x84>)
 8001620:	2108      	movs	r1, #8
 8001622:	4620      	mov	r0, r4
 8001624:	f00d fe3e 	bl	800f2a4 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
 8001628:	2108      	movs	r1, #8
 800162a:	4620      	mov	r0, r4
 800162c:	4a0b      	ldr	r2, [pc, #44]	; (800165c <cmd_device_levels+0x90>)
 800162e:	f00d fe39 	bl	800f2a4 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
 8001632:	2103      	movs	r1, #3
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff ff9f 	bl	8001578 <device_get_config_level>
	if (ret == false) {
 800163a:	b920      	cbnz	r0, 8001646 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <cmd_device_levels+0x84>)
 800163e:	2108      	movs	r1, #8
 8001640:	4620      	mov	r0, r4
 8001642:	f00d fe2f 	bl	800f2a4 <shell_fprintf>
}
 8001646:	2000      	movs	r0, #0
 8001648:	bd10      	pop	{r4, pc}
 800164a:	bf00      	nop
 800164c:	080165d0 	.word	0x080165d0
 8001650:	080165df 	.word	0x080165df
 8001654:	080165e7 	.word	0x080165e7
 8001658:	080165f6 	.word	0x080165f6
 800165c:	08016604 	.word	0x08016604

08001660 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
 8001660:	1e8b      	subs	r3, r1, #2
 8001662:	2b02      	cmp	r3, #2
{
 8001664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001668:	4607      	mov	r7, r0
 800166a:	4688      	mov	r8, r1
 800166c:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
 800166e:	d833      	bhi.n	80016d8 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
 8001670:	6860      	ldr	r0, [r4, #4]
 8001672:	2210      	movs	r2, #16
 8001674:	2100      	movs	r1, #0
 8001676:	f00c f9a9 	bl	800d9cc <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
 800167a:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
 800167e:	4606      	mov	r6, r0
	if (argc < 3) {
 8001680:	d01e      	beq.n	80016c0 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
 8001682:	68a0      	ldr	r0, [r4, #8]
 8001684:	220a      	movs	r2, #10
 8001686:	2100      	movs	r1, #0
 8001688:	f00c f9a0 	bl	800d9cc <strtoul>
 800168c:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
 800168e:	4a21      	ldr	r2, [pc, #132]	; (8001714 <cmd_devmem+0xb4>)
 8001690:	462b      	mov	r3, r5
 8001692:	2108      	movs	r1, #8
 8001694:	4638      	mov	r0, r7
 8001696:	f00d fe05 	bl	800f2a4 <shell_fprintf>

	if (argc <= 3) {
 800169a:	f1b8 0f04 	cmp.w	r8, #4
 800169e:	d01e      	beq.n	80016de <cmd_devmem+0x7e>
	switch (width) {
 80016a0:	2d10      	cmp	r5, #16
 80016a2:	d00f      	beq.n	80016c4 <cmd_devmem+0x64>
 80016a4:	2d20      	cmp	r5, #32
 80016a6:	d010      	beq.n	80016ca <cmd_devmem+0x6a>
 80016a8:	2d08      	cmp	r5, #8
 80016aa:	d110      	bne.n	80016ce <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
 80016ac:	7833      	ldrb	r3, [r6, #0]
 80016ae:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <cmd_devmem+0xb8>)
 80016b2:	2108      	movs	r1, #8
 80016b4:	4638      	mov	r0, r7
 80016b6:	f00d fdf5 	bl	800f2a4 <shell_fprintf>
	int err = 0;
 80016ba:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
 80016bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
 80016c0:	2520      	movs	r5, #32
 80016c2:	e7e4      	b.n	800168e <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
 80016c4:	8833      	ldrh	r3, [r6, #0]
 80016c6:	b29b      	uxth	r3, r3
	if (err == 0) {
 80016c8:	e7f2      	b.n	80016b0 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
 80016ca:	6833      	ldr	r3, [r6, #0]
 80016cc:	e7f0      	b.n	80016b0 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
 80016ce:	4a13      	ldr	r2, [pc, #76]	; (800171c <cmd_devmem+0xbc>)
 80016d0:	2108      	movs	r1, #8
 80016d2:	4638      	mov	r0, r7
 80016d4:	f00d fde6 	bl	800f2a4 <shell_fprintf>
		return -EINVAL;
 80016d8:	f06f 0015 	mvn.w	r0, #21
 80016dc:	e7ee      	b.n	80016bc <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
 80016de:	68e0      	ldr	r0, [r4, #12]
 80016e0:	2210      	movs	r2, #16
 80016e2:	2100      	movs	r1, #0
 80016e4:	f00c f972 	bl	800d9cc <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <cmd_devmem+0xc0>)
 80016ea:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
 80016ec:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
 80016ee:	2108      	movs	r1, #8
 80016f0:	4638      	mov	r0, r7
 80016f2:	f00d fdd7 	bl	800f2a4 <shell_fprintf>
	switch (width) {
 80016f6:	2d10      	cmp	r5, #16
 80016f8:	d006      	beq.n	8001708 <cmd_devmem+0xa8>
 80016fa:	2d20      	cmp	r5, #32
 80016fc:	d007      	beq.n	800170e <cmd_devmem+0xae>
 80016fe:	2d08      	cmp	r5, #8
 8001700:	d1e5      	bne.n	80016ce <cmd_devmem+0x6e>
		sys_write8(value, addr);
 8001702:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
 8001704:	7034      	strb	r4, [r6, #0]
 8001706:	e7d8      	b.n	80016ba <cmd_devmem+0x5a>
		sys_write16(value, addr);
 8001708:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
 800170a:	8034      	strh	r4, [r6, #0]
 800170c:	e7d5      	b.n	80016ba <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
 800170e:	6034      	str	r4, [r6, #0]
 8001710:	e7d3      	b.n	80016ba <cmd_devmem+0x5a>
 8001712:	bf00      	nop
 8001714:	08016668 	.word	0x08016668
 8001718:	08016693 	.word	0x08016693
 800171c:	0801667d 	.word	0x0801667d
 8001720:	080166a4 	.word	0x080166a4

08001724 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
 8001724:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
 8001726:	4e0e      	ldr	r6, [pc, #56]	; (8001760 <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
 8001728:	4604      	mov	r4, r0
	if (bypass && in_use) {
 800172a:	7833      	ldrb	r3, [r6, #0]
 800172c:	460d      	mov	r5, r1
 800172e:	b131      	cbz	r1, 800173e <set_bypass.isra.0+0x1a>
 8001730:	b12b      	cbz	r3, 800173e <set_bypass.isra.0+0x1a>
}
 8001732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <set_bypass.isra.0+0x40>)
 8001738:	2101      	movs	r1, #1
 800173a:	f00d bdb3 	b.w	800f2a4 <shell_fprintf>
	in_use = !in_use;
 800173e:	f083 0301 	eor.w	r3, r3, #1
 8001742:	7033      	strb	r3, [r6, #0]
	if (in_use) {
 8001744:	b133      	cbz	r3, 8001754 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <set_bypass.isra.0+0x44>)
 8001748:	2108      	movs	r1, #8
 800174a:	4620      	mov	r0, r4
 800174c:	f00d fdaa 	bl	800f2a4 <shell_fprintf>
		in_use = true;
 8001750:	2301      	movs	r3, #1
 8001752:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
 8001754:	4629      	mov	r1, r5
 8001756:	4620      	mov	r0, r4
}
 8001758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
 800175c:	f00d bddc 	b.w	800f318 <shell_set_bypass>
 8001760:	20002586 	.word	0x20002586
 8001764:	080166b8 	.word	0x080166b8
 8001768:	080166f3 	.word	0x080166f3

0800176c <bypass_cb>:
{
 800176c:	b570      	push	{r4, r5, r6, lr}
 800176e:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
 8001770:	483c      	ldr	r0, [pc, #240]	; (8001864 <bypass_cb+0xf8>)
 8001772:	7803      	ldrb	r3, [r0, #0]
 8001774:	2b18      	cmp	r3, #24
 8001776:	d102      	bne.n	800177e <bypass_cb+0x12>
 8001778:	780b      	ldrb	r3, [r1, #0]
 800177a:	2b11      	cmp	r3, #17
 800177c:	d031      	beq.n	80017e2 <bypass_cb+0x76>
 800177e:	3a01      	subs	r2, #1
 8001780:	460b      	mov	r3, r1
 8001782:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
 8001784:	429d      	cmp	r5, r3
 8001786:	d125      	bne.n	80017d4 <bypass_cb+0x68>
	tail = recv[len - 1];
 8001788:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
 800178a:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
 800178c:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
 800178e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001792:	2b09      	cmp	r3, #9
 8001794:	4c34      	ldr	r4, [pc, #208]	; (8001868 <bypass_cb+0xfc>)
 8001796:	d904      	bls.n	80017a2 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
 8001798:	f022 0320 	bic.w	r3, r2, #32
 800179c:	3b41      	subs	r3, #65	; 0x41
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d804      	bhi.n	80017ac <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	4931      	ldr	r1, [pc, #196]	; (800186c <bypass_cb+0x100>)
 80017a6:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
 80017a8:	3301      	adds	r3, #1
 80017aa:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d134      	bne.n	800181c <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
 80017b2:	2210      	movs	r2, #16
 80017b4:	482d      	ldr	r0, [pc, #180]	; (800186c <bypass_cb+0x100>)
 80017b6:	2100      	movs	r1, #0
 80017b8:	f00c f908 	bl	800d9cc <strtoul>
		*bytes = byte;
 80017bc:	4a2c      	ldr	r2, [pc, #176]	; (8001870 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
 80017be:	6813      	ldr	r3, [r2, #0]
 80017c0:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
 80017c4:	6013      	str	r3, [r2, #0]
		sum++;
 80017c6:	4a2b      	ldr	r2, [pc, #172]	; (8001874 <bypass_cb+0x108>)
 80017c8:	6813      	ldr	r3, [r2, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	6023      	str	r3, [r4, #0]
 80017d2:	e023      	b.n	800181c <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
 80017d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80017d8:	2e18      	cmp	r6, #24
 80017da:	d1d3      	bne.n	8001784 <bypass_cb+0x18>
 80017dc:	781e      	ldrb	r6, [r3, #0]
 80017de:	2e11      	cmp	r6, #17
 80017e0:	d1d0      	bne.n	8001784 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
 80017e2:	4d24      	ldr	r5, [pc, #144]	; (8001874 <bypass_cb+0x108>)
 80017e4:	4a24      	ldr	r2, [pc, #144]	; (8001878 <bypass_cb+0x10c>)
 80017e6:	682b      	ldr	r3, [r5, #0]
 80017e8:	2108      	movs	r1, #8
 80017ea:	4620      	mov	r0, r4
 80017ec:	f00d fd5a 	bl	800f2a4 <shell_fprintf>
		set_bypass(sh, NULL);
 80017f0:	4620      	mov	r0, r4
 80017f2:	2100      	movs	r1, #0
 80017f4:	f7ff ff96 	bl	8001724 <set_bypass.isra.0>
		if (!littleendian) {
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <bypass_cb+0x110>)
 80017fa:	7818      	ldrb	r0, [r3, #0]
 80017fc:	b970      	cbnz	r0, 800181c <bypass_cb+0xb0>
 80017fe:	4a20      	ldr	r2, [pc, #128]	; (8001880 <bypass_cb+0x114>)
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
 8001804:	2b04      	cmp	r3, #4
 8001806:	dc0a      	bgt.n	800181e <bypass_cb+0xb2>
 8001808:	b108      	cbz	r0, 800180e <bypass_cb+0xa2>
 800180a:	6011      	str	r1, [r2, #0]
 800180c:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
 800180e:	f013 0103 	ands.w	r1, r3, #3
 8001812:	d10b      	bne.n	800182c <bypass_cb+0xc0>
				*data = __bswap_32(*data);
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
 800181e:	6808      	ldr	r0, [r1, #0]
 8001820:	ba00      	rev	r0, r0
 8001822:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
 8001826:	3b04      	subs	r3, #4
				data++;
 8001828:	2001      	movs	r0, #1
 800182a:	e7eb      	b.n	8001804 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
 800182c:	425b      	negs	r3, r3
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	bf58      	it	pl
 8001834:	4259      	negpl	r1, r3
 8001836:	2902      	cmp	r1, #2
 8001838:	d104      	bne.n	8001844 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	8813      	ldrh	r3, [r2, #0]
 800183e:	ba5b      	rev16	r3, r3
 8001840:	b29b      	uxth	r3, r3
 8001842:	e7ea      	b.n	800181a <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
 8001844:	2903      	cmp	r1, #3
 8001846:	d1e9      	bne.n	800181c <bypass_cb+0xb0>
				*data = __bswap_24(*data);
 8001848:	6810      	ldr	r0, [r2, #0]
 800184a:	6802      	ldr	r2, [r0, #0]
 800184c:	0411      	lsls	r1, r2, #16
 800184e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8001852:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8001856:	430b      	orrs	r3, r1
 8001858:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800185c:	4313      	orrs	r3, r2
 800185e:	6003      	str	r3, [r0, #0]
 8001860:	e7dc      	b.n	800181c <bypass_cb+0xb0>
 8001862:	bf00      	nop
 8001864:	20002588 	.word	0x20002588
 8001868:	20001b6c 	.word	0x20001b6c
 800186c:	20002584 	.word	0x20002584
 8001870:	20001b68 	.word	0x20001b68
 8001874:	20001b74 	.word	0x20001b74
 8001878:	0801671d 	.word	0x0801671d
 800187c:	20002587 	.word	0x20002587
 8001880:	20001b70 	.word	0x20001b70

08001884 <cmd_load>:
{
 8001884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001888:	460d      	mov	r5, r1
	chunk_element = 0;
 800188a:	492d      	ldr	r1, [pc, #180]	; (8001940 <cmd_load+0xbc>)
	littleendian = false;
 800188c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8001944 <cmd_load+0xc0>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 8001890:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8001948 <cmd_load+0xc4>
			shell_print(sh, "Unknown option \"%s\"", arg);
 8001894:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800194c <cmd_load+0xc8>
	littleendian = false;
 8001898:	2300      	movs	r3, #0
	chunk_element = 0;
 800189a:	600b      	str	r3, [r1, #0]
	sum = 0;
 800189c:	492c      	ldr	r1, [pc, #176]	; (8001950 <cmd_load+0xcc>)
	littleendian = false;
 800189e:	f888 3000 	strb.w	r3, [r8]
{
 80018a2:	4606      	mov	r6, r0
	sum = 0;
 80018a4:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
 80018a6:	4614      	mov	r4, r2
 80018a8:	2d01      	cmp	r5, #1
 80018aa:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 80018ac:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
 80018b0:	d921      	bls.n	80018f6 <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 80018b2:	4618      	mov	r0, r3
 80018b4:	2202      	movs	r2, #2
 80018b6:	4649      	mov	r1, r9
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	f012 ffdd 	bl	8014878 <strncmp>
 80018be:	9b01      	ldr	r3, [sp, #4]
 80018c0:	b988      	cbnz	r0, 80018e6 <cmd_load+0x62>
 80018c2:	6822      	ldr	r2, [r4, #0]
 80018c4:	7892      	ldrb	r2, [r2, #2]
 80018c6:	3a00      	subs	r2, #0
 80018c8:	bf18      	it	ne
 80018ca:	2201      	movne	r2, #1
 80018cc:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
 80018d0:	4920      	ldr	r1, [pc, #128]	; (8001954 <cmd_load+0xd0>)
 80018d2:	2202      	movs	r2, #2
 80018d4:	4650      	mov	r0, sl
 80018d6:	f012 ffcf 	bl	8014878 <strncmp>
 80018da:	b930      	cbnz	r0, 80018ea <cmd_load+0x66>
			littleendian = true;
 80018dc:	2301      	movs	r3, #1
 80018de:	f888 3000 	strb.w	r3, [r8]
		argc--;
 80018e2:	3d01      	subs	r5, #1
 80018e4:	e7e0      	b.n	80018a8 <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 80018e6:	2200      	movs	r2, #0
 80018e8:	e7f0      	b.n	80018cc <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
 80018ea:	4649      	mov	r1, r9
 80018ec:	4650      	mov	r0, sl
 80018ee:	f7fe fe0c 	bl	800050a <strcmp>
 80018f2:	b9b0      	cbnz	r0, 8001922 <cmd_load+0x9e>
			argv++;
 80018f4:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	4611      	mov	r1, r2
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f00b ffea 	bl	800d8d4 <strtol>
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 8001906:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f00b ffe3 	bl	800d8d4 <strtol>
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
 8001910:	4913      	ldr	r1, [pc, #76]	; (8001960 <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8001912:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
 8001914:	4630      	mov	r0, r6
 8001916:	f7ff ff05 	bl	8001724 <set_bypass.isra.0>
}
 800191a:	2000      	movs	r0, #0
 800191c:	b003      	add	sp, #12
 800191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
 8001922:	f89a 2000 	ldrb.w	r2, [sl]
 8001926:	2a2d      	cmp	r2, #45	; 0x2d
 8001928:	d1e5      	bne.n	80018f6 <cmd_load+0x72>
 800192a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800192e:	2a00      	cmp	r2, #0
 8001930:	d0e1      	beq.n	80018f6 <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
 8001932:	4653      	mov	r3, sl
 8001934:	465a      	mov	r2, fp
 8001936:	2108      	movs	r1, #8
 8001938:	4630      	mov	r0, r6
 800193a:	f00d fcb3 	bl	800f2a4 <shell_fprintf>
 800193e:	e7d0      	b.n	80018e2 <cmd_load+0x5e>
 8001940:	20001b6c 	.word	0x20001b6c
 8001944:	20002587 	.word	0x20002587
 8001948:	08016737 	.word	0x08016737
 800194c:	0801673d 	.word	0x0801673d
 8001950:	20001b74 	.word	0x20001b74
 8001954:	0801673a 	.word	0x0801673a
 8001958:	20001b68 	.word	0x20001b68
 800195c:	20001b70 	.word	0x20001b70
 8001960:	0800176d 	.word	0x0800176d

08001964 <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
 8001964:	b538      	push	{r3, r4, r5, lr}
 8001966:	4615      	mov	r5, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8001968:	6842      	ldr	r2, [r0, #4]
{
 800196a:	460c      	mov	r4, r1

	sh_uart->ctrl_blk->dev = (const struct device *)config;
 800196c:	6811      	ldr	r1, [r2, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
 800196e:	6890      	ldr	r0, [r2, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
 8001970:	608b      	str	r3, [r1, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
 8001972:	e9c1 4500 	strd	r4, r5, [r1]
	ring_buf_reset(sh_uart->tx_ringbuf);
 8001976:	f00d fb1b 	bl	800efb0 <ring_buf_reset>
	ring_buf_reset(sh_uart->rx_ringbuf);
 800197a:	68d0      	ldr	r0, [r2, #12]
 800197c:	f00d fb18 	bl	800efb0 <ring_buf_reset>
	sh_uart->ctrl_blk->tx_busy = 0;
 8001980:	6813      	ldr	r3, [r2, #0]
 8001982:	2100      	movs	r1, #0
 8001984:	60d9      	str	r1, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8001986:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8001988:	b123      	cbz	r3, 8001994 <init+0x30>
 800198a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198c:	b113      	cbz	r3, 8001994 <init+0x30>
		api->irq_callback_set(dev, cb, user_data);
 800198e:	4905      	ldr	r1, [pc, #20]	; (80019a4 <init+0x40>)
 8001990:	4620      	mov	r0, r4
 8001992:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
 8001994:	68a3      	ldr	r3, [r4, #8]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	b10b      	cbz	r3, 800199e <init+0x3a>
		api->irq_rx_enable(dev);
 800199a:	4620      	mov	r0, r4
 800199c:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
 800199e:	2000      	movs	r0, #0
 80019a0:	bd38      	pop	{r3, r4, r5, pc}
 80019a2:	bf00      	nop
 80019a4:	0800f029 	.word	0x0800f029

080019a8 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
 80019a8:	b513      	push	{r0, r1, r4, lr}
 80019aa:	4809      	ldr	r0, [pc, #36]	; (80019d0 <enable_shell_uart+0x28>)
 80019ac:	f012 f986 	bl	8013cbc <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
 80019b0:	b158      	cbz	r0, 80019ca <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <enable_shell_uart+0x2c>)
 80019b4:	4906      	ldr	r1, [pc, #24]	; (80019d0 <enable_shell_uart+0x28>)
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <enable_shell_uart+0x30>)
 80019ba:	2400      	movs	r4, #0
 80019bc:	9400      	str	r4, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	f000 fd3e 	bl	8002440 <shell_init>

	return 0;
 80019c4:	4620      	mov	r0, r4
}
 80019c6:	b002      	add	sp, #8
 80019c8:	bd10      	pop	{r4, pc}
		return -ENODEV;
 80019ca:	f06f 0012 	mvn.w	r0, #18
 80019ce:	e7fa      	b.n	80019c6 <enable_shell_uart+0x1e>
 80019d0:	08014eb8 	.word	0x08014eb8
 80019d4:	08015490 	.word	0x08015490
 80019d8:	080151c0 	.word	0x080151c0

080019dc <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
 80019dc:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
 80019de:	6881      	ldr	r1, [r0, #8]
{
 80019e0:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
 80019e2:	3108      	adds	r1, #8
 80019e4:	f001 fab6 	bl	8002f54 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
 80019e8:	68a1      	ldr	r1, [r4, #8]
 80019ea:	4a03      	ldr	r2, [pc, #12]	; (80019f8 <shell_internal_help_print+0x1c>)
 80019ec:	4620      	mov	r0, r4
 80019ee:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
 80019f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
 80019f4:	f001 ba36 	b.w	8002e64 <z_shell_help_subcmd_print>
 80019f8:	080167ee 	.word	0x080167ee

080019fc <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
 80019fc:	4901      	ldr	r1, [pc, #4]	; (8001a04 <z_cursor_next_line_move.isra.0+0x8>)
 80019fe:	f00d bbbb 	b.w	800f178 <z_shell_raw_fprintf>
 8001a02:	bf00      	nop
 8001a04:	080164a1 	.word	0x080164a1

08001a08 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
 8001a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a0a:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
 8001a0c:	6880      	ldr	r0, [r0, #8]
 8001a0e:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
 8001a12:	075a      	lsls	r2, r3, #29
{
 8001a14:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
 8001a16:	d505      	bpl.n	8001a24 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	f00d fbeb 	bl	800f1f4 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
 8001a1e:	68e0      	ldr	r0, [r4, #12]
 8001a20:	f00d ff96 	bl	800f950 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
 8001a24:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	b96b      	cbnz	r3, 8001a46 <history_handle+0x3e>
		if (up) {
 8001a2a:	2d00      	cmp	r5, #0
 8001a2c:	d037      	beq.n	8001a9e <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
 8001a2e:	68a0      	ldr	r0, [r4, #8]
 8001a30:	3042      	adds	r0, #66	; 0x42
 8001a32:	f00d fb9b 	bl	800f16c <z_shell_strlen>

			if (cmd_len) {
 8001a36:	68a3      	ldr	r3, [r4, #8]
 8001a38:	b398      	cbz	r0, 8001aa2 <history_handle+0x9a>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 8001a3a:	f103 0142 	add.w	r1, r3, #66	; 0x42
 8001a3e:	f503 70a1 	add.w	r0, r3, #322	; 0x142
 8001a42:	f012 ff11 	bl	8014868 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
 8001a46:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
 8001a48:	68e0      	ldr	r0, [r4, #12]
 8001a4a:	f10d 0306 	add.w	r3, sp, #6
 8001a4e:	3242      	adds	r2, #66	; 0x42
 8001a50:	4629      	mov	r1, r5
 8001a52:	f00d ff80 	bl	800f956 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
 8001a56:	b958      	cbnz	r0, 8001a70 <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
 8001a58:	68a0      	ldr	r0, [r4, #8]
 8001a5a:	f500 71a1 	add.w	r1, r0, #322	; 0x142
 8001a5e:	3042      	adds	r0, #66	; 0x42
 8001a60:	f012 ff02 	bl	8014868 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
 8001a64:	68a0      	ldr	r0, [r4, #8]
 8001a66:	3042      	adds	r0, #66	; 0x42
 8001a68:	f00d fb80 	bl	800f16c <z_shell_strlen>
 8001a6c:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
 8001a70:	4620      	mov	r0, r4
 8001a72:	f00d fdbe 	bl	800f5f2 <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8001a76:	68a3      	ldr	r3, [r4, #8]
 8001a78:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
 8001a7c:	069b      	lsls	r3, r3, #26
 8001a7e:	d503      	bpl.n	8001a88 <history_handle+0x80>
 8001a80:	4909      	ldr	r1, [pc, #36]	; (8001aa8 <history_handle+0xa0>)
 8001a82:	6960      	ldr	r0, [r4, #20]
 8001a84:	f00d fb78 	bl	800f178 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f001 f847 	bl	8002b1c <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
 8001a8e:	68a3      	ldr	r3, [r4, #8]
 8001a90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001a94:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
 8001a96:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f00d fd53 	bl	800f544 <z_shell_op_cond_next_line>
}
 8001a9e:	b003      	add	sp, #12
 8001aa0:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
 8001aa2:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
 8001aa6:	e7ce      	b.n	8001a46 <history_handle+0x3e>
 8001aa8:	08015310 	.word	0x08015310

08001aac <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
 8001aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
 8001ab0:	2300      	movs	r3, #0
{
 8001ab2:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
 8001ab4:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
 8001ab8:	6883      	ldr	r3, [r0, #8]
{
 8001aba:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
 8001abc:	3342      	adds	r3, #66	; 0x42
 8001abe:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
 8001ac0:	f00d fd9d 	bl	800f5fe <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f00d fd29 	bl	800f51c <z_shell_cursor_in_empty_line>
 8001aca:	b910      	cbnz	r0, 8001ad2 <execute+0x26>
		z_cursor_next_line_move(shell);
 8001acc:	6960      	ldr	r0, [r4, #20]
 8001ace:	f7ff ff95 	bl	80019fc <z_cursor_next_line_move.isra.0>
__ssp_bos_icheck3(memset, void *, int)
 8001ad2:	68a0      	ldr	r0, [r4, #8]
 8001ad4:	2214      	movs	r2, #20
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	3008      	adds	r0, #8
 8001ada:	f012 fea2 	bl	8014822 <memset>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f000 ff6e 	bl	80029c0 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
 8001ae4:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
 8001ae6:	68e0      	ldr	r0, [r4, #12]
 8001ae8:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
 8001aea:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
 8001aec:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
 8001aee:	f00d ff69 	bl	800f9c4 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
 8001af2:	4620      	mov	r0, r4
 8001af4:	f00d ffeb 	bl	800face <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
 8001af8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
 8001afc:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
 8001afe:	46b2      	mov	sl, r6
 8001b00:	af11      	add	r7, sp, #68	; 0x44
 8001b02:	9602      	str	r6, [sp, #8]
 8001b04:	4635      	mov	r5, r6
 8001b06:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
 8001b08:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8001b0c:	2a01      	cmp	r2, #1
 8001b0e:	f000 80d6 	beq.w	8001cbe <execute+0x212>
 8001b12:	2b0b      	cmp	r3, #11
 8001b14:	f240 80ae 	bls.w	8001c74 <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
 8001b18:	9b06      	ldr	r3, [sp, #24]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	f040 80ae 	bne.w	8001c7c <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
 8001b20:	4b89      	ldr	r3, [pc, #548]	; (8001d48 <execute+0x29c>)
 8001b22:	4a8a      	ldr	r2, [pc, #552]	; (8001d4c <execute+0x2a0>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	e014      	b.n	8001b52 <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
 8001b28:	9a03      	ldr	r2, [sp, #12]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	4639      	mov	r1, r7
 8001b2e:	a806      	add	r0, sp, #24
 8001b30:	f000 fe1a 	bl	8002768 <z_shell_make_argv>
		if (argc == 0) {
 8001b34:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
 8001b3a:	4603      	mov	r3, r0
		if (argc == 0) {
 8001b3c:	b929      	cbnz	r1, 8001b4a <execute+0x9e>
			return -ENOEXEC;
 8001b3e:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
 8001b42:	4628      	mov	r0, r5
 8001b44:	b01f      	add	sp, #124	; 0x7c
 8001b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
 8001b4a:	2901      	cmp	r1, #1
 8001b4c:	d105      	bne.n	8001b5a <execute+0xae>
 8001b4e:	b120      	cbz	r0, 8001b5a <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
 8001b50:	4a7f      	ldr	r2, [pc, #508]	; (8001d50 <execute+0x2a4>)
 8001b52:	4620      	mov	r0, r4
 8001b54:	f00d fdfa 	bl	800f74c <z_shell_fprintf>
 8001b58:	e7f1      	b.n	8001b3e <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8001b5a:	9b05      	ldr	r3, [sp, #20]
 8001b5c:	b34b      	cbz	r3, 8001bb2 <execute+0x106>
		    z_shell_help_request(argvp[0])) {
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f001 fa1c 	bl	8002f9c <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 8001b64:	b198      	cbz	r0, 8001b8e <execute+0xe2>
			if (help_entry.help) {
 8001b66:	b166      	cbz	r6, 8001b82 <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
 8001b68:	68a5      	ldr	r5, [r4, #8]
 8001b6a:	960d      	str	r6, [sp, #52]	; 0x34
 8001b6c:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
 8001b6e:	ae0c      	add	r6, sp, #48	; 0x30
 8001b70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b74:	6833      	ldr	r3, [r6, #0]
 8001b76:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7ff ff2f 	bl	80019dc <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
 8001b7e:	2501      	movs	r5, #1
 8001b80:	e7df      	b.n	8001b42 <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
 8001b82:	4a74      	ldr	r2, [pc, #464]	; (8001d54 <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
 8001b84:	2101      	movs	r1, #1
 8001b86:	4620      	mov	r0, r4
 8001b88:	f00d fde0 	bl	800f74c <z_shell_fprintf>
		return false;
 8001b8c:	e7d7      	b.n	8001b3e <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
 8001b8e:	9b05      	ldr	r3, [sp, #20]
 8001b90:	b17b      	cbz	r3, 8001bb2 <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	4629      	mov	r1, r5
 8001b96:	4620      	mov	r0, r4
 8001b98:	f001 fb64 	bl	8003264 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	f000 808e 	beq.w	8001cbe <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
 8001ba2:	2803      	cmp	r0, #3
 8001ba4:	d005      	beq.n	8001bb2 <execute+0x106>
				++cmd_lvl;
 8001ba6:	9b05      	ldr	r3, [sp, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
 8001bac:	2301      	movs	r3, #1
 8001bae:	9302      	str	r3, [sp, #8]
				continue;
 8001bb0:	e7aa      	b.n	8001b08 <execute+0x5c>
		if (has_last_handler == false) {
 8001bb2:	f1ba 0f00 	cmp.w	sl, #0
 8001bb6:	d105      	bne.n	8001bc4 <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
 8001bb8:	6839      	ldr	r1, [r7, #0]
 8001bba:	aa07      	add	r2, sp, #28
 8001bbc:	4658      	mov	r0, fp
 8001bbe:	f00d fc33 	bl	800f428 <z_shell_find_cmd>
 8001bc2:	4605      	mov	r5, r0
		argvp++;
 8001bc4:	3704      	adds	r7, #4
		args_left--;
 8001bc6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
 8001bca:	2d00      	cmp	r5, #0
 8001bcc:	d040      	beq.n	8001c50 <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
 8001bce:	9a02      	ldr	r2, [sp, #8]
 8001bd0:	68eb      	ldr	r3, [r5, #12]
 8001bd2:	b142      	cbz	r2, 8001be6 <execute+0x13a>
 8001bd4:	b313      	cbz	r3, 8001c1c <execute+0x170>
		z_shell_op_cursor_end_move(shell);
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f00d fd11 	bl	800f5fe <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f00d fcb1 	bl	800f544 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
 8001be2:	4a5d      	ldr	r2, [pc, #372]	; (8001d58 <execute+0x2ac>)
 8001be4:	e7ce      	b.n	8001b84 <execute+0xd8>
	if (entry->handler) {
 8001be6:	b1cb      	cbz	r3, 8001c1c <execute+0x170>
		*active_cmd = *entry;
 8001be8:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
 8001bea:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
 8001bee:	46ae      	mov	lr, r5
 8001bf0:	f103 0c08 	add.w	ip, r3, #8
 8001bf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001bf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001bfc:	f8de 3000 	ldr.w	r3, [lr]
 8001c00:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
 8001c04:	68ab      	ldr	r3, [r5, #8]
 8001c06:	b94b      	cbnz	r3, 8001c1c <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
 8001c08:	7c6b      	ldrb	r3, [r5, #17]
 8001c0a:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
 8001c0c:	bf01      	itttt	eq
 8001c0e:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
 8001c12:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
 8001c16:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
 8001c1a:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
 8001c1c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8001c20:	f1bc 0f00 	cmp.w	ip, #0
 8001c24:	d008      	beq.n	8001c38 <execute+0x18c>
		*help_entry = *entry;
 8001c26:	46ae      	mov	lr, r5
 8001c28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001c2c:	ae0c      	add	r6, sp, #48	; 0x30
 8001c2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c30:	f8de 3000 	ldr.w	r3, [lr]
 8001c34:	6033      	str	r3, [r6, #0]
 8001c36:	4666      	mov	r6, ip
 8001c38:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
 8001c3a:	f1b8 0f00 	cmp.w	r8, #0
 8001c3e:	d103      	bne.n	8001c48 <execute+0x19c>
 8001c40:	9b06      	ldr	r3, [sp, #24]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f47f af60 	bne.w	8001b08 <execute+0x5c>
			cmd_lvl++;
 8001c48:	9b05      	ldr	r3, [sp, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	9305      	str	r3, [sp, #20]
 8001c4e:	e75b      	b.n	8001b08 <execute+0x5c>
			if (cmd_lvl == 0 &&
 8001c50:	9b05      	ldr	r3, [sp, #20]
 8001c52:	b963      	cbnz	r3, 8001c6e <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
 8001c54:	68a3      	ldr	r3, [r4, #8]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	b10b      	cbz	r3, 8001c5e <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	b93b      	cbnz	r3, 8001c6e <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <execute+0x2b0>)
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	4a3f      	ldr	r2, [pc, #252]	; (8001d60 <execute+0x2b4>)
 8001c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001c66:	2101      	movs	r1, #1
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f00d fd6f 	bl	800f74c <z_shell_fprintf>
			has_last_handler = true;
 8001c6e:	f04f 0a01 	mov.w	sl, #1
 8001c72:	e7e2      	b.n	8001c3a <execute+0x18e>
		&& args_left > 0) {
 8001c74:	f1b8 0f00 	cmp.w	r8, #0
 8001c78:	f47f af56 	bne.w	8001b28 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
 8001c7c:	9b02      	ldr	r3, [sp, #8]
 8001c7e:	b14b      	cbz	r3, 8001c94 <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f00d ff45 	bl	800fb10 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
 8001c86:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
 8001c88:	230c      	movs	r3, #12
 8001c8a:	3242      	adds	r2, #66	; 0x42
 8001c8c:	a911      	add	r1, sp, #68	; 0x44
 8001c8e:	a805      	add	r0, sp, #20
 8001c90:	f000 fd6a 	bl	8002768 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
 8001c94:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
 8001c96:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
 8001c98:	ab1e      	add	r3, sp, #120	; 0x78
 8001c9a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
 8001ca4:	6943      	ldr	r3, [r0, #20]
 8001ca6:	b973      	cbnz	r3, 8001cc6 <execute+0x21a>
			if (help_entry->help == NULL) {
 8001ca8:	2e00      	cmp	r6, #0
 8001caa:	f43f af48 	beq.w	8001b3e <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
 8001cae:	68c3      	ldr	r3, [r0, #12]
 8001cb0:	42b3      	cmp	r3, r6
 8001cb2:	f43f af61 	beq.w	8001b78 <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
 8001cb6:	960d      	str	r6, [sp, #52]	; 0x34
 8001cb8:	f100 0508 	add.w	r5, r0, #8
 8001cbc:	e757      	b.n	8001b6e <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
 8001cbe:	9b05      	ldr	r3, [sp, #20]
 8001cc0:	2b0b      	cmp	r3, #11
 8001cc2:	d9db      	bls.n	8001c7c <execute+0x1d0>
 8001cc4:	e728      	b.n	8001b18 <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
 8001cc6:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
 8001cc8:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
 8001ccc:	b1b3      	cbz	r3, 8001cfc <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
 8001cce:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
 8001cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd4:	29ff      	cmp	r1, #255	; 0xff
 8001cd6:	bf18      	it	ne
 8001cd8:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
 8001cda:	429d      	cmp	r5, r3
 8001cdc:	d302      	bcc.n	8001ce4 <execute+0x238>
 8001cde:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
 8001ce0:	429d      	cmp	r5, r3
 8001ce2:	d90b      	bls.n	8001cfc <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
 8001ce4:	6883      	ldr	r3, [r0, #8]
 8001ce6:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <execute+0x2b8>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4620      	mov	r0, r4
 8001cec:	f00d fd2e 	bl	800f74c <z_shell_fprintf>
			shell_internal_help_print(shell);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff fe73 	bl	80019dc <shell_internal_help_print>
		return -EINVAL;
 8001cf6:	f06f 0515 	mvn.w	r5, #21
 8001cfa:	e722      	b.n	8001b42 <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
 8001cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d00:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8001d04:	f00d f9fe 	bl	800f104 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 8001d08:	68a0      	ldr	r0, [r4, #8]
 8001d0a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8001d0e:	f00d fa8a 	bl	800f226 <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
 8001d12:	68a3      	ldr	r3, [r4, #8]
 8001d14:	aa11      	add	r2, sp, #68	; 0x44
 8001d16:	4629      	mov	r1, r5
 8001d18:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4798      	blx	r3
 8001d22:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 8001d24:	68a0      	ldr	r0, [r4, #8]
 8001d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d2e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8001d32:	f00d fa2e 	bl	800f192 <k_mutex_lock.constprop.0.isra.0>
 8001d36:	68a0      	ldr	r0, [r4, #8]
 8001d38:	f46f 6100 	mvn.w	r1, #2048	; 0x800
 8001d3c:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8001d40:	f00d f9ef 	bl	800f122 <atomic_and>
	return ret;
 8001d44:	e6fd      	b.n	8001b42 <execute+0x96>
 8001d46:	bf00      	nop
 8001d48:	08016871 	.word	0x08016871
 8001d4c:	08017d13 	.word	0x08017d13
 8001d50:	080167fc 	.word	0x080167fc
 8001d54:	08016810 	.word	0x08016810
 8001d58:	0801682e 	.word	0x0801682e
 8001d5c:	0801685d 	.word	0x0801685d
 8001d60:	08017cdf 	.word	0x08017cdf
 8001d64:	08016895 	.word	0x08016895

08001d68 <state_set.constprop.0>:
	shell->ctx->state = state;
 8001d68:	6883      	ldr	r3, [r0, #8]
 8001d6a:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
 8001d6c:	b510      	push	{r4, lr}
	shell->ctx->state = state;
 8001d6e:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
 8001d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
 8001d72:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
 8001d74:	b9ba      	cbnz	r2, 8001da6 <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8001d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
 8001d7c:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
 8001d80:	04db      	lsls	r3, r3, #19
 8001d82:	d50b      	bpl.n	8001d9c <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
 8001d84:	2103      	movs	r1, #3
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <state_set.constprop.0+0x40>)
 8001d88:	4a08      	ldr	r2, [pc, #32]	; (8001dac <state_set.constprop.0+0x44>)
 8001d8a:	f00d fcdf 	bl	800f74c <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
 8001d8e:	68a0      	ldr	r0, [r4, #8]
 8001d90:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
 8001d94:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8001d98:	f00d f9c3 	bl	800f122 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
 8001d9c:	4620      	mov	r0, r4
}
 8001d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
 8001da2:	f000 bfcd 	b.w	8002d40 <z_shell_print_prompt_and_cmd>
}
 8001da6:	bd10      	pop	{r4, pc}
 8001da8:	080168b0 	.word	0x080168b0
 8001dac:	080165c0 	.word	0x080165c0

08001db0 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
 8001db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db4:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
 8001db6:	6880      	ldr	r0, [r0, #8]
 8001db8:	b0ab      	sub	sp, #172	; 0xac
 8001dba:	2101      	movs	r1, #1
 8001dbc:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8001dc0:	f00d f9a0 	bl	800f104 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
 8001dc4:	68a3      	ldr	r3, [r4, #8]
 8001dc6:	791b      	ldrb	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d117      	bne.n	8001dfc <shell_process+0x4c>
	size_t count = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
 8001dd0:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
 8001dd2:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
 8001dd4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
 8001dd6:	6803      	ldr	r3, [r0, #0]
 8001dd8:	691d      	ldr	r5, [r3, #16]
 8001dda:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
 8001ddc:	b1c6      	cbz	r6, 8001e10 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
 8001dde:	2210      	movs	r2, #16
 8001de0:	a91d      	add	r1, sp, #116	; 0x74
 8001de2:	47a8      	blx	r5
			if (count) {
 8001de4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001de6:	b14a      	cbz	r2, 8001dfc <shell_process+0x4c>
				bypass(shell, buf, count);
 8001de8:	a91d      	add	r1, sp, #116	; 0x74
 8001dea:	4620      	mov	r0, r4
 8001dec:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
 8001dee:	68a3      	ldr	r3, [r4, #8]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ec      	bne.n	8001dd0 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff ffb6 	bl	8001d68 <state_set.constprop.0>
 8001dfc:	68a0      	ldr	r0, [r4, #8]
 8001dfe:	f06f 0101 	mvn.w	r1, #1
 8001e02:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
 8001e06:	b02b      	add	sp, #172	; 0xac
 8001e08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e0c:	f00d b989 	b.w	800f122 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
 8001e10:	2201      	movs	r2, #1
 8001e12:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
 8001e16:	47a8      	blx	r5
		if (count == 0) {
 8001e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0ee      	beq.n	8001dfc <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 8001e1e:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
 8001e22:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
		switch (shell->ctx->receive_state) {
 8001e26:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 8001e28:	2a00      	cmp	r2, #0
 8001e2a:	dbd1      	blt.n	8001dd0 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
 8001e2c:	7942      	ldrb	r2, [r0, #5]
 8001e2e:	2a03      	cmp	r2, #3
 8001e30:	f200 8303 	bhi.w	800243a <shell_process+0x68a>
 8001e34:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001e38:	027b0004 	.word	0x027b0004
 8001e3c:	0301029e 	.word	0x0301029e
	if ((data != '\r') && (data != '\n')) {
 8001e40:	2b0d      	cmp	r3, #13
 8001e42:	d01d      	beq.n	8001e80 <shell_process+0xd0>
 8001e44:	2b0a      	cmp	r3, #10
 8001e46:	d01b      	beq.n	8001e80 <shell_process+0xd0>
	sh->ctx->ctx.flags.last_nl = val;
 8001e48:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
 8001e4c:	f36f 02ca 	bfc	r2, #3, #8
 8001e50:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d04f      	beq.n	8001ef8 <shell_process+0x148>
 8001e58:	d835      	bhi.n	8001ec6 <shell_process+0x116>
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0b8      	beq.n	8001dd0 <shell_process+0x20>
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	f000 81c9 	beq.w	80021f6 <shell_process+0x446>
				if (isprint((int) data)) {
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	497e      	ldr	r1, [pc, #504]	; (8002060 <shell_process+0x2b0>)
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	5c52      	ldrb	r2, [r2, r1]
 8001e6c:	f012 0f97 	tst.w	r2, #151	; 0x97
 8001e70:	f000 81cd 	beq.w	800220e <shell_process+0x45e>
					z_flag_history_exit_set(shell, true);
 8001e74:	2101      	movs	r1, #1
 8001e76:	f00d f9bd 	bl	800f1f4 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
 8001e7a:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 8001e7e:	e0e5      	b.n	800204c <shell_process+0x29c>
	return sh->ctx->ctx.flags.last_nl;
 8001e80:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
 8001e84:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
 8001e88:	b12a      	cbz	r2, 8001e96 <shell_process+0xe6>
 8001e8a:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
 8001e8e:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d1de      	bne.n	8001e54 <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
 8001e96:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
 8001e9a:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
 8001e9c:	f363 02ca 	bfi	r2, r3, #3, #8
 8001ea0:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
 8001ea4:	b959      	cbnz	r1, 8001ebe <shell_process+0x10e>
	z_flag_history_exit_set(shell, false);
 8001ea6:	f00d f9a5 	bl	800f1f4 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
 8001eaa:	68e0      	ldr	r0, [r4, #12]
 8001eac:	f00d fd50 	bl	800f950 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
 8001eb0:	6960      	ldr	r0, [r4, #20]
 8001eb2:	f7ff fda3 	bl	80019fc <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff ff56 	bl	8001d68 <state_set.constprop.0>
		break;
 8001ebc:	e788      	b.n	8001dd0 <shell_process+0x20>
					(void)execute(shell);
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff fdf4 	bl	8001aac <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
 8001ec4:	e7f7      	b.n	8001eb6 <shell_process+0x106>
 8001ec6:	2b1b      	cmp	r3, #27
 8001ec8:	d013      	beq.n	8001ef2 <shell_process+0x142>
 8001eca:	2b7f      	cmp	r3, #127	; 0x7f
 8001ecc:	d1ca      	bne.n	8001e64 <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
 8001ece:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
 8001ed2:	079a      	lsls	r2, r3, #30
 8001ed4:	f57f af7c 	bpl.w	8001dd0 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	f00d f98b 	bl	800f1f4 <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
 8001ede:	68a3      	ldr	r3, [r4, #8]
 8001ee0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
 8001ee4:	071b      	lsls	r3, r3, #28
 8001ee6:	f100 818e 	bmi.w	8002206 <shell_process+0x456>
		z_shell_op_char_delete(shell);
 8001eea:	4620      	mov	r0, r4
 8001eec:	f00d fc6e 	bl	800f7cc <z_shell_op_char_delete>
		break;
 8001ef0:	e76e      	b.n	8001dd0 <shell_process+0x20>
	shell->ctx->receive_state = state;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	7143      	strb	r3, [r0, #5]
}
 8001ef6:	e76b      	b.n	8001dd0 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
 8001ef8:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
 8001efc:	079f      	lsls	r7, r3, #30
 8001efe:	f57f af67 	bpl.w	8001dd0 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
 8001f02:	2101      	movs	r1, #1
 8001f04:	f00d f976 	bl	800f1f4 <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
 8001f08:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
 8001f0a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8001f0c:	2bff      	cmp	r3, #255	; 0xff
 8001f0e:	f43f af5f 	beq.w	8001dd0 <shell_process+0x20>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8001f12:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8001f14:	f100 0142 	add.w	r1, r0, #66	; 0x42
 8001f18:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8001f1c:	f012 fc46 	bl	80147ac <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
 8001f20:	68a2      	ldr	r2, [r4, #8]
 8001f22:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001f24:	4413      	add	r3, r2
 8001f26:	2500      	movs	r5, #0
 8001f28:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
 8001f2c:	a91d      	add	r1, sp, #116	; 0x74
 8001f2e:	230c      	movs	r3, #12
 8001f30:	f502 72a1 	add.w	r2, r2, #322	; 0x142
 8001f34:	a80d      	add	r0, sp, #52	; 0x34
 8001f36:	f000 fc17 	bl	8002768 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
 8001f3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001f3c:	290c      	cmp	r1, #12
 8001f3e:	f63f af47 	bhi.w	8001dd0 <shell_process+0x20>
	(*argv)[*argc] = NULL;
 8001f42:	ab2a      	add	r3, sp, #168	; 0xa8
 8001f44:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001f48:	f843 5c34 	str.w	r5, [r3, #-52]
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 8001f4c:	b151      	cbz	r1, 8001f64 <shell_process+0x1b4>
	int space = isspace((int)shell->ctx->cmd_buff[
 8001f4e:	68a3      	ldr	r3, [r4, #8]
 8001f50:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001f52:	4413      	add	r3, r2
 8001f54:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f58:	4b42      	ldr	r3, [pc, #264]	; (8002064 <shell_process+0x2b4>)
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	071e      	lsls	r6, r3, #28
 8001f5e:	d451      	bmi.n	8002004 <shell_process+0x254>
 8001f60:	2901      	cmp	r1, #1
 8001f62:	d14e      	bne.n	8002002 <shell_process+0x252>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
 8001f64:	2500      	movs	r5, #0
 8001f66:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8001f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f6a:	aa2a      	add	r2, sp, #168	; 0xa8
 8001f6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
 8001f70:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
 8001f72:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
 8001f76:	4650      	mov	r0, sl
 8001f78:	f00d f8f8 	bl	800f16c <z_shell_strlen>
	size_t first = 0;
 8001f7c:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
 8001f7e:	4681      	mov	r9, r0
	*longest = 0U;
 8001f80:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
 8001f82:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
 8001f84:	aa18      	add	r2, sp, #96	; 0x60
 8001f86:	4639      	mov	r1, r7
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f000 fcb9 	bl	8002900 <z_shell_cmd_get>
 8001f8e:	4683      	mov	fp, r0
 8001f90:	2800      	cmp	r0, #0
 8001f92:	d143      	bne.n	800201c <shell_process+0x26c>
	if (cnt == 1) {
 8001f94:	2e01      	cmp	r6, #1
 8001f96:	d167      	bne.n	8002068 <shell_process+0x2b8>
		autocomplete(shell, cmd, argv[arg_idx], first);
 8001f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f9a:	aa2a      	add	r2, sp, #168	; 0xa8
 8001f9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
 8001fa0:	f853 0c34 	ldr.w	r0, [r3, #-52]
 8001fa4:	f00d f8e2 	bl	800f16c <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
 8001fa8:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
 8001faa:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
 8001fac:	3208      	adds	r2, #8
 8001fae:	4641      	mov	r1, r8
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f000 fca5 	bl	8002900 <z_shell_cmd_get>
 8001fb6:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
 8001fb8:	6800      	ldr	r0, [r0, #0]
 8001fba:	f00d f8d7 	bl	800f16c <z_shell_strlen>
	if (cmd_len != arg_len) {
 8001fbe:	4286      	cmp	r6, r0
 8001fc0:	d006      	beq.n	8001fd0 <shell_process+0x220>
		z_shell_op_completion_insert(shell,
 8001fc2:	6829      	ldr	r1, [r5, #0]
 8001fc4:	1b82      	subs	r2, r0, r6
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	4431      	add	r1, r6
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f00d fbfc 	bl	800f7c8 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
 8001fd0:	68a0      	ldr	r0, [r4, #8]
 8001fd2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001fd4:	4403      	add	r3, r0
 8001fd6:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <shell_process+0x2b4>)
 8001fdc:	5cd1      	ldrb	r1, [r2, r3]
 8001fde:	f011 0108 	ands.w	r1, r1, #8
 8001fe2:	d137      	bne.n	8002054 <shell_process+0x2a4>
	return sh->ctx->cfg.flags.insert_mode == 1;
 8001fe4:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
 8001fe8:	07dd      	lsls	r5, r3, #31
 8001fea:	d52e      	bpl.n	800204a <shell_process+0x29a>
			z_flag_insert_mode_set(shell, false);
 8001fec:	f00d f90c 	bl	800f208 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f000 fe70 	bl	8002cd8 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
 8001ff8:	68a0      	ldr	r0, [r4, #8]
 8001ffa:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
 8001ffc:	f00d f904 	bl	800f208 <z_flag_insert_mode_set.isra.0>
				break;
 8002000:	e6e6      	b.n	8001dd0 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
 8002002:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
 8002004:	2000      	movs	r0, #0
 8002006:	ab0e      	add	r3, sp, #56	; 0x38
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	9001      	str	r0, [sp, #4]
 800200c:	ab0c      	add	r3, sp, #48	; 0x30
 800200e:	aa1d      	add	r2, sp, #116	; 0x74
 8002010:	f00d fa35 	bl	800f47e <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
 8002014:	4605      	mov	r5, r0
 8002016:	2800      	cmp	r0, #0
 8002018:	d1a6      	bne.n	8001f68 <shell_process+0x1b8>
 800201a:	e6d9      	b.n	8001dd0 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 800201c:	f8db 0000 	ldr.w	r0, [fp]
 8002020:	464a      	mov	r2, r9
 8002022:	4651      	mov	r1, sl
 8002024:	f012 fc28 	bl	8014878 <strncmp>
		if (is_candidate) {
 8002028:	b968      	cbnz	r0, 8002046 <shell_process+0x296>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 800202a:	f8db 0000 	ldr.w	r0, [fp]
 800202e:	f7fe fa76 	bl	800051e <strlen>
 8002032:	9b04      	ldr	r3, [sp, #16]
 8002034:	4283      	cmp	r3, r0
 8002036:	bf38      	it	cc
 8002038:	4603      	movcc	r3, r0
 800203a:	b29b      	uxth	r3, r3
				*first_idx = idx;
 800203c:	2e00      	cmp	r6, #0
 800203e:	bf08      	it	eq
 8002040:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 8002042:	9304      	str	r3, [sp, #16]
			(*cnt)++;
 8002044:	3601      	adds	r6, #1
		idx++;
 8002046:	3701      	adds	r7, #1
 8002048:	e79c      	b.n	8001f84 <shell_process+0x1d4>
			z_shell_op_char_insert(shell, ' ');
 800204a:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
 800204c:	4620      	mov	r0, r4
 800204e:	f000 fe43 	bl	8002cd8 <z_shell_op_char_insert>
 8002052:	e6bd      	b.n	8001dd0 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
 8002054:	2101      	movs	r1, #1
 8002056:	4620      	mov	r0, r4
 8002058:	f00d faa7 	bl	800f5aa <z_shell_op_cursor_move>
 800205c:	e6b8      	b.n	8001dd0 <shell_process+0x20>
 800205e:	bf00      	nop
 8002060:	08018f47 	.word	0x08018f47
 8002064:	08018f48 	.word	0x08018f48
	} else if (cnt > 1) {
 8002068:	f67f aeb2 	bls.w	8001dd0 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
 800206c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800206e:	aa2a      	add	r2, sp, #168	; 0xa8
 8002070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002074:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
 8002078:	4650      	mov	r0, sl
 800207a:	f00d f877 	bl	800f16c <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 800207e:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
 8002080:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
 8002082:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
 8002086:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 800235c <shell_process+0x5ac>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 800208a:	9605      	str	r6, [sp, #20]
 800208c:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
 8002090:	68a2      	ldr	r2, [r4, #8]
 8002092:	9903      	ldr	r1, [sp, #12]
 8002094:	3208      	adds	r2, #8
 8002096:	4628      	mov	r0, r5
 8002098:	f000 fc32 	bl	8002900 <z_shell_cmd_get>
		idx++;
 800209c:	9b03      	ldr	r3, [sp, #12]
 800209e:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
 80020a0:	4607      	mov	r7, r0
		idx++;
 80020a2:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
 80020a4:	f1ba 0f00 	cmp.w	sl, #0
 80020a8:	d152      	bne.n	8002150 <shell_process+0x3a0>
		tab_item_print(shell, match->syntax, longest);
 80020aa:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
 80020ac:	2f00      	cmp	r7, #0
 80020ae:	d159      	bne.n	8002164 <shell_process+0x3b4>
		shell->ctx->vt100_ctx.printed_cmd = 0;
 80020b0:	68a2      	ldr	r2, [r4, #8]
 80020b2:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
 80020b4:	9b05      	ldr	r3, [sp, #20]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	9305      	str	r3, [sp, #20]
 80020ba:	d1e9      	bne.n	8002090 <shell_process+0x2e0>
	z_cursor_next_line_move(shell);
 80020bc:	6960      	ldr	r0, [r4, #20]
 80020be:	f7ff fc9d 	bl	80019fc <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
 80020c2:	4620      	mov	r0, r4
 80020c4:	f000 fe3c 	bl	8002d40 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
 80020c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020ca:	aa2a      	add	r2, sp, #168	; 0xa8
 80020cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
 80020d0:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
 80020d4:	f853 0c34 	ldr.w	r0, [r3, #-52]
 80020d8:	f00d f848 	bl	800f16c <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 80020dc:	4641      	mov	r1, r8
 80020de:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
 80020e0:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 80020e2:	4628      	mov	r0, r5
 80020e4:	f000 fc0c 	bl	8002900 <z_shell_cmd_get>
 80020e8:	4680      	mov	r8, r0
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 80020ea:	68a0      	ldr	r0, [r4, #8]
 80020ec:	f8d8 1000 	ldr.w	r1, [r8]
 80020f0:	22ff      	movs	r2, #255	; 0xff
 80020f2:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 80020f6:	f012 fbd3 	bl	80148a0 <strncpy>
	*str = match->syntax;
 80020fa:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
 80020fe:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 8002102:	aa18      	add	r2, sp, #96	; 0x60
 8002104:	4649      	mov	r1, r9
 8002106:	4628      	mov	r0, r5
 8002108:	f109 0b01 	add.w	fp, r9, #1
 800210c:	f000 fbf8 	bl	8002900 <z_shell_cmd_get>
		if (match2 == NULL) {
 8002110:	2800      	cmp	r0, #0
 8002112:	d063      	beq.n	80021dc <shell_process+0x42c>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
 8002114:	68a3      	ldr	r3, [r4, #8]
 8002116:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8002118:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
 800211c:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 800211e:	f813 cb01 	ldrb.w	ip, [r3], #1
 8002122:	5c81      	ldrb	r1, [r0, r2]
 8002124:	4561      	cmp	r1, ip
 8002126:	d105      	bne.n	8002134 <shell_process+0x384>
 8002128:	b121      	cbz	r1, 8002134 <shell_process+0x384>
		common++;
 800212a:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 800212c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002130:	428a      	cmp	r2, r1
 8002132:	d1f4      	bne.n	800211e <shell_process+0x36e>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
 8002134:	b10f      	cbz	r7, 800213a <shell_process+0x38a>
 8002136:	42ba      	cmp	r2, r7
 8002138:	db08      	blt.n	800214c <shell_process+0x39c>
			common = (curr_common < common) ? curr_common : common;
 800213a:	4542      	cmp	r2, r8
			--cnt;
 800213c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
 8002140:	bfa8      	it	ge
 8002142:	4642      	movge	r2, r8
	while (cnt > 1) {
 8002144:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
 8002146:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
 800214a:	d047      	beq.n	80021dc <shell_process+0x42c>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 800214c:	46d9      	mov	r9, fp
 800214e:	e7d8      	b.n	8002102 <shell_process+0x352>
		if (str && match->syntax &&
 8002150:	6800      	ldr	r0, [r0, #0]
 8002152:	2800      	cmp	r0, #0
 8002154:	d0a9      	beq.n	80020aa <shell_process+0x2fa>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 8002156:	9a06      	ldr	r2, [sp, #24]
 8002158:	4651      	mov	r1, sl
 800215a:	f012 fb8d 	bl	8014878 <strncmp>
		if (str && match->syntax &&
 800215e:	2800      	cmp	r0, #0
 8002160:	d0a3      	beq.n	80020aa <shell_process+0x2fa>
 8002162:	e795      	b.n	8002090 <shell_process+0x2e0>
	longest_option += z_shell_strlen(tab);
 8002164:	4658      	mov	r0, fp
 8002166:	f00d f801 	bl	800f16c <z_shell_strlen>
 800216a:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 800216c:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
 800216e:	18c2      	adds	r2, r0, r3
 8002170:	b292      	uxth	r2, r2
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8002172:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
 8002174:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
 8002176:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
 8002178:	9308      	str	r3, [sp, #32]
			- z_shell_strlen(tab)) / longest_option;
 800217a:	f00c fff7 	bl	800f16c <z_shell_strlen>
 800217e:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
 8002180:	4638      	mov	r0, r7
 8002182:	f00c fff3 	bl	800f16c <z_shell_strlen>
 8002186:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
 8002188:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
 800218c:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8002190:	68a0      	ldr	r0, [r4, #8]
 8002192:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
 8002196:	1a59      	subs	r1, r3, r1
 8002198:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 800219c:	b292      	uxth	r2, r2
 800219e:	fbbc f1f2 	udiv	r1, ip, r2
 80021a2:	fb02 c211 	mls	r2, r2, r1, ip
 80021a6:	f10c 0e01 	add.w	lr, ip, #1
 80021aa:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
 80021ac:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 80021b0:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
 80021b4:	b95a      	cbnz	r2, 80021ce <shell_process+0x41e>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
 80021b6:	4a6a      	ldr	r2, [pc, #424]	; (8002360 <shell_process+0x5b0>)
 80021b8:	9700      	str	r7, [sp, #0]
 80021ba:	465b      	mov	r3, fp
 80021bc:	2106      	movs	r1, #6
 80021be:	4620      	mov	r0, r4
 80021c0:	f00d fac4 	bl	800f74c <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
 80021c4:	4649      	mov	r1, r9
 80021c6:	4620      	mov	r0, r4
 80021c8:	f000 fc58 	bl	8002a7c <z_shell_op_cursor_horiz_move>
 80021cc:	e772      	b.n	80020b4 <shell_process+0x304>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
 80021ce:	4a65      	ldr	r2, [pc, #404]	; (8002364 <shell_process+0x5b4>)
 80021d0:	463b      	mov	r3, r7
 80021d2:	2106      	movs	r1, #6
 80021d4:	4620      	mov	r0, r4
 80021d6:	f00d fab9 	bl	800f74c <z_shell_fprintf>
 80021da:	e7f3      	b.n	80021c4 <shell_process+0x414>
	if (common) {
 80021dc:	f1b8 0f00 	cmp.w	r8, #0
 80021e0:	f43f adf6 	beq.w	8001dd0 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
 80021e4:	eba8 0207 	sub.w	r2, r8, r7
 80021e8:	b292      	uxth	r2, r2
 80021ea:	eb0a 0107 	add.w	r1, sl, r7
 80021ee:	4620      	mov	r0, r4
 80021f0:	f00d faea 	bl	800f7c8 <z_shell_op_completion_insert>
 80021f4:	e5ec      	b.n	8001dd0 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
 80021f6:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
 80021fa:	0799      	lsls	r1, r3, #30
 80021fc:	f57f ade8 	bpl.w	8001dd0 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
 8002200:	2101      	movs	r1, #1
 8002202:	f00c fff7 	bl	800f1f4 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
 8002206:	4620      	mov	r0, r4
 8002208:	f00d fafb 	bl	800f802 <z_shell_op_char_backspace>
 800220c:	e5e0      	b.n	8001dd0 <shell_process+0x20>
 800220e:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
 8002212:	0797      	lsls	r7, r2, #30
 8002214:	f57f addc 	bpl.w	8001dd0 <shell_process+0x20>
	switch (data) {
 8002218:	3b01      	subs	r3, #1
 800221a:	2b16      	cmp	r3, #22
 800221c:	f63f add8 	bhi.w	8001dd0 <shell_process+0x20>
 8002220:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <shell_process+0x478>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	08002411 	.word	0x08002411
 800222c:	08002285 	.word	0x08002285
 8002230:	0800228d 	.word	0x0800228d
 8002234:	08001eeb 	.word	0x08001eeb
 8002238:	08002405 	.word	0x08002405
 800223c:	080022ab 	.word	0x080022ab
 8002240:	08001dd1 	.word	0x08001dd1
 8002244:	08001dd1 	.word	0x08001dd1
 8002248:	08001dd1 	.word	0x08001dd1
 800224c:	08001dd1 	.word	0x08001dd1
 8002250:	080022b3 	.word	0x080022b3
 8002254:	080022bb 	.word	0x080022bb
 8002258:	08001dd1 	.word	0x08001dd1
 800225c:	080022e5 	.word	0x080022e5
 8002260:	08001dd1 	.word	0x08001dd1
 8002264:	080022ef 	.word	0x080022ef
 8002268:	08001dd1 	.word	0x08001dd1
 800226c:	08001dd1 	.word	0x08001dd1
 8002270:	08001dd1 	.word	0x08001dd1
 8002274:	08001dd1 	.word	0x08001dd1
 8002278:	080022f3 	.word	0x080022f3
 800227c:	08001dd1 	.word	0x08001dd1
 8002280:	0800231f 	.word	0x0800231f
		z_shell_op_left_arrow(shell);
 8002284:	4620      	mov	r0, r4
 8002286:	f00d f9c1 	bl	800f60c <z_shell_op_left_arrow>
		break;
 800228a:	e5a1      	b.n	8001dd0 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
 800228c:	4620      	mov	r0, r4
 800228e:	f00d f9b6 	bl	800f5fe <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
 8002292:	4620      	mov	r0, r4
 8002294:	f00d f942 	bl	800f51c <z_shell_cursor_in_empty_line>
 8002298:	b910      	cbnz	r0, 80022a0 <shell_process+0x4f0>
			z_cursor_next_line_move(shell);
 800229a:	6960      	ldr	r0, [r4, #20]
 800229c:	f7ff fbae 	bl	80019fc <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
 80022a0:	68a0      	ldr	r0, [r4, #8]
 80022a2:	2101      	movs	r1, #1
 80022a4:	f00c ffa6 	bl	800f1f4 <z_flag_history_exit_set.isra.0>
 80022a8:	e605      	b.n	8001eb6 <shell_process+0x106>
		z_shell_op_right_arrow(shell);
 80022aa:	4620      	mov	r0, r4
 80022ac:	f00d f9b6 	bl	800f61c <z_shell_op_right_arrow>
		break;
 80022b0:	e58e      	b.n	8001dd0 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
 80022b2:	4620      	mov	r0, r4
 80022b4:	f00d f9bb 	bl	800f62e <z_shell_op_delete_from_cursor>
		break;
 80022b8:	e58a      	b.n	8001dd0 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 80022ba:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 80022be:	069e      	lsls	r6, r3, #26
 80022c0:	d503      	bpl.n	80022ca <shell_process+0x51a>
 80022c2:	4929      	ldr	r1, [pc, #164]	; (8002368 <shell_process+0x5b8>)
 80022c4:	6960      	ldr	r0, [r4, #20]
 80022c6:	f00c ff57 	bl	800f178 <z_shell_raw_fprintf>
 80022ca:	68a3      	ldr	r3, [r4, #8]
 80022cc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 80022d0:	069d      	lsls	r5, r3, #26
 80022d2:	d503      	bpl.n	80022dc <shell_process+0x52c>
 80022d4:	4925      	ldr	r1, [pc, #148]	; (800236c <shell_process+0x5bc>)
 80022d6:	6960      	ldr	r0, [r4, #20]
 80022d8:	f00c ff4e 	bl	800f178 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
 80022dc:	4620      	mov	r0, r4
 80022de:	f000 fd2f 	bl	8002d40 <z_shell_print_prompt_and_cmd>
		break;
 80022e2:	e575      	b.n	8001dd0 <shell_process+0x20>
		history_handle(shell, false);
 80022e4:	2100      	movs	r1, #0
		history_handle(shell, true);
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7ff fb8e 	bl	8001a08 <history_handle>
		break;
 80022ec:	e570      	b.n	8001dd0 <shell_process+0x20>
		history_handle(shell, true);
 80022ee:	2101      	movs	r1, #1
 80022f0:	e7f9      	b.n	80022e6 <shell_process+0x536>
		z_shell_op_cursor_home_move(shell);
 80022f2:	4620      	mov	r0, r4
 80022f4:	f00d f97d 	bl	800f5f2 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
 80022f8:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 80022fa:	2300      	movs	r3, #0
 80022fc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
 8002300:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
 8002302:	2101      	movs	r1, #1
 8002304:	f00c ff76 	bl	800f1f4 <z_flag_history_exit_set.isra.0>
 8002308:	68a3      	ldr	r3, [r4, #8]
 800230a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
 800230e:	0698      	lsls	r0, r3, #26
 8002310:	f57f ad5e 	bpl.w	8001dd0 <shell_process+0x20>
 8002314:	4916      	ldr	r1, [pc, #88]	; (8002370 <shell_process+0x5c0>)
 8002316:	6960      	ldr	r0, [r4, #20]
 8002318:	f00c ff2e 	bl	800f178 <z_shell_raw_fprintf>
 800231c:	e558      	b.n	8001dd0 <shell_process+0x20>
		z_shell_op_word_remove(shell);
 800231e:	4620      	mov	r0, r4
 8002320:	f000 fc42 	bl	8002ba8 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
 8002324:	68a0      	ldr	r0, [r4, #8]
 8002326:	2101      	movs	r1, #1
 8002328:	f00c ff64 	bl	800f1f4 <z_flag_history_exit_set.isra.0>
		break;
 800232c:	e550      	b.n	8001dd0 <shell_process+0x20>
			if (data == '[') {
 800232e:	2b5b      	cmp	r3, #91	; 0x5b
 8002330:	d101      	bne.n	8002336 <shell_process+0x586>
	shell->ctx->receive_state = state;
 8002332:	2302      	movs	r3, #2
 8002334:	e5de      	b.n	8001ef4 <shell_process+0x144>
	return sh->ctx->cfg.flags.echo == 1;
 8002336:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
 800233a:	0791      	lsls	r1, r2, #30
 800233c:	d506      	bpl.n	800234c <shell_process+0x59c>
	if (data == SHELL_VT100_ASCII_ALT_B) {
 800233e:	2b62      	cmp	r3, #98	; 0x62
 8002340:	d108      	bne.n	8002354 <shell_process+0x5a4>
		z_shell_op_cursor_word_move(shell, -1);
 8002342:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
 8002346:	4620      	mov	r0, r4
 8002348:	f000 fbae 	bl	8002aa8 <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
 800234c:	68a3      	ldr	r3, [r4, #8]
 800234e:	2200      	movs	r2, #0
 8002350:	715a      	strb	r2, [r3, #5]
}
 8002352:	e53d      	b.n	8001dd0 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
 8002354:	2b66      	cmp	r3, #102	; 0x66
 8002356:	d1f9      	bne.n	800234c <shell_process+0x59c>
		z_shell_op_cursor_word_move(shell, 1);
 8002358:	2101      	movs	r1, #1
 800235a:	e7f4      	b.n	8002346 <shell_process+0x596>
 800235c:	080170d7 	.word	0x080170d7
 8002360:	080168f4 	.word	0x080168f4
 8002364:	080165c0 	.word	0x080165c0
 8002368:	08015315 	.word	0x08015315
 800236c:	0801531a 	.word	0x0801531a
 8002370:	08015310 	.word	0x08015310
	shell->ctx->receive_state = state;
 8002374:	2200      	movs	r2, #0
 8002376:	7142      	strb	r2, [r0, #5]
 8002378:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
 800237c:	0792      	lsls	r2, r2, #30
 800237e:	f57f ad27 	bpl.w	8001dd0 <shell_process+0x20>
			switch (data) {
 8002382:	3b31      	subs	r3, #49	; 0x31
 8002384:	2b1b      	cmp	r3, #27
 8002386:	f63f ad23 	bhi.w	8001dd0 <shell_process+0x20>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <shell_process+0x5e0>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	0800240d 	.word	0x0800240d
 8002394:	08002419 	.word	0x08002419
 8002398:	0800242b 	.word	0x0800242b
 800239c:	08002401 	.word	0x08002401
 80023a0:	08001dd1 	.word	0x08001dd1
 80023a4:	08001dd1 	.word	0x08001dd1
 80023a8:	08001dd1 	.word	0x08001dd1
 80023ac:	08001dd1 	.word	0x08001dd1
 80023b0:	08001dd1 	.word	0x08001dd1
 80023b4:	08001dd1 	.word	0x08001dd1
 80023b8:	08001dd1 	.word	0x08001dd1
 80023bc:	08001dd1 	.word	0x08001dd1
 80023c0:	08001dd1 	.word	0x08001dd1
 80023c4:	08001dd1 	.word	0x08001dd1
 80023c8:	08001dd1 	.word	0x08001dd1
 80023cc:	08001dd1 	.word	0x08001dd1
 80023d0:	080022ef 	.word	0x080022ef
 80023d4:	080022e5 	.word	0x080022e5
 80023d8:	080022ab 	.word	0x080022ab
 80023dc:	08002285 	.word	0x08002285
 80023e0:	08001dd1 	.word	0x08001dd1
 80023e4:	08002405 	.word	0x08002405
 80023e8:	08001dd1 	.word	0x08001dd1
 80023ec:	08002411 	.word	0x08002411
 80023f0:	08001dd1 	.word	0x08001dd1
 80023f4:	08001dd1 	.word	0x08001dd1
 80023f8:	08001dd1 	.word	0x08001dd1
 80023fc:	0800241d 	.word	0x0800241d
	shell->ctx->receive_state = state;
 8002400:	2303      	movs	r3, #3
 8002402:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
 8002404:	4620      	mov	r0, r4
 8002406:	f00d f8fa 	bl	800f5fe <z_shell_op_cursor_end_move>
		break;
 800240a:	e4e1      	b.n	8001dd0 <shell_process+0x20>
	shell->ctx->receive_state = state;
 800240c:	2303      	movs	r3, #3
 800240e:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
 8002410:	4620      	mov	r0, r4
 8002412:	f00d f8ee 	bl	800f5f2 <z_shell_op_cursor_home_move>
		break;
 8002416:	e4db      	b.n	8001dd0 <shell_process+0x20>
	shell->ctx->receive_state = state;
 8002418:	2303      	movs	r3, #3
 800241a:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
 800241c:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
 8002420:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
 8002424:	f081 0101 	eor.w	r1, r1, #1
 8002428:	e5e8      	b.n	8001ffc <shell_process+0x24c>
	shell->ctx->receive_state = state;
 800242a:	2303      	movs	r3, #3
 800242c:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.echo == 1;
 800242e:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
 8002432:	079b      	lsls	r3, r3, #30
 8002434:	f57f accc 	bpl.w	8001dd0 <shell_process+0x20>
 8002438:	e557      	b.n	8001eea <shell_process+0x13a>
	shell->ctx->receive_state = state;
 800243a:	2300      	movs	r3, #0
 800243c:	e55a      	b.n	8001ef4 <shell_process+0x144>
 800243e:	bf00      	nop

08002440 <shell_init>:
{
 8002440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002444:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
 8002446:	6880      	ldr	r0, [r0, #8]
{
 8002448:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
 800244a:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	4615      	mov	r5, r2
 8002452:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
 8002454:	2900      	cmp	r1, #0
 8002456:	d161      	bne.n	800251c <shell_init+0xdc>
__ssp_bos_icheck3(memset, void *, int)
 8002458:	f44f 7244 	mov.w	r2, #784	; 0x310
 800245c:	f012 f9e1 	bl	8014822 <memset>
	sh->ctx->prompt = sh->default_prompt;
 8002460:	68a3      	ldr	r3, [r4, #8]
 8002462:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
 8002464:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
 8002466:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
 8002468:	f00d fb17 	bl	800fa9a <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
 800246c:	68a0      	ldr	r0, [r4, #8]
 800246e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
 8002472:	f011 fd2b 	bl	8013ecc <z_impl_k_mutex_init>
 8002476:	f44f 792a 	mov.w	r9, #680	; 0x2a8
 800247a:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
 800247e:	68a0      	ldr	r0, [r4, #8]
 8002480:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
 8002482:	f012 f96b 	bl	801475c <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
 8002486:	68a0      	ldr	r0, [r4, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	1983      	adds	r3, r0, r6
 800248c:	2101      	movs	r1, #1
 800248e:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8002490:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
 8002492:	f012 f946 	bl	8014722 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8002496:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
 800249a:	f109 0914 	add.w	r9, r9, #20
 800249e:	d1ee      	bne.n	800247e <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
 80024a0:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
 80024a2:	68a0      	ldr	r0, [r4, #8]
 80024a4:	2600      	movs	r6, #0
 80024a6:	2102      	movs	r1, #2
 80024a8:	601e      	str	r6, [r3, #0]
 80024aa:	f500 7019 	add.w	r0, r0, #612	; 0x264
 80024ae:	f00c fe29 	bl	800f104 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
 80024b2:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
 80024b4:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <shell_init+0xe4>)
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	f00c fe57 	bl	800f16c <z_shell_strlen>
 80024be:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
 80024c2:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
 80024c6:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
 80024c8:	f366 0582 	bfi	r5, r6, #2, #1
 80024cc:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
 80024d0:	6803      	ldr	r3, [r0, #0]
 80024d2:	4641      	mov	r1, r8
 80024d4:	681d      	ldr	r5, [r3, #0]
 80024d6:	4623      	mov	r3, r4
 80024d8:	47a8      	blx	r5
	if (ret == 0) {
 80024da:	4605      	mov	r5, r0
 80024dc:	b9d0      	cbnz	r0, 8002514 <shell_init+0xd4>
	shell->ctx->state = state;
 80024de:	68a3      	ldr	r3, [r4, #8]
 80024e0:	2201      	movs	r2, #1
 80024e2:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
 80024e4:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2300      	movs	r3, #0
 80024ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80024f0:	230e      	movs	r3, #14
 80024f2:	9303      	str	r3, [sp, #12]
 80024f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80024f6:	9504      	str	r5, [sp, #16]
 80024f8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80024fc:	9400      	str	r4, [sp, #0]
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <shell_init+0xec>)
 8002500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002504:	f009 fee4 	bl	800c2d0 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
 8002508:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
 800250a:	6a21      	ldr	r1, [r4, #32]
	shell->ctx->tid = tid;
 800250c:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
 8002510:	f009 fe2e 	bl	800c170 <z_impl_k_thread_name_set>
}
 8002514:	4628      	mov	r0, r5
 8002516:	b009      	add	sp, #36	; 0x24
 8002518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
 800251c:	f06f 0577 	mvn.w	r5, #119	; 0x77
 8002520:	e7f8      	b.n	8002514 <shell_init+0xd4>
 8002522:	bf00      	nop
 8002524:	00500018 	.word	0x00500018
 8002528:	0800f197 	.word	0x0800f197
 800252c:	0800257d 	.word	0x0800257d

08002530 <shell_start>:
{
 8002530:	b510      	push	{r4, lr}
 8002532:	4604      	mov	r4, r0
	return shell->ctx->state;
 8002534:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
 8002536:	7903      	ldrb	r3, [r0, #4]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d119      	bne.n	8002570 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 800253c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002544:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8002548:	f00c fe23 	bl	800f192 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
 800254c:	2108      	movs	r1, #8
 800254e:	4620      	mov	r0, r4
 8002550:	f000 faec 	bl	8002b2c <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
 8002554:	4908      	ldr	r1, [pc, #32]	; (8002578 <shell_start+0x48>)
 8002556:	6960      	ldr	r0, [r4, #20]
 8002558:	f00c fe0e 	bl	800f178 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff fc03 	bl	8001d68 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
 8002562:	68a0      	ldr	r0, [r4, #8]
 8002564:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8002568:	f00c fe5d 	bl	800f226 <k_mutex_unlock.isra.0>
	return 0;
 800256c:	2000      	movs	r0, #0
}
 800256e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8002570:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002574:	e7fb      	b.n	800256e <shell_start+0x3e>
 8002576:	bf00      	nop
 8002578:	080164a0 	.word	0x080164a0

0800257c <shell_thread>:
{
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
 8002580:	6840      	ldr	r0, [r0, #4]
 8002582:	6803      	ldr	r3, [r0, #0]
 8002584:	2100      	movs	r1, #0
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4798      	blx	r3
	if (err != 0) {
 800258a:	2800      	cmp	r0, #0
 800258c:	d13f      	bne.n	800260e <shell_thread+0x92>
	err = shell_start(shell);
 800258e:	4620      	mov	r0, r4
 8002590:	f7ff ffce 	bl	8002530 <shell_start>
	if (err != 0) {
 8002594:	2800      	cmp	r0, #0
 8002596:	d13a      	bne.n	800260e <shell_thread+0x92>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 8002598:	4f1d      	ldr	r7, [pc, #116]	; (8002610 <shell_thread+0x94>)
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 800259a:	4e1e      	ldr	r6, [pc, #120]	; (8002614 <shell_thread+0x98>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
 800259c:	68a0      	ldr	r0, [r4, #8]
 800259e:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
 80025a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025aa:	2103      	movs	r1, #3
 80025ac:	f00a ff20 	bl	800d3f0 <z_impl_k_poll>
		if (err != 0) {
 80025b0:	4605      	mov	r5, r0
 80025b2:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025bc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
 80025c0:	b175      	cbz	r5, 80025e0 <shell_thread+0x64>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 80025c2:	f00c fde6 	bl	800f192 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
 80025c6:	4620      	mov	r0, r4
 80025c8:	462b      	mov	r3, r5
 80025ca:	4a13      	ldr	r2, [pc, #76]	; (8002618 <shell_thread+0x9c>)
 80025cc:	2101      	movs	r1, #1
 80025ce:	f00d f8bd 	bl	800f74c <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
 80025d2:	68a0      	ldr	r0, [r4, #8]
}
 80025d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
 80025d8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 80025dc:	f00c be23 	b.w	800f226 <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 80025e0:	f00c fdd7 	bl	800f192 <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
 80025e4:	6860      	ldr	r0, [r4, #4]
 80025e6:	6803      	ldr	r3, [r0, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	b103      	cbz	r3, 80025ee <shell_thread+0x72>
			shell->iface->api->update(shell->iface);
 80025ec:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
 80025ee:	463a      	mov	r2, r7
 80025f0:	4620      	mov	r0, r4
 80025f2:	2102      	movs	r1, #2
 80025f4:	f00c fda4 	bl	800f140 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
 80025f8:	4620      	mov	r0, r4
 80025fa:	4632      	mov	r2, r6
 80025fc:	2100      	movs	r1, #0
 80025fe:	f00c fd9f 	bl	800f140 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
 8002602:	68a0      	ldr	r0, [r4, #8]
 8002604:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8002608:	f00c fe0d 	bl	800f226 <k_mutex_unlock.isra.0>
 800260c:	e7c6      	b.n	800259c <shell_thread+0x20>
}
 800260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002610:	0800f1ab 	.word	0x0800f1ab
 8002614:	08001db1 	.word	0x08001db1
 8002618:	080168fa 	.word	0x080168fa

0800261c <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
 800261c:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
 800261e:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <cmd_help+0x38>)
{
 8002620:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
 8002622:	2108      	movs	r1, #8
 8002624:	f00c fe3e 	bl	800f2a4 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
 8002628:	4620      	mov	r0, r4
 800262a:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <cmd_help+0x3c>)
 800262c:	2108      	movs	r1, #8
 800262e:	f00c fe39 	bl	800f2a4 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
 8002632:	4620      	mov	r0, r4
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <cmd_help+0x40>)
 8002636:	2108      	movs	r1, #8
 8002638:	f00c fe34 	bl	800f2a4 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
 800263c:	4620      	mov	r0, r4
 800263e:	4a08      	ldr	r2, [pc, #32]	; (8002660 <cmd_help+0x44>)
 8002640:	2108      	movs	r1, #8
 8002642:	f00c fe2f 	bl	800f2a4 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
 8002646:	4620      	mov	r0, r4
 8002648:	4a06      	ldr	r2, [pc, #24]	; (8002664 <cmd_help+0x48>)
 800264a:	2100      	movs	r1, #0
 800264c:	f000 fc0a 	bl	8002e64 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
 8002650:	2000      	movs	r0, #0
 8002652:	bd10      	pop	{r4, pc}
 8002654:	08016911 	.word	0x08016911
 8002658:	0801694f 	.word	0x0801694f
 800265c:	080169ae 	.word	0x080169ae
 8002660:	08016a02 	.word	0x08016a02
 8002664:	08016a9c 	.word	0x08016a9c

08002668 <shell_hexdump_line>:
{
 8002668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800266c:	4616      	mov	r6, r2
 800266e:	461f      	mov	r7, r3
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 8002670:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <shell_hexdump_line+0xb8>)
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 8002672:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002724 <shell_hexdump_line+0xbc>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
 8002676:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002728 <shell_hexdump_line+0xc0>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 800267a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800272c <shell_hexdump_line+0xc4>
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 800267e:	460b      	mov	r3, r1
 8002680:	2108      	movs	r1, #8
{
 8002682:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
 8002684:	f00c fe0e 	bl	800f2a4 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8002688:	2500      	movs	r5, #0
		if (i < len) {
 800268a:	42af      	cmp	r7, r5
 800268c:	d934      	bls.n	80026f8 <shell_hexdump_line+0x90>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
 800268e:	5d73      	ldrb	r3, [r6, r5]
 8002690:	464a      	mov	r2, r9
 8002692:	2108      	movs	r1, #8
 8002694:	4620      	mov	r0, r4
 8002696:	f00c fe05 	bl	800f2a4 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 800269a:	3501      	adds	r5, #1
 800269c:	2d10      	cmp	r5, #16
 800269e:	d123      	bne.n	80026e8 <shell_hexdump_line+0x80>
	shell_fprintf(shell, SHELL_NORMAL, "|");
 80026a0:	4a23      	ldr	r2, [pc, #140]	; (8002730 <shell_hexdump_line+0xc8>)
			shell_fprintf(shell, SHELL_NORMAL, " ");
 80026a2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800272c <shell_hexdump_line+0xc4>
				      isprint((int)c) ? c : '.');
 80026a6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002734 <shell_hexdump_line+0xcc>
			shell_fprintf(shell, SHELL_NORMAL, "%c",
 80026aa:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8002738 <shell_hexdump_line+0xd0>
	shell_fprintf(shell, SHELL_NORMAL, "|");
 80026ae:	2108      	movs	r1, #8
 80026b0:	4620      	mov	r0, r4
 80026b2:	f00c fdf7 	bl	800f2a4 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 80026b6:	2500      	movs	r5, #0
		if (i < len) {
 80026b8:	42bd      	cmp	r5, r7
 80026ba:	d22b      	bcs.n	8002714 <shell_hexdump_line+0xac>
			char c = data[i];
 80026bc:	5d73      	ldrb	r3, [r6, r5]
			shell_fprintf(shell, SHELL_NORMAL, "%c",
 80026be:	f813 2009 	ldrb.w	r2, [r3, r9]
 80026c2:	f012 0f97 	tst.w	r2, #151	; 0x97
 80026c6:	bf08      	it	eq
 80026c8:	232e      	moveq	r3, #46	; 0x2e
 80026ca:	4652      	mov	r2, sl
 80026cc:	2108      	movs	r1, #8
 80026ce:	4620      	mov	r0, r4
 80026d0:	f00c fde8 	bl	800f2a4 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 80026d4:	3501      	adds	r5, #1
 80026d6:	2d10      	cmp	r5, #16
 80026d8:	d114      	bne.n	8002704 <shell_hexdump_line+0x9c>
	shell_print(shell, "|");
 80026da:	4620      	mov	r0, r4
 80026dc:	4a17      	ldr	r2, [pc, #92]	; (800273c <shell_hexdump_line+0xd4>)
}
 80026de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(shell, "|");
 80026e2:	2108      	movs	r1, #8
 80026e4:	f00c bdde 	b.w	800f2a4 <shell_fprintf>
		if (i > 0 && !(i % 8)) {
 80026e8:	076a      	lsls	r2, r5, #29
 80026ea:	d1ce      	bne.n	800268a <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 80026ec:	4652      	mov	r2, sl
 80026ee:	2108      	movs	r1, #8
 80026f0:	4620      	mov	r0, r4
 80026f2:	f00c fdd7 	bl	800f2a4 <shell_fprintf>
 80026f6:	e7c8      	b.n	800268a <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
 80026f8:	4642      	mov	r2, r8
 80026fa:	2108      	movs	r1, #8
 80026fc:	4620      	mov	r0, r4
 80026fe:	f00c fdd1 	bl	800f2a4 <shell_fprintf>
 8002702:	e7ca      	b.n	800269a <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
 8002704:	076b      	lsls	r3, r5, #29
 8002706:	d1d7      	bne.n	80026b8 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8002708:	4642      	mov	r2, r8
 800270a:	2108      	movs	r1, #8
 800270c:	4620      	mov	r0, r4
 800270e:	f00c fdc9 	bl	800f2a4 <shell_fprintf>
 8002712:	e7d1      	b.n	80026b8 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
 8002714:	4642      	mov	r2, r8
 8002716:	2108      	movs	r1, #8
 8002718:	4620      	mov	r0, r4
 800271a:	f00c fdc3 	bl	800f2a4 <shell_fprintf>
 800271e:	e7d9      	b.n	80026d4 <shell_hexdump_line+0x6c>
 8002720:	08016ab2 	.word	0x08016ab2
 8002724:	080170d6 	.word	0x080170d6
 8002728:	08016ab9 	.word	0x08016ab9
 800272c:	080170d8 	.word	0x080170d8
 8002730:	08016abf 	.word	0x08016abf
 8002734:	08018f48 	.word	0x08018f48
 8002738:	08016ae1 	.word	0x08016ae1
 800273c:	08016ac1 	.word	0x08016ac1

08002740 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
 8002740:	b510      	push	{r4, lr}
 8002742:	4604      	mov	r4, r0
 8002744:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
 8002746:	460a      	mov	r2, r1
 8002748:	4601      	mov	r1, r0
 800274a:	4806      	ldr	r0, [pc, #24]	; (8002764 <z_shell_fprintf_fmt+0x24>)
 800274c:	f7fe f9d6 	bl	8000afc <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
 8002750:	6923      	ldr	r3, [r4, #16]
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	b123      	cbz	r3, 8002760 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 8002756:	4620      	mov	r0, r4
	}
}
 8002758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
 800275c:	f00c bddf 	b.w	800f31e <z_shell_fprintf_buffer_flush>
}
 8002760:	bd10      	pop	{r4, pc}
 8002762:	bf00      	nop
 8002764:	0800f337 	.word	0x0800f337

08002768 <z_shell_make_argv>:
}


char z_shell_make_argv(size_t *argc, const char **argv, char *cmd,
		       uint8_t max_argc)
{
 8002768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	461f      	mov	r7, r3
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
 800276e:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80028fc <z_shell_make_argv+0x194>
	*argc = 0;
 8002772:	2300      	movs	r3, #0
{
 8002774:	4605      	mov	r5, r0
 8002776:	460e      	mov	r6, r1
 8002778:	4614      	mov	r4, r2
	*argc = 0;
 800277a:	6003      	str	r3, [r0, #0]
	char quote = 0;
 800277c:	469a      	mov	sl, r3
	char quote = 0;
 800277e:	4699      	mov	r9, r3
		c = *cmd;
 8002780:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80b6 	beq.w	80028f4 <z_shell_make_argv+0x18c>
		if (isspace((int) c)) {
 8002788:	f813 3008 	ldrb.w	r3, [r3, r8]
 800278c:	f013 0308 	ands.w	r3, r3, #8
 8002790:	d002      	beq.n	8002798 <z_shell_make_argv+0x30>
			*cmd++ = '\0';
 8002792:	f804 9b01 	strb.w	r9, [r4], #1
			continue;
 8002796:	e7f3      	b.n	8002780 <z_shell_make_argv+0x18>
		}

		argv[(*argc)++] = cmd;
 8002798:	6829      	ldr	r1, [r5, #0]
 800279a:	1c4a      	adds	r2, r1, #1
		if (*argc == max_argc) {
 800279c:	42ba      	cmp	r2, r7
		argv[(*argc)++] = cmd;
 800279e:	602a      	str	r2, [r5, #0]
 80027a0:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
		if (*argc == max_argc) {
 80027a4:	f000 80a6 	beq.w	80028f4 <z_shell_make_argv+0x18c>
	char quote = 0;
 80027a8:	469a      	mov	sl, r3
		c = *cmd;
 80027aa:	f894 b000 	ldrb.w	fp, [r4]
		if (c == '\0') {
 80027ae:	f1bb 0f00 	cmp.w	fp, #0
 80027b2:	d0e5      	beq.n	8002780 <z_shell_make_argv+0x18>
		if (!quote) {
 80027b4:	f1ba 0f00 	cmp.w	sl, #0
 80027b8:	f040 8088 	bne.w	80028cc <z_shell_make_argv+0x164>
			switch (c) {
 80027bc:	f1bb 0f27 	cmp.w	fp, #39	; 0x27
 80027c0:	d006      	beq.n	80027d0 <z_shell_make_argv+0x68>
 80027c2:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
 80027c6:	f000 8089 	beq.w	80028dc <z_shell_make_argv+0x174>
 80027ca:	f1bb 0f22 	cmp.w	fp, #34	; 0x22
 80027ce:	d176      	bne.n	80028be <z_shell_make_argv+0x156>
				memmove(cmd, cmd + 1,
 80027d0:	4620      	mov	r0, r4
 80027d2:	f00c fdcc 	bl	800f36e <z_shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
 80027d6:	1c61      	adds	r1, r4, #1
 80027d8:	4602      	mov	r2, r0
 80027da:	4620      	mov	r0, r4
 80027dc:	f012 f807 	bl	80147ee <memmove>
				continue;
 80027e0:	46da      	mov	sl, fp
 80027e2:	e7e2      	b.n	80027aa <z_shell_make_argv+0x42>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
 80027e4:	4620      	mov	r0, r4
 80027e6:	f00c fdc2 	bl	800f36e <z_shell_strlen>
 80027ea:	1c61      	adds	r1, r4, #1
 80027ec:	4602      	mov	r2, r0
 80027ee:	4620      	mov	r0, r4
 80027f0:	f011 fffd 	bl	80147ee <memmove>
			quote = 0;
 80027f4:	f04f 0a00 	mov.w	sl, #0
			continue;
 80027f8:	e7d7      	b.n	80027aa <z_shell_make_argv+0x42>
			if (t == '0') {
 80027fa:	2830      	cmp	r0, #48	; 0x30
 80027fc:	d127      	bne.n	800284e <z_shell_make_argv+0xe6>
				uint8_t v = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	2202      	movs	r2, #2
					t = *(cmd + i);
 8002802:	5ca0      	ldrb	r0, [r4, r2]
					if (t >= '0' && t <= '7') {
 8002804:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8002808:	b2c9      	uxtb	r1, r1
 800280a:	2907      	cmp	r1, #7
 800280c:	fa5f fb82 	uxtb.w	fp, r2
 8002810:	d81a      	bhi.n	8002848 <z_shell_make_argv+0xe0>
				for (i = 2U; i < (2 + 3); i++) {
 8002812:	3201      	adds	r2, #1
						v = (v << 3) | (t - '0');
 8002814:	ea41 03c3 	orr.w	r3, r1, r3, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
 8002818:	2a05      	cmp	r2, #5
						v = (v << 3) | (t - '0');
 800281a:	b2db      	uxtb	r3, r3
				for (i = 2U; i < (2 + 3); i++) {
 800281c:	d1f1      	bne.n	8002802 <z_shell_make_argv+0x9a>
 800281e:	4693      	mov	fp, r2
					memmove(cmd, cmd + (i - 1),
 8002820:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 8002824:	4421      	add	r1, r4
 8002826:	4620      	mov	r0, r4
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	9100      	str	r1, [sp, #0]
 800282c:	f00c fd9f 	bl	800f36e <z_shell_strlen>
 8002830:	f1ab 0b02 	sub.w	fp, fp, #2
 8002834:	eba0 020b 	sub.w	r2, r0, fp
 8002838:	9900      	ldr	r1, [sp, #0]
 800283a:	4620      	mov	r0, r4
 800283c:	f011 ffd7 	bl	80147ee <memmove>
					*cmd++ = v;
 8002840:	9b01      	ldr	r3, [sp, #4]
 8002842:	f804 3b01 	strb.w	r3, [r4], #1
					continue;
 8002846:	e7b0      	b.n	80027aa <z_shell_make_argv+0x42>
				if (i > 2) {
 8002848:	f1bb 0f02 	cmp.w	fp, #2
 800284c:	d1e8      	bne.n	8002820 <z_shell_make_argv+0xb8>
			if (t == 'x') {
 800284e:	2878      	cmp	r0, #120	; 0x78
 8002850:	d13a      	bne.n	80028c8 <z_shell_make_argv+0x160>
				uint8_t v = 0U;
 8002852:	f04f 0b00 	mov.w	fp, #0
 8002856:	2102      	movs	r1, #2
					t = *(cmd + i);
 8002858:	5c62      	ldrb	r2, [r4, r1]
					if (t >= '0' && t <= '9') {
 800285a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b09      	cmp	r3, #9
 8002862:	b2c8      	uxtb	r0, r1
 8002864:	d819      	bhi.n	800289a <z_shell_make_argv+0x132>
						v = (v << 4) | (t - '0');
 8002866:	ea43 120b 	orr.w	r2, r3, fp, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
 800286a:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
 800286c:	fa5f fb82 	uxtb.w	fp, r2
				for (i = 2U; i < (2 + 2); i++) {
 8002870:	d111      	bne.n	8002896 <z_shell_make_argv+0x12e>
 8002872:	2304      	movs	r3, #4
					memmove(cmd, cmd + (i - 1),
 8002874:	1e59      	subs	r1, r3, #1
 8002876:	4421      	add	r1, r4
 8002878:	4620      	mov	r0, r4
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	9100      	str	r1, [sp, #0]
 800287e:	f00c fd76 	bl	800f36e <z_shell_strlen>
 8002882:	9b01      	ldr	r3, [sp, #4]
 8002884:	9900      	ldr	r1, [sp, #0]
 8002886:	3b02      	subs	r3, #2
 8002888:	1ac2      	subs	r2, r0, r3
 800288a:	4620      	mov	r0, r4
 800288c:	f011 ffaf 	bl	80147ee <memmove>
					*cmd++ = v;
 8002890:	f804 bb01 	strb.w	fp, [r4], #1
					continue;
 8002894:	e789      	b.n	80027aa <z_shell_make_argv+0x42>
 8002896:	2103      	movs	r1, #3
 8002898:	e7de      	b.n	8002858 <z_shell_make_argv+0xf0>
					} else if ((t >= 'a') &&
 800289a:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d803      	bhi.n	80028aa <z_shell_make_argv+0x142>
						v = (v << 4) | (t - 'a' + 10);
 80028a2:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
 80028a4:	ea42 120b 	orr.w	r2, r2, fp, lsl #4
 80028a8:	e7df      	b.n	800286a <z_shell_make_argv+0x102>
					} else if ((t >= 'A') && (t <= 'F')) {
 80028aa:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d801      	bhi.n	80028b6 <z_shell_make_argv+0x14e>
						v = (v << 4) | (t - 'A' + 10);
 80028b2:	3a37      	subs	r2, #55	; 0x37
 80028b4:	e7f6      	b.n	80028a4 <z_shell_make_argv+0x13c>
				if (i > 2) {
 80028b6:	2802      	cmp	r0, #2
 80028b8:	d006      	beq.n	80028c8 <z_shell_make_argv+0x160>
 80028ba:	2303      	movs	r3, #3
 80028bc:	e7da      	b.n	8002874 <z_shell_make_argv+0x10c>
		if (!quote && isspace((int) c)) {
 80028be:	f818 300b 	ldrb.w	r3, [r8, fp]
 80028c2:	071b      	lsls	r3, r3, #28
 80028c4:	f53f af5c 	bmi.w	8002780 <z_shell_make_argv+0x18>
		cmd += 1;
 80028c8:	3401      	adds	r4, #1
 80028ca:	e76e      	b.n	80027aa <z_shell_make_argv+0x42>
		if (quote == c) {
 80028cc:	45d3      	cmp	fp, sl
 80028ce:	d089      	beq.n	80027e4 <z_shell_make_argv+0x7c>
		if (quote && c == '\\') {
 80028d0:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
 80028d4:	d1f8      	bne.n	80028c8 <z_shell_make_argv+0x160>
			char t = *(cmd + 1);
 80028d6:	7860      	ldrb	r0, [r4, #1]
			if (t == quote) {
 80028d8:	4582      	cmp	sl, r0
 80028da:	d18e      	bne.n	80027fa <z_shell_make_argv+0x92>
				memmove(cmd, cmd + 1,
 80028dc:	4620      	mov	r0, r4
 80028de:	f00c fd46 	bl	800f36e <z_shell_strlen>
 80028e2:	f104 0b01 	add.w	fp, r4, #1
 80028e6:	4602      	mov	r2, r0
 80028e8:	4659      	mov	r1, fp
 80028ea:	4620      	mov	r0, r4
 80028ec:	f011 ff7f 	bl	80147ee <memmove>
				continue;
 80028f0:	465c      	mov	r4, fp
 80028f2:	e75a      	b.n	80027aa <z_shell_make_argv+0x42>
		}
		quote = make_argv(&cmd, c);
	} while (true);

	return quote;
}
 80028f4:	4650      	mov	r0, sl
 80028f6:	b003      	add	sp, #12
 80028f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028fc:	08018f48 	.word	0x08018f48

08002900 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
 8002900:	b510      	push	{r4, lr}
 8002902:	460b      	mov	r3, r1
 8002904:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
 8002906:	b950      	cbnz	r0, 800291e <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
 8002908:	490e      	ldr	r1, [pc, #56]	; (8002944 <z_shell_cmd_get+0x44>)
 800290a:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <z_shell_cmd_get+0x48>)
 800290c:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
 800290e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8002912:	d20f      	bcs.n	8002934 <z_shell_cmd_get+0x34>
 8002914:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002918:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
 800291a:	4620      	mov	r0, r4
 800291c:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
 800291e:	6881      	ldr	r1, [r0, #8]
 8002920:	b141      	cbz	r1, 8002934 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
 8002922:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
 8002924:	7809      	ldrb	r1, [r1, #0]
 8002926:	b139      	cbz	r1, 8002938 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
 8002928:	4618      	mov	r0, r3
 800292a:	4621      	mov	r1, r4
 800292c:	4790      	blx	r2
			if (dloc->syntax != NULL) {
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f2      	bne.n	800291a <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
 8002934:	2400      	movs	r4, #0
 8002936:	e7f0      	b.n	800291a <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
 8002938:	2014      	movs	r0, #20
 800293a:	4343      	muls	r3, r0
 800293c:	18d4      	adds	r4, r2, r3
 800293e:	58d3      	ldr	r3, [r2, r3]
 8002940:	e7f6      	b.n	8002930 <z_shell_cmd_get+0x30>
 8002942:	bf00      	nop
 8002944:	080151ec 	.word	0x080151ec
 8002948:	0801523c 	.word	0x0801523c

0800294c <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
 800294c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002950:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
 8002952:	f00c fd0c 	bl	800f36e <z_shell_strlen>
 8002956:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
 8002958:	bb57      	cbnz	r7, 80029b0 <z_shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
 800295a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
 800295e:	b14c      	cbz	r4, 8002974 <z_shell_spaces_trim+0x28>
					memmove(&str[i + 1],
 8002960:	b292      	uxth	r2, r2
 8002962:	1ab2      	subs	r2, r6, r2
 8002964:	3001      	adds	r0, #1
 8002966:	3201      	adds	r2, #1
 8002968:	4438      	add	r0, r7
 800296a:	f011 ff40 	bl	80147ee <memmove>
					len -= shift;
 800296e:	1b36      	subs	r6, r6, r4
 8002970:	b2b6      	uxth	r6, r6
					shift = 0U;
 8002972:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
 8002974:	1e73      	subs	r3, r6, #1
 8002976:	429d      	cmp	r5, r3
 8002978:	daef      	bge.n	800295a <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
 800297a:	4628      	mov	r0, r5
			for (uint16_t j = i + 1; j < len; j++) {
 800297c:	3501      	adds	r5, #1
		if (isspace((int)str[i])) {
 800297e:	5c3b      	ldrb	r3, [r7, r0]
 8002980:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002984:	071b      	lsls	r3, r3, #28
			for (uint16_t j = i + 1; j < len; j++) {
 8002986:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
 8002988:	d5f4      	bpl.n	8002974 <z_shell_spaces_trim+0x28>
 800298a:	462a      	mov	r2, r5
			for (uint16_t j = i + 1; j < len; j++) {
 800298c:	b293      	uxth	r3, r2
 800298e:	429e      	cmp	r6, r3
 8002990:	d9f0      	bls.n	8002974 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
 8002992:	f817 c002 	ldrb.w	ip, [r7, r2]
 8002996:	f819 800c 	ldrb.w	r8, [r9, ip]
 800299a:	f018 0808 	ands.w	r8, r8, #8
 800299e:	eb07 0102 	add.w	r1, r7, r2
 80029a2:	f102 0301 	add.w	r3, r2, #1
 80029a6:	d0da      	beq.n	800295e <z_shell_spaces_trim+0x12>
					shift++;
 80029a8:	3401      	adds	r4, #1
 80029aa:	b2a4      	uxth	r4, r4
 80029ac:	461a      	mov	r2, r3
 80029ae:	e7ed      	b.n	800298c <z_shell_spaces_trim+0x40>
	for (uint16_t i = 0; i < len - 1; i++) {
 80029b0:	2500      	movs	r5, #0
		if (isspace((int)str[i])) {
 80029b2:	f8df 9008 	ldr.w	r9, [pc, #8]	; 80029bc <z_shell_spaces_trim+0x70>
	uint16_t shift = 0U;
 80029b6:	462c      	mov	r4, r5
 80029b8:	e7dc      	b.n	8002974 <z_shell_spaces_trim+0x28>
 80029ba:	bf00      	nop
 80029bc:	08018f48 	.word	0x08018f48

080029c0 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 80029c2:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
 80029c4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
 80029c8:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
 80029ca:	b953      	cbnz	r3, 80029e2 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 80029cc:	68ab      	ldr	r3, [r5, #8]
 80029ce:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80029d0:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 80029d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
 80029d4:	3a01      	subs	r2, #1
 80029d6:	b292      	uxth	r2, r2
 80029d8:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
 80029da:	b92a      	cbnz	r2, 80029e8 <z_shell_cmd_trim+0x28>
			buff[0] = '\0';
 80029dc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
 80029e0:	e7f4      	b.n	80029cc <z_shell_cmd_trim+0xc>
	while (isspace((int) buff[*buff_len - 1U])) {
 80029e2:	4e11      	ldr	r6, [pc, #68]	; (8002a28 <z_shell_cmd_trim+0x68>)
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
 80029e4:	f104 0042 	add.w	r0, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
 80029e8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80029ea:	1883      	adds	r3, r0, r2
 80029ec:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80029f0:	5d9b      	ldrb	r3, [r3, r6]
 80029f2:	f013 0308 	ands.w	r3, r3, #8
 80029f6:	d1ed      	bne.n	80029d4 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
 80029f8:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
 80029fa:	b29f      	uxth	r7, r3
 80029fc:	fa10 f183 	uxtah	r1, r0, r3
 8002a00:	f810 c007 	ldrb.w	ip, [r0, r7]
 8002a04:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8002a08:	f01c 0f08 	tst.w	ip, #8
 8002a0c:	f103 0301 	add.w	r3, r3, #1
 8002a10:	d1f3      	bne.n	80029fa <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d0da      	beq.n	80029cc <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
 8002a16:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
 8002a18:	1c73      	adds	r3, r6, #1
 8002a1a:	1bda      	subs	r2, r3, r7
		*buff_len = *buff_len - i;
 8002a1c:	1bf6      	subs	r6, r6, r7
 8002a1e:	f011 fee6 	bl	80147ee <memmove>
 8002a22:	87a6      	strh	r6, [r4, #60]	; 0x3c
 8002a24:	e7d2      	b.n	80029cc <z_shell_cmd_trim+0xc>
 8002a26:	bf00      	nop
 8002a28:	08018f48 	.word	0x08018f48

08002a2c <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8002a2c:	6883      	ldr	r3, [r0, #8]
 8002a2e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
 8002a32:	069b      	lsls	r3, r3, #26
 8002a34:	d503      	bpl.n	8002a3e <z_clear_eos+0x12>
 8002a36:	4902      	ldr	r1, [pc, #8]	; (8002a40 <z_clear_eos+0x14>)
 8002a38:	6940      	ldr	r0, [r0, #20]
 8002a3a:	f00c bd4e 	b.w	800f4da <z_shell_raw_fprintf>
}
 8002a3e:	4770      	bx	lr
 8002a40:	08015320 	.word	0x08015320

08002a44 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
 8002a44:	4901      	ldr	r1, [pc, #4]	; (8002a4c <z_cursor_next_line_move.isra.0+0x8>)
 8002a46:	f00c bd48 	b.w	800f4da <z_shell_raw_fprintf>
 8002a4a:	bf00      	nop
 8002a4c:	080164a1 	.word	0x080164a1

08002a50 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
 8002a50:	1e0a      	subs	r2, r1, #0
 8002a52:	dc0d      	bgt.n	8002a70 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
 8002a54:	d00e      	beq.n	8002a74 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
 8002a56:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8002a58:	6881      	ldr	r1, [r0, #8]
 8002a5a:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
 8002a5e:	0689      	lsls	r1, r1, #26
 8002a60:	d508      	bpl.n	8002a74 <z_shell_op_cursor_vert_move+0x24>
 8002a62:	2a00      	cmp	r2, #0
 8002a64:	4904      	ldr	r1, [pc, #16]	; (8002a78 <z_shell_op_cursor_vert_move+0x28>)
 8002a66:	6940      	ldr	r0, [r0, #20]
 8002a68:	bfb8      	it	lt
 8002a6a:	4252      	neglt	r2, r2
 8002a6c:	f00c bd35 	b.w	800f4da <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
 8002a70:	2341      	movs	r3, #65	; 0x41
 8002a72:	e7f1      	b.n	8002a58 <z_shell_op_cursor_vert_move+0x8>
}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	08016add 	.word	0x08016add

08002a7c <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
 8002a7c:	1e0a      	subs	r2, r1, #0
 8002a7e:	dc0d      	bgt.n	8002a9c <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
 8002a80:	d00e      	beq.n	8002aa0 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
 8002a82:	2344      	movs	r3, #68	; 0x44
 8002a84:	6881      	ldr	r1, [r0, #8]
 8002a86:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
 8002a8a:	0689      	lsls	r1, r1, #26
 8002a8c:	d508      	bpl.n	8002aa0 <z_shell_op_cursor_horiz_move+0x24>
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	4904      	ldr	r1, [pc, #16]	; (8002aa4 <z_shell_op_cursor_horiz_move+0x28>)
 8002a92:	6940      	ldr	r0, [r0, #20]
 8002a94:	bfb8      	it	lt
 8002a96:	4252      	neglt	r2, r2
 8002a98:	f00c bd1f 	b.w	800f4da <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
 8002a9c:	2343      	movs	r3, #67	; 0x43
 8002a9e:	e7f1      	b.n	8002a84 <z_shell_op_cursor_horiz_move+0x8>
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	08016add 	.word	0x08016add

08002aa8 <z_shell_op_cursor_word_move>:

	return ret;
}

void z_shell_op_cursor_word_move(const struct shell *shell, int16_t val)
{
 8002aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t shift;
	int16_t sign;

	if (val < 0) {
 8002aac:	1e0c      	subs	r4, r1, #0
{
 8002aae:	4606      	mov	r6, r0
	if (val < 0) {
 8002ab0:	da30      	bge.n	8002b14 <z_shell_op_cursor_word_move+0x6c>
		val = -val;
 8002ab2:	4264      	negs	r4, r4
 8002ab4:	b224      	sxth	r4, r4
		sign = -1;
 8002ab6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		if (isalnum((int)str[idx]) != 0) {
 8002aba:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002b18 <z_shell_op_cursor_word_move+0x70>
 8002abe:	b2a4      	uxth	r4, r4
 8002ac0:	b2af      	uxth	r7, r5
 8002ac2:	e01f      	b.n	8002b04 <z_shell_op_cursor_word_move+0x5c>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
 8002ac4:	68b3      	ldr	r3, [r6, #8]
 8002ac6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002ac8:	f8b3 e03c 	ldrh.w	lr, [r3, #60]	; 0x3c
 8002acc:	f103 0c42 	add.w	ip, r3, #66	; 0x42
	bool found = false;
 8002ad0:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
 8002ad2:	4613      	mov	r3, r2
		idx = pos + ret * sign;
 8002ad4:	1a99      	subs	r1, r3, r2
 8002ad6:	b289      	uxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
 8002ad8:	b913      	cbnz	r3, 8002ae0 <z_shell_op_cursor_word_move+0x38>
 8002ada:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002ade:	d00b      	beq.n	8002af8 <z_shell_op_cursor_word_move+0x50>
 8002ae0:	459e      	cmp	lr, r3
 8002ae2:	d101      	bne.n	8002ae8 <z_shell_op_cursor_word_move+0x40>
		    ((idx == len) && (sign > 0))) {
 8002ae4:	2d01      	cmp	r5, #1
 8002ae6:	d007      	beq.n	8002af8 <z_shell_op_cursor_word_move+0x50>
		if (isalnum((int)str[idx]) != 0) {
 8002ae8:	f81c 9003 	ldrb.w	r9, [ip, r3]
 8002aec:	f819 9008 	ldrb.w	r9, [r9, r8]
 8002af0:	f019 0f07 	tst.w	r9, #7
 8002af4:	d10a      	bne.n	8002b0c <z_shell_op_cursor_word_move+0x64>
			if (found) {
 8002af6:	b150      	cbz	r0, 8002b0e <z_shell_op_cursor_word_move+0x66>
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		z_shell_op_cursor_move(shell, sign * shift);
 8002af8:	b209      	sxth	r1, r1
 8002afa:	4630      	mov	r0, r6
 8002afc:	f00c fd55 	bl	800f5aa <z_shell_op_cursor_move>
 8002b00:	3c01      	subs	r4, #1
 8002b02:	b2a4      	uxth	r4, r4
	while (val--) {
 8002b04:	2c00      	cmp	r4, #0
 8002b06:	d1dd      	bne.n	8002ac4 <z_shell_op_cursor_word_move+0x1c>
	}
}
 8002b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
 8002b0c:	2001      	movs	r0, #1
	while (1) {
 8002b0e:	443b      	add	r3, r7
 8002b10:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
 8002b12:	e7df      	b.n	8002ad4 <z_shell_op_cursor_word_move+0x2c>
		sign = 1;
 8002b14:	2501      	movs	r5, #1
 8002b16:	e7d0      	b.n	8002aba <z_shell_op_cursor_word_move+0x12>
 8002b18:	08018f48 	.word	0x08018f48

08002b1c <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
 8002b1c:	6882      	ldr	r2, [r0, #8]
 8002b1e:	4902      	ldr	r1, [pc, #8]	; (8002b28 <z_shell_print_cmd+0xc>)
 8002b20:	6940      	ldr	r0, [r0, #20]
 8002b22:	3242      	adds	r2, #66	; 0x42
 8002b24:	f00c bcd9 	b.w	800f4da <z_shell_raw_fprintf>
 8002b28:	080165c0 	.word	0x080165c0

08002b2c <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
 8002b2c:	2908      	cmp	r1, #8
{
 8002b2e:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
 8002b30:	d816      	bhi.n	8002b60 <z_shell_vt100_color_set+0x34>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
 8002b32:	6883      	ldr	r3, [r0, #8]
 8002b34:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8002b38:	4291      	cmp	r1, r2
 8002b3a:	d011      	beq.n	8002b60 <z_shell_vt100_color_set+0x34>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;

	if (color != SHELL_NORMAL) {
 8002b3c:	2a08      	cmp	r2, #8
	shell->ctx->vt100_ctx.col.col = color;
 8002b3e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8002b42:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (color != SHELL_NORMAL) {
 8002b46:	d005      	beq.n	8002b54 <z_shell_vt100_color_set+0x28>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
 8002b48:	0699      	lsls	r1, r3, #26
 8002b4a:	d509      	bpl.n	8002b60 <z_shell_vt100_color_set+0x34>
 8002b4c:	4905      	ldr	r1, [pc, #20]	; (8002b64 <z_shell_vt100_color_set+0x38>)
 8002b4e:	6940      	ldr	r0, [r0, #20]
 8002b50:	f00c bcc3 	b.w	800f4da <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
 8002b54:	069b      	lsls	r3, r3, #26
 8002b56:	d503      	bpl.n	8002b60 <z_shell_vt100_color_set+0x34>
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <z_shell_vt100_color_set+0x3c>)
 8002b5a:	6940      	ldr	r0, [r0, #20]
 8002b5c:	f00c bcbd 	b.w	800f4da <z_shell_raw_fprintf>
	}
}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	08016ae4 	.word	0x08016ae4
 8002b68:	08015325 	.word	0x08015325

08002b6c <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
 8002b70:	7809      	ldrb	r1, [r1, #0]
{
 8002b72:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
 8002b74:	f7ff ffda 	bl	8002b2c <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
 8002b78:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
 8002b7a:	2a07      	cmp	r2, #7
 8002b7c:	d810      	bhi.n	8002ba0 <z_shell_vt100_colors_restore+0x34>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
 8002b7e:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
 8002b80:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8002b84:	4291      	cmp	r1, r2
 8002b86:	d00b      	beq.n	8002ba0 <z_shell_vt100_colors_restore+0x34>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
 8002b88:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002b8c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
 8002b90:	069b      	lsls	r3, r3, #26
 8002b92:	d505      	bpl.n	8002ba0 <z_shell_vt100_colors_restore+0x34>
 8002b94:	6960      	ldr	r0, [r4, #20]
 8002b96:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <z_shell_vt100_colors_restore+0x38>)
}
 8002b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
 8002b9c:	f00c bc9d 	b.w	800f4da <z_shell_raw_fprintf>
}
 8002ba0:	bd38      	pop	{r3, r4, r5, pc}
 8002ba2:	bf00      	nop
 8002ba4:	08016aed 	.word	0x08016aed

08002ba8 <z_shell_op_word_remove>:
{
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8002baa:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
 8002bac:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
 8002bae:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	d04e      	beq.n	8002c52 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8002bb4:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d04b      	beq.n	8002c52 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
 8002bba:	3041      	adds	r0, #65	; 0x41
 8002bbc:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
 8002bbe:	f103 0642 	add.w	r6, r3, #66	; 0x42
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
 8002bc6:	42b3      	cmp	r3, r6
 8002bc8:	b2a4      	uxth	r4, r4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	d30d      	bcc.n	8002bea <z_shell_op_word_remove+0x42>
 8002bce:	f811 7901 	ldrb.w	r7, [r1], #-1
 8002bd2:	2f20      	cmp	r7, #32
 8002bd4:	d03b      	beq.n	8002c4e <z_shell_op_word_remove+0xa6>
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
 8002bda:	7808      	ldrb	r0, [r1, #0]
 8002bdc:	2820      	cmp	r0, #32
 8002bde:	d004      	beq.n	8002bea <z_shell_op_word_remove+0x42>
		++chars_to_delete;
 8002be0:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
 8002be2:	429e      	cmp	r6, r3
		++chars_to_delete;
 8002be4:	b2a4      	uxth	r4, r4
		--str;
 8002be6:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
 8002be8:	d9f5      	bls.n	8002bd6 <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
 8002bea:	1c63      	adds	r3, r4, #1
 8002bec:	1c4e      	adds	r6, r1, #1
 8002bee:	1b12      	subs	r2, r2, r4
 8002bf0:	4419      	add	r1, r3
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	f011 fdfb 	bl	80147ee <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
 8002bf8:	68a9      	ldr	r1, [r5, #8]
 8002bfa:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
 8002bfc:	1b12      	subs	r2, r2, r4
 8002bfe:	b292      	uxth	r2, r2
 8002c00:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8002c02:	440a      	add	r2, r1
 8002c04:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
 8002c06:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 8002c08:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
 8002c0c:	b209      	sxth	r1, r1
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f00c fccb 	bl	800f5aa <z_shell_op_cursor_move>
 8002c14:	68ab      	ldr	r3, [r5, #8]
 8002c16:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
 8002c1a:	069a      	lsls	r2, r3, #26
 8002c1c:	d503      	bpl.n	8002c26 <z_shell_op_word_remove+0x7e>
 8002c1e:	490d      	ldr	r1, [pc, #52]	; (8002c54 <z_shell_op_word_remove+0xac>)
 8002c20:	6968      	ldr	r0, [r5, #20]
 8002c22:	f00c fc5a 	bl	800f4da <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
 8002c26:	4633      	mov	r3, r6
 8002c28:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <z_shell_op_word_remove+0xb0>)
 8002c2a:	2108      	movs	r1, #8
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f00c fd8d 	bl	800f74c <z_shell_fprintf>
	z_clear_eos(shell);
 8002c32:	4628      	mov	r0, r5
 8002c34:	f7ff fefa 	bl	8002a2c <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8002c38:	68ab      	ldr	r3, [r5, #8]
 8002c3a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
 8002c3e:	069b      	lsls	r3, r3, #26
 8002c40:	d507      	bpl.n	8002c52 <z_shell_op_word_remove+0xaa>
 8002c42:	6968      	ldr	r0, [r5, #20]
 8002c44:	4905      	ldr	r1, [pc, #20]	; (8002c5c <z_shell_op_word_remove+0xb4>)
}
 8002c46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c4a:	f00c bc46 	b.w	800f4da <z_shell_raw_fprintf>
 8002c4e:	460b      	mov	r3, r1
 8002c50:	e7b8      	b.n	8002bc4 <z_shell_op_word_remove+0x1c>
 8002c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c54:	0801532a 	.word	0x0801532a
 8002c58:	080165c0 	.word	0x080165c0
 8002c5c:	0801532e 	.word	0x0801532e

08002c60 <reprint_from_cursor>:
{
 8002c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c64:	4604      	mov	r4, r0
 8002c66:	460d      	mov	r5, r1
	if (data_removed) {
 8002c68:	4617      	mov	r7, r2
 8002c6a:	b10a      	cbz	r2, 8002c70 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
 8002c6c:	f7ff fede 	bl	8002a2c <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
 8002c70:	68a3      	ldr	r3, [r4, #8]
 8002c72:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8002c76:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(shell)) {
 8002c78:	0752      	lsls	r2, r2, #29
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8002c7a:	f100 0042 	add.w	r0, r0, #66	; 0x42
 8002c7e:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
 8002c80:	d51f      	bpl.n	8002cc2 <reprint_from_cursor+0x62>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fc4b 	bl	800051e <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
 8002c88:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8002cd0 <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
 8002c8c:	4606      	mov	r6, r0
		while (len--) {
 8002c8e:	b996      	cbnz	r6, 8002cb6 <reprint_from_cursor+0x56>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
 8002c90:	68a3      	ldr	r3, [r4, #8]
 8002c92:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002c94:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
 8002c96:	4620      	mov	r0, r4
 8002c98:	f00c fc2c 	bl	800f4f4 <full_line_cmd>
 8002c9c:	b120      	cbz	r0, 8002ca8 <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
 8002c9e:	b107      	cbz	r7, 8002ca2 <reprint_from_cursor+0x42>
 8002ca0:	b115      	cbz	r5, 8002ca8 <reprint_from_cursor+0x48>
			z_cursor_next_line_move(shell);
 8002ca2:	6960      	ldr	r0, [r4, #20]
 8002ca4:	f7ff fece 	bl	8002a44 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
 8002ca8:	4269      	negs	r1, r5
 8002caa:	4620      	mov	r0, r4
 8002cac:	b209      	sxth	r1, r1
}
 8002cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
 8002cb2:	f00c bc7a 	b.w	800f5aa <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
 8002cb6:	6960      	ldr	r0, [r4, #20]
 8002cb8:	4641      	mov	r1, r8
 8002cba:	f00c fc0e 	bl	800f4da <z_shell_raw_fprintf>
 8002cbe:	3e01      	subs	r6, #1
 8002cc0:	e7e5      	b.n	8002c8e <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <reprint_from_cursor+0x74>)
 8002cc4:	2108      	movs	r1, #8
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f00c fd40 	bl	800f74c <z_shell_fprintf>
 8002ccc:	e7e0      	b.n	8002c90 <reprint_from_cursor+0x30>
 8002cce:	bf00      	nop
 8002cd0:	080163eb 	.word	0x080163eb
 8002cd4:	080165c0 	.word	0x080165c0

08002cd8 <z_shell_op_char_insert>:
{
 8002cd8:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
 8002cda:	6883      	ldr	r3, [r0, #8]
 8002cdc:	f88d 1007 	strb.w	r1, [sp, #7]
 8002ce0:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8002ce4:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
 8002ce6:	07d0      	lsls	r0, r2, #31
 8002ce8:	d521      	bpl.n	8002d2e <z_shell_op_char_insert+0x56>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
 8002cea:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
 8002cec:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002cee:	428a      	cmp	r2, r1
 8002cf0:	d01d      	beq.n	8002d2e <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 8002cf2:	1c48      	adds	r0, r1, #1
 8002cf4:	4419      	add	r1, r3
		char_replace(shell, data);
 8002cf6:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
 8002cfa:	87d8      	strh	r0, [r3, #62]	; 0x3e
 8002cfc:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
 8002d00:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
 8002d04:	0789      	lsls	r1, r1, #30
 8002d06:	d510      	bpl.n	8002d2a <z_shell_op_char_insert+0x52>
	return sh->ctx->cfg.flags.obscure == 1;
 8002d08:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 8002d0c:	6960      	ldr	r0, [r4, #20]
 8002d0e:	490b      	ldr	r1, [pc, #44]	; (8002d3c <z_shell_op_char_insert+0x64>)
		data = '*';
 8002d10:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
 8002d14:	bf18      	it	ne
 8002d16:	222a      	movne	r2, #42	; 0x2a
 8002d18:	f00c fbdf 	bl	800f4da <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f00c fbfd 	bl	800f51c <z_shell_cursor_in_empty_line>
 8002d22:	b110      	cbz	r0, 8002d2a <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
 8002d24:	6960      	ldr	r0, [r4, #20]
 8002d26:	f7ff fe8d 	bl	8002a44 <z_cursor_next_line_move.isra.0>
}
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f10d 0107 	add.w	r1, sp, #7
 8002d34:	4620      	mov	r0, r4
 8002d36:	f00c fd16 	bl	800f766 <data_insert>
}
 8002d3a:	e7f6      	b.n	8002d2a <z_shell_op_char_insert+0x52>
 8002d3c:	08016ae1 	.word	0x08016ae1

08002d40 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8002d40:	6883      	ldr	r3, [r0, #8]
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <z_shell_print_prompt_and_cmd+0x2c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
{
 8002d46:	b510      	push	{r4, lr}
 8002d48:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	f00c fcfe 	bl	800f74c <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
 8002d50:	68a3      	ldr	r3, [r4, #8]
 8002d52:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
 8002d56:	079b      	lsls	r3, r3, #30
 8002d58:	d507      	bpl.n	8002d6a <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff fede 	bl	8002b1c <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
 8002d60:	4620      	mov	r0, r4
}
 8002d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
 8002d66:	f00c bbfd 	b.w	800f564 <z_shell_op_cursor_position_synchronize>
}
 8002d6a:	bd10      	pop	{r4, pc}
 8002d6c:	080165c0 	.word	0x080165c0

08002d70 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
 8002d70:	4901      	ldr	r1, [pc, #4]	; (8002d78 <z_cursor_next_line_move.isra.0+0x8>)
 8002d72:	f00c bd57 	b.w	800f824 <z_shell_raw_fprintf>
 8002d76:	bf00      	nop
 8002d78:	080164a1 	.word	0x080164a1

08002d7c <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
 8002d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d80:	4604      	mov	r4, r0
 8002d82:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
 8002d84:	460e      	mov	r6, r1
 8002d86:	2900      	cmp	r1, #0
 8002d88:	d067      	beq.n	8002e5a <formatted_text_print.constprop.0+0xde>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
 8002d8a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8002e60 <formatted_text_print.constprop.0+0xe4>
 8002d8e:	2500      	movs	r5, #0
 8002d90:	5d73      	ldrb	r3, [r6, r5]
 8002d92:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002d96:	071a      	lsls	r2, r3, #28
 8002d98:	d41e      	bmi.n	8002dd8 <formatted_text_print.constprop.0+0x5c>
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	f7fd fbbf 	bl	800051e <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8002da0:	68a3      	ldr	r3, [r4, #8]
 8002da2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
 8002da4:	b280      	uxth	r0, r0
 8002da6:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8002da8:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
 8002dac:	4298      	cmp	r0, r3
 8002dae:	eb06 0a05 	add.w	sl, r6, r5
 8002db2:	d913      	bls.n	8002ddc <formatted_text_print.constprop.0+0x60>
 8002db4:	4651      	mov	r1, sl
		size_t idx = 0;
 8002db6:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
 8002db8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002dbc:	f819 c000 	ldrb.w	ip, [r9, r0]
 8002dc0:	f01c 0f08 	tst.w	ip, #8
 8002dc4:	d002      	beq.n	8002dcc <formatted_text_print.constprop.0+0x50>
				length = idx;
				if (*(str + offset + idx) == '\n') {
 8002dc6:	280a      	cmp	r0, #10
 8002dc8:	d02f      	beq.n	8002e2a <formatted_text_print.constprop.0+0xae>
 8002dca:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
 8002dcc:	eb08 0007 	add.w	r0, r8, r7
 8002dd0:	4282      	cmp	r2, r0
 8002dd2:	d929      	bls.n	8002e28 <formatted_text_print.constprop.0+0xac>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
 8002dd4:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
 8002dd6:	e7ef      	b.n	8002db8 <formatted_text_print.constprop.0+0x3c>
		++offset;
 8002dd8:	3501      	adds	r5, #1
 8002dda:	e7d9      	b.n	8002d90 <formatted_text_print.constprop.0+0x14>
 8002ddc:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
 8002dde:	2700      	movs	r7, #0
 8002de0:	42b8      	cmp	r0, r7
 8002de2:	d016      	beq.n	8002e12 <formatted_text_print.constprop.0+0x96>
				if (*(str + offset + idx) == '\n') {
 8002de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002de8:	2a0a      	cmp	r2, #10
 8002dea:	eb05 0907 	add.w	r9, r5, r7
 8002dee:	d119      	bne.n	8002e24 <formatted_text_print.constprop.0+0xa8>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 8002df0:	6960      	ldr	r0, [r4, #20]
 8002df2:	f00c fa94 	bl	800f31e <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
 8002df6:	4651      	mov	r1, sl
 8002df8:	463a      	mov	r2, r7
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f00c fc3a 	bl	800f674 <z_shell_write>
					z_cursor_next_line_move(shell);
 8002e00:	6960      	ldr	r0, [r4, #20]
 8002e02:	f7ff ffb5 	bl	8002d70 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
 8002e06:	4641      	mov	r1, r8
 8002e08:	4620      	mov	r0, r4
					offset += idx + 1;
 8002e0a:	f109 0501 	add.w	r5, r9, #1
					z_shell_op_cursor_horiz_move(shell,
 8002e0e:	f7ff fe35 	bl	8002a7c <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
 8002e12:	6960      	ldr	r0, [r4, #20]
 8002e14:	1971      	adds	r1, r6, r5
 8002e16:	f00c fd05 	bl	800f824 <z_shell_raw_fprintf>

		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
 8002e1a:	6960      	ldr	r0, [r4, #20]
}
 8002e1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
 8002e20:	f7ff bfa6 	b.w	8002d70 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
 8002e24:	3701      	adds	r7, #1
 8002e26:	e7db      	b.n	8002de0 <formatted_text_print.constprop.0+0x64>
 8002e28:	461f      	mov	r7, r3
 8002e2a:	6960      	ldr	r0, [r4, #20]
 8002e2c:	f00c fa77 	bl	800f31e <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
 8002e30:	463a      	mov	r2, r7
 8002e32:	4651      	mov	r1, sl
 8002e34:	4620      	mov	r0, r4
 8002e36:	f00c fc1d 	bl	800f674 <z_shell_write>
		offset += length;
 8002e3a:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
 8002e3c:	5d73      	ldrb	r3, [r6, r5]
 8002e3e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8002e42:	071b      	lsls	r3, r3, #28
 8002e44:	d407      	bmi.n	8002e56 <formatted_text_print.constprop.0+0xda>
		z_cursor_next_line_move(shell);
 8002e46:	6960      	ldr	r0, [r4, #20]
 8002e48:	f7ff ff92 	bl	8002d70 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7ff fe14 	bl	8002a7c <z_shell_op_cursor_horiz_move>
	while (true) {
 8002e54:	e7a1      	b.n	8002d9a <formatted_text_print.constprop.0+0x1e>
			++offset;
 8002e56:	3501      	adds	r5, #1
 8002e58:	e7f0      	b.n	8002e3c <formatted_text_print.constprop.0+0xc0>
}
 8002e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e5e:	bf00      	nop
 8002e60:	08018f48 	.word	0x08018f48

08002e64 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
 8002e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e68:	460f      	mov	r7, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
 8002e6a:	2100      	movs	r1, #0
{
 8002e6c:	b08d      	sub	sp, #52	; 0x34
 8002e6e:	4604      	mov	r4, r0
 8002e70:	4616      	mov	r6, r2
	uint16_t longest = 0U;
 8002e72:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 8002e74:	aa07      	add	r2, sp, #28
 8002e76:	4638      	mov	r0, r7
 8002e78:	f101 0801 	add.w	r8, r1, #1
 8002e7c:	f7ff fd40 	bl	8002900 <z_shell_cmd_get>
 8002e80:	b9a8      	cbnz	r0, 8002eae <z_shell_help_subcmd_print+0x4a>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
 8002e82:	b18d      	cbz	r5, 8002ea8 <z_shell_help_subcmd_print+0x44>
		return;
	}

	if (description != NULL) {
 8002e84:	b126      	cbz	r6, 8002e90 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
 8002e86:	4632      	mov	r2, r6
 8002e88:	2108      	movs	r1, #8
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f00c fc5e 	bl	800f74c <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8002e90:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8002f48 <z_shell_help_subcmd_print+0xe4>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
 8002e94:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8002f4c <z_shell_help_subcmd_print+0xe8>
		for (uint16_t i = 0; i < tmp; i++) {
 8002e98:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 8002e9a:	1c4b      	adds	r3, r1, #1
 8002e9c:	aa07      	add	r2, sp, #28
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	9303      	str	r3, [sp, #12]
 8002ea2:	f7ff fd2d 	bl	8002900 <z_shell_cmd_get>
 8002ea6:	b960      	cbnz	r0, 8002ec2 <z_shell_help_subcmd_print+0x5e>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
 8002ea8:	b00d      	add	sp, #52	; 0x34
 8002eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
 8002eae:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8002eb0:	b110      	cbz	r0, 8002eb8 <z_shell_help_subcmd_print+0x54>
 8002eb2:	f7fd fb34 	bl	800051e <strlen>
 8002eb6:	b280      	uxth	r0, r0
 8002eb8:	4285      	cmp	r5, r0
 8002eba:	bf38      	it	cc
 8002ebc:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	e7d8      	b.n	8002e74 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
 8002ec2:	e9d0 a900 	ldrd	sl, r9, [r0]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	f7fd fb29 	bl	800051e <strlen>
 8002ecc:	9004      	str	r0, [sp, #16]
	if ((item_name == NULL) || (item_name[0] == '\0')) {
 8002ece:	f1ba 0f00 	cmp.w	sl, #0
 8002ed2:	d022      	beq.n	8002f1a <z_shell_help_subcmd_print+0xb6>
 8002ed4:	f89a 2000 	ldrb.w	r2, [sl]
 8002ed8:	b1fa      	cbz	r2, 8002f1a <z_shell_help_subcmd_print+0xb6>
		uint16_t tmp = item_name_width - strlen(item_name);
 8002eda:	4650      	mov	r0, sl
 8002edc:	f7fd fb1f 	bl	800051e <strlen>
		char space = ' ';
 8002ee0:	2220      	movs	r2, #32
		uint16_t tmp = item_name_width - strlen(item_name);
 8002ee2:	1a2e      	subs	r6, r5, r0
		char space = ' ';
 8002ee4:	f88d 201b 	strb.w	r2, [sp, #27]
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
 8002ee8:	4643      	mov	r3, r8
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <z_shell_help_subcmd_print+0xec>)
 8002eec:	f8cd a000 	str.w	sl, [sp]
 8002ef0:	2108      	movs	r1, #8
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f00c fc2a 	bl	800f74c <z_shell_fprintf>
		uint16_t tmp = item_name_width - strlen(item_name);
 8002ef8:	b2b6      	uxth	r6, r6
		for (uint16_t i = 0; i < tmp; i++) {
 8002efa:	2300      	movs	r3, #0
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	42b2      	cmp	r2, r6
 8002f00:	d30d      	bcc.n	8002f1e <z_shell_help_subcmd_print+0xba>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
 8002f02:	4643      	mov	r3, r8
 8002f04:	465a      	mov	r2, fp
 8002f06:	2108      	movs	r1, #8
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f00c fc1f 	bl	800f74c <z_shell_fprintf>
	if (item_help == NULL) {
 8002f0e:	f1b9 0f00 	cmp.w	r9, #0
 8002f12:	d10e      	bne.n	8002f32 <z_shell_help_subcmd_print+0xce>
		z_cursor_next_line_move(shell);
 8002f14:	6960      	ldr	r0, [r4, #20]
 8002f16:	f7ff ff2b 	bl	8002d70 <z_cursor_next_line_move.isra.0>
		for (uint16_t i = 0; i < tmp; i++) {
 8002f1a:	9903      	ldr	r1, [sp, #12]
 8002f1c:	e7bd      	b.n	8002e9a <z_shell_help_subcmd_print+0x36>
			z_shell_write(shell, &space, 1);
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f10d 011b 	add.w	r1, sp, #27
 8002f24:	4620      	mov	r0, r4
 8002f26:	9305      	str	r3, [sp, #20]
 8002f28:	f00c fba4 	bl	800f674 <z_shell_write>
		for (uint16_t i = 0; i < tmp; i++) {
 8002f2c:	9b05      	ldr	r3, [sp, #20]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	e7e4      	b.n	8002efc <z_shell_help_subcmd_print+0x98>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8002f32:	9b04      	ldr	r3, [sp, #16]
 8002f34:	1c6a      	adds	r2, r5, #1
 8002f36:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	formatted_text_print(shell, item_help, offset, false);
 8002f3a:	b292      	uxth	r2, r2
 8002f3c:	4649      	mov	r1, r9
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7ff ff1c 	bl	8002d7c <formatted_text_print.constprop.0>
 8002f44:	e7e9      	b.n	8002f1a <z_shell_help_subcmd_print+0xb6>
 8002f46:	bf00      	nop
 8002f48:	08016b08 	.word	0x08016b08
 8002f4c:	08016af6 	.word	0x08016af6
 8002f50:	080168f5 	.word	0x080168f5

08002f54 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
 8002f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f56:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 8002f58:	6808      	ldr	r0, [r1, #0]
{
 8002f5a:	460d      	mov	r5, r1
 8002f5c:	b1b8      	cbz	r0, 8002f8e <z_shell_help_cmd_print+0x3a>
 8002f5e:	f7fd fade 	bl	800051e <strlen>
 8002f62:	b284      	uxth	r4, r0
 8002f64:	4f0b      	ldr	r7, [pc, #44]	; (8002f94 <z_shell_help_cmd_print+0x40>)
 8002f66:	4638      	mov	r0, r7
 8002f68:	f7fd fad9 	bl	800051e <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <z_shell_help_cmd_print+0x44>)
 8002f70:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 8002f72:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 8002f74:	2108      	movs	r1, #8
 8002f76:	4630      	mov	r0, r6
 8002f78:	f00c fbe8 	bl	800f74c <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 8002f7c:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
 8002f7e:	6869      	ldr	r1, [r5, #4]
 8002f80:	4622      	mov	r2, r4
 8002f82:	4630      	mov	r0, r6
}
 8002f84:	b003      	add	sp, #12
 8002f86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
 8002f8a:	f7ff bef7 	b.w	8002d7c <formatted_text_print.constprop.0>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	e7e8      	b.n	8002f64 <z_shell_help_cmd_print+0x10>
 8002f92:	bf00      	nop
 8002f94:	08016b04 	.word	0x08016b04
 8002f98:	080168f5 	.word	0x080168f5

08002f9c <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
 8002f9c:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 8002f9e:	4907      	ldr	r1, [pc, #28]	; (8002fbc <z_shell_help_request+0x20>)
{
 8002fa0:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 8002fa2:	f7fd fab2 	bl	800050a <strcmp>
 8002fa6:	b138      	cbz	r0, 8002fb8 <z_shell_help_request+0x1c>
 8002fa8:	4905      	ldr	r1, [pc, #20]	; (8002fc0 <z_shell_help_request+0x24>)
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7fd faad 	bl	800050a <strcmp>
 8002fb0:	fab0 f080 	clz	r0, r0
 8002fb4:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
 8002fb6:	bd10      	pop	{r4, pc}
		return true;
 8002fb8:	2001      	movs	r0, #1
 8002fba:	e7fc      	b.n	8002fb6 <z_shell_help_request+0x1a>
 8002fbc:	08016afa 	.word	0x08016afa
 8002fc0:	08016afd 	.word	0x08016afd

08002fc4 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
 8002fc4:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8002fc6:	6883      	ldr	r3, [r0, #8]
 8002fc8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
 8002fcc:	069b      	lsls	r3, r3, #26
{
 8002fce:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
 8002fd0:	d503      	bpl.n	8002fda <cmd_resize_default+0x16>
 8002fd2:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <cmd_resize_default+0x20>)
 8002fd4:	6940      	ldr	r0, [r0, #20]
 8002fd6:	f00c fc36 	bl	800f846 <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 8002fda:	68a3      	ldr	r3, [r4, #8]
 8002fdc:	4a02      	ldr	r2, [pc, #8]	; (8002fe8 <cmd_resize_default+0x24>)
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	bd10      	pop	{r4, pc}
 8002fe4:	08015332 	.word	0x08015332
 8002fe8:	00500018 	.word	0x00500018

08002fec <cmd_shell_stats_show>:
{
 8002fec:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
 8002fee:	6983      	ldr	r3, [r0, #24]
 8002ff0:	4a03      	ldr	r2, [pc, #12]	; (8003000 <cmd_shell_stats_show+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	f00c f955 	bl	800f2a4 <shell_fprintf>
}
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	bd08      	pop	{r3, pc}
 8002ffe:	bf00      	nop
 8003000:	08016b0b 	.word	0x08016b0b

08003004 <cmd_history>:
{
 8003004:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
 8003006:	4e0f      	ldr	r6, [pc, #60]	; (8003044 <cmd_history+0x40>)
{
 8003008:	4604      	mov	r4, r0
 800300a:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
 800300c:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
 800300e:	68e0      	ldr	r0, [r4, #12]
 8003010:	f10d 030e 	add.w	r3, sp, #14
 8003014:	f502 72a1 	add.w	r2, r2, #322	; 0x142
 8003018:	2101      	movs	r1, #1
 800301a:	f00c fc9c 	bl	800f956 <z_shell_history_get>
		if (len) {
 800301e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003022:	68a3      	ldr	r3, [r4, #8]
 8003024:	b150      	cbz	r0, 800303c <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
 8003026:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	4632      	mov	r2, r6
 800302e:	462b      	mov	r3, r5
 8003030:	2108      	movs	r1, #8
 8003032:	4620      	mov	r0, r4
 8003034:	f00c f936 	bl	800f2a4 <shell_fprintf>
	while (1) {
 8003038:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
 800303a:	e7e7      	b.n	800300c <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
 800303c:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
 8003040:	b004      	add	sp, #16
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	08016b1b 	.word	0x08016b1b

08003048 <cmd_echo>:
	if (argc == 2) {
 8003048:	2902      	cmp	r1, #2
{
 800304a:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
 800304c:	d10d      	bne.n	800306a <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
 800304e:	6853      	ldr	r3, [r2, #4]
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <cmd_echo+0x44>)
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <cmd_echo+0x48>)
 800305a:	2101      	movs	r1, #1
 800305c:	f00c f922 	bl	800f2a4 <shell_fprintf>
 8003060:	f06f 0015 	mvn.w	r0, #21
}
 8003064:	b003      	add	sp, #12
 8003066:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
 800306a:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
 800306c:	4a09      	ldr	r2, [pc, #36]	; (8003094 <cmd_echo+0x4c>)
 800306e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8003072:	f013 0f02 	tst.w	r3, #2
 8003076:	f04f 0108 	mov.w	r1, #8
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <cmd_echo+0x50>)
 800307c:	bf18      	it	ne
 800307e:	4613      	movne	r3, r2
 8003080:	4a06      	ldr	r2, [pc, #24]	; (800309c <cmd_echo+0x54>)
 8003082:	f00c f90f 	bl	800f2a4 <shell_fprintf>
	return 0;
 8003086:	2000      	movs	r0, #0
 8003088:	e7ec      	b.n	8003064 <cmd_echo+0x1c>
 800308a:	bf00      	nop
 800308c:	08016b32 	.word	0x08016b32
 8003090:	08016b29 	.word	0x08016b29
 8003094:	0801657d 	.word	0x0801657d
 8003098:	08016b25 	.word	0x08016b25
 800309c:	08016b47 	.word	0x08016b47

080030a0 <cmd_clear>:
{
 80030a0:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
 80030a2:	6883      	ldr	r3, [r0, #8]
 80030a4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 80030a8:	069a      	lsls	r2, r3, #26
{
 80030aa:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
 80030ac:	d503      	bpl.n	80030b6 <cmd_clear+0x16>
 80030ae:	4907      	ldr	r1, [pc, #28]	; (80030cc <cmd_clear+0x2c>)
 80030b0:	6940      	ldr	r0, [r0, #20]
 80030b2:	f00c fbc8 	bl	800f846 <z_shell_raw_fprintf>
 80030b6:	68a3      	ldr	r3, [r4, #8]
 80030b8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
 80030bc:	069b      	lsls	r3, r3, #26
 80030be:	d503      	bpl.n	80030c8 <cmd_clear+0x28>
 80030c0:	4903      	ldr	r1, [pc, #12]	; (80030d0 <cmd_clear+0x30>)
 80030c2:	6960      	ldr	r0, [r4, #20]
 80030c4:	f00c fbbf 	bl	800f846 <z_shell_raw_fprintf>
}
 80030c8:	2000      	movs	r0, #0
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	08015339 	.word	0x08015339
 80030d0:	0801533e 	.word	0x0801533e

080030d4 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
 80030d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
 80030d6:	2901      	cmp	r1, #1
{
 80030d8:	b085      	sub	sp, #20
 80030da:	4604      	mov	r4, r0
	if (argc != 1) {
 80030dc:	d00d      	beq.n	80030fa <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
 80030de:	6853      	ldr	r3, [r2, #4]
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <cmd_resize+0x174>)
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	6813      	ldr	r3, [r2, #0]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <cmd_resize+0x178>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	f00c f8da 	bl	800f2a4 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
 80030f0:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
 80030f4:	4628      	mov	r0, r5
 80030f6:	b005      	add	sp, #20
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fa:	6883      	ldr	r3, [r0, #8]
 80030fc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
 8003100:	069a      	lsls	r2, r3, #26
 8003102:	d503      	bpl.n	800310c <cmd_resize+0x38>
 8003104:	4952      	ldr	r1, [pc, #328]	; (8003250 <cmd_resize+0x17c>)
 8003106:	6940      	ldr	r0, [r0, #20]
 8003108:	f00c fb9d 	bl	800f846 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
 800310c:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
 8003110:	4620      	mov	r0, r4
 8003112:	f7ff fc9d 	bl	8002a50 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
 8003116:	21fa      	movs	r1, #250	; 0xfa
 8003118:	4620      	mov	r0, r4
 800311a:	f7ff fcaf 	bl	8002a7c <z_shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
 800311e:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
 8003120:	2500      	movs	r5, #0
 8003122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003126:	4629      	mov	r1, r5
 8003128:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 800312c:	f88d 500b 	strb.w	r5, [sp, #11]
 8003130:	f011 fb77 	bl	8014822 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
 8003134:	4947      	ldr	r1, [pc, #284]	; (8003254 <cmd_resize+0x180>)
 8003136:	6960      	ldr	r0, [r4, #20]
 8003138:	f00c fb85 	bl	800f846 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 800313c:	6960      	ldr	r0, [r4, #20]
 800313e:	f00c f8ee 	bl	800f31e <z_shell_fprintf_buffer_flush>
 8003142:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
 8003146:	6860      	ldr	r0, [r4, #4]
 8003148:	6803      	ldr	r3, [r0, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	691f      	ldr	r7, [r3, #16]
 800314e:	f10d 010b 	add.w	r1, sp, #11
 8003152:	ab03      	add	r3, sp, #12
 8003154:	47b8      	blx	r7
			if (cnt == 0) {
 8003156:	9b03      	ldr	r3, [sp, #12]
 8003158:	b953      	cbnz	r3, 8003170 <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
 800315a:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
 800315c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003160:	b2b6      	uxth	r6, r6
 8003162:	f00a f92d 	bl	800d3c0 <z_impl_k_busy_wait>
 8003166:	2e00      	cmp	r6, #0
 8003168:	d1ed      	bne.n	8003146 <cmd_resize+0x72>
		ret_val = -ENOTSUP;
 800316a:	f06f 0585 	mvn.w	r5, #133	; 0x85
 800316e:	e034      	b.n	80031da <cmd_resize+0x106>
			if ((c != SHELL_VT100_ASCII_ESC) &&
 8003170:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
 8003174:	68a1      	ldr	r1, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
 8003176:	2b1b      	cmp	r3, #27
 8003178:	d05a      	beq.n	8003230 <cmd_resize+0x15c>
 800317a:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
 800317e:	2a1b      	cmp	r2, #27
 8003180:	d1e1      	bne.n	8003146 <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
 8003182:	2b52      	cmp	r3, #82	; 0x52
 8003184:	d154      	bne.n	8003230 <cmd_resize+0x15c>
				shell->ctx->temp_buff[buff_idx] = '\0';
 8003186:	440d      	add	r5, r1
 8003188:	2300      	movs	r3, #0
 800318a:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
 800318e:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
 8003192:	2a5b      	cmp	r2, #91	; 0x5b
 8003194:	d154      	bne.n	8003240 <cmd_resize+0x16c>
 8003196:	f501 75a2 	add.w	r5, r1, #324	; 0x144
	*y = 0U;
 800319a:	461f      	mov	r7, r3
				buff_idx = 2U;
 800319c:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 800319e:	f815 0b01 	ldrb.w	r0, [r5], #1
 80031a2:	4632      	mov	r2, r6
 80031a4:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
 80031a6:	f106 0601 	add.w	r6, r6, #1
 80031aa:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
 80031ac:	d12b      	bne.n	8003206 <cmd_resize+0x132>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 80031ae:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80031b2:	d0da      	beq.n	800316a <cmd_resize+0x96>
 80031b4:	f202 1243 	addw	r2, r2, #323	; 0x143
 80031b8:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
 80031bc:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
 80031be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80031c2:	bb55      	cbnz	r5, 800321a <cmd_resize+0x146>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 80031c4:	2bfa      	cmp	r3, #250	; 0xfa
 80031c6:	bf28      	it	cs
 80031c8:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 80031ca:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
 80031cc:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 80031ce:	463b      	mov	r3, r7
 80031d0:	bf28      	it	cs
 80031d2:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
 80031d4:	f881 5142 	strb.w	r5, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
 80031d8:	850b      	strh	r3, [r1, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
 80031da:	68a3      	ldr	r3, [r4, #8]
 80031dc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
 80031e0:	069b      	lsls	r3, r3, #26
 80031e2:	d503      	bpl.n	80031ec <cmd_resize+0x118>
 80031e4:	491c      	ldr	r1, [pc, #112]	; (8003258 <cmd_resize+0x184>)
 80031e6:	6960      	ldr	r0, [r4, #20]
 80031e8:	f00c fb2d 	bl	800f846 <z_shell_raw_fprintf>
	if (err != 0) {
 80031ec:	2d00      	cmp	r5, #0
 80031ee:	d081      	beq.n	80030f4 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
 80031f0:	68a3      	ldr	r3, [r4, #8]
 80031f2:	4a1a      	ldr	r2, [pc, #104]	; (800325c <cmd_resize+0x188>)
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
 80031f6:	2103      	movs	r1, #3
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <cmd_resize+0x18c>)
 80031fa:	4620      	mov	r0, r4
 80031fc:	f00c f852 	bl	800f2a4 <shell_fprintf>
 8003200:	f06f 0507 	mvn.w	r5, #7
 8003204:	e776      	b.n	80030f4 <cmd_resize+0x20>
					*y = *y * 10U +
 8003206:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 800320a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800320e:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
 8003210:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
 8003214:	b29f      	uxth	r7, r3
					if (buff_idx >=
 8003216:	d1c2      	bne.n	800319e <cmd_resize+0xca>
 8003218:	e7a7      	b.n	800316a <cmd_resize+0x96>
					*x = *x * 10U +
 800321a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
 800321e:	3601      	adds	r6, #1
					*x = *x * 10U +
 8003220:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
 8003224:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
 8003226:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
 8003228:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
 800322a:	b2ab      	uxth	r3, r5
					if (buff_idx >=
 800322c:	d9c7      	bls.n	80031be <cmd_resize+0xea>
 800322e:	e79c      	b.n	800316a <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
 8003230:	194a      	adds	r2, r1, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 8003232:	3501      	adds	r5, #1
 8003234:	b2ad      	uxth	r5, r5
 8003236:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
 8003238:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 800323c:	d983      	bls.n	8003146 <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
 8003244:	e791      	b.n	800316a <cmd_resize+0x96>
 8003246:	bf00      	nop
 8003248:	08016b32 	.word	0x08016b32
 800324c:	08016b29 	.word	0x08016b29
 8003250:	08015344 	.word	0x08015344
 8003254:	08016f56 	.word	0x08016f56
 8003258:	08015348 	.word	0x08015348
 800325c:	00500018 	.word	0x00500018
 8003260:	08016b58 	.word	0x08016b58

08003264 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
 8003264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003268:	4607      	mov	r7, r0
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
 800326e:	4689      	mov	r9, r1
 8003270:	b921      	cbnz	r1, 800327c <z_shell_wildcard_process+0x18>
		return ret_val;
 8003272:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
 8003274:	4620      	mov	r0, r4
 8003276:	b009      	add	sp, #36	; 0x24
 8003278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
 800327c:	4610      	mov	r0, r2
 800327e:	f00c fc12 	bl	800faa6 <z_shell_has_wildcard>
 8003282:	2800      	cmp	r0, #0
 8003284:	d0f5      	beq.n	8003272 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
 8003286:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
 800328a:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 800328c:	2402      	movs	r4, #2
 800328e:	e024      	b.n	80032da <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8003290:	465c      	mov	r4, fp
 8003292:	e03c      	b.n	800330e <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
 8003294:	4629      	mov	r1, r5
 8003296:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
 800329a:	f011 fb34 	bl	8014906 <strstr>
	if (!completion_addr) {
 800329e:	4606      	mov	r6, r0
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d04c      	beq.n	800333e <z_shell_wildcard_process+0xda>
 80032a4:	f7fd f93b 	bl	800051e <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
 80032a8:	b282      	uxth	r2, r0
 80032aa:	1c60      	adds	r0, r4, #1
__ssp_bos_icheck3(memmove, void *, const void *)
 80032ac:	3201      	adds	r2, #1
 80032ae:	4631      	mov	r1, r6
 80032b0:	4430      	add	r0, r6
 80032b2:	f011 fa9c 	bl	80147ee <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80032b6:	4622      	mov	r2, r4
 80032b8:	4659      	mov	r1, fp
 80032ba:	4630      	mov	r0, r6
 80032bc:	f011 fa76 	bl	80147ac <memcpy>
	completion_addr[cmd_len] = ' ';
 80032c0:	f04f 0320 	mov.w	r3, #32
 80032c4:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 80032c6:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
 80032ca:	3001      	adds	r0, #1
 80032cc:	4404      	add	r4, r0
 80032ce:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
 80032d2:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
 80032d6:	2400      	movs	r4, #0
 80032d8:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
 80032da:	1c4b      	adds	r3, r1, #1
 80032dc:	aa03      	add	r2, sp, #12
 80032de:	4648      	mov	r0, r9
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	f7ff fb0d 	bl	8002900 <z_shell_cmd_get>
 80032e6:	4606      	mov	r6, r0
 80032e8:	b1e8      	cbz	r0, 8003326 <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
 80032ea:	6831      	ldr	r1, [r6, #0]
 80032ec:	2200      	movs	r2, #0
 80032ee:	4628      	mov	r0, r5
 80032f0:	f00b fe32 	bl	800ef58 <fnmatch>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d1ef      	bne.n	80032d8 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
 80032f8:	f8d6 b000 	ldr.w	fp, [r6]
 80032fc:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8003300:	f1bb 0f00 	cmp.w	fp, #0
 8003304:	d0c4      	beq.n	8003290 <z_shell_wildcard_process+0x2c>
 8003306:	4658      	mov	r0, fp
 8003308:	f7fd f909 	bl	800051e <strlen>
 800330c:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
 800330e:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
 8003312:	4422      	add	r2, r4
 8003314:	2aff      	cmp	r2, #255	; 0xff
 8003316:	ddbd      	ble.n	8003294 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <z_shell_wildcard_process+0xe0>)
 800331a:	462b      	mov	r3, r5
 800331c:	2103      	movs	r1, #3
 800331e:	4638      	mov	r0, r7
 8003320:	f00c fa14 	bl	800f74c <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
 8003324:	2401      	movs	r4, #1
	if (cnt > 0) {
 8003326:	f1b8 0f00 	cmp.w	r8, #0
 800332a:	d0a3      	beq.n	8003274 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
 800332c:	68b8      	ldr	r0, [r7, #8]
 800332e:	462a      	mov	r2, r5
 8003330:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8003334:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8003338:	f00c f84f 	bl	800f3da <z_shell_pattern_remove>
	return ret_val;
 800333c:	e79a      	b.n	8003274 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 800333e:	2402      	movs	r4, #2
 8003340:	e7f1      	b.n	8003326 <z_shell_wildcard_process+0xc2>
 8003342:	bf00      	nop
 8003344:	08016f5b 	.word	0x08016f5b

08003348 <zsock_socket_internal>:
	k_fifo_cancel_wait(&ctx->recv_q);
}

#if defined(CONFIG_NET_NATIVE)
static int zsock_socket_internal(int family, int type, int proto)
{
 8003348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800334a:	4607      	mov	r7, r0
 800334c:	460e      	mov	r6, r1
 800334e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
 8003350:	f7fd facc 	bl	80008ec <z_reserve_fd>
	struct net_context *ctx;
	int res;

	if (fd < 0) {
 8003354:	1e04      	subs	r4, r0, #0
 8003356:	db17      	blt.n	8003388 <zsock_socket_internal+0x40>
		return -1;
	}

	if (proto == 0) {
 8003358:	b93d      	cbnz	r5, 800336a <zsock_socket_internal+0x22>
		if (family == AF_INET || family == AF_INET6) {
 800335a:	1e7b      	subs	r3, r7, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d804      	bhi.n	800336a <zsock_socket_internal+0x22>
			if (type == SOCK_DGRAM) {
 8003360:	2e02      	cmp	r6, #2
 8003362:	d014      	beq.n	800338e <zsock_socket_internal+0x46>
				proto = IPPROTO_UDP;
			} else if (type == SOCK_STREAM) {
				proto = IPPROTO_TCP;
 8003364:	2e01      	cmp	r6, #1
 8003366:	bf08      	it	eq
 8003368:	2506      	moveq	r5, #6
			}
		}
	}

	res = net_context_get(family, type, proto, &ctx);
 800336a:	b2f1      	uxtb	r1, r6
 800336c:	ab01      	add	r3, sp, #4
 800336e:	b2aa      	uxth	r2, r5
 8003370:	b2b8      	uxth	r0, r7
 8003372:	f001 fe67 	bl	8005044 <net_context_get>
	if (res < 0) {
 8003376:	1e06      	subs	r6, r0, #0
 8003378:	da0b      	bge.n	8003392 <zsock_socket_internal+0x4a>
		z_free_fd(fd);
 800337a:	4620      	mov	r0, r4
 800337c:	f7fd fb0a 	bl	8000994 <z_free_fd>
		errno = -res;
 8003380:	f00d f8e7 	bl	8010552 <__errno>
 8003384:	4276      	negs	r6, r6
 8003386:	6006      	str	r6, [r0, #0]
		return -1;
 8003388:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800338c:	e016      	b.n	80033bc <zsock_socket_internal+0x74>
				proto = IPPROTO_UDP;
 800338e:	2511      	movs	r5, #17
 8003390:	e7eb      	b.n	800336a <zsock_socket_internal+0x22>
		return -1;
	}

	/* Initialize user_data, all other calls will preserve it */
	ctx->user_data = NULL;
 8003392:	9801      	ldr	r0, [sp, #4]
 8003394:	2300      	movs	r3, #0
 8003396:	6003      	str	r3, [r0, #0]

	/* The socket flags are stored here */
	ctx->socket_data = NULL;
 8003398:	6583      	str	r3, [r0, #88]	; 0x58
	z_impl_k_queue_init(queue);
 800339a:	305c      	adds	r0, #92	; 0x5c
 800339c:	f010 fe0e 	bl	8013fbc <z_impl_k_queue_init>
	k_fifo_init(&ctx->recv_q);

	/* Condition variable is used to avoid keeping lock for a long time
	 * when waiting data to be received
	 */
	k_condvar_init(&ctx->cond.recv);
 80033a0:	9801      	ldr	r0, [sp, #4]
 80033a2:	3074      	adds	r0, #116	; 0x74
	return z_impl_k_condvar_init(condvar);
 80033a4:	f011 f819 	bl	80143da <z_impl_k_condvar_init>
	 * connection, but it must not dispose of the context behind
	 * the application back. Likewise, when application "closes"
	 * context, it's not disposed of immediately - there's yet
	 * closing handshake for stack to perform.
	 */
	if (proto == IPPROTO_TCP) {
 80033a8:	2d06      	cmp	r5, #6
 80033aa:	d102      	bne.n	80033b2 <zsock_socket_internal+0x6a>
		net_context_ref(ctx);
 80033ac:	9801      	ldr	r0, [sp, #4]
 80033ae:	f00d fdfe 	bl	8010fae <net_context_ref>
	}

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
 80033b2:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <zsock_socket_internal+0x7c>)
 80033b4:	9901      	ldr	r1, [sp, #4]
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7fd fad4 	bl	8000964 <z_finalize_fd>

	NET_DBG("socket: ctx=%p, fd=%d", ctx, fd);

	return fd;
}
 80033bc:	4620      	mov	r0, r4
 80033be:	b003      	add	sp, #12
 80033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c2:	bf00      	nop
 80033c4:	080156e0 	.word	0x080156e0

080033c8 <zsock_accepted_cb>:
#include <syscalls/zsock_shutdown_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void zsock_accepted_cb(struct net_context *new_ctx,
			      struct sockaddr *addr, socklen_t addrlen,
			      int status, void *user_data) {
 80033c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033ca:	9d06      	ldr	r5, [sp, #24]
 80033cc:	4604      	mov	r4, r0
	struct net_context *parent = user_data;

	NET_DBG("parent=%p, ctx=%p, st=%d", parent, new_ctx, status);

	if (status == 0) {
 80033ce:	b9c3      	cbnz	r3, 8003402 <zsock_accepted_cb+0x3a>
		/* This just installs a callback, so cannot fail. */
		(void)net_context_recv(new_ctx, zsock_received_cb, K_NO_WAIT,
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	490d      	ldr	r1, [pc, #52]	; (8003408 <zsock_accepted_cb+0x40>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	2300      	movs	r3, #0
 80033d8:	f001 ff5c 	bl	8005294 <net_context_recv>
	z_impl_k_queue_init(queue);
 80033dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033e0:	f010 fdec 	bl	8013fbc <z_impl_k_queue_init>
	return z_impl_k_condvar_init(condvar);
 80033e4:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80033e8:	f010 fff7 	bl	80143da <z_impl_k_condvar_init>
				       NULL);
		k_fifo_init(&new_ctx->recv_q);
		k_condvar_init(&new_ctx->cond.recv);

		k_fifo_put(&parent->accept_q, new_ctx);
 80033ec:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80033f0:	4621      	mov	r1, r4
 80033f2:	f010 fe10 	bl	8014016 <k_queue_append>
		 * connection, but it must not dispose of the context behind
		 * the application back. Likewise, when application "closes"
		 * context, it's not disposed of immediately - there's yet
		 * closing handshake for stack to perform.
		 */
		net_context_ref(new_ctx);
 80033f6:	4620      	mov	r0, r4
	}
}
 80033f8:	b003      	add	sp, #12
 80033fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_context_ref(new_ctx);
 80033fe:	f00d bdd6 	b.w	8010fae <net_context_ref>
}
 8003402:	b003      	add	sp, #12
 8003404:	bd30      	pop	{r4, r5, pc}
 8003406:	bf00      	nop
 8003408:	0800fc3b 	.word	0x0800fc3b

0800340c <z_impl_zsock_socket>:
{
 800340c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
 8003410:	4c11      	ldr	r4, [pc, #68]	; (8003458 <z_impl_zsock_socket+0x4c>)
 8003412:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800345c <z_impl_zsock_socket+0x50>
{
 8003416:	4605      	mov	r5, r0
 8003418:	460e      	mov	r6, r1
 800341a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
 800341c:	4544      	cmp	r4, r8
 800341e:	d307      	bcc.n	8003430 <z_impl_zsock_socket+0x24>
	errno = EAFNOSUPPORT;
 8003420:	f00d f897 	bl	8010552 <__errno>
 8003424:	236a      	movs	r3, #106	; 0x6a
 8003426:	6003      	str	r3, [r0, #0]
}
 8003428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800342c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	42ab      	cmp	r3, r5
 8003434:	d000      	beq.n	8003438 <z_impl_zsock_socket+0x2c>
 8003436:	b963      	cbnz	r3, 8003452 <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
 8003438:	6863      	ldr	r3, [r4, #4]
 800343a:	463a      	mov	r2, r7
 800343c:	4631      	mov	r1, r6
 800343e:	4628      	mov	r0, r5
 8003440:	4798      	blx	r3
 8003442:	b130      	cbz	r0, 8003452 <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
 8003444:	68a3      	ldr	r3, [r4, #8]
 8003446:	463a      	mov	r2, r7
 8003448:	4631      	mov	r1, r6
 800344a:	4628      	mov	r0, r5
}
 800344c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
 8003450:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
 8003452:	340c      	adds	r4, #12
 8003454:	e7e2      	b.n	800341c <z_impl_zsock_socket+0x10>
 8003456:	bf00      	nop
 8003458:	080151a8 	.word	0x080151a8
 800345c:	080151c0 	.word	0x080151c0

08003460 <zsock_bind_ctx>:
	(void)k_condvar_signal(&ctx->cond.recv);
}

int zsock_bind_ctx(struct net_context *ctx, const struct sockaddr *addr,
		   socklen_t addrlen)
{
 8003460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003462:	4605      	mov	r5, r0
	SET_ERRNO(net_context_bind(ctx, addr, addrlen));
 8003464:	f00d fde0 	bl	8011028 <net_context_bind>
 8003468:	1e04      	subs	r4, r0, #0
 800346a:	da07      	bge.n	800347c <zsock_bind_ctx+0x1c>
	/* For DGRAM socket, we expect to receive packets after call to
	 * bind(), but for STREAM socket, next expected operation is
	 * listen(), which doesn't work if recv callback is set.
	 */
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
 800346c:	f00d f871 	bl	8010552 <__errno>
 8003470:	4264      	negs	r4, r4
 8003472:	6004      	str	r4, [r0, #0]
 8003474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					   ctx->user_data));
	}

	return 0;
}
 8003478:	b003      	add	sp, #12
 800347a:	bd30      	pop	{r4, r5, pc}
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
	NET_ASSERT(context);

	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 800347c:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
 8003480:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_DGRAM) {
 8003484:	2b02      	cmp	r3, #2
 8003486:	d109      	bne.n	800349c <zsock_bind_ctx+0x3c>
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	4904      	ldr	r1, [pc, #16]	; (80034a0 <zsock_bind_ctx+0x40>)
 800348e:	2200      	movs	r2, #0
 8003490:	2300      	movs	r3, #0
 8003492:	4628      	mov	r0, r5
 8003494:	f001 fefe 	bl	8005294 <net_context_recv>
 8003498:	1e04      	subs	r4, r0, #0
 800349a:	dbe7      	blt.n	800346c <zsock_bind_ctx+0xc>
	return 0;
 800349c:	2000      	movs	r0, #0
 800349e:	e7eb      	b.n	8003478 <zsock_bind_ctx+0x18>
 80034a0:	0800fc3b 	.word	0x0800fc3b

080034a4 <zsock_connect_ctx>:
#include <syscalls/zsock_bind_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_connect_ctx(struct net_context *ctx, const struct sockaddr *addr,
		      socklen_t addrlen)
{
 80034a4:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
		SET_ERRNO(net_context_recv(ctx, zsock_received_cb,
					   K_NO_WAIT, ctx->user_data));
		return 0;
	}
#endif
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
 80034a8:	2400      	movs	r4, #0
 80034aa:	f247 5830 	movw	r8, #30000	; 0x7530
 80034ae:	f04f 0900 	mov.w	r9, #0
 80034b2:	e9cd 8900 	strd	r8, r9, [sp]
 80034b6:	9402      	str	r4, [sp, #8]
 80034b8:	4623      	mov	r3, r4
{
 80034ba:	4606      	mov	r6, r0
	SET_ERRNO(net_context_connect(ctx, addr, addrlen, NULL,
 80034bc:	f00d ffe9 	bl	8011492 <net_context_connect>
 80034c0:	1e05      	subs	r5, r0, #0
 80034c2:	da08      	bge.n	80034d6 <zsock_connect_ctx+0x32>
			      K_MSEC(CONFIG_NET_SOCKETS_CONNECT_TIMEOUT),
			      NULL));
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
 80034c4:	f00d f845 	bl	8010552 <__errno>
 80034c8:	426d      	negs	r5, r5
 80034ca:	6005      	str	r5, [r0, #0]
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
				   ctx->user_data));

	return 0;
}
 80034d0:	b004      	add	sp, #16
 80034d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	SET_ERRNO(net_context_recv(ctx, zsock_received_cb, K_NO_WAIT,
 80034d6:	6833      	ldr	r3, [r6, #0]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4905      	ldr	r1, [pc, #20]	; (80034f0 <zsock_connect_ctx+0x4c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	2300      	movs	r3, #0
 80034e0:	4630      	mov	r0, r6
 80034e2:	f001 fed7 	bl	8005294 <net_context_recv>
 80034e6:	1e05      	subs	r5, r0, #0
 80034e8:	dbec      	blt.n	80034c4 <zsock_connect_ctx+0x20>
	return 0;
 80034ea:	4620      	mov	r0, r4
 80034ec:	e7f0      	b.n	80034d0 <zsock_connect_ctx+0x2c>
 80034ee:	bf00      	nop
 80034f0:	0800fc3b 	.word	0x0800fc3b

080034f4 <zsock_listen_ctx>:
}
#include <syscalls/zsock_connect_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_listen_ctx(struct net_context *ctx, int backlog)
{
 80034f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034f6:	4605      	mov	r5, r0
	SET_ERRNO(net_context_listen(ctx, backlog));
 80034f8:	f00d fe2c 	bl	8011154 <net_context_listen>
 80034fc:	1e04      	subs	r4, r0, #0
 80034fe:	da07      	bge.n	8003510 <zsock_listen_ctx+0x1c>
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
 8003500:	f00d f827 	bl	8010552 <__errno>
 8003504:	4264      	negs	r4, r4
 8003506:	6004      	str	r4, [r0, #0]
 8003508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	return 0;
}
 800350c:	b003      	add	sp, #12
 800350e:	bd30      	pop	{r4, r5, pc}
	SET_ERRNO(net_context_accept(ctx, zsock_accepted_cb, K_NO_WAIT, ctx));
 8003510:	4905      	ldr	r1, [pc, #20]	; (8003528 <zsock_listen_ctx+0x34>)
 8003512:	9500      	str	r5, [sp, #0]
 8003514:	2200      	movs	r2, #0
 8003516:	2300      	movs	r3, #0
 8003518:	4628      	mov	r0, r5
 800351a:	f00e f85b 	bl	80115d4 <net_context_accept>
 800351e:	1e04      	subs	r4, r0, #0
 8003520:	dbee      	blt.n	8003500 <zsock_listen_ctx+0xc>
	return 0;
 8003522:	2000      	movs	r0, #0
 8003524:	e7f2      	b.n	800350c <zsock_listen_ctx+0x18>
 8003526:	bf00      	nop
 8003528:	080033c9 	.word	0x080033c9

0800352c <zsock_accept_ctx>:
#include <syscalls/zsock_listen_mrsh.c>
#endif /* CONFIG_USERSPACE */

int zsock_accept_ctx(struct net_context *parent, struct sockaddr *addr,
		     socklen_t *addrlen)
{
 800352c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003530:	4604      	mov	r4, r0
 8003532:	460f      	mov	r7, r1
 8003534:	4616      	mov	r6, r2
	k_timeout_t timeout = K_FOREVER;
	struct net_context *ctx;
	struct net_pkt *last_pkt;
	int fd;

	fd = z_reserve_fd();
 8003536:	f7fd f9d9 	bl	80008ec <z_reserve_fd>
	if (fd < 0) {
 800353a:	1e05      	subs	r5, r0, #0
 800353c:	db17      	blt.n	800356e <zsock_accept_ctx+0x42>
	(ctx)->socket_data = UINT_TO_POINTER(val);
}

static inline uintptr_t sock_get_flag(struct net_context *ctx, uintptr_t mask)
{
	return POINTER_TO_UINT(ctx->socket_data) & mask;
 800353e:	6da3      	ldr	r3, [r4, #88]	; 0x58
		return -1;
	}

	if (sock_is_nonblock(parent)) {
 8003540:	f013 0802 	ands.w	r8, r3, #2
 8003544:	bf0c      	ite	eq
 8003546:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
 800354a:	2200      	movne	r2, #0
 800354c:	4613      	mov	r3, r2
	return z_impl_k_queue_get(queue, timeout);
 800354e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003552:	f008 fff1 	bl	800c538 <z_impl_k_queue_get>
		timeout = K_NO_WAIT;
	}

	ctx = k_fifo_get(&parent->accept_q, timeout);
	if (ctx == NULL) {
 8003556:	4604      	mov	r4, r0
 8003558:	b980      	cbnz	r0, 800357c <zsock_accept_ctx+0x50>
		z_free_fd(fd);
 800355a:	4628      	mov	r0, r5
 800355c:	f7fd fa1a 	bl	8000994 <z_free_fd>
		if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8003560:	f1b8 0f00 	cmp.w	r8, #0
 8003564:	d006      	beq.n	8003574 <zsock_accept_ctx+0x48>
			/* For non-blocking sockets return EAGAIN because it
			 * just means the fifo is empty at this time
			 */
			errno = EAGAIN;
 8003566:	f00c fff4 	bl	8010552 <__errno>
 800356a:	230b      	movs	r3, #11
		if (net_pkt_eof(last_pkt)) {
			sock_set_eof(ctx);
			z_free_fd(fd);
			zsock_flush_queue(ctx);
			net_context_unref(ctx);
			errno = ECONNABORTED;
 800356c:	6003      	str	r3, [r0, #0]
		return -1;
 800356e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003572:	e047      	b.n	8003604 <zsock_accept_ctx+0xd8>
			errno = EINVAL;
 8003574:	f00c ffed 	bl	8010552 <__errno>
 8003578:	2316      	movs	r3, #22
 800357a:	e7f7      	b.n	800356c <zsock_accept_ctx+0x40>
	return z_impl_k_queue_peek_tail(queue);
 800357c:	305c      	adds	r0, #92	; 0x5c
 800357e:	f010 fd63 	bl	8014048 <z_impl_k_queue_peek_tail>
	if (last_pkt) {
 8003582:	b1a0      	cbz	r0, 80035ae <zsock_accept_ctx+0x82>
}

#if defined(CONFIG_NET_SOCKETS)
static inline uint8_t net_pkt_eof(struct net_pkt *pkt)
{
	return pkt->sent_or_eof;
 8003584:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
		if (net_pkt_eof(last_pkt)) {
 8003588:	0799      	lsls	r1, r3, #30
 800358a:	d510      	bpl.n	80035ae <zsock_accept_ctx+0x82>
	val = (val & ~mask) | flag;
 800358c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800358e:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
 8003592:	65a3      	str	r3, [r4, #88]	; 0x58
			z_free_fd(fd);
 8003594:	4628      	mov	r0, r5
 8003596:	f7fd f9fd 	bl	8000994 <z_free_fd>
			zsock_flush_queue(ctx);
 800359a:	4620      	mov	r0, r4
 800359c:	f00c fb8f 	bl	800fcbe <zsock_flush_queue>
			net_context_unref(ctx);
 80035a0:	4620      	mov	r0, r4
 80035a2:	f00d fd12 	bl	8010fca <net_context_unref>
			errno = ECONNABORTED;
 80035a6:	f00c ffd4 	bl	8010552 <__errno>
 80035aa:	2371      	movs	r3, #113	; 0x71
 80035ac:	e7de      	b.n	800356c <zsock_accept_ctx+0x40>
	return context->flags & NET_CONTEXT_CLOSING_SOCK;
 80035ae:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
			return -1;
		}
	}

	if (net_context_is_closing(ctx)) {
 80035b2:	055a      	lsls	r2, r3, #21
 80035b4:	d50d      	bpl.n	80035d2 <zsock_accept_ctx+0xa6>
		errno = ECONNABORTED;
 80035b6:	f00c ffcc 	bl	8010552 <__errno>
 80035ba:	2371      	movs	r3, #113	; 0x71
 80035bc:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
 80035be:	4628      	mov	r0, r5
 80035c0:	f7fd f9e8 	bl	8000994 <z_free_fd>
		} else if (ctx->remote.sa_family == AF_INET6) {
			*addrlen = sizeof(struct sockaddr_in6);
		} else {
			z_free_fd(fd);
			errno = ENOTSUP;
			zsock_flush_queue(ctx);
 80035c4:	4620      	mov	r0, r4
 80035c6:	f00c fb7a 	bl	800fcbe <zsock_flush_queue>
			net_context_unref(ctx);
 80035ca:	4620      	mov	r0, r4
 80035cc:	f00d fcfd 	bl	8010fca <net_context_unref>
			return -1;
 80035d0:	e7cd      	b.n	800356e <zsock_accept_ctx+0x42>
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
 80035d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d6:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
	if (addr != NULL && addrlen != NULL) {
 80035da:	b177      	cbz	r7, 80035fa <zsock_accept_ctx+0xce>
 80035dc:	b16e      	cbz	r6, 80035fa <zsock_accept_ctx+0xce>
		int len = MIN(*addrlen, sizeof(ctx->remote));
 80035de:	6832      	ldr	r2, [r6, #0]
 80035e0:	2a08      	cmp	r2, #8
 80035e2:	bf28      	it	cs
 80035e4:	2208      	movcs	r2, #8
 80035e6:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80035ea:	4638      	mov	r0, r7
 80035ec:	f011 f8de 	bl	80147ac <memcpy>
		if (ctx->remote.sa_family == AF_INET) {
 80035f0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d109      	bne.n	800360a <zsock_accept_ctx+0xde>
			*addrlen = sizeof(struct sockaddr_in);
 80035f6:	2308      	movs	r3, #8
			*addrlen = sizeof(struct sockaddr_in6);
 80035f8:	6033      	str	r3, [r6, #0]
		}
	}

	NET_DBG("accept: ctx=%p, fd=%d", ctx, fd);

	z_finalize_fd(fd, ctx, (const struct fd_op_vtable *)&sock_fd_op_vtable);
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <zsock_accept_ctx+0xf8>)
 80035fc:	4621      	mov	r1, r4
 80035fe:	4628      	mov	r0, r5
 8003600:	f7fd f9b0 	bl	8000964 <z_finalize_fd>

	return fd;
}
 8003604:	4628      	mov	r0, r5
 8003606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ctx->remote.sa_family == AF_INET6) {
 800360a:	2b02      	cmp	r3, #2
 800360c:	d101      	bne.n	8003612 <zsock_accept_ctx+0xe6>
			*addrlen = sizeof(struct sockaddr_in6);
 800360e:	2318      	movs	r3, #24
 8003610:	e7f2      	b.n	80035f8 <zsock_accept_ctx+0xcc>
			z_free_fd(fd);
 8003612:	4628      	mov	r0, r5
 8003614:	f7fd f9be 	bl	8000994 <z_free_fd>
			errno = ENOTSUP;
 8003618:	f00c ff9b 	bl	8010552 <__errno>
 800361c:	2386      	movs	r3, #134	; 0x86
 800361e:	6003      	str	r3, [r0, #0]
 8003620:	e7d0      	b.n	80035c4 <zsock_accept_ctx+0x98>
 8003622:	bf00      	nop
 8003624:	080156e0 	.word	0x080156e0

08003628 <zsock_sendto_ctx>:
#define MAX_WAIT_BUFS K_SECONDS(10)

ssize_t zsock_sendto_ctx(struct net_context *ctx, const void *buf, size_t len,
			 int flags,
			 const struct sockaddr *dest_addr, socklen_t addrlen)
{
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	b089      	sub	sp, #36	; 0x24
 800362e:	460e      	mov	r6, r1
 8003630:	4690      	mov	r8, r2
	k_timeout_t timeout = K_FOREVER;
 8003632:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	uint64_t buf_timeout = 0;
	int status;

	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 800363a:	065b      	lsls	r3, r3, #25
	k_timeout_t timeout = K_FOREVER;
 800363c:	e9cd 1206 	strd	r1, r2, [sp, #24]
{
 8003640:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8003644:	4604      	mov	r4, r0
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 8003646:	d403      	bmi.n	8003650 <zsock_sendto_ctx+0x28>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
 8003648:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800364a:	f013 0302 	ands.w	r3, r3, #2
 800364e:	d045      	beq.n	80036dc <zsock_sendto_ctx+0xb4>
		timeout = K_NO_WAIT;
 8003650:	2200      	movs	r2, #0
 8003652:	2300      	movs	r3, #0
 8003654:	e9cd 2306 	strd	r2, r3, [sp, #24]
	uint64_t buf_timeout = 0;
 8003658:	2500      	movs	r5, #0
 800365a:	46a9      	mov	r9, r5
	}

	/* Register the callback before sending in order to receive the response
	 * from the peer.
	 */
	status = net_context_recv(ctx, zsock_received_cb,
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4936      	ldr	r1, [pc, #216]	; (800373c <zsock_sendto_ctx+0x114>)
 8003662:	2200      	movs	r2, #0
 8003664:	2300      	movs	r3, #0
 8003666:	4620      	mov	r0, r4
 8003668:	f001 fe14 	bl	8005294 <net_context_recv>
				  K_NO_WAIT, ctx->user_data);
	if (status < 0) {
 800366c:	f1b0 0b00 	subs.w	fp, r0, #0
 8003670:	db3f      	blt.n	80036f2 <zsock_sendto_ctx+0xca>
		if (dest_addr) {
			status = net_context_sendto(ctx, buf, len, dest_addr,
						    addrlen, NULL, timeout,
						    ctx->user_data);
		} else {
			status = net_context_send(ctx, buf, len, NULL, timeout,
 8003672:	f04f 0b00 	mov.w	fp, #0
		if (dest_addr) {
 8003676:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			status = net_context_sendto(ctx, buf, len, dest_addr,
 800367a:	6821      	ldr	r1, [r4, #0]
		if (dest_addr) {
 800367c:	f1ba 0f00 	cmp.w	sl, #0
 8003680:	d042      	beq.n	8003708 <zsock_sendto_ctx+0xe0>
			status = net_context_sendto(ctx, buf, len, dest_addr,
 8003682:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003688:	9104      	str	r1, [sp, #16]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	f8cd b004 	str.w	fp, [sp, #4]
 8003690:	4653      	mov	r3, sl
 8003692:	4642      	mov	r2, r8
 8003694:	4631      	mov	r1, r6
 8003696:	4620      	mov	r0, r4
 8003698:	f00e f855 	bl	8011746 <net_context_sendto>
						  ctx->user_data);
		}

		if (status < 0) {
 800369c:	2800      	cmp	r0, #0
			status = net_context_send(ctx, buf, len, NULL, timeout,
 800369e:	4607      	mov	r7, r0
		if (status < 0) {
 80036a0:	da2e      	bge.n	8003700 <zsock_sendto_ctx+0xd8>
			if (((status == -ENOBUFS) || (status == -EAGAIN)) &&
 80036a2:	f110 0f69 	cmn.w	r0, #105	; 0x69
 80036a6:	d002      	beq.n	80036ae <zsock_sendto_ctx+0x86>
 80036a8:	f110 0f0b 	cmn.w	r0, #11
 80036ac:	d140      	bne.n	8003730 <zsock_sendto_ctx+0x108>
 80036ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80036b2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80036b6:	bf08      	it	eq
 80036b8:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
 80036bc:	d138      	bne.n	8003730 <zsock_sendto_ctx+0x108>
				 * there might be some bigger issue.
				 * If we get -EAGAIN and cannot recover, then
				 * it means that the sending window is blocked
				 * and we just cannot send anything.
				 */
				int64_t remaining = buf_timeout - sys_clock_tick_get();
 80036be:	f009 fe67 	bl	800d390 <sys_clock_tick_get>
 80036c2:	1a28      	subs	r0, r5, r0
 80036c4:	eb69 0101 	sbc.w	r1, r9, r1

				if (remaining <= 0) {
 80036c8:	2801      	cmp	r0, #1
 80036ca:	f171 0300 	sbcs.w	r3, r1, #0
 80036ce:	da29      	bge.n	8003724 <zsock_sendto_ctx+0xfc>
					if (status == -ENOBUFS) {
 80036d0:	3769      	adds	r7, #105	; 0x69
 80036d2:	d123      	bne.n	800371c <zsock_sendto_ctx+0xf4>
						errno = ENOMEM;
 80036d4:	f00c ff3d 	bl	8010552 <__errno>
 80036d8:	230c      	movs	r3, #12
 80036da:	e00e      	b.n	80036fa <zsock_sendto_ctx+0xd2>
		net_context_get_option(ctx, NET_OPT_SNDTIMEO, &timeout, NULL);
 80036dc:	aa06      	add	r2, sp, #24
 80036de:	2105      	movs	r1, #5
 80036e0:	f001 fe8a 	bl	80053f8 <net_context_get_option>
		buf_timeout = sys_clock_timeout_end_calc(MAX_WAIT_BUFS);
 80036e4:	4816      	ldr	r0, [pc, #88]	; (8003740 <zsock_sendto_ctx+0x118>)
 80036e6:	2100      	movs	r1, #0
 80036e8:	f010 fec1 	bl	801446e <sys_clock_timeout_end_calc>
 80036ec:	4605      	mov	r5, r0
 80036ee:	4689      	mov	r9, r1
 80036f0:	e7b4      	b.n	800365c <zsock_sendto_ctx+0x34>
		errno = -status;
 80036f2:	f00c ff2e 	bl	8010552 <__errno>
 80036f6:	f1cb 0300 	rsb	r3, fp, #0
					} else {
						errno = ENOBUFS;
 80036fa:	6003      	str	r3, [r0, #0]

				k_sleep(WAIT_BUFS);
				continue;
			} else {
				errno = -status;
				return -1;
 80036fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

		break;
	}

	return status;
}
 8003700:	4638      	mov	r0, r7
 8003702:	b009      	add	sp, #36	; 0x24
 8003704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			status = net_context_send(ctx, buf, len, NULL, timeout,
 8003708:	e9cd 2300 	strd	r2, r3, [sp]
 800370c:	9102      	str	r1, [sp, #8]
 800370e:	4653      	mov	r3, sl
 8003710:	4642      	mov	r2, r8
 8003712:	4631      	mov	r1, r6
 8003714:	4620      	mov	r0, r4
 8003716:	f00d ffb9 	bl	801168c <net_context_send>
 800371a:	e7bf      	b.n	800369c <zsock_sendto_ctx+0x74>
						errno = ENOBUFS;
 800371c:	f00c ff19 	bl	8010552 <__errno>
 8003720:	2369      	movs	r3, #105	; 0x69
 8003722:	e7ea      	b.n	80036fa <zsock_sendto_ctx+0xd2>
	return z_impl_k_sleep(timeout);
 8003724:	2100      	movs	r1, #0
 8003726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800372a:	f009 fbf5 	bl	800cf18 <z_impl_k_sleep>
				continue;
 800372e:	e7a2      	b.n	8003676 <zsock_sendto_ctx+0x4e>
				errno = -status;
 8003730:	f00c ff0f 	bl	8010552 <__errno>
 8003734:	427f      	negs	r7, r7
 8003736:	6007      	str	r7, [r0, #0]
 8003738:	e7e0      	b.n	80036fc <zsock_sendto_ctx+0xd4>
 800373a:	bf00      	nop
 800373c:	0800fc3b 	.word	0x0800fc3b
 8003740:	000186a0 	.word	0x000186a0

08003744 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
 8003744:	4b01      	ldr	r3, [pc, #4]	; (800374c <socket_offload_dns_register+0x8>)
 8003746:	6018      	str	r0, [r3, #0]
}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20001ea0 	.word	0x20001ea0

08003750 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003750:	4901      	ldr	r1, [pc, #4]	; (8003758 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003752:	2210      	movs	r2, #16
	str	r2, [r1]
 8003754:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003756:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003758:	e000ed10 	.word	0xe000ed10

0800375c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800375c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800375e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003760:	f380 8811 	msr	BASEPRI, r0
	isb
 8003764:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003768:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 800376c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800376e:	b662      	cpsie	i
	isb
 8003770:	f3bf 8f6f 	isb	sy

	bx	lr
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop

08003778 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003778:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800377a:	2b00      	cmp	r3, #0
 800377c:	db08      	blt.n	8003790 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	2201      	movs	r2, #1
 8003780:	f000 001f 	and.w	r0, r0, #31
 8003784:	fa02 f000 	lsl.w	r0, r2, r0
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	4a02      	ldr	r2, [pc, #8]	; (8003794 <arch_irq_enable+0x1c>)
 800378c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000e100 	.word	0xe000e100

08003798 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8003798:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800379a:	2b00      	cmp	r3, #0
 800379c:	db0d      	blt.n	80037ba <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379e:	2201      	movs	r2, #1
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	f000 001f 	and.w	r0, r0, #31
 80037a6:	fa02 f000 	lsl.w	r0, r2, r0
 80037aa:	3320      	adds	r3, #32
 80037ac:	4a03      	ldr	r2, [pc, #12]	; (80037bc <arch_irq_disable+0x24>)
 80037ae:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037b6:	f3bf 8f6f 	isb	sy
}
 80037ba:	4770      	bx	lr
 80037bc:	e000e100 	.word	0xe000e100

080037c0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <arch_irq_is_enabled+0x18>)
 80037c2:	0942      	lsrs	r2, r0, #5
 80037c4:	f000 001f 	and.w	r0, r0, #31
 80037c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037cc:	2301      	movs	r3, #1
 80037ce:	fa03 f000 	lsl.w	r0, r3, r0
}
 80037d2:	4010      	ands	r0, r2
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000e100 	.word	0xe000e100

080037dc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80037dc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80037de:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e0:	bfa8      	it	ge
 80037e2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 80037e6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ea:	bfb8      	it	lt
 80037ec:	4b06      	ldrlt	r3, [pc, #24]	; (8003808 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ee:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80037f2:	bfac      	ite	ge
 80037f4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fe:	bfb4      	ite	lt
 8003800:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003802:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8003806:	4770      	bx	lr
 8003808:	e000ed14 	.word	0xe000ed14

0800380c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 800380c:	bf30      	wfi
    b z_SysNmiOnReset
 800380e:	f7ff bffd 	b.w	800380c <z_SysNmiOnReset>
 8003812:	bf00      	nop

08003814 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003814:	4a0f      	ldr	r2, [pc, #60]	; (8003854 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8003816:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <z_arm_prep_c+0x44>)
 800381a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800381e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003820:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003824:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8003828:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800382c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003834:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8003838:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800383c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8003840:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003844:	f008 fb7e 	bl	800bf44 <z_bss_zero>
	z_data_copy();
 8003848:	f009 fc40 	bl	800d0cc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 800384c:	f000 f9ca 	bl	8003be4 <z_arm_interrupt_init>
	z_cstart();
 8003850:	f008 fb82 	bl	800bf58 <z_cstart>
 8003854:	08000000 	.word	0x08000000
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 800385c:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
 800385e:	490b      	ldr	r1, [pc, #44]	; (800388c <arch_swap+0x30>)
	_current->arch.basepri = key;
 8003860:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003862:	6809      	ldr	r1, [r1, #0]
 8003864:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003868:	4909      	ldr	r1, [pc, #36]	; (8003890 <arch_swap+0x34>)
	_current->arch.basepri = key;
 800386a:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800386e:	684b      	ldr	r3, [r1, #4]
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	604b      	str	r3, [r1, #4]
 8003876:	2300      	movs	r3, #0
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003880:	6893      	ldr	r3, [r2, #8]
}
 8003882:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8003886:	4770      	bx	lr
 8003888:	20002524 	.word	0x20002524
 800388c:	08016148 	.word	0x08016148
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003894:	4913      	ldr	r1, [pc, #76]	; (80038e4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003896:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003898:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800389c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800389e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80038a2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80038a6:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 80038a8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80038ac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80038b0:	4f0d      	ldr	r7, [pc, #52]	; (80038e8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80038b2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80038b6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 80038b8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80038ba:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80038bc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
 80038c0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80038c2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80038c6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80038ca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80038cc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80038ce:	f000 f9cf 	bl	8003c70 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80038d2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80038d6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80038da:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80038de:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80038e2:	4770      	bx	lr
    ldr r1, =_kernel
 80038e4:	20002524 	.word	0x20002524
    ldr v4, =_SCS_ICSR
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80038ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80038f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80038f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80038f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80038fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80038fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003900:	2902      	cmp	r1, #2
    beq _oops
 8003902:	d0ff      	beq.n	8003904 <_oops>

08003904 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003904:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8003906:	f00c fde5 	bl	80104d4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800390a:	bd01      	pop	{r0, pc}

0800390c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 800390c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003910:	9b00      	ldr	r3, [sp, #0]
 8003912:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8003916:	490a      	ldr	r1, [pc, #40]	; (8003940 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8003918:	9b01      	ldr	r3, [sp, #4]
 800391a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800391e:	9b02      	ldr	r3, [sp, #8]
 8003920:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8003924:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800392c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8003930:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8003934:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8003936:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8003938:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 800393a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800393e:	4770      	bx	lr
 8003940:	0800e793 	.word	0x0800e793

08003944 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003944:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <z_check_thread_stack_fail+0x2c>)
{
 8003946:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8003948:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 800394a:	b178      	cbz	r0, 800396c <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800394c:	f113 0f16 	cmn.w	r3, #22
 8003950:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 8003954:	d005      	beq.n	8003962 <z_check_thread_stack_fail+0x1e>
 8003956:	f1a0 0220 	sub.w	r2, r0, #32
 800395a:	429a      	cmp	r2, r3
 800395c:	d805      	bhi.n	800396a <z_check_thread_stack_fail+0x26>
 800395e:	4283      	cmp	r3, r0
 8003960:	d203      	bcs.n	800396a <z_check_thread_stack_fail+0x26>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003962:	4281      	cmp	r1, r0
 8003964:	bf28      	it	cs
 8003966:	2000      	movcs	r0, #0
 8003968:	4770      	bx	lr
 800396a:	2000      	movs	r0, #0
}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20002524 	.word	0x20002524

08003974 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003974:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <arch_switch_to_main_thread+0x28>)
 8003978:	6098      	str	r0, [r3, #8]
{
 800397a:	460d      	mov	r5, r1
 800397c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800397e:	f000 f977 	bl	8003c70 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003982:	4620      	mov	r0, r4
 8003984:	f385 8809 	msr	PSP, r5
 8003988:	2100      	movs	r1, #0
 800398a:	b663      	cpsie	if
 800398c:	f381 8811 	msr	BASEPRI, r1
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	2200      	movs	r2, #0
 8003996:	2300      	movs	r3, #0
 8003998:	f00a fefb 	bl	800e792 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 800399c:	20002524 	.word	0x20002524

080039a0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80039a0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80039a2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80039a6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80039aa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80039ae:	4904      	ldr	r1, [pc, #16]	; (80039c0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80039b0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80039b2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80039b4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80039b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80039ba:	4902      	ldr	r1, [pc, #8]	; (80039c4 <_isr_wrapper+0x24>)
	bx r1
 80039bc:	4708      	bx	r1
 80039be:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80039c0:	08014f18 	.word	0x08014f18
	ldr r1, =z_arm_int_exit
 80039c4:	080039c9 	.word	0x080039c9

080039c8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80039ca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80039cc:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 80039ce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80039d0:	d003      	beq.n	80039da <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80039d2:	4903      	ldr	r1, [pc, #12]	; (80039e0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80039d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80039d8:	600a      	str	r2, [r1, #0]

080039da <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80039da:	4770      	bx	lr
	ldr r3, =_kernel
 80039dc:	20002524 	.word	0x20002524
	ldr r1, =_SCS_ICSR
 80039e0:	e000ed04 	.word	0xe000ed04

080039e4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 80039e4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <mem_manage_fault+0x68>)
{
 80039e8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80039ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80039ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80039ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 80039f0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80039f2:	0790      	lsls	r0, r2, #30
 80039f4:	d519      	bpl.n	8003a2a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 80039f6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80039f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039fa:	0612      	lsls	r2, r2, #24
 80039fc:	d515      	bpl.n	8003a2a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 80039fe:	b119      	cbz	r1, 8003a08 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8003a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0e:	06d1      	lsls	r1, r2, #27
 8003a10:	d40e      	bmi.n	8003a30 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003a14:	079a      	lsls	r2, r3, #30
 8003a16:	d40b      	bmi.n	8003a30 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8003a18:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003a1a:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <mem_manage_fault+0x68>)
 8003a1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003a1e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8003a22:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8003a24:	2300      	movs	r3, #0
 8003a26:	7023      	strb	r3, [r4, #0]

	return reason;
}
 8003a28:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 8003a2a:	f06f 0015 	mvn.w	r0, #21
 8003a2e:	e7eb      	b.n	8003a08 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <mem_manage_fault+0x68>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	051b      	lsls	r3, r3, #20
 8003a36:	d5ef      	bpl.n	8003a18 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8003a38:	4629      	mov	r1, r5
 8003a3a:	f7ff ff83 	bl	8003944 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d0ea      	beq.n	8003a18 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003a42:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8003a46:	2002      	movs	r0, #2
 8003a48:	e7e7      	b.n	8003a1a <mem_manage_fault+0x36>
 8003a4a:	bf00      	nop
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <bus_fault.constprop.0+0x38>)
 8003a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a58:	0592      	lsls	r2, r2, #22
 8003a5a:	d508      	bpl.n	8003a6e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8003a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8003a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a60:	0412      	lsls	r2, r2, #16
 8003a62:	d504      	bpl.n	8003a6e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8003a64:	b118      	cbz	r0, 8003a6e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8003a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <bus_fault.constprop.0+0x38>)
 8003a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8003a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a74:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8003a76:	bf58      	it	pl
 8003a78:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8003a7c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003a7e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003a84:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8003a86:	4770      	bx	lr
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8003a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003a8e:	4b4b      	ldr	r3, [pc, #300]	; (8003bbc <z_arm_fault+0x130>)
 8003a90:	685b      	ldr	r3, [r3, #4]
{
 8003a92:	b08b      	sub	sp, #44	; 0x2c
 8003a94:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	f385 8811 	msr	BASEPRI, r5
 8003aa0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8003aa4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8003aa8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8003aac:	d111      	bne.n	8003ad2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8003aae:	f002 010c 	and.w	r1, r2, #12
 8003ab2:	2908      	cmp	r1, #8
 8003ab4:	d00d      	beq.n	8003ad2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8003ab6:	0716      	lsls	r6, r2, #28
 8003ab8:	d401      	bmi.n	8003abe <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8003aba:	4604      	mov	r4, r0
			*nested_exc = true;
 8003abc:	2501      	movs	r5, #1
	*recoverable = false;
 8003abe:	2200      	movs	r2, #0
	switch (fault) {
 8003ac0:	3b03      	subs	r3, #3
	*recoverable = false;
 8003ac2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d871      	bhi.n	8003bae <z_arm_fault+0x122>
 8003aca:	e8df f003 	tbb	[pc, r3]
 8003ace:	5b04      	.short	0x5b04
 8003ad0:	635f      	.short	0x635f
		return NULL;
 8003ad2:	462c      	mov	r4, r5
 8003ad4:	e7f3      	b.n	8003abe <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8003ad6:	4a39      	ldr	r2, [pc, #228]	; (8003bbc <z_arm_fault+0x130>)
 8003ad8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ada:	f013 0302 	ands.w	r3, r3, #2
 8003ade:	d166      	bne.n	8003bae <z_arm_fault+0x122>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8003ae0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ae2:	2900      	cmp	r1, #0
 8003ae4:	db15      	blt.n	8003b12 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8003ae6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ae8:	0049      	lsls	r1, r1, #1
 8003aea:	d512      	bpl.n	8003b12 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
 8003aec:	69a1      	ldr	r1, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8003aee:	f831 0c02 	ldrh.w	r0, [r1, #-2]
 8003af2:	f64d 7102 	movw	r1, #57090	; 0xdf02
 8003af6:	4288      	cmp	r0, r1
 8003af8:	d00a      	beq.n	8003b10 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
 8003afa:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8003afe:	b339      	cbz	r1, 8003b50 <z_arm_fault+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
 8003b00:	f10d 0207 	add.w	r2, sp, #7
 8003b04:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8003b06:	4620      	mov	r0, r4
 8003b08:	f7ff ff6c 	bl	80039e4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
 8003b0c:	4603      	mov	r3, r0
		break;
 8003b0e:	e000      	b.n	8003b12 <z_arm_fault+0x86>
			reason = esf->basic.r0;
 8003b10:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8003b12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003b16:	b9ca      	cbnz	r2, 8003b4c <z_arm_fault+0xc0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8003b18:	ae02      	add	r6, sp, #8
 8003b1a:	f104 0720 	add.w	r7, r4, #32
 8003b1e:	6820      	ldr	r0, [r4, #0]
 8003b20:	6861      	ldr	r1, [r4, #4]
 8003b22:	4632      	mov	r2, r6
 8003b24:	c203      	stmia	r2!, {r0, r1}
 8003b26:	3408      	adds	r4, #8
 8003b28:	42bc      	cmp	r4, r7
 8003b2a:	4616      	mov	r6, r2
 8003b2c:	d1f7      	bne.n	8003b1e <z_arm_fault+0x92>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8003b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b30:	2d00      	cmp	r5, #0
 8003b32:	d03e      	beq.n	8003bb2 <z_arm_fault+0x126>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8003b34:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003b38:	b921      	cbnz	r1, 8003b44 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8003b3a:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8003b3e:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003b42:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8003b44:	a902      	add	r1, sp, #8
 8003b46:	4618      	mov	r0, r3
 8003b48:	f00c fcc2 	bl	80104d0 <z_arm_fatal_error>
}
 8003b4c:	b00b      	add	sp, #44	; 0x2c
 8003b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
 8003b50:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 8003b54:	b129      	cbz	r1, 8003b62 <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
 8003b56:	f10d 0107 	add.w	r1, sp, #7
 8003b5a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8003b5c:	f7ff ff78 	bl	8003a50 <bus_fault.constprop.0>
 8003b60:	e7d4      	b.n	8003b0c <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
 8003b62:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8003b64:	b289      	uxth	r1, r1
 8003b66:	2900      	cmp	r1, #0
 8003b68:	d0d3      	beq.n	8003b12 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003b6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003b6c:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003b6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003b70:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8003b72:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003b74:	6a91      	ldr	r1, [r2, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003b76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b78:	ea6f 4101 	mvn.w	r1, r1, lsl #16
 8003b7c:	ea6f 4111 	mvn.w	r1, r1, lsr #16
 8003b80:	6291      	str	r1, [r2, #40]	; 0x28
	return reason;
 8003b82:	e7c6      	b.n	8003b12 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
 8003b84:	f10d 0207 	add.w	r2, sp, #7
 8003b88:	2100      	movs	r1, #0
 8003b8a:	e7bc      	b.n	8003b06 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
 8003b8c:	f10d 0107 	add.w	r1, sp, #7
 8003b90:	2000      	movs	r0, #0
 8003b92:	e7e3      	b.n	8003b5c <z_arm_fault+0xd0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <z_arm_fault+0x130>)
 8003b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8003b9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8003ba8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e7af      	b.n	8003b12 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003bb2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	e7c2      	b.n	8003b42 <z_arm_fault+0xb6>
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8003bc0:	4a02      	ldr	r2, [pc, #8]	; (8003bcc <z_arm_fault_init+0xc>)
 8003bc2:	6953      	ldr	r3, [r2, #20]
 8003bc4:	f043 0310 	orr.w	r3, r3, #16
 8003bc8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8003bca:	4770      	bx	lr
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8003bd0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8003bd4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8003bd8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8003bda:	4672      	mov	r2, lr
	bl z_arm_fault
 8003bdc:	f7ff ff56 	bl	8003a8c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8003be0:	bd01      	pop	{r0, pc}
 8003be2:	bf00      	nop

08003be4 <z_arm_interrupt_init>:
 8003be4:	4804      	ldr	r0, [pc, #16]	; (8003bf8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	2110      	movs	r1, #16
 8003bea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8003bec:	3301      	adds	r3, #1
 8003bee:	2b52      	cmp	r3, #82	; 0x52
 8003bf0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8003bf4:	d1f9      	bne.n	8003bea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8003bf6:	4770      	bx	lr
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003bfc:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003bfe:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
 8003c02:	480b      	ldr	r0, [pc, #44]	; (8003c30 <__start+0x34>)
    ldr r1, =0xaa
 8003c04:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8003c08:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
 8003c0c:	f010 fe09 	bl	8014822 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8003c10:	4807      	ldr	r0, [pc, #28]	; (8003c30 <__start+0x34>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8003c12:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8003c16:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8003c18:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8003c1c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8003c20:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8003c22:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8003c24:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8003c28:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8003c2c:	f7ff fdf2 	bl	8003814 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
 8003c30:	20004680 	.word	0x20004680

08003c34 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <z_impl_k_thread_abort+0x1c>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4283      	cmp	r3, r0
 8003c3a:	d107      	bne.n	8003c4c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c3c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8003c40:	b123      	cbz	r3, 8003c4c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003c42:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <z_impl_k_thread_abort+0x20>)
 8003c44:	6853      	ldr	r3, [r2, #4]
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 8003c4c:	f009 b992 	b.w	800cf74 <z_thread_abort>
 8003c50:	20002524 	.word	0x20002524
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8003c58:	4b02      	ldr	r3, [pc, #8]	; (8003c64 <z_arm_configure_static_mpu_regions+0xc>)
 8003c5a:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <z_arm_configure_static_mpu_regions+0x10>)
 8003c5c:	4803      	ldr	r0, [pc, #12]	; (8003c6c <z_arm_configure_static_mpu_regions+0x14>)
 8003c5e:	2101      	movs	r1, #1
 8003c60:	f000 b870 	b.w	8003d44 <arm_core_mpu_configure_static_mpu_regions>
 8003c64:	20018000 	.word	0x20018000
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	08015718 	.word	0x08015718

08003c70 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8003c70:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
 8003c76:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 8003c78:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8003c7c:	2120      	movs	r1, #32
 8003c7e:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8003c82:	4618      	mov	r0, r3
 8003c84:	2101      	movs	r1, #1
 8003c86:	f000 b867 	b.w	8003d58 <arm_core_mpu_configure_dynamic_mpu_regions>
 8003c8a:	bf00      	nop
 8003c8c:	20001ea4 	.word	0x20001ea4
 8003c90:	150b0000 	.word	0x150b0000

08003c94 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8003c96:	4f1f      	ldr	r7, [pc, #124]	; (8003d14 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8003c98:	2600      	movs	r6, #0
 8003c9a:	428e      	cmp	r6, r1
 8003c9c:	db01      	blt.n	8003ca2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 8003ca2:	6844      	ldr	r4, [r0, #4]
 8003ca4:	b39c      	cbz	r4, 8003d0e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 8003ca6:	b153      	cbz	r3, 8003cbe <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8003ca8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8003cac:	ea14 0f0c 	tst.w	r4, ip
 8003cb0:	d118      	bne.n	8003ce4 <mpu_configure_regions+0x50>
		&&
 8003cb2:	2c1f      	cmp	r4, #31
 8003cb4:	d916      	bls.n	8003ce4 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 8003cb6:	6805      	ldr	r5, [r0, #0]
		&&
 8003cb8:	ea1c 0f05 	tst.w	ip, r5
 8003cbc:	d112      	bne.n	8003ce4 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8003cbe:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8003cc0:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8003cc2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8003cc6:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 8003cc8:	d90f      	bls.n	8003cea <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 8003cca:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003cce:	d80e      	bhi.n	8003cee <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8003cd0:	3c01      	subs	r4, #1
 8003cd2:	fab4 f484 	clz	r4, r4
 8003cd6:	f1c4 041f 	rsb	r4, r4, #31
 8003cda:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8003cdc:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8003cde:	ea4c 0404 	orr.w	r4, ip, r4
 8003ce2:	d906      	bls.n	8003cf2 <mpu_configure_regions+0x5e>
			return -EINVAL;
 8003ce4:	f06f 0215 	mvn.w	r2, #21
 8003ce8:	e7d9      	b.n	8003c9e <mpu_configure_regions+0xa>
		return REGION_32B;
 8003cea:	2408      	movs	r4, #8
 8003cec:	e7f6      	b.n	8003cdc <mpu_configure_regions+0x48>
		return REGION_4G;
 8003cee:	243e      	movs	r4, #62	; 0x3e
 8003cf0:	e7f4      	b.n	8003cdc <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003cf2:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8003cf6:	4315      	orrs	r5, r2
 8003cf8:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003cfc:	f044 0401 	orr.w	r4, r4, #1
 8003d00:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003d04:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 8003d08:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003d0a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8003d0e:	3601      	adds	r6, #1
 8003d10:	300c      	adds	r0, #12
 8003d12:	e7c2      	b.n	8003c9a <mpu_configure_regions+0x6>
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <arm_core_mpu_enable+0x14>)
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8003d20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003d24:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003d30:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8003d34:	4b02      	ldr	r3, [pc, #8]	; (8003d40 <arm_core_mpu_disable+0x10>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8003d44:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8003d46:	4c03      	ldr	r4, [pc, #12]	; (8003d54 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8003d48:	2301      	movs	r3, #1
 8003d4a:	7822      	ldrb	r2, [r4, #0]
 8003d4c:	f7ff ffa2 	bl	8003c94 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8003d50:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8003d52:	bd10      	pop	{r4, pc}
 8003d54:	200025a7 	.word	0x200025a7

08003d58 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8003d58:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	7812      	ldrb	r2, [r2, #0]
 8003d60:	f7ff ff98 	bl	8003c94 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8003d64:	f110 0f16 	cmn.w	r0, #22
 8003d68:	d002      	beq.n	8003d70 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8003d6a:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8003d6c:	2807      	cmp	r0, #7
 8003d6e:	dd00      	ble.n	8003d72 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8003d70:	bd08      	pop	{r3, pc}
 8003d72:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8003d76:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	e7f6      	b.n	8003d6c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 8003d7e:	bf00      	nop
 8003d80:	200025a7 	.word	0x200025a7
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8003d88:	4914      	ldr	r1, [pc, #80]	; (8003ddc <z_arm_mpu_init+0x54>)
 8003d8a:	6808      	ldr	r0, [r1, #0]
 8003d8c:	2808      	cmp	r0, #8
{
 8003d8e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8003d90:	d821      	bhi.n	8003dd6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8003d92:	f7ff ffcd 	bl	8003d30 <arm_core_mpu_disable>
 8003d96:	4c12      	ldr	r4, [pc, #72]	; (8003de0 <z_arm_mpu_init+0x58>)
 8003d98:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4290      	cmp	r0, r2
 8003d9e:	f101 010c 	add.w	r1, r1, #12
 8003da2:	d105      	bne.n	8003db0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <z_arm_mpu_init+0x5c>)
 8003da6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8003da8:	f7ff ffb6 	bl	8003d18 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8003dac:	2000      	movs	r0, #0
}
 8003dae:	bd10      	pop	{r4, pc}
 8003db0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003db4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8003db8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003dc2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8003dd2:	3201      	adds	r2, #1
 8003dd4:	e7e2      	b.n	8003d9c <z_arm_mpu_init+0x14>
		return -1;
 8003dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dda:	e7e8      	b.n	8003dae <z_arm_mpu_init+0x26>
 8003ddc:	08015724 	.word	0x08015724
 8003de0:	e000ed00 	.word	0xe000ed00
 8003de4:	200025a7 	.word	0x200025a7

08003de8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8003de8:	4b01      	ldr	r3, [pc, #4]	; (8003df0 <__stdout_hook_install+0x8>)
 8003dea:	6018      	str	r0, [r3, #0]
}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000154 	.word	0x20000154

08003df4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 8003df6:	4f08      	ldr	r7, [pc, #32]	; (8003e18 <z_impl_zephyr_read_stdin+0x24>)
{
 8003df8:	4606      	mov	r6, r0
 8003dfa:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 8003dfc:	2400      	movs	r4, #0
 8003dfe:	42ac      	cmp	r4, r5
 8003e00:	da08      	bge.n	8003e14 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8003e06:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 8003e08:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
 8003e0a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8003e0e:	d001      	beq.n	8003e14 <z_impl_zephyr_read_stdin+0x20>
 8003e10:	280d      	cmp	r0, #13
 8003e12:	d1f4      	bne.n	8003dfe <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 8003e14:	4620      	mov	r0, r4
 8003e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e18:	20000150 	.word	0x20000150

08003e1c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	4f0a      	ldr	r7, [pc, #40]	; (8003e48 <z_impl_zephyr_write_stdout+0x2c>)
 8003e20:	460d      	mov	r5, r1
 8003e22:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8003e24:	f1c0 0401 	rsb	r4, r0, #1
 8003e28:	19a3      	adds	r3, r4, r6
 8003e2a:	429d      	cmp	r5, r3
 8003e2c:	dc01      	bgt.n	8003e32 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 8003e2e:	4628      	mov	r0, r5
 8003e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 8003e32:	7873      	ldrb	r3, [r6, #1]
 8003e34:	2b0a      	cmp	r3, #10
 8003e36:	d102      	bne.n	8003e3e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	200d      	movs	r0, #13
 8003e3c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8003e44:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8003e46:	e7ef      	b.n	8003e28 <z_impl_zephyr_write_stdout+0xc>
 8003e48:	20000154 	.word	0x20000154

08003e4c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8003e4c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8003e4e:	4802      	ldr	r0, [pc, #8]	; (8003e58 <_exit+0xc>)
 8003e50:	2105      	movs	r1, #5
 8003e52:	f7ff ffe3 	bl	8003e1c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
 8003e56:	e7fe      	b.n	8003e56 <_exit+0xa>
 8003e58:	08016fad 	.word	0x08016fad

08003e5c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8003e5c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8003e5e:	4c07      	ldr	r4, [pc, #28]	; (8003e7c <_sbrk+0x20>)
 8003e60:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8003e62:	18c2      	adds	r2, r0, r3
 8003e64:	4806      	ldr	r0, [pc, #24]	; (8003e80 <_sbrk+0x24>)
 8003e66:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 8003e6a:	f501 31c0 	add.w	r1, r1, #98304	; 0x18000
 8003e6e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 8003e70:	bf3a      	itte	cc
 8003e72:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
 8003e74:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8003e76:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8003e7a:	bd10      	pop	{r4, pc}
 8003e7c:	20001eb0 	.word	0x20001eb0
 8003e80:	20007488 	.word	0x20007488

08003e84 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 8003e84:	b508      	push	{r3, lr}
 8003e86:	211d      	movs	r1, #29
 8003e88:	4804      	ldr	r0, [pc, #16]	; (8003e9c <__chk_fail+0x18>)
 8003e8a:	f7ff ffc7 	bl	8003e1c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
 8003e8e:	4040      	eors	r0, r0
 8003e90:	f380 8811 	msr	BASEPRI, r0
 8003e94:	f04f 0003 	mov.w	r0, #3
 8003e98:	df02      	svc	2
	CODE_UNREACHABLE;
 8003e9a:	bf00      	nop
 8003e9c:	08016fb3 	.word	0x08016fb3

08003ea0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8003ea0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <net_buf_id+0x1c>)
 8003ea4:	212c      	movs	r1, #44	; 0x2c
 8003ea6:	fb01 3302 	mla	r3, r1, r2, r3
 8003eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 8003eac:	7f1b      	ldrb	r3, [r3, #28]
 8003eae:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
 8003eb0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 8003eb2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
 8003eb6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003eba:	4770      	bx	lr
 8003ebc:	20000518 	.word	0x20000518

08003ec0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
 8003ec0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8003ec4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 8003ec6:	242c      	movs	r4, #44	; 0x2c
 8003ec8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
 8003ecc:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	bf94      	ite	ls
 8003ed8:	600a      	strls	r2, [r1, #0]
 8003eda:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
 8003edc:	f7ff ffe0 	bl	8003ea0 <net_buf_id>
 8003ee0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
 8003ee4:	fb02 3000 	mla	r0, r2, r0, r3
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	bf00      	nop
 8003eec:	20000518 	.word	0x20000518

08003ef0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
 8003ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
{
 8003efc:	4691      	mov	r9, r2
 8003efe:	4698      	mov	r8, r3
 8003f00:	4617      	mov	r7, r2
 8003f02:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8003f04:	f010 fab3 	bl	801446e <sys_clock_timeout_end_calc>
 8003f08:	4682      	mov	sl, r0
 8003f0a:	468b      	mov	fp, r1
	__asm__ volatile(
 8003f0c:	f04f 0310 	mov.w	r3, #16
 8003f10:	f3ef 8111 	mrs	r1, BASEPRI
 8003f14:	f383 8812 	msr	BASEPRI_MAX, r3
 8003f18:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
 8003f1c:	8b6b      	ldrh	r3, [r5, #26]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d05a      	beq.n	8003fd8 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
 8003f22:	8b2a      	ldrh	r2, [r5, #24]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d93e      	bls.n	8003fa6 <net_buf_alloc_len+0xb6>
 8003f28:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f008 fb02 	bl	800c538 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
 8003f34:	9900      	ldr	r1, [sp, #0]
 8003f36:	4604      	mov	r4, r0
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d034      	beq.n	8003fa6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
 8003f3c:	f381 8811 	msr	BASEPRI, r1
 8003f40:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
 8003f44:	9b01      	ldr	r3, [sp, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d056      	beq.n	8003ff8 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8003f4a:	ea58 0309 	orrs.w	r3, r8, r9
 8003f4e:	d00f      	beq.n	8003f70 <net_buf_alloc_len+0x80>
 8003f50:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003f54:	bf08      	it	eq
 8003f56:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
 8003f5a:	d009      	beq.n	8003f70 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
 8003f5c:	f009 fa18 	bl	800d390 <sys_clock_tick_get>
 8003f60:	ebba 0700 	subs.w	r7, sl, r0
 8003f64:	eb6b 0601 	sbc.w	r6, fp, r1
 8003f68:	2e00      	cmp	r6, #0
 8003f6a:	bfbc      	itt	lt
 8003f6c:	2700      	movlt	r7, #0
 8003f6e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8003f70:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
 8003f72:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8004010 <net_buf_alloc_len+0x120>
 8003f76:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8003f7a:	fb09 8303 	mla	r3, r9, r3, r8
 8003f7e:	463a      	mov	r2, r7
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	a901      	add	r1, sp, #4
 8003f86:	681d      	ldr	r5, [r3, #0]
 8003f88:	4620      	mov	r0, r4
 8003f8a:	4633      	mov	r3, r6
 8003f8c:	47a8      	blx	r5
 8003f8e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
 8003f90:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d131      	bne.n	8003ffa <net_buf_alloc_len+0x10a>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
 8003f96:	79a0      	ldrb	r0, [r4, #6]
 8003f98:	4621      	mov	r1, r4
 8003f9a:	fb00 8009 	mla	r0, r0, r9, r8
 8003f9e:	f010 f845 	bl	801402c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
 8003fa2:	462c      	mov	r4, r5
}
 8003fa4:	e024      	b.n	8003ff0 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
 8003fa6:	8b68      	ldrh	r0, [r5, #26]
 8003fa8:	1e43      	subs	r3, r0, #1
 8003faa:	836b      	strh	r3, [r5, #26]
 8003fac:	f381 8811 	msr	BASEPRI, r1
 8003fb0:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 8003fb4:	7f2a      	ldrb	r2, [r5, #28]
 8003fb6:	f102 0417 	add.w	r4, r2, #23
 8003fba:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
 8003fbe:	8b2c      	ldrh	r4, [r5, #24]
 8003fc0:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
 8003fc2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8003fc4:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
 8003fc8:	4811      	ldr	r0, [pc, #68]	; (8004010 <net_buf_alloc_len+0x120>)
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
 8003fcc:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
 8003fce:	1a2d      	subs	r5, r5, r0
 8003fd0:	10ad      	asrs	r5, r5, #2
 8003fd2:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
 8003fd4:	71a5      	strb	r5, [r4, #6]
		goto success;
 8003fd6:	e7b5      	b.n	8003f44 <net_buf_alloc_len+0x54>
 8003fd8:	f381 8811 	msr	BASEPRI, r1
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	464a      	mov	r2, r9
 8003fe2:	4643      	mov	r3, r8
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f008 faa7 	bl	800c538 <z_impl_k_queue_get>
	if (!buf) {
 8003fea:	4604      	mov	r4, r0
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d1a9      	bne.n	8003f44 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	b003      	add	sp, #12
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
 8003ff8:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
 8003ffa:	2300      	movs	r3, #0
	buf->ref   = 1U;
 8003ffc:	2201      	movs	r2, #1
	buf->frags = NULL;
 8003ffe:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
 8004000:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
 8004002:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
 8004004:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	81e2      	strh	r2, [r4, #14]
 800400a:	60a3      	str	r3, [r4, #8]
	return buf;
 800400c:	e7f0      	b.n	8003ff0 <net_buf_alloc_len+0x100>
 800400e:	bf00      	nop
 8004010:	20000518 	.word	0x20000518
 8004014:	ba2e8ba3 	.word	0xba2e8ba3

08004018 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
 8004018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800401c:	4d16      	ldr	r5, [pc, #88]	; (8004078 <net_buf_unref+0x60>)
 800401e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
 8004020:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
 8004022:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
 8004024:	b90c      	cbnz	r4, 800402a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
 8004026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
 800402a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
 800402c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
 8004030:	3b01      	subs	r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	7123      	strb	r3, [r4, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f5      	bne.n	8004026 <net_buf_unref+0xe>
		if (buf->__buf) {
 800403a:	6921      	ldr	r1, [r4, #16]
 800403c:	b159      	cbz	r1, 8004056 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
 800403e:	7963      	ldrb	r3, [r4, #5]
 8004040:	079b      	lsls	r3, r3, #30
 8004042:	d407      	bmi.n	8004054 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8004044:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
 8004046:	fb07 5303 	mla	r3, r7, r3, r5
 800404a:	4620      	mov	r0, r4
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	4798      	blx	r3
			buf->__buf = NULL;
 8004054:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
 8004056:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
 8004058:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
 800405a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
 800405e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	b11b      	cbz	r3, 800406c <net_buf_unref+0x54>
			pool->destroy(buf);
 8004064:	4620      	mov	r0, r4
 8004066:	4798      	blx	r3
{
 8004068:	4644      	mov	r4, r8
 800406a:	e7db      	b.n	8004024 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
 800406c:	4621      	mov	r1, r4
 800406e:	fb00 5007 	mla	r0, r0, r7, r5
 8004072:	f00f ffdb 	bl	801402c <k_queue_prepend>
}
 8004076:	e7f7      	b.n	8004068 <net_buf_unref+0x50>
 8004078:	20000518 	.word	0x20000518

0800407c <scan_result_cb>:

NET_MGMT_REGISTER_REQUEST_HANDLER(NET_REQUEST_WIFI_CONNECT, wifi_connect);

static void scan_result_cb(struct net_if *iface, int status,
			    struct wifi_scan_result *entry)
{
 800407c:	b513      	push	{r0, r1, r4, lr}
 800407e:	460b      	mov	r3, r1
	if (!iface) {
 8004080:	4601      	mov	r1, r0
 8004082:	b138      	cbz	r0, 8004094 <scan_result_cb+0x18>
		return;
	}

	if (!entry) {
 8004084:	b942      	cbnz	r2, 8004098 <scan_result_cb+0x1c>
		struct wifi_status scan_status = {
 8004086:	9301      	str	r3, [sp, #4]
			.status = status,
		};

		net_mgmt_event_notify_with_info(NET_EVENT_WIFI_SCAN_DONE,
 8004088:	2304      	movs	r3, #4
 800408a:	4807      	ldr	r0, [pc, #28]	; (80040a8 <scan_result_cb+0x2c>)
 800408c:	eb0d 0203 	add.w	r2, sp, r3
 8004090:	f001 fc92 	bl	80059b8 <net_mgmt_event_notify_with_info>
		return;
	}

	net_mgmt_event_notify_with_info(NET_EVENT_WIFI_SCAN_RESULT, iface,
					entry, sizeof(struct wifi_scan_result));
}
 8004094:	b002      	add	sp, #8
 8004096:	bd10      	pop	{r4, pc}
	net_mgmt_event_notify_with_info(NET_EVENT_WIFI_SCAN_RESULT, iface,
 8004098:	4804      	ldr	r0, [pc, #16]	; (80040ac <scan_result_cb+0x30>)
 800409a:	232b      	movs	r3, #43	; 0x2b
}
 800409c:	b002      	add	sp, #8
 800409e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_mgmt_event_notify_with_info(NET_EVENT_WIFI_SCAN_RESULT, iface,
 80040a2:	f001 bc89 	b.w	80059b8 <net_mgmt_event_notify_with_info>
 80040a6:	bf00      	nop
 80040a8:	d1560002 	.word	0xd1560002
 80040ac:	d1560001 	.word	0xd1560001

080040b0 <net_mgmt_NET_REQUEST_WIFI_SCAN>:
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
 80040b0:	680b      	ldr	r3, [r1, #0]
 80040b2:	6818      	ldr	r0, [r3, #0]

static int wifi_scan(uint32_t mgmt_request, struct net_if *iface,
		     void *data, size_t len)
{
	const struct device *dev = net_if_get_device(iface);
	struct net_wifi_mgmt_offload *off_api =
 80040b4:	6883      	ldr	r3, [r0, #8]
		(struct net_wifi_mgmt_offload *) dev->api;

	if (off_api == NULL || off_api->scan == NULL) {
 80040b6:	b11b      	cbz	r3, 80040c0 <net_mgmt_NET_REQUEST_WIFI_SCAN+0x10>
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	b10b      	cbz	r3, 80040c0 <net_mgmt_NET_REQUEST_WIFI_SCAN+0x10>
		return -ENOTSUP;
	}

	return off_api->scan(dev, scan_result_cb);
 80040bc:	4902      	ldr	r1, [pc, #8]	; (80040c8 <net_mgmt_NET_REQUEST_WIFI_SCAN+0x18>)
 80040be:	4718      	bx	r3
}
 80040c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	0800407d 	.word	0x0800407d

080040cc <wifi_mgmt_raise_connect_result_event>:
}

NET_MGMT_REGISTER_REQUEST_HANDLER(NET_REQUEST_WIFI_DISCONNECT, wifi_disconnect);

void wifi_mgmt_raise_connect_result_event(struct net_if *iface, int status)
{
 80040cc:	b507      	push	{r0, r1, r2, lr}
	struct wifi_status cnx_status = {
		.status = status,
	};

	net_mgmt_event_notify_with_info(NET_EVENT_WIFI_CONNECT_RESULT,
 80040ce:	2304      	movs	r3, #4
	struct wifi_status cnx_status = {
 80040d0:	9101      	str	r1, [sp, #4]
	net_mgmt_event_notify_with_info(NET_EVENT_WIFI_CONNECT_RESULT,
 80040d2:	eb0d 0203 	add.w	r2, sp, r3
 80040d6:	4601      	mov	r1, r0
 80040d8:	4802      	ldr	r0, [pc, #8]	; (80040e4 <wifi_mgmt_raise_connect_result_event+0x18>)
 80040da:	f001 fc6d 	bl	80059b8 <net_mgmt_event_notify_with_info>
					iface, &cnx_status,
					sizeof(struct wifi_status));
}
 80040de:	b003      	add	sp, #12
 80040e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80040e4:	d1560003 	.word	0xd1560003

080040e8 <wifi_mgmt_raise_disconnect_result_event>:

void wifi_mgmt_raise_disconnect_result_event(struct net_if *iface, int status)
{
 80040e8:	b507      	push	{r0, r1, r2, lr}
	struct wifi_status cnx_status = {
		.status = status,
	};

	net_mgmt_event_notify_with_info(NET_EVENT_WIFI_DISCONNECT_RESULT,
 80040ea:	2304      	movs	r3, #4
	struct wifi_status cnx_status = {
 80040ec:	9101      	str	r1, [sp, #4]
	net_mgmt_event_notify_with_info(NET_EVENT_WIFI_DISCONNECT_RESULT,
 80040ee:	eb0d 0203 	add.w	r2, sp, r3
 80040f2:	4601      	mov	r1, r0
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <wifi_mgmt_raise_disconnect_result_event+0x18>)
 80040f6:	f001 fc5f 	bl	80059b8 <net_mgmt_event_notify_with_info>
					iface, &cnx_status,
					sizeof(struct wifi_status));
}
 80040fa:	b003      	add	sp, #12
 80040fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004100:	d1560004 	.word	0xd1560004

08004104 <cmd_wifi_ap_enable>:
	return 0;
}

static int cmd_wifi_ap_enable(const struct shell *shell, size_t argc,
			      char *argv[])
{
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	460e      	mov	r6, r1
 8004108:	4617      	mov	r7, r2
 800410a:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
 800410c:	f000 fb12 	bl	8004734 <net_if_get_default>
	static struct wifi_connect_req_params cnx_params;

	if (__wifi_args_to_params(argc - 1, &argv[1], &cnx_params)) {
 8004110:	4a11      	ldr	r2, [pc, #68]	; (8004158 <cmd_wifi_ap_enable+0x54>)
	struct net_if *iface = net_if_get_default();
 8004112:	4604      	mov	r4, r0
	if (__wifi_args_to_params(argc - 1, &argv[1], &cnx_params)) {
 8004114:	1d39      	adds	r1, r7, #4
 8004116:	1e70      	subs	r0, r6, #1
 8004118:	f00c facc 	bl	80106b4 <__wifi_args_to_params>
 800411c:	b130      	cbz	r0, 800412c <cmd_wifi_ap_enable+0x28>
		shell_help(shell);
 800411e:	4628      	mov	r0, r5
 8004120:	f00b f8e5 	bl	800f2ee <shell_help>
	context.shell = shell;

	if (net_mgmt(NET_REQUEST_WIFI_AP_ENABLE, iface,
		     &cnx_params, sizeof(struct wifi_connect_req_params))) {
		shell_fprintf(shell, SHELL_WARNING, "AP mode failed\n");
		return -ENOEXEC;
 8004124:	f06f 0407 	mvn.w	r4, #7
	} else {
		shell_fprintf(shell, SHELL_NORMAL, "AP mode enabled\n");
	}

	return 0;
}
 8004128:	4620      	mov	r0, r4
 800412a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	context.shell = shell;
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <cmd_wifi_ap_enable+0x58>)
	if (net_mgmt(NET_REQUEST_WIFI_AP_ENABLE, iface,
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <cmd_wifi_ap_enable+0x54>)
	context.shell = shell;
 8004130:	601d      	str	r5, [r3, #0]
	if (net_mgmt(NET_REQUEST_WIFI_AP_ENABLE, iface,
 8004132:	4621      	mov	r1, r4
 8004134:	480a      	ldr	r0, [pc, #40]	; (8004160 <cmd_wifi_ap_enable+0x5c>)
 8004136:	2310      	movs	r3, #16
 8004138:	f00c faa6 	bl	8010688 <net_mgmt_NET_REQUEST_WIFI_AP_ENABLE>
 800413c:	4604      	mov	r4, r0
 800413e:	b128      	cbz	r0, 800414c <cmd_wifi_ap_enable+0x48>
		shell_fprintf(shell, SHELL_WARNING, "AP mode failed\n");
 8004140:	4a08      	ldr	r2, [pc, #32]	; (8004164 <cmd_wifi_ap_enable+0x60>)
 8004142:	2103      	movs	r1, #3
 8004144:	4628      	mov	r0, r5
 8004146:	f00b f8ad 	bl	800f2a4 <shell_fprintf>
 800414a:	e7eb      	b.n	8004124 <cmd_wifi_ap_enable+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "AP mode enabled\n");
 800414c:	4a06      	ldr	r2, [pc, #24]	; (8004168 <cmd_wifi_ap_enable+0x64>)
 800414e:	2108      	movs	r1, #8
 8004150:	4628      	mov	r0, r5
 8004152:	f00b f8a7 	bl	800f2a4 <shell_fprintf>
	return 0;
 8004156:	e7e7      	b.n	8004128 <cmd_wifi_ap_enable+0x24>
 8004158:	20001ec4 	.word	0x20001ec4
 800415c:	20001ed4 	.word	0x20001ed4
 8004160:	51560004 	.word	0x51560004
 8004164:	08016fe0 	.word	0x08016fe0
 8004168:	08016ff0 	.word	0x08016ff0

0800416c <cmd_wifi_disconnect>:
{
 800416c:	b570      	push	{r4, r5, r6, lr}
	context.disconnecting = true;
 800416e:	4e16      	ldr	r6, [pc, #88]	; (80041c8 <cmd_wifi_disconnect+0x5c>)
{
 8004170:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
 8004172:	f000 fadf 	bl	8004734 <net_if_get_default>
	context.disconnecting = true;
 8004176:	7933      	ldrb	r3, [r6, #4]
	context.shell = shell;
 8004178:	6035      	str	r5, [r6, #0]
	context.disconnecting = true;
 800417a:	f043 0302 	orr.w	r3, r3, #2
 800417e:	7133      	strb	r3, [r6, #4]
	status = net_mgmt(NET_REQUEST_WIFI_DISCONNECT, iface, NULL, 0);
 8004180:	2300      	movs	r3, #0
	struct net_if *iface = net_if_get_default();
 8004182:	4601      	mov	r1, r0
	status = net_mgmt(NET_REQUEST_WIFI_DISCONNECT, iface, NULL, 0);
 8004184:	461a      	mov	r2, r3
 8004186:	4811      	ldr	r0, [pc, #68]	; (80041cc <cmd_wifi_disconnect+0x60>)
 8004188:	f00c fa74 	bl	8010674 <net_mgmt_NET_REQUEST_WIFI_DISCONNECT>
	if (status) {
 800418c:	4604      	mov	r4, r0
 800418e:	b1a8      	cbz	r0, 80041bc <cmd_wifi_disconnect+0x50>
		context.disconnecting = false;
 8004190:	7933      	ldrb	r3, [r6, #4]
		if (status == -EALREADY) {
 8004192:	3478      	adds	r4, #120	; 0x78
		context.disconnecting = false;
 8004194:	f36f 0341 	bfc	r3, #1, #1
 8004198:	7133      	strb	r3, [r6, #4]
		if (status == -EALREADY) {
 800419a:	d107      	bne.n	80041ac <cmd_wifi_disconnect+0x40>
			shell_fprintf(shell, SHELL_INFO,
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <cmd_wifi_disconnect+0x64>)
 800419e:	2102      	movs	r1, #2
 80041a0:	4628      	mov	r0, r5
 80041a2:	f00b f87f 	bl	800f2a4 <shell_fprintf>
	return 0;
 80041a6:	2400      	movs	r4, #0
}
 80041a8:	4620      	mov	r0, r4
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
			shell_fprintf(shell, SHELL_WARNING,
 80041ac:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <cmd_wifi_disconnect+0x68>)
 80041ae:	2103      	movs	r1, #3
 80041b0:	4628      	mov	r0, r5
 80041b2:	f00b f877 	bl	800f2a4 <shell_fprintf>
			return -ENOEXEC;
 80041b6:	f06f 0407 	mvn.w	r4, #7
 80041ba:	e7f5      	b.n	80041a8 <cmd_wifi_disconnect+0x3c>
		shell_fprintf(shell, SHELL_NORMAL,
 80041bc:	4a06      	ldr	r2, [pc, #24]	; (80041d8 <cmd_wifi_disconnect+0x6c>)
 80041be:	2108      	movs	r1, #8
 80041c0:	4628      	mov	r0, r5
 80041c2:	f00b f86f 	bl	800f2a4 <shell_fprintf>
 80041c6:	e7ef      	b.n	80041a8 <cmd_wifi_disconnect+0x3c>
 80041c8:	20001ed4 	.word	0x20001ed4
 80041cc:	51560003 	.word	0x51560003
 80041d0:	08017001 	.word	0x08017001
 80041d4:	08017017 	.word	0x08017017
 80041d8:	08017032 	.word	0x08017032

080041dc <cmd_wifi_connect>:
{
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	4617      	mov	r7, r2
 80041e0:	460e      	mov	r6, r1
 80041e2:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
 80041e4:	f000 faa6 	bl	8004734 <net_if_get_default>
	if (__wifi_args_to_params(argc - 1, &argv[1], &cnx_params)) {
 80041e8:	1d39      	adds	r1, r7, #4
 80041ea:	4a16      	ldr	r2, [pc, #88]	; (8004244 <cmd_wifi_connect+0x68>)
	struct net_if *iface = net_if_get_default();
 80041ec:	4604      	mov	r4, r0
	if (__wifi_args_to_params(argc - 1, &argv[1], &cnx_params)) {
 80041ee:	1e70      	subs	r0, r6, #1
 80041f0:	f00c fa60 	bl	80106b4 <__wifi_args_to_params>
 80041f4:	4607      	mov	r7, r0
 80041f6:	b130      	cbz	r0, 8004206 <cmd_wifi_connect+0x2a>
		shell_help(shell);
 80041f8:	4628      	mov	r0, r5
 80041fa:	f00b f878 	bl	800f2ee <shell_help>
		return -ENOEXEC;
 80041fe:	f06f 0407 	mvn.w	r4, #7
}
 8004202:	4620      	mov	r0, r4
 8004204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	context.connecting = true;
 8004206:	4e10      	ldr	r6, [pc, #64]	; (8004248 <cmd_wifi_connect+0x6c>)
	if (net_mgmt(NET_REQUEST_WIFI_CONNECT, iface,
 8004208:	4a0e      	ldr	r2, [pc, #56]	; (8004244 <cmd_wifi_connect+0x68>)
	context.connecting = true;
 800420a:	7933      	ldrb	r3, [r6, #4]
	if (net_mgmt(NET_REQUEST_WIFI_CONNECT, iface,
 800420c:	480f      	ldr	r0, [pc, #60]	; (800424c <cmd_wifi_connect+0x70>)
	context.shell = shell;
 800420e:	6035      	str	r5, [r6, #0]
	context.connecting = true;
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	7133      	strb	r3, [r6, #4]
	if (net_mgmt(NET_REQUEST_WIFI_CONNECT, iface,
 8004216:	4621      	mov	r1, r4
 8004218:	2310      	movs	r3, #16
 800421a:	f00c fa03 	bl	8010624 <net_mgmt_NET_REQUEST_WIFI_CONNECT>
 800421e:	4604      	mov	r4, r0
 8004220:	b148      	cbz	r0, 8004236 <cmd_wifi_connect+0x5a>
		shell_fprintf(shell, SHELL_WARNING,
 8004222:	4a0b      	ldr	r2, [pc, #44]	; (8004250 <cmd_wifi_connect+0x74>)
 8004224:	2103      	movs	r1, #3
 8004226:	4628      	mov	r0, r5
 8004228:	f00b f83c 	bl	800f2a4 <shell_fprintf>
		context.connecting = false;
 800422c:	7933      	ldrb	r3, [r6, #4]
 800422e:	f367 0300 	bfi	r3, r7, #0, #1
 8004232:	7133      	strb	r3, [r6, #4]
 8004234:	e7e3      	b.n	80041fe <cmd_wifi_connect+0x22>
		shell_fprintf(shell, SHELL_NORMAL,
 8004236:	4a07      	ldr	r2, [pc, #28]	; (8004254 <cmd_wifi_connect+0x78>)
 8004238:	2108      	movs	r1, #8
 800423a:	4628      	mov	r0, r5
 800423c:	f00b f832 	bl	800f2a4 <shell_fprintf>
	return 0;
 8004240:	e7df      	b.n	8004202 <cmd_wifi_connect+0x26>
 8004242:	bf00      	nop
 8004244:	20001eb4 	.word	0x20001eb4
 8004248:	20001ed4 	.word	0x20001ed4
 800424c:	51560002 	.word	0x51560002
 8004250:	08017048 	.word	0x08017048
 8004254:	08017063 	.word	0x08017063

08004258 <wifi_shell_init>:

static int wifi_shell_init(const struct device *unused)
{
	ARG_UNUSED(unused);

	context.shell = NULL;
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <wifi_shell_init+0x20>)
	cb->handler = handler;
 800425a:	4808      	ldr	r0, [pc, #32]	; (800427c <wifi_shell_init+0x24>)
{
 800425c:	b510      	push	{r4, lr}
	context.shell = NULL;
 800425e:	2400      	movs	r4, #0
 8004260:	601c      	str	r4, [r3, #0]
	context.all = 0U;
 8004262:	711c      	strb	r4, [r3, #4]
	scan_result = 0U;
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <wifi_shell_init+0x28>)
 8004266:	601c      	str	r4, [r3, #0]
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <wifi_shell_init+0x2c>)
 800426a:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <wifi_shell_init+0x30>)
 800426e:	6103      	str	r3, [r0, #16]

	net_mgmt_init_event_callback(&wifi_shell_mgmt_cb,
				     wifi_mgmt_event_handler,
				     WIFI_SHELL_MGMT_EVENTS);

	net_mgmt_add_event_callback(&wifi_shell_mgmt_cb);
 8004270:	f001 fb4a 	bl	8005908 <net_mgmt_add_event_callback>

	return 0;
}
 8004274:	4620      	mov	r0, r4
 8004276:	bd10      	pop	{r4, pc}
 8004278:	20001ed4 	.word	0x20001ed4
 800427c:	20001ee0 	.word	0x20001ee0
 8004280:	20001edc 	.word	0x20001edc
 8004284:	0800431d 	.word	0x0800431d
 8004288:	d1560007 	.word	0xd1560007

0800428c <cmd_wifi_ap_disable>:
{
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
 8004290:	f000 fa50 	bl	8004734 <net_if_get_default>
	if (net_mgmt(NET_REQUEST_WIFI_AP_DISABLE, iface, NULL, 0)) {
 8004294:	2300      	movs	r3, #0
	struct net_if *iface = net_if_get_default();
 8004296:	4601      	mov	r1, r0
	if (net_mgmt(NET_REQUEST_WIFI_AP_DISABLE, iface, NULL, 0)) {
 8004298:	461a      	mov	r2, r3
 800429a:	480a      	ldr	r0, [pc, #40]	; (80042c4 <cmd_wifi_ap_disable+0x38>)
 800429c:	f00c f9ff 	bl	801069e <net_mgmt_NET_REQUEST_WIFI_AP_DISABLE>
 80042a0:	4604      	mov	r4, r0
 80042a2:	b140      	cbz	r0, 80042b6 <cmd_wifi_ap_disable+0x2a>
		shell_fprintf(shell, SHELL_WARNING, "AP mode disable failed\n");
 80042a4:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <cmd_wifi_ap_disable+0x3c>)
 80042a6:	2103      	movs	r1, #3
 80042a8:	4628      	mov	r0, r5
 80042aa:	f00a fffb 	bl	800f2a4 <shell_fprintf>
 80042ae:	f06f 0407 	mvn.w	r4, #7
}
 80042b2:	4620      	mov	r0, r4
 80042b4:	bd38      	pop	{r3, r4, r5, pc}
		shell_fprintf(shell, SHELL_NORMAL, "AP mode disabled\n");
 80042b6:	4a05      	ldr	r2, [pc, #20]	; (80042cc <cmd_wifi_ap_disable+0x40>)
 80042b8:	2108      	movs	r1, #8
 80042ba:	4628      	mov	r0, r5
 80042bc:	f00a fff2 	bl	800f2a4 <shell_fprintf>
	return 0;
 80042c0:	e7f7      	b.n	80042b2 <cmd_wifi_ap_disable+0x26>
 80042c2:	bf00      	nop
 80042c4:	51560005 	.word	0x51560005
 80042c8:	08017079 	.word	0x08017079
 80042cc:	08017091 	.word	0x08017091

080042d0 <cmd_wifi_scan>:
{
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
 80042d4:	f000 fa2e 	bl	8004734 <net_if_get_default>
	context.shell = shell;
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <cmd_wifi_scan+0x3c>)
 80042da:	601d      	str	r5, [r3, #0]
	if (net_mgmt(NET_REQUEST_WIFI_SCAN, iface, NULL, 0)) {
 80042dc:	2300      	movs	r3, #0
	struct net_if *iface = net_if_get_default();
 80042de:	4601      	mov	r1, r0
	if (net_mgmt(NET_REQUEST_WIFI_SCAN, iface, NULL, 0)) {
 80042e0:	461a      	mov	r2, r3
 80042e2:	480b      	ldr	r0, [pc, #44]	; (8004310 <cmd_wifi_scan+0x40>)
 80042e4:	f7ff fee4 	bl	80040b0 <net_mgmt_NET_REQUEST_WIFI_SCAN>
 80042e8:	4604      	mov	r4, r0
 80042ea:	b140      	cbz	r0, 80042fe <cmd_wifi_scan+0x2e>
		shell_fprintf(shell, SHELL_WARNING, "Scan request failed\n");
 80042ec:	4a09      	ldr	r2, [pc, #36]	; (8004314 <cmd_wifi_scan+0x44>)
 80042ee:	2103      	movs	r1, #3
 80042f0:	4628      	mov	r0, r5
 80042f2:	f00a ffd7 	bl	800f2a4 <shell_fprintf>
 80042f6:	f06f 0407 	mvn.w	r4, #7
}
 80042fa:	4620      	mov	r0, r4
 80042fc:	bd38      	pop	{r3, r4, r5, pc}
		shell_fprintf(shell, SHELL_NORMAL, "Scan requested\n");
 80042fe:	4a06      	ldr	r2, [pc, #24]	; (8004318 <cmd_wifi_scan+0x48>)
 8004300:	2108      	movs	r1, #8
 8004302:	4628      	mov	r0, r5
 8004304:	f00a ffce 	bl	800f2a4 <shell_fprintf>
	return 0;
 8004308:	e7f7      	b.n	80042fa <cmd_wifi_scan+0x2a>
 800430a:	bf00      	nop
 800430c:	20001ed4 	.word	0x20001ed4
 8004310:	51560001 	.word	0x51560001
 8004314:	080170a3 	.word	0x080170a3
 8004318:	080170b8 	.word	0x080170b8

0800431c <wifi_mgmt_event_handler>:
{
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (mgmt_event) {
 8004320:	4a6e      	ldr	r2, [pc, #440]	; (80044dc <wifi_mgmt_event_handler+0x1c0>)
 8004322:	440a      	add	r2, r1
{
 8004324:	b08c      	sub	sp, #48	; 0x30
 8004326:	4603      	mov	r3, r0
	switch (mgmt_event) {
 8004328:	2a03      	cmp	r2, #3
 800432a:	d849      	bhi.n	80043c0 <wifi_mgmt_event_handler+0xa4>
 800432c:	e8df f002 	tbb	[pc, r2]
 8004330:	a88a6d02 	.word	0xa88a6d02
	scan_result++;
 8004334:	4d6a      	ldr	r5, [pc, #424]	; (80044e0 <wifi_mgmt_event_handler+0x1c4>)
 8004336:	6884      	ldr	r4, [r0, #8]
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	4e6a      	ldr	r6, [pc, #424]	; (80044e4 <wifi_mgmt_event_handler+0x1c8>)
 800433c:	3301      	adds	r3, #1
	if (scan_result == 1U) {
 800433e:	2b01      	cmp	r3, #1
	scan_result++;
 8004340:	602b      	str	r3, [r5, #0]
	if (scan_result == 1U) {
 8004342:	d113      	bne.n	800436c <wifi_mgmt_event_handler+0x50>
		print(context.shell, SHELL_NORMAL,
 8004344:	6830      	ldr	r0, [r6, #0]
 8004346:	4f68      	ldr	r7, [pc, #416]	; (80044e8 <wifi_mgmt_event_handler+0x1cc>)
 8004348:	4968      	ldr	r1, [pc, #416]	; (80044ec <wifi_mgmt_event_handler+0x1d0>)
 800434a:	4a69      	ldr	r2, [pc, #420]	; (80044f0 <wifi_mgmt_event_handler+0x1d4>)
 800434c:	4b69      	ldr	r3, [pc, #420]	; (80044f4 <wifi_mgmt_event_handler+0x1d8>)
 800434e:	2800      	cmp	r0, #0
 8004350:	d039      	beq.n	80043c6 <wifi_mgmt_event_handler+0xaa>
 8004352:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8004356:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <wifi_mgmt_event_handler+0x1dc>)
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	4b68      	ldr	r3, [pc, #416]	; (80044fc <wifi_mgmt_event_handler+0x1e0>)
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8004362:	4b67      	ldr	r3, [pc, #412]	; (8004500 <wifi_mgmt_event_handler+0x1e4>)
 8004364:	4a67      	ldr	r2, [pc, #412]	; (8004504 <wifi_mgmt_event_handler+0x1e8>)
 8004366:	2108      	movs	r1, #8
 8004368:	f00a ff9c 	bl	800f2a4 <shell_fprintf>
	print(context.shell, SHELL_NORMAL, "%-4d | %-32s %-5u | %-4u | %-4d | %-5s | %s\n",
 800436c:	f8d6 a000 	ldr.w	sl, [r6]
 8004370:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8004374:	4864      	ldr	r0, [pc, #400]	; (8004508 <wifi_mgmt_event_handler+0x1ec>)
 8004376:	4965      	ldr	r1, [pc, #404]	; (800450c <wifi_mgmt_event_handler+0x1f0>)
 8004378:	682d      	ldr	r5, [r5, #0]
 800437a:	f894 6020 	ldrb.w	r6, [r4, #32]
 800437e:	f894 7021 	ldrb.w	r7, [r4, #33]	; 0x21
 8004382:	f994 8023 	ldrsb.w	r8, [r4, #35]	; 0x23
 8004386:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800438a:	2a01      	cmp	r2, #1
 800438c:	bf0c      	ite	eq
 800438e:	4681      	moveq	r9, r0
 8004390:	4689      	movne	r9, r1
 8004392:	f1ba 0f00 	cmp.w	sl, #0
 8004396:	d023      	beq.n	80043e0 <wifi_mgmt_event_handler+0xc4>
 8004398:	b303      	cbz	r3, 80043dc <wifi_mgmt_event_handler+0xc0>
 800439a:	2312      	movs	r3, #18
 800439c:	aa07      	add	r2, sp, #28
 800439e:	2106      	movs	r1, #6
 80043a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043a4:	f000 fc86 	bl	8004cb4 <net_sprint_ll_addr_buf>
 80043a8:	e9cd 9004 	strd	r9, r0, [sp, #16]
 80043ac:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80043b0:	e9cd 4600 	strd	r4, r6, [sp]
 80043b4:	4a56      	ldr	r2, [pc, #344]	; (8004510 <wifi_mgmt_event_handler+0x1f4>)
 80043b6:	462b      	mov	r3, r5
 80043b8:	2108      	movs	r1, #8
 80043ba:	4650      	mov	r0, sl
 80043bc:	f00a ff72 	bl	800f2a4 <shell_fprintf>
}
 80043c0:	b00c      	add	sp, #48	; 0x30
 80043c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print(context.shell, SHELL_NORMAL,
 80043c6:	e9cd 3200 	strd	r3, r2, [sp]
 80043ca:	e9cd 1702 	strd	r1, r7, [sp, #8]
 80043ce:	4b4a      	ldr	r3, [pc, #296]	; (80044f8 <wifi_mgmt_event_handler+0x1dc>)
 80043d0:	4a4a      	ldr	r2, [pc, #296]	; (80044fc <wifi_mgmt_event_handler+0x1e0>)
 80043d2:	494b      	ldr	r1, [pc, #300]	; (8004500 <wifi_mgmt_event_handler+0x1e4>)
 80043d4:	484b      	ldr	r0, [pc, #300]	; (8004504 <wifi_mgmt_event_handler+0x1e8>)
 80043d6:	f00a f9c2 	bl	800e75e <printk>
 80043da:	e7c7      	b.n	800436c <wifi_mgmt_event_handler+0x50>
	print(context.shell, SHELL_NORMAL, "%-4d | %-32s %-5u | %-4u | %-4d | %-5s | %s\n",
 80043dc:	484d      	ldr	r0, [pc, #308]	; (8004514 <wifi_mgmt_event_handler+0x1f8>)
 80043de:	e7e3      	b.n	80043a8 <wifi_mgmt_event_handler+0x8c>
 80043e0:	b18b      	cbz	r3, 8004406 <wifi_mgmt_event_handler+0xea>
 80043e2:	2312      	movs	r3, #18
 80043e4:	aa07      	add	r2, sp, #28
 80043e6:	2106      	movs	r1, #6
 80043e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043ec:	f000 fc62 	bl	8004cb4 <net_sprint_ll_addr_buf>
 80043f0:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80043f4:	e9cd 7800 	strd	r7, r8, [sp]
 80043f8:	4845      	ldr	r0, [pc, #276]	; (8004510 <wifi_mgmt_event_handler+0x1f4>)
 80043fa:	4633      	mov	r3, r6
 80043fc:	4622      	mov	r2, r4
 80043fe:	4629      	mov	r1, r5
 8004400:	f00a f9ad 	bl	800e75e <printk>
}
 8004404:	e7dc      	b.n	80043c0 <wifi_mgmt_event_handler+0xa4>
	print(context.shell, SHELL_NORMAL, "%-4d | %-32s %-5u | %-4u | %-4d | %-5s | %s\n",
 8004406:	4843      	ldr	r0, [pc, #268]	; (8004514 <wifi_mgmt_event_handler+0x1f8>)
 8004408:	e7f2      	b.n	80043f0 <wifi_mgmt_event_handler+0xd4>
	if (status->status) {
 800440a:	6883      	ldr	r3, [r0, #8]
		print(context.shell, SHELL_NORMAL,
 800440c:	4a35      	ldr	r2, [pc, #212]	; (80044e4 <wifi_mgmt_event_handler+0x1c8>)
	if (status->status) {
 800440e:	681b      	ldr	r3, [r3, #0]
		print(context.shell, SHELL_NORMAL,
 8004410:	6810      	ldr	r0, [r2, #0]
	if (status->status) {
 8004412:	b16b      	cbz	r3, 8004430 <wifi_mgmt_event_handler+0x114>
		print(context.shell, SHELL_WARNING,
 8004414:	b138      	cbz	r0, 8004426 <wifi_mgmt_event_handler+0x10a>
 8004416:	4a40      	ldr	r2, [pc, #256]	; (8004518 <wifi_mgmt_event_handler+0x1fc>)
 8004418:	2103      	movs	r1, #3
 800441a:	f00a ff43 	bl	800f2a4 <shell_fprintf>
	scan_result = 0U;
 800441e:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <wifi_mgmt_event_handler+0x1c4>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
}
 8004424:	e7cc      	b.n	80043c0 <wifi_mgmt_event_handler+0xa4>
		print(context.shell, SHELL_WARNING,
 8004426:	483c      	ldr	r0, [pc, #240]	; (8004518 <wifi_mgmt_event_handler+0x1fc>)
 8004428:	4619      	mov	r1, r3
 800442a:	f00a f998 	bl	800e75e <printk>
 800442e:	e7f6      	b.n	800441e <wifi_mgmt_event_handler+0x102>
		print(context.shell, SHELL_NORMAL, "Scan request done\n");
 8004430:	b120      	cbz	r0, 800443c <wifi_mgmt_event_handler+0x120>
 8004432:	4a3a      	ldr	r2, [pc, #232]	; (800451c <wifi_mgmt_event_handler+0x200>)
 8004434:	2108      	movs	r1, #8
 8004436:	f00a ff35 	bl	800f2a4 <shell_fprintf>
 800443a:	e7f0      	b.n	800441e <wifi_mgmt_event_handler+0x102>
 800443c:	4837      	ldr	r0, [pc, #220]	; (800451c <wifi_mgmt_event_handler+0x200>)
 800443e:	f00a f98e 	bl	800e75e <printk>
 8004442:	e7ec      	b.n	800441e <wifi_mgmt_event_handler+0x102>
	if (status->status) {
 8004444:	6883      	ldr	r3, [r0, #8]
		print(context.shell, SHELL_NORMAL,
 8004446:	4c27      	ldr	r4, [pc, #156]	; (80044e4 <wifi_mgmt_event_handler+0x1c8>)
	if (status->status) {
 8004448:	681b      	ldr	r3, [r3, #0]
		print(context.shell, SHELL_NORMAL,
 800444a:	6820      	ldr	r0, [r4, #0]
	if (status->status) {
 800444c:	b173      	cbz	r3, 800446c <wifi_mgmt_event_handler+0x150>
		print(context.shell, SHELL_WARNING,
 800444e:	b140      	cbz	r0, 8004462 <wifi_mgmt_event_handler+0x146>
 8004450:	4a33      	ldr	r2, [pc, #204]	; (8004520 <wifi_mgmt_event_handler+0x204>)
 8004452:	2103      	movs	r1, #3
 8004454:	f00a ff26 	bl	800f2a4 <shell_fprintf>
	context.connecting = false;
 8004458:	7923      	ldrb	r3, [r4, #4]
 800445a:	f36f 0300 	bfc	r3, #0, #1
		context.disconnecting = false;
 800445e:	7123      	strb	r3, [r4, #4]
 8004460:	e7ae      	b.n	80043c0 <wifi_mgmt_event_handler+0xa4>
		print(context.shell, SHELL_WARNING,
 8004462:	482f      	ldr	r0, [pc, #188]	; (8004520 <wifi_mgmt_event_handler+0x204>)
 8004464:	4619      	mov	r1, r3
 8004466:	f00a f97a 	bl	800e75e <printk>
 800446a:	e7f5      	b.n	8004458 <wifi_mgmt_event_handler+0x13c>
		print(context.shell, SHELL_NORMAL, "Connected\n");
 800446c:	b120      	cbz	r0, 8004478 <wifi_mgmt_event_handler+0x15c>
 800446e:	4a2d      	ldr	r2, [pc, #180]	; (8004524 <wifi_mgmt_event_handler+0x208>)
 8004470:	2108      	movs	r1, #8
 8004472:	f00a ff17 	bl	800f2a4 <shell_fprintf>
 8004476:	e7ef      	b.n	8004458 <wifi_mgmt_event_handler+0x13c>
 8004478:	482a      	ldr	r0, [pc, #168]	; (8004524 <wifi_mgmt_event_handler+0x208>)
 800447a:	f00a f970 	bl	800e75e <printk>
 800447e:	e7eb      	b.n	8004458 <wifi_mgmt_event_handler+0x13c>
		print(context.shell, SHELL_NORMAL,
 8004480:	4c18      	ldr	r4, [pc, #96]	; (80044e4 <wifi_mgmt_event_handler+0x1c8>)
	if (context.disconnecting) {
 8004482:	7922      	ldrb	r2, [r4, #4]
		print(context.shell, SHELL_NORMAL,
 8004484:	6820      	ldr	r0, [r4, #0]
	if (context.disconnecting) {
 8004486:	0792      	lsls	r2, r2, #30
 8004488:	d51a      	bpl.n	80044c0 <wifi_mgmt_event_handler+0x1a4>
	if (status->status) {
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	681a      	ldr	r2, [r3, #0]
		print(context.shell,
 800448e:	b170      	cbz	r0, 80044ae <wifi_mgmt_event_handler+0x192>
 8004490:	2a00      	cmp	r2, #0
 8004492:	9200      	str	r2, [sp, #0]
 8004494:	4a24      	ldr	r2, [pc, #144]	; (8004528 <wifi_mgmt_event_handler+0x20c>)
 8004496:	4b25      	ldr	r3, [pc, #148]	; (800452c <wifi_mgmt_event_handler+0x210>)
 8004498:	bf06      	itte	eq
 800449a:	2108      	moveq	r1, #8
 800449c:	4613      	moveq	r3, r2
 800449e:	2103      	movne	r1, #3
 80044a0:	4a23      	ldr	r2, [pc, #140]	; (8004530 <wifi_mgmt_event_handler+0x214>)
 80044a2:	f00a feff 	bl	800f2a4 <shell_fprintf>
		context.disconnecting = false;
 80044a6:	7923      	ldrb	r3, [r4, #4]
 80044a8:	f36f 0341 	bfc	r3, #1, #1
 80044ac:	e7d7      	b.n	800445e <wifi_mgmt_event_handler+0x142>
		print(context.shell,
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <wifi_mgmt_event_handler+0x20c>)
 80044b0:	491e      	ldr	r1, [pc, #120]	; (800452c <wifi_mgmt_event_handler+0x210>)
 80044b2:	481f      	ldr	r0, [pc, #124]	; (8004530 <wifi_mgmt_event_handler+0x214>)
 80044b4:	2a00      	cmp	r2, #0
 80044b6:	bf08      	it	eq
 80044b8:	4619      	moveq	r1, r3
 80044ba:	f00a f950 	bl	800e75e <printk>
 80044be:	e7f2      	b.n	80044a6 <wifi_mgmt_event_handler+0x18a>
		print(context.shell, SHELL_NORMAL, "Disconnected\n");
 80044c0:	b130      	cbz	r0, 80044d0 <wifi_mgmt_event_handler+0x1b4>
 80044c2:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <wifi_mgmt_event_handler+0x218>)
 80044c4:	2108      	movs	r1, #8
}
 80044c6:	b00c      	add	sp, #48	; 0x30
 80044c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		print(context.shell, SHELL_NORMAL, "Disconnected\n");
 80044cc:	f00a beea 	b.w	800f2a4 <shell_fprintf>
 80044d0:	4818      	ldr	r0, [pc, #96]	; (8004534 <wifi_mgmt_event_handler+0x218>)
}
 80044d2:	b00c      	add	sp, #48	; 0x30
 80044d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		print(context.shell, SHELL_NORMAL, "Disconnected\n");
 80044d8:	f00a b941 	b.w	800e75e <printk>
 80044dc:	2ea9ffff 	.word	0x2ea9ffff
 80044e0:	20001edc 	.word	0x20001edc
 80044e4:	20001ed4 	.word	0x20001ed4
 80044e8:	0801711b 	.word	0x0801711b
 80044ec:	0801711f 	.word	0x0801711f
 80044f0:	08017123 	.word	0x08017123
 80044f4:	08017128 	.word	0x08017128
 80044f8:	0801712d 	.word	0x0801712d
 80044fc:	08017133 	.word	0x08017133
 8004500:	080170e6 	.word	0x080170e6
 8004504:	080170ea 	.word	0x080170ea
 8004508:	080170c8 	.word	0x080170c8
 800450c:	080170d1 	.word	0x080170d1
 8004510:	08017138 	.word	0x08017138
 8004514:	080164a2 	.word	0x080164a2
 8004518:	08017165 	.word	0x08017165
 800451c:	0801717f 	.word	0x0801717f
 8004520:	08017192 	.word	0x08017192
 8004524:	080171b2 	.word	0x080171b2
 8004528:	080170da 	.word	0x080170da
 800452c:	080170df 	.word	0x080170df
 8004530:	080171bd 	.word	0x080171bd
 8004534:	080171dc 	.word	0x080171dc

08004538 <net_ipv4_is_ll_addr>:
 *
 * @return True if it is, false otherwise.
 */
static inline bool net_ipv4_is_ll_addr(const struct in_addr *addr)
{
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xA9FE0000) == 0xA9FE0000;
 8004538:	6803      	ldr	r3, [r0, #0]
 800453a:	4a04      	ldr	r2, [pc, #16]	; (800454c <net_ipv4_is_ll_addr+0x14>)
 800453c:	ba1b      	rev	r3, r3
 800453e:	ea32 0303 	bics.w	r3, r2, r3
}
 8004542:	bf0c      	ite	eq
 8004544:	2001      	moveq	r0, #1
 8004546:	2000      	movne	r0, #0
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	a9fe0000 	.word	0xa9fe0000

08004550 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 8004554:	4801      	ldr	r0, [pc, #4]	; (800455c <k_mutex_lock.constprop.0.isra.0+0xc>)
 8004556:	f007 bf33 	b.w	800c3c0 <z_impl_k_mutex_lock>
 800455a:	bf00      	nop
 800455c:	20000464 	.word	0x20000464

08004560 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <k_mutex_unlock.constprop.0.isra.0+0x8>)
 8004562:	f007 bfa5 	b.w	800c4b0 <z_impl_k_mutex_unlock>
 8004566:	bf00      	nop
 8004568:	20000464 	.word	0x20000464

0800456c <iface_router_update_timer>:
	/* Signed number of ms until router lifetime ends */
	return (int32_t)(ends - now);
}

static void iface_router_update_timer(uint32_t now)
{
 800456c:	b538      	push	{r3, r4, r5, lr}
	struct net_if_router *router, *next;
	uint32_t new_delay = UINT32_MAX;

	k_mutex_lock(&lock, K_FOREVER);
 800456e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 8004572:	4604      	mov	r4, r0
	k_mutex_lock(&lock, K_FOREVER);
 8004574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004578:	f7ff ffea 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 800457c:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <iface_router_update_timer+0x6c>)
 800457e:	6819      	ldr	r1, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 8004580:	b1e9      	cbz	r1, 80045be <iface_router_update_timer+0x52>
	return node->next;
 8004582:	680a      	ldr	r2, [r1, #0]
 8004584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ends += MSEC_PER_SEC * router->lifetime;
 8004588:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800458c:	b941      	cbnz	r1, 80045a0 <iface_router_update_timer+0x34>
		}

		new_delay = MIN((uint32_t)ends, new_delay);
	}

	if (new_delay == UINT32_MAX) {
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	d11a      	bne.n	80045c8 <iface_router_update_timer+0x5c>
		k_work_cancel_delayable(&router_timer);
 8004592:	4812      	ldr	r0, [pc, #72]	; (80045dc <iface_router_update_timer+0x70>)
 8004594:	f00f fe20 	bl	80141d8 <k_work_cancel_delayable>
	} else {
		k_work_reschedule(&router_timer, K_MSEC(new_delay));
	}

	k_mutex_unlock(&lock);
}
 8004598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
 800459c:	f7ff bfe0 	b.w	8004560 <k_mutex_unlock.constprop.0.isra.0>
	ends += MSEC_PER_SEC * router->lifetime;
 80045a0:	8c08      	ldrh	r0, [r1, #32]
	return (int32_t)(ends - now);
 80045a2:	69c9      	ldr	r1, [r1, #28]
 80045a4:	1b09      	subs	r1, r1, r4
 80045a6:	fb05 1100 	mla	r1, r5, r0, r1
		if (ends <= 0) {
 80045aa:	2900      	cmp	r1, #0
 80045ac:	dd0b      	ble.n	80045c6 <iface_router_update_timer+0x5a>
		new_delay = MIN((uint32_t)ends, new_delay);
 80045ae:	428b      	cmp	r3, r1
 80045b0:	bf28      	it	cs
 80045b2:	460b      	movcs	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 80045b4:	b12a      	cbz	r2, 80045c2 <iface_router_update_timer+0x56>
 80045b6:	6810      	ldr	r0, [r2, #0]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4602      	mov	r2, r0
 80045bc:	e7e6      	b.n	800458c <iface_router_update_timer+0x20>
 80045be:	460a      	mov	r2, r1
 80045c0:	e7e0      	b.n	8004584 <iface_router_update_timer+0x18>
 80045c2:	4610      	mov	r0, r2
 80045c4:	e7f8      	b.n	80045b8 <iface_router_update_timer+0x4c>
			new_delay = 0;
 80045c6:	2300      	movs	r3, #0
			return t * ((uint64_t)to_hz / from_hz);
 80045c8:	220a      	movs	r2, #10
		k_work_reschedule(&router_timer, K_MSEC(new_delay));
 80045ca:	fba3 2302 	umull	r2, r3, r3, r2
 80045ce:	4803      	ldr	r0, [pc, #12]	; (80045dc <iface_router_update_timer+0x70>)
 80045d0:	f008 f9ce 	bl	800c970 <k_work_reschedule>
 80045d4:	e7e0      	b.n	8004598 <iface_router_update_timer+0x2c>
 80045d6:	bf00      	nop
 80045d8:	20001ef4 	.word	0x20001ef4
 80045dc:	20000a78 	.word	0x20000a78

080045e0 <net_if_ipv4_get_best_match.isra.0>:
	}

	return false;
}

static struct in_addr *net_if_ipv4_get_best_match(struct net_if *iface,
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	4615      	mov	r5, r2
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
	struct in_addr *src = NULL;
	uint8_t len;
	int i;

	if (!ipv4) {
 80045e4:	bb30      	cbnz	r0, 8004634 <net_if_ipv4_get_best_match.isra.0+0x54>
			src = &ipv4->unicast[i].address.in_addr;
		}
	}

	return src;
}
 80045e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 80045e8:	8803      	ldrh	r3, [r0, #0]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d128      	bne.n	8004640 <net_if_ipv4_get_best_match.isra.0+0x60>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
 80045ee:	1d04      	adds	r4, r0, #4
 80045f0:	4620      	mov	r0, r4
 80045f2:	f7ff ffa1 	bl	8004538 <net_ipv4_is_ll_addr>
	    addr->address.family == AF_INET &&
 80045f6:	bb18      	cbnz	r0, 8004640 <net_if_ipv4_get_best_match.isra.0+0x60>
 80045f8:	1e4f      	subs	r7, r1, #1
 80045fa:	4626      	mov	r6, r4
		if (src[j] == dst[j]) {
 80045fc:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8004600:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004604:	428b      	cmp	r3, r1
 8004606:	f100 0208 	add.w	r2, r0, #8
 800460a:	d108      	bne.n	800461e <net_if_ipv4_get_best_match.isra.0+0x3e>
			len += 8U;
 800460c:	b2d0      	uxtb	r0, r2
	for (j = 0U; j < addr_len; j++) {
 800460e:	2820      	cmp	r0, #32
 8004610:	d1f4      	bne.n	80045fc <net_if_ipv4_get_best_match.isra.0+0x1c>
		if (len >= *best_so_far) {
 8004612:	782b      	ldrb	r3, [r5, #0]
 8004614:	4283      	cmp	r3, r0
 8004616:	d813      	bhi.n	8004640 <net_if_ipv4_get_best_match.isra.0+0x60>
			*best_so_far = len;
 8004618:	7028      	strb	r0, [r5, #0]
		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
 800461a:	4620      	mov	r0, r4
 800461c:	e7e3      	b.n	80045e6 <net_if_ipv4_get_best_match.isra.0+0x6>
			xor = src[j] ^ dst[j];
 800461e:	404b      	eors	r3, r1
			for (k = 0U; k < 8; k++) {
 8004620:	b2d2      	uxtb	r2, r2
				if (!(xor & 0x80)) {
 8004622:	0619      	lsls	r1, r3, #24
 8004624:	d4f5      	bmi.n	8004612 <net_if_ipv4_get_best_match.isra.0+0x32>
					len++;
 8004626:	3001      	adds	r0, #1
 8004628:	b2c0      	uxtb	r0, r0
					xor <<= 1;
 800462a:	005b      	lsls	r3, r3, #1
			for (k = 0U; k < 8; k++) {
 800462c:	4290      	cmp	r0, r2
					xor <<= 1;
 800462e:	b2db      	uxtb	r3, r3
			for (k = 0U; k < 8; k++) {
 8004630:	d1f7      	bne.n	8004622 <net_if_ipv4_get_best_match.isra.0+0x42>
 8004632:	e7ee      	b.n	8004612 <net_if_ipv4_get_best_match.isra.0+0x32>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 8004634:	6942      	ldr	r2, [r0, #20]
 8004636:	4b03      	ldr	r3, [pc, #12]	; (8004644 <net_if_ipv4_get_best_match.isra.0+0x64>)
 8004638:	4013      	ands	r3, r2
 800463a:	4a03      	ldr	r2, [pc, #12]	; (8004648 <net_if_ipv4_get_best_match.isra.0+0x68>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d0d3      	beq.n	80045e8 <net_if_ipv4_get_best_match.isra.0+0x8>
		return NULL;
 8004640:	2000      	movs	r0, #0
 8004642:	e7d0      	b.n	80045e6 <net_if_ipv4_get_best_match.isra.0+0x6>
 8004644:	0002ff00 	.word	0x0002ff00
 8004648:	00020100 	.word	0x00020100

0800464c <iface_router_expired>:
{
 800464c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t current_time = k_uptime_get_32();
 8004650:	f00c f920 	bl	8010894 <k_uptime_get_32>
	return list->head;
 8004654:	4e23      	ldr	r6, [pc, #140]	; (80046e4 <iface_router_expired+0x98>)
 8004656:	4680      	mov	r8, r0
	k_mutex_lock(&lock, K_FOREVER);
 8004658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800465c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004660:	f7ff ff76 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
 8004664:	6834      	ldr	r4, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 8004666:	b934      	cbnz	r4, 8004676 <iface_router_expired+0x2a>
	iface_router_update_timer(current_time);
 8004668:	4640      	mov	r0, r8
 800466a:	f7ff ff7f 	bl	800456c <iface_router_update_timer>
}
 800466e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_mutex_unlock(&lock);
 8004672:	f7ff bf75 	b.w	8004560 <k_mutex_unlock.constprop.0.isra.0>
	return node->next;
 8004676:	2500      	movs	r5, #0
 8004678:	6827      	ldr	r7, [r4, #0]
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ROUTER_DEL,
 800467a:	f8df b06c 	ldr.w	fp, [pc, #108]	; 80046e8 <iface_router_expired+0x9c>
	ends += MSEC_PER_SEC * router->lifetime;
 800467e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	parent->next = child;
 8004682:	46a9      	mov	r9, r5
	return (int32_t)(ends - now);
 8004684:	69e3      	ldr	r3, [r4, #28]
	ends += MSEC_PER_SEC * router->lifetime;
 8004686:	8c21      	ldrh	r1, [r4, #32]
	return (int32_t)(ends - now);
 8004688:	eba3 0308 	sub.w	r3, r3, r8
 800468c:	fb0a 3301 	mla	r3, sl, r1, r3
		if (ends > 0) {
 8004690:	2b00      	cmp	r3, #0
			prev_node = &router->node;
 8004692:	4622      	mov	r2, r4
		if (ends > 0) {
 8004694:	dc19      	bgt.n	80046ca <iface_router_expired+0x7e>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8004696:	88a3      	ldrh	r3, [r4, #4]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <iface_router_expired+0x5e>
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ROUTER_DEL,
 800469c:	69a1      	ldr	r1, [r4, #24]
 800469e:	2310      	movs	r3, #16
 80046a0:	f104 0208 	add.w	r2, r4, #8
 80046a4:	4658      	mov	r0, fp
 80046a6:	f001 f987 	bl	80059b8 <net_mgmt_event_notify_with_info>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	b99d      	cbnz	r5, 80046d6 <iface_router_expired+0x8a>
 80046ae:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 80046b0:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 80046b2:	42a2      	cmp	r2, r4
 80046b4:	d100      	bne.n	80046b8 <iface_router_expired+0x6c>
	list->tail = node;
 80046b6:	6073      	str	r3, [r6, #4]
		router->is_used = false;
 80046b8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	parent->next = child;
 80046bc:	f8c4 9000 	str.w	r9, [r4]
 80046c0:	f369 0300 	bfi	r3, r9, #0, #1
 80046c4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80046c8:	462a      	mov	r2, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 80046ca:	2f00      	cmp	r7, #0
 80046cc:	d0cc      	beq.n	8004668 <iface_router_expired+0x1c>
	return node->next;
 80046ce:	463c      	mov	r4, r7
 80046d0:	4615      	mov	r5, r2
 80046d2:	683f      	ldr	r7, [r7, #0]
 80046d4:	e7d6      	b.n	8004684 <iface_router_expired+0x38>
	return list->tail;
 80046d6:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
 80046d8:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
 80046da:	4294      	cmp	r4, r2
	list->tail = node;
 80046dc:	bf08      	it	eq
 80046de:	6075      	streq	r5, [r6, #4]
}
 80046e0:	e7ea      	b.n	80046b8 <iface_router_expired+0x6c>
 80046e2:	bf00      	nop
 80046e4:	20001ef4 	.word	0x20001ef4
 80046e8:	e0040006 	.word	0xe0040006

080046ec <z_impl_net_if_get_by_index>:
	if (index <= 0) {
 80046ec:	2800      	cmp	r0, #0
 80046ee:	dd08      	ble.n	8004702 <z_impl_net_if_get_by_index+0x16>
	if (&_net_if_list_start[index - 1] >= _net_if_list_end) {
 80046f0:	1e43      	subs	r3, r0, #1
 80046f2:	4805      	ldr	r0, [pc, #20]	; (8004708 <z_impl_net_if_get_by_index+0x1c>)
 80046f4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
		return NULL;
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <z_impl_net_if_get_by_index+0x20>)
 80046fa:	4298      	cmp	r0, r3
 80046fc:	bf28      	it	cs
 80046fe:	2000      	movcs	r0, #0
 8004700:	4770      	bx	lr
 8004702:	2000      	movs	r0, #0
}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000570 	.word	0x20000570
 800470c:	20000578 	.word	0x20000578

08004710 <net_if_lookup_by_dev>:
{
 8004710:	4603      	mov	r3, r0
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004712:	4a06      	ldr	r2, [pc, #24]	; (800472c <net_if_lookup_by_dev+0x1c>)
 8004714:	4806      	ldr	r0, [pc, #24]	; (8004730 <net_if_lookup_by_dev+0x20>)
 8004716:	4290      	cmp	r0, r2
 8004718:	d301      	bcc.n	800471e <net_if_lookup_by_dev+0xe>
	return NULL;
 800471a:	2000      	movs	r0, #0
}
 800471c:	4770      	bx	lr
 800471e:	6801      	ldr	r1, [r0, #0]
		if (net_if_get_device(iface) == dev) {
 8004720:	6809      	ldr	r1, [r1, #0]
 8004722:	428b      	cmp	r3, r1
 8004724:	d0fa      	beq.n	800471c <net_if_lookup_by_dev+0xc>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004726:	3008      	adds	r0, #8
 8004728:	e7f5      	b.n	8004716 <net_if_lookup_by_dev+0x6>
 800472a:	bf00      	nop
 800472c:	20000578 	.word	0x20000578
 8004730:	20000570 	.word	0x20000570

08004734 <net_if_get_default>:
}
 8004734:	4b02      	ldr	r3, [pc, #8]	; (8004740 <net_if_get_default+0xc>)
	if (_net_if_list_start == _net_if_list_end) {
 8004736:	4803      	ldr	r0, [pc, #12]	; (8004744 <net_if_get_default+0x10>)
}
 8004738:	4298      	cmp	r0, r3
 800473a:	bf08      	it	eq
 800473c:	2000      	moveq	r0, #0
 800473e:	4770      	bx	lr
 8004740:	20000578 	.word	0x20000578
 8004744:	20000570 	.word	0x20000570

08004748 <net_if_config_ipv4_get>:
{
 8004748:	b570      	push	{r4, r5, r6, lr}
 800474a:	4605      	mov	r5, r0
 800474c:	460e      	mov	r6, r1
	k_mutex_lock(&lock, K_FOREVER);
 800474e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004752:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004756:	f7ff fefb 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
	if (!net_if_flag_is_set(iface, NET_IF_IPV4)) {
 800475a:	2106      	movs	r1, #6
 800475c:	4628      	mov	r0, r5
 800475e:	f00c f8d1 	bl	8010904 <net_if_flag_is_set>
 8004762:	b1b0      	cbz	r0, 8004792 <net_if_config_ipv4_get+0x4a>
	if (iface->config.ip.ipv4) {
 8004764:	686b      	ldr	r3, [r5, #4]
 8004766:	b16b      	cbz	r3, 8004784 <net_if_config_ipv4_get+0x3c>
		if (ipv4) {
 8004768:	b926      	cbnz	r6, 8004774 <net_if_config_ipv4_get+0x2c>
	int ret = 0;
 800476a:	2400      	movs	r4, #0
	k_mutex_unlock(&lock);
 800476c:	f7ff fef8 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>
}
 8004770:	4620      	mov	r0, r4
 8004772:	bd70      	pop	{r4, r5, r6, pc}
			*ipv4 = iface->config.ip.ipv4;
 8004774:	6033      	str	r3, [r6, #0]
 8004776:	e7f8      	b.n	800476a <net_if_config_ipv4_get+0x22>
		iface->config.ip.ipv4 = &ipv4_addresses[i].ipv4;
 8004778:	606b      	str	r3, [r5, #4]
		ipv4_addresses[i].iface = iface;
 800477a:	63dd      	str	r5, [r3, #60]	; 0x3c
		if (ipv4) {
 800477c:	2e00      	cmp	r6, #0
 800477e:	d0f4      	beq.n	800476a <net_if_config_ipv4_get+0x22>
			*ipv4 = &ipv4_addresses[i].ipv4;
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	e7f3      	b.n	800476c <net_if_config_ipv4_get+0x24>
		if (ipv4_addresses[i].iface) {
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <net_if_config_ipv4_get+0x50>)
 8004786:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8004788:	2c00      	cmp	r4, #0
 800478a:	d0f5      	beq.n	8004778 <net_if_config_ipv4_get+0x30>
	ret = -ESRCH;
 800478c:	f06f 0402 	mvn.w	r4, #2
 8004790:	e7ec      	b.n	800476c <net_if_config_ipv4_get+0x24>
		ret = -ENOTSUP;
 8004792:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8004796:	e7e9      	b.n	800476c <net_if_config_ipv4_get+0x24>
 8004798:	20001efc 	.word	0x20001efc

0800479c <net_if_ipv4_is_addr_bcast>:
{
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	4604      	mov	r4, r0
 80047a0:	460e      	mov	r6, r1
	k_mutex_lock(&lock, K_FOREVER);
 80047a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047aa:	f7ff fed1 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
	if (iface) {
 80047ae:	b1a4      	cbz	r4, 80047da <net_if_ipv4_is_addr_bcast+0x3e>
		ret = ipv4_is_broadcast_address(iface, addr);
 80047b0:	4620      	mov	r0, r4
 80047b2:	4631      	mov	r1, r6
 80047b4:	f00c f932 	bl	8010a1c <ipv4_is_broadcast_address>
 80047b8:	4604      	mov	r4, r0
	k_mutex_unlock(&lock);
 80047ba:	f7ff fed1 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>
}
 80047be:	4620      	mov	r0, r4
 80047c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = ipv4_is_broadcast_address(iface, addr);
 80047c2:	4631      	mov	r1, r6
 80047c4:	4628      	mov	r0, r5
 80047c6:	f00c f929 	bl	8010a1c <ipv4_is_broadcast_address>
		if (ret) {
 80047ca:	4604      	mov	r4, r0
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d1f4      	bne.n	80047ba <net_if_ipv4_is_addr_bcast+0x1e>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 80047d0:	3508      	adds	r5, #8
 80047d2:	42bd      	cmp	r5, r7
 80047d4:	d3f5      	bcc.n	80047c2 <net_if_ipv4_is_addr_bcast+0x26>
out:
 80047d6:	2400      	movs	r4, #0
 80047d8:	e7ef      	b.n	80047ba <net_if_ipv4_is_addr_bcast+0x1e>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 80047da:	4d01      	ldr	r5, [pc, #4]	; (80047e0 <net_if_ipv4_is_addr_bcast+0x44>)
 80047dc:	4f01      	ldr	r7, [pc, #4]	; (80047e4 <net_if_ipv4_is_addr_bcast+0x48>)
 80047de:	e7f8      	b.n	80047d2 <net_if_ipv4_is_addr_bcast+0x36>
 80047e0:	20000570 	.word	0x20000570
 80047e4:	20000578 	.word	0x20000578

080047e8 <net_if_ipv4_select_src_iface>:
{
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_mutex_lock(&lock, K_FOREVER);
 80047ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 80047ee:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	STRUCT_SECTION_FOREACH(net_if, iface) {
 80047f4:	4c0b      	ldr	r4, [pc, #44]	; (8004824 <net_if_ipv4_select_src_iface+0x3c>)
 80047f6:	4e0c      	ldr	r6, [pc, #48]	; (8004828 <net_if_ipv4_select_src_iface+0x40>)
	k_mutex_lock(&lock, K_FOREVER);
 80047f8:	f7ff feaa 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 80047fc:	4627      	mov	r7, r4
 80047fe:	42b4      	cmp	r4, r6
 8004800:	d307      	bcc.n	8004812 <net_if_ipv4_select_src_iface+0x2a>
		return NULL;
 8004802:	4c08      	ldr	r4, [pc, #32]	; (8004824 <net_if_ipv4_select_src_iface+0x3c>)
 8004804:	42b7      	cmp	r7, r6
 8004806:	bf08      	it	eq
 8004808:	2400      	moveq	r4, #0
	k_mutex_unlock(&lock);
 800480a:	f7ff fea9 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>
}
 800480e:	4620      	mov	r0, r4
 8004810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = net_if_ipv4_addr_mask_cmp(iface, dst);
 8004812:	4629      	mov	r1, r5
 8004814:	4620      	mov	r0, r4
 8004816:	f00c f8df 	bl	80109d8 <net_if_ipv4_addr_mask_cmp>
		if (ret) {
 800481a:	2800      	cmp	r0, #0
 800481c:	d1f5      	bne.n	800480a <net_if_ipv4_select_src_iface+0x22>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800481e:	3408      	adds	r4, #8
 8004820:	e7ed      	b.n	80047fe <net_if_ipv4_select_src_iface+0x16>
 8004822:	bf00      	nop
 8004824:	20000570 	.word	0x20000570
 8004828:	20000578 	.word	0x20000578

0800482c <net_if_ipv4_select_src_addr>:
	return if_ipv4_get_addr(iface, addr_state, false);
}

const struct in_addr *net_if_ipv4_select_src_addr(struct net_if *dst_iface,
						  const struct in_addr *dst)
{
 800482c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct in_addr *src = NULL;
	uint8_t best_match = 0U;
 8004830:	2300      	movs	r3, #0
{
 8004832:	460e      	mov	r6, r1
 8004834:	4605      	mov	r5, r0

	k_mutex_lock(&lock, K_FOREVER);
 8004836:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800483a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	uint8_t best_match = 0U;
 800483e:	f88d 3007 	strb.w	r3, [sp, #7]
	k_mutex_lock(&lock, K_FOREVER);
 8004842:	f7ff fe85 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>

	if (!net_ipv4_is_ll_addr(dst)) {
 8004846:	4630      	mov	r0, r6
 8004848:	f7ff fe76 	bl	8004538 <net_ipv4_is_ll_addr>
 800484c:	bb00      	cbnz	r0, 8004890 <net_if_ipv4_select_src_addr+0x64>

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
 800484e:	b1d5      	cbz	r5, 8004886 <net_if_ipv4_select_src_addr+0x5a>
			src = net_if_ipv4_get_best_match(dst_iface, dst,
 8004850:	6868      	ldr	r0, [r5, #4]
 8004852:	f10d 0207 	add.w	r2, sp, #7
 8004856:	4631      	mov	r1, r6
 8004858:	f7ff fec2 	bl	80045e0 <net_if_ipv4_get_best_match.isra.0>
			}
		}

	} else {
		if (dst_iface) {
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
 800485c:	4604      	mov	r4, r0
 800485e:	e00b      	b.n	8004878 <net_if_ipv4_select_src_addr+0x4c>
				addr = net_if_ipv4_get_best_match(iface, dst,
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f10d 0207 	add.w	r2, sp, #7
 8004866:	4631      	mov	r1, r6
 8004868:	f7ff feba 	bl	80045e0 <net_if_ipv4_get_best_match.isra.0>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800486c:	3708      	adds	r7, #8
				if (addr) {
 800486e:	2800      	cmp	r0, #0
 8004870:	bf18      	it	ne
 8004872:	4604      	movne	r4, r0
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8004874:	4547      	cmp	r7, r8
 8004876:	d3f3      	bcc.n	8004860 <net_if_ipv4_select_src_addr+0x34>
				}
			}
		}
	}

	if (!src) {
 8004878:	b1d4      	cbz	r4, 80048b0 <net_if_ipv4_select_src_addr+0x84>

		goto out;
	}

out:
	k_mutex_unlock(&lock);
 800487a:	f7ff fe71 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>

	return src;
}
 800487e:	4620      	mov	r0, r4
 8004880:	b002      	add	sp, #8
 8004882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8004886:	4f11      	ldr	r7, [pc, #68]	; (80048cc <net_if_ipv4_select_src_addr+0xa0>)
 8004888:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80048d0 <net_if_ipv4_select_src_addr+0xa4>
	const struct in_addr *src = NULL;
 800488c:	462c      	mov	r4, r5
 800488e:	e7f1      	b.n	8004874 <net_if_ipv4_select_src_addr+0x48>
		if (dst_iface) {
 8004890:	b1cd      	cbz	r5, 80048c6 <net_if_ipv4_select_src_addr+0x9a>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
 8004892:	2101      	movs	r1, #1
 8004894:	4628      	mov	r0, r5
 8004896:	f00c f8d4 	bl	8010a42 <net_if_ipv4_get_ll>
 800489a:	e7df      	b.n	800485c <net_if_ipv4_select_src_addr+0x30>
				addr = net_if_ipv4_get_ll(iface,
 800489c:	2101      	movs	r1, #1
 800489e:	4630      	mov	r0, r6
 80048a0:	f00c f8cf 	bl	8010a42 <net_if_ipv4_get_ll>
				if (addr) {
 80048a4:	4604      	mov	r4, r0
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d1e7      	bne.n	800487a <net_if_ipv4_select_src_addr+0x4e>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 80048aa:	3608      	adds	r6, #8
 80048ac:	42be      	cmp	r6, r7
 80048ae:	d3f5      	bcc.n	800489c <net_if_ipv4_select_src_addr+0x70>
		src = net_if_ipv4_get_global_addr(dst_iface,
 80048b0:	2101      	movs	r1, #1
 80048b2:	4628      	mov	r0, r5
 80048b4:	f00c f8c8 	bl	8010a48 <net_if_ipv4_get_global_addr>
		if (!src) {
 80048b8:	4604      	mov	r4, r0
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d1dd      	bne.n	800487a <net_if_ipv4_select_src_addr+0x4e>
			src = net_ipv4_unspecified_address();
 80048be:	f000 fb27 	bl	8004f10 <net_ipv4_unspecified_address>
 80048c2:	4604      	mov	r4, r0
 80048c4:	e7d9      	b.n	800487a <net_if_ipv4_select_src_addr+0x4e>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 80048c6:	4e01      	ldr	r6, [pc, #4]	; (80048cc <net_if_ipv4_select_src_addr+0xa0>)
 80048c8:	4f01      	ldr	r7, [pc, #4]	; (80048d0 <net_if_ipv4_select_src_addr+0xa4>)
 80048ca:	e7ef      	b.n	80048ac <net_if_ipv4_select_src_addr+0x80>
 80048cc:	20000570 	.word	0x20000570
 80048d0:	20000578 	.word	0x20000578

080048d4 <net_if_ipv4_addr_lookup>:

struct net_if_addr *net_if_ipv4_addr_lookup(const struct in_addr *addr,
					    struct net_if **ret)
{
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	4605      	mov	r5, r0
 80048d8:	460c      	mov	r4, r1
	struct net_if_addr *ifaddr = NULL;

	k_mutex_lock(&lock, K_FOREVER);
 80048da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048e2:	f7ff fe35 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>

	STRUCT_SECTION_FOREACH(net_if, iface) {
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <net_if_ipv4_addr_lookup+0x48>)
 80048e8:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <net_if_ipv4_addr_lookup+0x4c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d301      	bcc.n	80048f2 <net_if_ipv4_addr_lookup+0x1e>
	struct net_if_addr *ifaddr = NULL;
 80048ee:	2400      	movs	r4, #0
 80048f0:	e00e      	b.n	8004910 <net_if_ipv4_addr_lookup+0x3c>
		struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 80048f2:	6858      	ldr	r0, [r3, #4]
		int i;

		if (!ipv4) {
 80048f4:	b180      	cbz	r0, 8004918 <net_if_ipv4_addr_lookup+0x44>
			continue;
		}

		for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
			if (!ipv4->unicast[i].is_used ||
 80048f6:	7d81      	ldrb	r1, [r0, #22]
 80048f8:	0789      	lsls	r1, r1, #30
 80048fa:	d50d      	bpl.n	8004918 <net_if_ipv4_addr_lookup+0x44>
 80048fc:	8801      	ldrh	r1, [r0, #0]
 80048fe:	2901      	cmp	r1, #1
 8004900:	d10a      	bne.n	8004918 <net_if_ipv4_addr_lookup+0x44>
			    ipv4->unicast[i].address.family != AF_INET) {
				continue;
			}

			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
 8004902:	6829      	ldr	r1, [r5, #0]
 8004904:	6846      	ldr	r6, [r0, #4]
 8004906:	428e      	cmp	r6, r1
 8004908:	d106      	bne.n	8004918 <net_if_ipv4_addr_lookup+0x44>
			    ipv4->unicast[i].address.in_addr.s_addr) {

				if (ret) {
 800490a:	b104      	cbz	r4, 800490e <net_if_ipv4_addr_lookup+0x3a>
					*ret = iface;
 800490c:	6023      	str	r3, [r4, #0]
				}

				ifaddr = &ipv4->unicast[i];
 800490e:	4604      	mov	r4, r0
			}
		}
	}

out:
	k_mutex_unlock(&lock);
 8004910:	f7ff fe26 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>

	return ifaddr;
}
 8004914:	4620      	mov	r0, r4
 8004916:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004918:	3308      	adds	r3, #8
 800491a:	e7e6      	b.n	80048ea <net_if_ipv4_addr_lookup+0x16>
 800491c:	20000570 	.word	0x20000570
 8004920:	20000578 	.word	0x20000578

08004924 <net_if_ipv4_addr_add>:

struct net_if_addr *net_if_ipv4_addr_add(struct net_if *iface,
					 struct in_addr *addr,
					 enum net_addr_type addr_type,
					 uint32_t vlifetime)
{
 8004924:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004928:	4606      	mov	r6, r0
 800492a:	460f      	mov	r7, r1
	struct net_if_addr *ifaddr = NULL;
	struct net_if_ipv4 *ipv4;
	int i;

	k_mutex_lock(&lock, K_FOREVER);
 800492c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 8004934:	4690      	mov	r8, r2
 8004936:	461d      	mov	r5, r3
	k_mutex_lock(&lock, K_FOREVER);
 8004938:	f7ff fe0a 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>

	if (net_if_config_ipv4_get(iface, &ipv4) < 0) {
 800493c:	a901      	add	r1, sp, #4
 800493e:	4630      	mov	r0, r6
 8004940:	f7ff ff02 	bl	8004748 <net_if_config_ipv4_get>
 8004944:	2800      	cmp	r0, #0
 8004946:	db0d      	blt.n	8004964 <net_if_ipv4_addr_add+0x40>
		goto out;
	}

	ifaddr = ipv4_addr_find(iface, addr);
 8004948:	6874      	ldr	r4, [r6, #4]
		if (!ipv4->unicast[i].is_used) {
 800494a:	7da3      	ldrb	r3, [r4, #22]
 800494c:	079a      	lsls	r2, r3, #30
 800494e:	d50b      	bpl.n	8004968 <net_if_ipv4_addr_add+0x44>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv4_addr_cmp(const struct in_addr *addr1,
				     const struct in_addr *addr2)
{
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	6863      	ldr	r3, [r4, #4]
		if (net_ipv4_addr_cmp(addr,
 8004954:	429a      	cmp	r2, r3
 8004956:	d107      	bne.n	8004968 <net_if_ipv4_addr_add+0x44>
						sizeof(struct in_addr));
		goto out;
	}

out:
	k_mutex_unlock(&lock);
 8004958:	f7ff fe02 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>

	return ifaddr;
}
 800495c:	4620      	mov	r0, r4
 800495e:	b002      	add	sp, #8
 8004960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct net_if_addr *ifaddr = NULL;
 8004964:	2400      	movs	r4, #0
 8004966:	e7f7      	b.n	8004958 <net_if_ipv4_addr_add+0x34>
		if (addr_type == NET_ADDR_DHCP
 8004968:	f1b8 0f02 	cmp.w	r8, #2
		struct net_if_addr *cur = &ipv4->unicast[i];
 800496c:	9c01      	ldr	r4, [sp, #4]
		if (addr_type == NET_ADDR_DHCP
 800496e:	d102      	bne.n	8004976 <net_if_ipv4_addr_add+0x52>
		    && cur->addr_type == NET_ADDR_OVERRIDABLE) {
 8004970:	7d23      	ldrb	r3, [r4, #20]
 8004972:	2b04      	cmp	r3, #4
 8004974:	d002      	beq.n	800497c <net_if_ipv4_addr_add+0x58>
		if (!ipv4->unicast[i].is_used) {
 8004976:	7da3      	ldrb	r3, [r4, #22]
 8004978:	079b      	lsls	r3, r3, #30
 800497a:	d4f3      	bmi.n	8004964 <net_if_ipv4_addr_add+0x40>
	if (ifaddr) {
 800497c:	2c00      	cmp	r4, #0
 800497e:	d0eb      	beq.n	8004958 <net_if_ipv4_addr_add+0x34>
		ifaddr->is_used = true;
 8004980:	7da3      	ldrb	r3, [r4, #22]
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
 8004982:	480c      	ldr	r0, [pc, #48]	; (80049b4 <net_if_ipv4_addr_add+0x90>)
		ifaddr->is_used = true;
 8004984:	f043 0302 	orr.w	r3, r3, #2
 8004988:	75a3      	strb	r3, [r4, #22]
						addr->s4_addr32[0];
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	7da1      	ldrb	r1, [r4, #22]
		ifaddr->address.in_addr.s4_addr32[0] =
 800498e:	6063      	str	r3, [r4, #4]
		if (vlifetime) {
 8004990:	fab5 f385 	clz	r3, r5
 8004994:	095b      	lsrs	r3, r3, #5
		ifaddr->address.family = AF_INET;
 8004996:	2201      	movs	r2, #1
 8004998:	f363 0100 	bfi	r1, r3, #0, #1
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
 800499c:	2304      	movs	r3, #4
		ifaddr->address.family = AF_INET;
 800499e:	8022      	strh	r2, [r4, #0]
		ifaddr->addr_type = addr_type;
 80049a0:	75a1      	strb	r1, [r4, #22]
		ifaddr->addr_state = NET_ADDR_PREFERRED;
 80049a2:	7562      	strb	r2, [r4, #21]
		ifaddr->addr_type = addr_type;
 80049a4:	f884 8014 	strb.w	r8, [r4, #20]
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
 80049a8:	18e2      	adds	r2, r4, r3
 80049aa:	4631      	mov	r1, r6
 80049ac:	f001 f804 	bl	80059b8 <net_mgmt_event_notify_with_info>
		goto out;
 80049b0:	e7d2      	b.n	8004958 <net_if_ipv4_addr_add+0x34>
 80049b2:	bf00      	nop
 80049b4:	e0040001 	.word	0xe0040001

080049b8 <net_if_ipv4_maddr_lookup>:
	return ret;
}

struct net_if_mcast_addr *net_if_ipv4_maddr_lookup(const struct in_addr *maddr,
						   struct net_if **ret)
{
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4604      	mov	r4, r0
 80049bc:	460d      	mov	r5, r1
	struct net_if_mcast_addr *addr = NULL;

	k_mutex_lock(&lock, K_FOREVER);
 80049be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049c6:	f7ff fdc3 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>

	STRUCT_SECTION_FOREACH(net_if, iface) {
 80049ca:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <net_if_ipv4_maddr_lookup+0x54>)
 80049cc:	4910      	ldr	r1, [pc, #64]	; (8004a10 <net_if_ipv4_maddr_lookup+0x58>)
 80049ce:	428a      	cmp	r2, r1
 80049d0:	d301      	bcc.n	80049d6 <net_if_ipv4_maddr_lookup+0x1e>

			goto out;
		}
	}

out:
 80049d2:	2400      	movs	r4, #0
 80049d4:	e00e      	b.n	80049f4 <net_if_ipv4_maddr_lookup+0x3c>
		if (ret && *ret && iface != *ret) {
 80049d6:	b11d      	cbz	r5, 80049e0 <net_if_ipv4_maddr_lookup+0x28>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	b10b      	cbz	r3, 80049e0 <net_if_ipv4_maddr_lookup+0x28>
 80049dc:	4293      	cmp	r3, r2
 80049de:	d111      	bne.n	8004a04 <net_if_ipv4_maddr_lookup+0x4c>
		addr = ipv4_maddr_find(iface, true, maddr);
 80049e0:	6853      	ldr	r3, [r2, #4]
	if (!ipv4) {
 80049e2:	b17b      	cbz	r3, 8004a04 <net_if_ipv4_maddr_lookup+0x4c>
		if ((is_used && !ipv4->mcast[i].is_used) ||
 80049e4:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
 80049e8:	07c0      	lsls	r0, r0, #31
 80049ea:	d50b      	bpl.n	8004a04 <net_if_ipv4_maddr_lookup+0x4c>
		if (addr) {
 80049ec:	b934      	cbnz	r4, 80049fc <net_if_ipv4_maddr_lookup+0x44>
		return &ipv4->mcast[i];
 80049ee:	f103 0418 	add.w	r4, r3, #24
			if (ret) {
 80049f2:	b94d      	cbnz	r5, 8004a08 <net_if_ipv4_maddr_lookup+0x50>
	k_mutex_unlock(&lock);
 80049f4:	f7ff fdb4 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>

	return addr;
}
 80049f8:	4620      	mov	r0, r4
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	69de      	ldr	r6, [r3, #28]
 80049fe:	6820      	ldr	r0, [r4, #0]
			if (!net_ipv4_addr_cmp(&ipv4->mcast[i].address.in_addr,
 8004a00:	4286      	cmp	r6, r0
 8004a02:	d0f4      	beq.n	80049ee <net_if_ipv4_maddr_lookup+0x36>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004a04:	3208      	adds	r2, #8
 8004a06:	e7e2      	b.n	80049ce <net_if_ipv4_maddr_lookup+0x16>
				*ret = iface;
 8004a08:	602a      	str	r2, [r5, #0]
 8004a0a:	e7f3      	b.n	80049f4 <net_if_ipv4_maddr_lookup+0x3c>
 8004a0c:	20000570 	.word	0x20000570
 8004a10:	20000578 	.word	0x20000578

08004a14 <net_if_call_link_cb>:
	k_mutex_unlock(&lock);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	4605      	mov	r5, r0
 8004a18:	460e      	mov	r6, r1
	struct net_if_link_cb *link, *tmp;

	k_mutex_lock(&lock, K_FOREVER);
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 8004a22:	4617      	mov	r7, r2
	k_mutex_lock(&lock, K_FOREVER);
 8004a24:	f7ff fd94 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <net_if_call_link_cb+0x38>)
 8004a2a:	681b      	ldr	r3, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
 8004a2c:	b91b      	cbnz	r3, 8004a36 <net_if_call_link_cb+0x22>
		link->cb(iface, lladdr, status);
	}

	k_mutex_unlock(&lock);
}
 8004a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
 8004a32:	f7ff bd95 	b.w	8004560 <k_mutex_unlock.constprop.0.isra.0>
	return node->next;
 8004a36:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	463a      	mov	r2, r7
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4628      	mov	r0, r5
 8004a40:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
 8004a42:	2c00      	cmp	r4, #0
 8004a44:	d0f3      	beq.n	8004a2e <net_if_call_link_cb+0x1a>
 8004a46:	4623      	mov	r3, r4
 8004a48:	6824      	ldr	r4, [r4, #0]
 8004a4a:	e7f5      	b.n	8004a38 <net_if_call_link_cb+0x24>
 8004a4c:	20001f3c 	.word	0x20001f3c

08004a50 <net_if_tx.isra.0>:
static bool net_if_tx(struct net_if *iface, struct net_pkt *pkt)
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct net_linkaddr ll_dst = {
 8004a52:	2300      	movs	r3, #0
static bool net_if_tx(struct net_if *iface, struct net_pkt *pkt)
 8004a54:	b085      	sub	sp, #20
	struct net_linkaddr ll_dst = {
 8004a56:	e9cd 3300 	strd	r3, r3, [sp]
static bool net_if_tx(struct net_if *iface, struct net_pkt *pkt)
 8004a5a:	4605      	mov	r5, r0
	if (!pkt) {
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	d041      	beq.n	8004ae6 <net_if_tx.isra.0+0x96>
	return list->head;
 8004a62:	4b23      	ldr	r3, [pc, #140]	; (8004af0 <net_if_tx.isra.0+0xa0>)
	if (!sys_slist_is_empty(&link_callbacks)) {
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	b1ab      	cbz	r3, 8004a94 <net_if_tx.isra.0+0x44>
		if (net_linkaddr_set(&ll_dst_storage,
 8004a68:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004a6a:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   uint8_t *new_addr, uint8_t new_len)
{
	if (!lladdr_store || !new_addr) {
 8004a6e:	b189      	cbz	r1, 8004a94 <net_if_tx.isra.0+0x44>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 8004a70:	2e06      	cmp	r6, #6
 8004a72:	d80f      	bhi.n	8004a94 <net_if_tx.isra.0+0x44>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
 8004a74:	f10d 070a 	add.w	r7, sp, #10
 8004a78:	2306      	movs	r3, #6
 8004a7a:	4632      	mov	r2, r6
 8004a7c:	4638      	mov	r0, r7
	lladdr_store->len = new_len;
 8004a7e:	f88d 6009 	strb.w	r6, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
 8004a82:	f00f fea1 	bl	80147c8 <__memcpy_chk>
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
 8004a86:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			ll_dst.addr = ll_dst_storage.addr;
 8004a8a:	9700      	str	r7, [sp, #0]
			ll_dst.len = ll_dst_storage.len;
 8004a8c:	f88d 6004 	strb.w	r6, [sp, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
 8004a90:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 8004a94:	2100      	movs	r1, #0
 8004a96:	4628      	mov	r0, r5
	return pkt->context;
 8004a98:	6967      	ldr	r7, [r4, #20]
 8004a9a:	f00b ff33 	bl	8010904 <net_if_flag_is_set>
 8004a9e:	b320      	cbz	r0, 8004aea <net_if_tx.isra.0+0x9a>
	return pkt->family;
 8004aa0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
		if (IS_ENABLED(CONFIG_NET_TCP) &&
 8004aa4:	f013 0f0e 	tst.w	r3, #14
	pkt->pkt_queued = send;
 8004aa8:	bf1e      	ittt	ne
 8004aaa:	f894 3036 	ldrbne.w	r3, [r4, #54]	; 0x36
 8004aae:	f361 0300 	bfine	r3, r1, #0, #1
 8004ab2:	f884 3036 	strbne.w	r3, [r4, #54]	; 0x36
		status = net_if_l2(iface)->send(iface, pkt);
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f00b fedd 	bl	8010876 <net_if_l2>
 8004abc:	4621      	mov	r1, r4
 8004abe:	6843      	ldr	r3, [r0, #4]
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	4798      	blx	r3
	if (status < 0) {
 8004ac4:	1e06      	subs	r6, r0, #0
 8004ac6:	da02      	bge.n	8004ace <net_if_tx.isra.0+0x7e>
		net_pkt_unref(pkt);
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f00c ff93 	bl	80119f4 <net_pkt_unref>
	if (context) {
 8004ace:	b11f      	cbz	r7, 8004ad8 <net_if_tx.isra.0+0x88>
		net_context_send_cb(context, status);
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	f00b fed4 	bl	8010880 <net_context_send_cb>
	if (ll_dst.addr) {
 8004ad8:	9b00      	ldr	r3, [sp, #0]
 8004ada:	b123      	cbz	r3, 8004ae6 <net_if_tx.isra.0+0x96>
		net_if_call_link_cb(iface, &ll_dst, status);
 8004adc:	4632      	mov	r2, r6
 8004ade:	4669      	mov	r1, sp
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f7ff ff97 	bl	8004a14 <net_if_call_link_cb>
}
 8004ae6:	b005      	add	sp, #20
 8004ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = -ENETDOWN;
 8004aea:	f06f 0672 	mvn.w	r6, #114	; 0x72
 8004aee:	e7eb      	b.n	8004ac8 <net_if_tx.isra.0+0x78>
 8004af0:	20001f3c 	.word	0x20001f3c

08004af4 <net_if_get_by_iface>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

int net_if_get_by_iface(struct net_if *iface)
{
	if (!(iface >= _net_if_list_start && iface < _net_if_list_end)) {
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <net_if_get_by_iface+0x1c>)
 8004af6:	4298      	cmp	r0, r3
 8004af8:	d306      	bcc.n	8004b08 <net_if_get_by_iface+0x14>
 8004afa:	4a06      	ldr	r2, [pc, #24]	; (8004b14 <net_if_get_by_iface+0x20>)
 8004afc:	4290      	cmp	r0, r2
 8004afe:	d203      	bcs.n	8004b08 <net_if_get_by_iface+0x14>
		return -1;
	}

	return (iface - _net_if_list_start) + 1;
 8004b00:	1ac0      	subs	r0, r0, r3
 8004b02:	10c0      	asrs	r0, r0, #3
 8004b04:	3001      	adds	r0, #1
 8004b06:	4770      	bx	lr
		return -1;
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000570 	.word	0x20000570
 8004b14:	20000578 	.word	0x20000578

08004b18 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004b1a:	4c06      	ldr	r4, [pc, #24]	; (8004b34 <net_if_foreach+0x1c>)
 8004b1c:	4f06      	ldr	r7, [pc, #24]	; (8004b38 <net_if_foreach+0x20>)
{
 8004b1e:	4605      	mov	r5, r0
 8004b20:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004b22:	42bc      	cmp	r4, r7
 8004b24:	d300      	bcc.n	8004b28 <net_if_foreach+0x10>
		cb(iface, user_data);
	}
}
 8004b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb(iface, user_data);
 8004b28:	4620      	mov	r0, r4
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	47a8      	blx	r5
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004b2e:	3408      	adds	r4, #8
 8004b30:	e7f7      	b.n	8004b22 <net_if_foreach+0xa>
 8004b32:	bf00      	nop
 8004b34:	20000570 	.word	0x20000570
 8004b38:	20000578 	.word	0x20000578

08004b3c <net_if_up>:

int net_if_up(struct net_if *iface)
{
 8004b3c:	b538      	push	{r3, r4, r5, lr}
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
 8004b3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 8004b42:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b48:	f7ff fd02 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f00b fed8 	bl	8010904 <net_if_flag_is_set>
 8004b54:	bb30      	cbnz	r0, 8004ba4 <net_if_up+0x68>
 * @return True if IP offlining is active, false otherwise.
 */
static inline bool net_if_is_ip_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_OFFLOAD)
	return (iface->if_dev->offload != NULL);
 8004b56:	6828      	ldr	r0, [r5, #0]
		status = -EALREADY;
		goto out;
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 8004b58:	6983      	ldr	r3, [r0, #24]
 8004b5a:	b90b      	cbnz	r3, 8004b60 <net_if_up+0x24>
	     net_if_is_ip_offloaded(iface)) ||
 8004b5c:	7f83      	ldrb	r3, [r0, #30]
 8004b5e:	b16b      	cbz	r3, 8004b7c <net_if_up+0x40>
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
 8004b60:	2100      	movs	r1, #0
 8004b62:	f00b fefb 	bl	801095c <net_if_flag_set.isra.0>
	int status = 0;
 8004b66:	2400      	movs	r4, #0
				     const void *info, size_t length);

static inline void net_mgmt_event_notify(uint32_t mgmt_event,
					 struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4810      	ldr	r0, [pc, #64]	; (8004bac <net_if_up+0x70>)
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4629      	mov	r1, r5
 8004b70:	f000 ff22 	bl	80059b8 <net_mgmt_event_notify_with_info>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
 8004b74:	f7ff fcf4 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>

	return status;
}
 8004b78:	4620      	mov	r0, r4
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f00b fe7a 	bl	8010876 <net_if_l2>
 8004b82:	4604      	mov	r4, r0
 8004b84:	b130      	cbz	r0, 8004b94 <net_if_up+0x58>
 8004b86:	6884      	ldr	r4, [r0, #8]
 8004b88:	b124      	cbz	r4, 8004b94 <net_if_up+0x58>
	status = net_if_l2(iface)->enable(iface, true);
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	47a0      	blx	r4
	if (status < 0) {
 8004b90:	1e04      	subs	r4, r0, #0
 8004b92:	dbef      	blt.n	8004b74 <net_if_up+0x38>
	net_if_flag_set(iface, NET_IF_UP);
 8004b94:	6828      	ldr	r0, [r5, #0]
 8004b96:	2100      	movs	r1, #0
 8004b98:	f00b fee0 	bl	801095c <net_if_flag_set.isra.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	f00b febc 	bl	801091a <l2_flags_get.isra.0>
notify:
 8004ba2:	e7e1      	b.n	8004b68 <net_if_up+0x2c>
		status = -EALREADY;
 8004ba4:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8004ba8:	e7e4      	b.n	8004b74 <net_if_up+0x38>
 8004baa:	bf00      	nop
 8004bac:	d0010002 	.word	0xd0010002

08004bb0 <net_if_down>:

	k_mutex_unlock(&lock);
}

int net_if_down(struct net_if *iface)
{
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
 8004bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bbc:	f7ff fcc8 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
 8004bc0:	682b      	ldr	r3, [r5, #0]

	leave_mcast_all(iface);
	leave_ipv4_mcast_all(iface);

	if (net_if_is_ip_offloaded(iface)) {
 8004bc2:	6999      	ldr	r1, [r3, #24]
 8004bc4:	b971      	cbnz	r1, 8004be4 <net_if_down+0x34>
		goto done;
	}

	/* If the L2 does not support enable just clear the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f00b fe55 	bl	8010876 <net_if_l2>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	b150      	cbz	r0, 8004be6 <net_if_down+0x36>
 8004bd0:	6884      	ldr	r4, [r0, #8]
 8004bd2:	b144      	cbz	r4, 8004be6 <net_if_down+0x36>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = net_if_l2(iface)->enable(iface, false);
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47a0      	blx	r4
	if (status < 0) {
 8004bd8:	1e04      	subs	r4, r0, #0
 8004bda:	da04      	bge.n	8004be6 <net_if_down+0x36>
	net_if_flag_clear(iface, NET_IF_UP);

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

out:
	k_mutex_unlock(&lock);
 8004bdc:	f7ff fcc0 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>

	return status;
}
 8004be0:	4620      	mov	r0, r4
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
	int status = 0;
 8004be4:	2400      	movs	r4, #0
	atomic_clear_bit(iface->if_dev->flags, value);
 8004be6:	6828      	ldr	r0, [r5, #0]
 8004be8:	2100      	movs	r1, #0
 8004bea:	300c      	adds	r0, #12
 8004bec:	f00b fea1 	bl	8010932 <atomic_clear_bit>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4803      	ldr	r0, [pc, #12]	; (8004c00 <net_if_down+0x50>)
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f000 fede 	bl	80059b8 <net_mgmt_event_notify_with_info>
}
 8004bfc:	e7ee      	b.n	8004bdc <net_if_down+0x2c>
 8004bfe:	bf00      	nop
 8004c00:	d0010001 	.word	0xd0010001

08004c04 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
 8004c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c0e:	f7ff fc9f 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004c12:	4c16      	ldr	r4, [pc, #88]	; (8004c6c <net_if_init+0x68>)
 8004c14:	4e16      	ldr	r6, [pc, #88]	; (8004c70 <net_if_init+0x6c>)
	net_tc_tx_init();
 8004c16:	f00d f995 	bl	8011f44 <net_tc_tx_init>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004c1a:	4627      	mov	r7, r4
 8004c1c:	42b4      	cmp	r4, r6
 8004c1e:	d317      	bcc.n	8004c50 <net_if_init+0x4c>
		init_iface(iface);
		if_count++;
	}

	if (if_count == 0) {
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <net_if_init+0x70>)
 8004c22:	4a15      	ldr	r2, [pc, #84]	; (8004c78 <net_if_init+0x74>)
 8004c24:	1bdb      	subs	r3, r3, r7
 8004c26:	08db      	lsrs	r3, r3, #3
 8004c28:	4296      	cmp	r6, r2
 8004c2a:	bf38      	it	cc
 8004c2c:	2300      	movcc	r3, #0
 8004c2e:	b15b      	cbz	r3, 8004c48 <net_if_init+0x44>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <net_if_init+0x78>)
	k_work_init_delayable(&router_timer, iface_router_expired);
 8004c32:	4913      	ldr	r1, [pc, #76]	; (8004c80 <net_if_init+0x7c>)
 8004c34:	4813      	ldr	r0, [pc, #76]	; (8004c84 <net_if_init+0x80>)
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
 8004c36:	2240      	movs	r2, #64	; 0x40
 8004c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	k_work_init_delayable(&router_timer, iface_router_expired);
 8004c3c:	f00f fabe 	bl	80141bc <k_work_init_delayable>
	list->head = NULL;
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <net_if_init+0x84>)
 8004c42:	2200      	movs	r2, #0
	list->tail = NULL;
 8004c44:	e9c3 2200 	strd	r2, r2, [r3]
	}
#endif

out:
	k_mutex_unlock(&lock);
}
 8004c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
 8004c4c:	f7ff bc88 	b.w	8004560 <k_mutex_unlock.constprop.0.isra.0>
	return iface->if_dev->dev;
 8004c50:	6820      	ldr	r0, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->api;
 8004c52:	6803      	ldr	r3, [r0, #0]
 8004c54:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
 8004c56:	b13d      	cbz	r5, 8004c68 <net_if_init+0x64>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b12b      	cbz	r3, 8004c68 <net_if_init+0x64>
	net_if_flag_set(iface, NET_IF_IPV4);
 8004c5c:	2106      	movs	r1, #6
 8004c5e:	f00b fe7d 	bl	801095c <net_if_flag_set.isra.0>
	api->init(iface);
 8004c62:	682b      	ldr	r3, [r5, #0]
 8004c64:	4620      	mov	r0, r4
 8004c66:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004c68:	3408      	adds	r4, #8
 8004c6a:	e7d7      	b.n	8004c1c <net_if_init+0x18>
 8004c6c:	20000570 	.word	0x20000570
 8004c70:	20000578 	.word	0x20000578
 8004c74:	2000057f 	.word	0x2000057f
 8004c78:	20000569 	.word	0x20000569
 8004c7c:	20001efc 	.word	0x20001efc
 8004c80:	0800464d 	.word	0x0800464d
 8004c84:	20000a78 	.word	0x20000a78
 8004c88:	20001ef4 	.word	0x20001ef4

08004c8c <net_if_post_init>:

void net_if_post_init(void)
{
 8004c8c:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004c8e:	4c07      	ldr	r4, [pc, #28]	; (8004cac <net_if_post_init+0x20>)
 8004c90:	4d07      	ldr	r5, [pc, #28]	; (8004cb0 <net_if_post_init+0x24>)
 8004c92:	42ac      	cmp	r4, r5
 8004c94:	d300      	bcc.n	8004c98 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
 8004c98:	2103      	movs	r1, #3
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f00b fe32 	bl	8010904 <net_if_flag_is_set>
 8004ca0:	b910      	cbnz	r0, 8004ca8 <net_if_post_init+0x1c>
			net_if_up(iface);
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7ff ff4a 	bl	8004b3c <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8004ca8:	3408      	adds	r4, #8
 8004caa:	e7f2      	b.n	8004c92 <net_if_post_init+0x6>
 8004cac:	20000570 	.word	0x20000570
 8004cb0:	20000578 	.word	0x20000578

08004cb4 <net_sprint_ll_addr_buf>:
	return ptr;
}

char *net_sprint_ll_addr_buf(const uint8_t *ll, uint8_t ll_len,
			     char *buf, int buflen)
{
 8004cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb8:	4616      	mov	r6, r2
	uint8_t i, len, blen;
	char *ptr = buf;

	if (ll == NULL) {
 8004cba:	4605      	mov	r5, r0
 8004cbc:	b308      	cbz	r0, 8004d02 <net_sprint_ll_addr_buf+0x4e>
		return "<unknown>";
	}

	switch (ll_len) {
 8004cbe:	3902      	subs	r1, #2
 8004cc0:	b2c9      	uxtb	r1, r1
 8004cc2:	2906      	cmp	r1, #6
 8004cc4:	bf9a      	itte	ls
 8004cc6:	4a11      	ldrls	r2, [pc, #68]	; (8004d0c <net_sprint_ll_addr_buf+0x58>)
 8004cc8:	5c52      	ldrbls	r2, [r2, r1]
	if (ll == NULL) {
 8004cca:	2206      	movhi	r2, #6
	default:
		len = 6U;
		break;
	}

	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 8004ccc:	1887      	adds	r7, r0, r2
 8004cce:	b2dc      	uxtb	r4, r3
 8004cd0:	4630      	mov	r0, r6
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
		*ptr++ = ':';
 8004cd2:	f04f 083a 	mov.w	r8, #58	; 0x3a
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 8004cd6:	b15c      	cbz	r4, 8004cf0 <net_sprint_ll_addr_buf+0x3c>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
 8004cd8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004cdc:	2301      	movs	r3, #1
 8004cde:	2241      	movs	r2, #65	; 0x41
 8004ce0:	f00b ff3b 	bl	8010b5a <net_byte_to_hex>
		blen -= 3U;
 8004ce4:	3c03      	subs	r4, #3
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 8004ce6:	42bd      	cmp	r5, r7
		*ptr++ = ':';
 8004ce8:	f800 8b01 	strb.w	r8, [r0], #1
		blen -= 3U;
 8004cec:	b2e4      	uxtb	r4, r4
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 8004cee:	d1f2      	bne.n	8004cd6 <net_sprint_ll_addr_buf+0x22>
	}

	if (!(ptr - buf)) {
 8004cf0:	42b0      	cmp	r0, r6
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	d006      	beq.n	8004d06 <net_sprint_ll_addr_buf+0x52>
		return NULL;
	}

	*(ptr - 1) = '\0';
 8004cf8:	f800 2c01 	strb.w	r2, [r0, #-1]
	return buf;
 8004cfc:	4630      	mov	r0, r6
}
 8004cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return "<unknown>";
 8004d02:	4803      	ldr	r0, [pc, #12]	; (8004d10 <net_sprint_ll_addr_buf+0x5c>)
 8004d04:	e7fb      	b.n	8004cfe <net_sprint_ll_addr_buf+0x4a>
		return NULL;
 8004d06:	4610      	mov	r0, r2
 8004d08:	e7f9      	b.n	8004cfe <net_sprint_ll_addr_buf+0x4a>
 8004d0a:	bf00      	nop
 8004d0c:	08017309 	.word	0x08017309
 8004d10:	080172ff 	.word	0x080172ff

08004d14 <z_impl_net_addr_ntop>:
	return buf - start;
}

char *z_impl_net_addr_ntop(sa_family_t family, const void *src,
			   char *dst, size_t size)
{
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	b089      	sub	sp, #36	; 0x24
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
 8004d1a:	2300      	movs	r3, #0
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
 8004d1c:	2802      	cmp	r0, #2
	unsigned char zeros[8] = { 0 };
 8004d1e:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
 8004d22:	4606      	mov	r6, r0
 8004d24:	9101      	str	r1, [sp, #4]
 8004d26:	4615      	mov	r5, r2
	if (family == AF_INET6) {
 8004d28:	d13d      	bne.n	8004da6 <z_impl_net_addr_ntop+0x92>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
 8004d2a:	a806      	add	r0, sp, #24
 8004d2c:	9104      	str	r1, [sp, #16]
 8004d2e:	4601      	mov	r1, r0
{
 8004d30:	461a      	mov	r2, r3
 8004d32:	e006      	b.n	8004d42 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
 8004d34:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
 8004d36:	3201      	adds	r2, #1
				zeros[i]++;
 8004d38:	3401      	adds	r4, #1
 8004d3a:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
 8004d3c:	b2d4      	uxtb	r4, r2
 8004d3e:	2c07      	cmp	r4, #7
 8004d40:	d804      	bhi.n	8004d4c <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
 8004d42:	9c01      	ldr	r4, [sp, #4]
 8004d44:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
 8004d48:	2c00      	cmp	r4, #0
 8004d4a:	d0f3      	beq.n	8004d34 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	f101 0101 	add.w	r1, r1, #1
 8004d54:	d1ec      	bne.n	8004d30 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
 8004d56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
 8004d5a:	f04f 0801 	mov.w	r8, #1
			}
		}

		for (i = 0U; i < 8; i++) {
 8004d5e:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
 8004d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d64:	4542      	cmp	r2, r8
				longest = zeros[i];
				pos = i;
 8004d66:	bf88      	it	hi
 8004d68:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
 8004d6a:	f103 0301 	add.w	r3, r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
				pos = i;
 8004d70:	bf88      	it	hi
 8004d72:	4690      	movhi	r8, r2
		for (i = 0U; i < 8; i++) {
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d1f3      	bne.n	8004d60 <z_impl_net_addr_ntop+0x4c>
		len = 8;
 8004d78:	f1b8 0f01 	cmp.w	r8, #1
 8004d7c:	469b      	mov	fp, r3
 8004d7e:	f04f 0a3a 	mov.w	sl, #58	; 0x3a
 8004d82:	bf08      	it	eq
 8004d84:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	bool needcolon = false;
 8004d88:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	455c      	cmp	r4, fp
 8004d90:	db18      	blt.n	8004dc4 <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
 8004d92:	42a8      	cmp	r0, r5
 8004d94:	d009      	beq.n	8004daa <z_impl_net_addr_ntop+0x96>
		return NULL;
	}

	if (family == AF_INET) {
 8004d96:	2e01      	cmp	r6, #1
 8004d98:	f04f 0300 	mov.w	r3, #0
		*(ptr - 1) = '\0';
 8004d9c:	bf0c      	ite	eq
 8004d9e:	f800 3c01 	strbeq.w	r3, [r0, #-1]
	} else {
		*ptr = '\0';
 8004da2:	7003      	strbne	r3, [r0, #0]
 8004da4:	e002      	b.n	8004dac <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
 8004da6:	2801      	cmp	r0, #1
 8004da8:	d004      	beq.n	8004db4 <z_impl_net_addr_ntop+0xa0>
		return NULL;
 8004daa:	2500      	movs	r5, #0
	}

	return dst;
}
 8004dac:	4628      	mov	r0, r5
 8004dae:	b009      	add	sp, #36	; 0x24
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = 4;
 8004db4:	f04f 0b04 	mov.w	fp, #4
		delim = '.';
 8004db8:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
	int8_t pos = -1;
 8004dbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
 8004dc0:	4680      	mov	r8, r0
 8004dc2:	e7e1      	b.n	8004d88 <z_impl_net_addr_ntop+0x74>
		if (len == 4) {
 8004dc4:	f1bb 0f04 	cmp.w	fp, #4
 8004dc8:	d13f      	bne.n	8004e4a <z_impl_net_addr_ntop+0x136>
			value = (uint32_t)addr->s4_addr[i];
 8004dca:	9b01      	ldr	r3, [sp, #4]
 8004dcc:	5d1a      	ldrb	r2, [r3, r4]
				*ptr++ = '0';
 8004dce:	4603      	mov	r3, r0
			if (value == 0U) {
 8004dd0:	b942      	cbnz	r2, 8004de4 <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
 8004dd2:	2230      	movs	r2, #48	; 0x30
 8004dd4:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
 8004dd8:	f880 a001 	strb.w	sl, [r0, #1]
	for (i = 0U; i < len; i++) {
 8004ddc:	3401      	adds	r4, #1
 8004dde:	b2e4      	uxtb	r4, r4
 8004de0:	4618      	mov	r0, r3
 8004de2:	e7d4      	b.n	8004d8e <z_impl_net_addr_ntop+0x7a>
			l = net_value_to_udec(ptr, value, 0);
 8004de4:	f04f 0e00 	mov.w	lr, #0
 8004de8:	f8cd e008 	str.w	lr, [sp, #8]
 8004dec:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 8004ee0 <z_impl_net_addr_ntop+0x1cc>
 8004df0:	f04f 0c09 	mov.w	ip, #9
		temp = value / divisor;
 8004df4:	fbb2 f9fe 	udiv	r9, r2, lr
 8004df8:	9203      	str	r2, [sp, #12]
 8004dfa:	f8cd 9014 	str.w	r9, [sp, #20]
		value = value % divisor;
 8004dfe:	fb0e 2219 	mls	r2, lr, r9, r2
		if ((precision > i) || (temp != 0)) {
 8004e02:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004e06:	45e1      	cmp	r9, ip
 8004e08:	dc03      	bgt.n	8004e12 <z_impl_net_addr_ntop+0xfe>
 8004e0a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004e0e:	45f1      	cmp	r9, lr
 8004e10:	d307      	bcc.n	8004e22 <z_impl_net_addr_ntop+0x10e>
			*buf++ = (char) (temp + '0');
 8004e12:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004e16:	f8cd c008 	str.w	ip, [sp, #8]
 8004e1a:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8004e1e:	f803 9b01 	strb.w	r9, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
 8004e22:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004e26:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 8004e2a:	f04f 090a 	mov.w	r9, #10
 8004e2e:	fbbe fef9 	udiv	lr, lr, r9
 8004e32:	d1df      	bne.n	8004df4 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
	return buf - start;
 8004e3a:	1a1b      	subs	r3, r3, r0
			ptr += l;
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	fa50 f383 	uxtab	r3, r0, r3
			*ptr++ = delim;
 8004e42:	f800 a002 	strb.w	sl, [r0, r2]
 8004e46:	3301      	adds	r3, #1
			continue;
 8004e48:	e7c8      	b.n	8004ddc <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
 8004e4a:	42a7      	cmp	r7, r4
 8004e4c:	d10e      	bne.n	8004e6c <z_impl_net_addr_ntop+0x158>
			if (needcolon || i == 0U) {
 8004e4e:	b901      	cbnz	r1, 8004e52 <z_impl_net_addr_ntop+0x13e>
 8004e50:	b917      	cbnz	r7, 8004e58 <z_impl_net_addr_ntop+0x144>
				*ptr++ = ':';
 8004e52:	233a      	movs	r3, #58	; 0x3a
 8004e54:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
 8004e58:	4603      	mov	r3, r0
 8004e5a:	223a      	movs	r2, #58	; 0x3a
 8004e5c:	f803 2b01 	strb.w	r2, [r3], #1
			i += longest - 1U;
 8004e60:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8004e64:	4414      	add	r4, r2
 8004e66:	b2e4      	uxtb	r4, r4
			needcolon = false;
 8004e68:	2100      	movs	r1, #0
			continue;
 8004e6a:	e7b7      	b.n	8004ddc <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
 8004e6c:	b111      	cbz	r1, 8004e74 <z_impl_net_addr_ntop+0x160>
			*ptr++ = ':';
 8004e6e:	233a      	movs	r3, #58	; 0x3a
 8004e70:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
 8004e74:	9b04      	ldr	r3, [sp, #16]
 8004e76:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8004e7a:	ba52      	rev16	r2, r2
		if (bh) {
 8004e7c:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
 8004e80:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
 8004e84:	fa5f f982 	uxtb.w	r9, r2
		if (bh) {
 8004e88:	d018      	beq.n	8004ebc <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
 8004e8a:	2b0f      	cmp	r3, #15
		bh = value >> 8;
 8004e8c:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
 8004e8e:	d90d      	bls.n	8004eac <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
 8004e90:	2300      	movs	r3, #0
 8004e92:	2261      	movs	r2, #97	; 0x61
 8004e94:	f00b fe61 	bl	8010b5a <net_byte_to_hex>
 8004e98:	4684      	mov	ip, r0
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	2261      	movs	r2, #97	; 0x61
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	4660      	mov	r0, ip
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
 8004ea2:	f00b fe5a 	bl	8010b5a <net_byte_to_hex>
 8004ea6:	4603      	mov	r3, r0
		needcolon = true;
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	e797      	b.n	8004ddc <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
 8004eac:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
 8004eae:	bf94      	ite	ls
 8004eb0:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
 8004eb2:	3157      	addhi	r1, #87	; 0x57
					*ptr++ = (char)(bh + '0');
 8004eb4:	f100 0c01 	add.w	ip, r0, #1
					*ptr++ = (char) (bh - 10 + 'a');
 8004eb8:	7001      	strb	r1, [r0, #0]
 8004eba:	e7ee      	b.n	8004e9a <z_impl_net_addr_ntop+0x186>
		} else if (bl > 0x0f) {
 8004ebc:	f1b9 0f0f 	cmp.w	r9, #15
 8004ec0:	d902      	bls.n	8004ec8 <z_impl_net_addr_ntop+0x1b4>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
 8004ec2:	2261      	movs	r2, #97	; 0x61
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	e7ec      	b.n	8004ea2 <z_impl_net_addr_ntop+0x18e>
			if (bl < 10) {
 8004ec8:	f1b9 0f09 	cmp.w	r9, #9
				*ptr++ = (char)(bl + '0');
 8004ecc:	bf94      	ite	ls
 8004ece:	f109 0930 	addls.w	r9, r9, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
 8004ed2:	f109 0957 	addhi.w	r9, r9, #87	; 0x57
					*ptr++ = (char)(bh + '0');
 8004ed6:	1c43      	adds	r3, r0, #1
				*ptr++ = (char) (bl - 10 + 'a');
 8004ed8:	f880 9000 	strb.w	r9, [r0]
 8004edc:	e7e4      	b.n	8004ea8 <z_impl_net_addr_ntop+0x194>
 8004ede:	bf00      	nop
 8004ee0:	3b9aca00 	.word	0x3b9aca00

08004ee4 <net_sprint_addr>:
	char *s = buf[++i % NBUFS];
 8004ee4:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <net_sprint_addr+0x24>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	3201      	adds	r2, #1
{
 8004eea:	b410      	push	{r4}
	char *s = buf[++i % NBUFS];
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	4c07      	ldr	r4, [pc, #28]	; (8004f0c <net_sprint_addr+0x28>)
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ef6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004efa:	1ad2      	subs	r2, r2, r3
 8004efc:	2328      	movs	r3, #40	; 0x28
 8004efe:	fb03 4202 	mla	r2, r3, r2, r4
}
 8004f02:	bc10      	pop	{r4}
 8004f04:	f7ff bf06 	b.w	8004d14 <z_impl_net_addr_ntop>
 8004f08:	20001f44 	.word	0x20001f44
 8004f0c:	200025a8 	.word	0x200025a8

08004f10 <net_ipv4_unspecified_address>:
const struct in_addr *net_ipv4_unspecified_address(void)
{
	static const struct in_addr addr;

	return &addr;
}
 8004f10:	4800      	ldr	r0, [pc, #0]	; (8004f14 <net_ipv4_unspecified_address+0x4>)
 8004f12:	4770      	bx	lr
 8004f14:	08015818 	.word	0x08015818

08004f18 <net_ipv4_broadcast_address>:
const struct in_addr *net_ipv4_broadcast_address(void)
{
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
}
 8004f18:	4800      	ldr	r0, [pc, #0]	; (8004f1c <net_ipv4_broadcast_address+0x4>)
 8004f1a:	4770      	bx	lr
 8004f1c:	08015814 	.word	0x08015814

08004f20 <check_used_port>:
			   const struct sockaddr *local_addr)

{
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8004f20:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <check_used_port+0x44>)
{
 8004f22:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8004f24:	2400      	movs	r4, #0
	return context->flags & NET_CONTEXT_IN_USE;
 8004f26:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
		if (!net_context_is_used(&contexts[i])) {
 8004f2a:	07ed      	lsls	r5, r5, #31
 8004f2c:	d50f      	bpl.n	8004f4e <check_used_port+0x2e>
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
 8004f2e:	f8b3 5084 	ldrh.w	r5, [r3, #132]	; 0x84
 8004f32:	4285      	cmp	r5, r0
 8004f34:	d10b      	bne.n	8004f4e <check_used_port+0x2e>
 8004f36:	8bdd      	ldrh	r5, [r3, #30]
 8004f38:	428d      	cmp	r5, r1
 8004f3a:	d108      	bne.n	8004f4e <check_used_port+0x2e>
							     sin6_addr,
				    &((struct sockaddr_in6 *)
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8004f3c:	8815      	ldrh	r5, [r2, #0]
 8004f3e:	2d01      	cmp	r5, #1
 8004f40:	d105      	bne.n	8004f4e <check_used_port+0x2e>
			   local_addr->sa_family == AF_INET) {
			if (net_sin_ptr(&contexts[i].local)->sin_addr == NULL) {
 8004f42:	6a1d      	ldr	r5, [r3, #32]
 8004f44:	b11d      	cbz	r5, 8004f4e <check_used_port+0x2e>
 8004f46:	6856      	ldr	r6, [r2, #4]
 8004f48:	682d      	ldr	r5, [r5, #0]
				continue;
			}

			if (net_ipv4_addr_cmp(
 8004f4a:	42ae      	cmp	r6, r5
 8004f4c:	d006      	beq.n	8004f5c <check_used_port+0x3c>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8004f4e:	3401      	adds	r4, #1
 8004f50:	2c06      	cmp	r4, #6
 8004f52:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8004f56:	d1e6      	bne.n	8004f26 <check_used_port+0x6>
				return -EEXIST;
			}
		}
	}

	return 0;
 8004f58:	2000      	movs	r0, #0
}
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
				return -EEXIST;
 8004f5c:	f06f 0010 	mvn.w	r0, #16
 8004f60:	e7fb      	b.n	8004f5a <check_used_port+0x3a>
 8004f62:	bf00      	nop
 8004f64:	20001f48 	.word	0x20001f48

08004f68 <find_available_port>:

static uint16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
 8004f68:	b570      	push	{r4, r5, r6, lr}
	uint16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
 8004f6a:	4e09      	ldr	r6, [pc, #36]	; (8004f90 <find_available_port+0x28>)
{
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	460d      	mov	r5, r1
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
 8004f70:	f003 fefa 	bl	8008d68 <z_impl_sys_rand32_get>
		local_port = sys_rand32_get() | 0x8000;
 8004f74:	ea40 0306 	orr.w	r3, r0, r6
 8004f78:	ba5b      	rev16	r3, r3
		if (local_port <= 1023U) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(net_context_get_ip_proto(context),
 8004f7a:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 8004f7e:	b299      	uxth	r1, r3
 8004f80:	462a      	mov	r2, r5
 8004f82:	f7ff ffcd 	bl	8004f20 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
 8004f86:	3011      	adds	r0, #17
 8004f88:	d0f2      	beq.n	8004f70 <find_available_port+0x8>

	return htons(local_port);
}
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
 8004f8e:	bf00      	nop
 8004f90:	ffff8000 	.word	0xffff8000

08004f94 <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
 8004f94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f98:	4c29      	ldr	r4, [pc, #164]	; (8005040 <net_context_packet_received+0xac>)
 8004f9a:	460e      	mov	r6, r1
 8004f9c:	4617      	mov	r7, r2
 8004f9e:	4698      	mov	r8, r3
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8004fa0:	2500      	movs	r5, #0
 8004fa2:	46a2      	mov	sl, r4
 8004fa4:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
		if (!net_context_is_used(&contexts[i])) {
 8004fa8:	07db      	lsls	r3, r3, #31
 8004faa:	d521      	bpl.n	8004ff0 <net_context_packet_received+0x5c>
		if (contexts[i].conn_handler == conn_handler) {
 8004fac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fae:	4298      	cmp	r0, r3
 8004fb0:	d11e      	bne.n	8004ff0 <net_context_packet_received+0x5c>
			return &contexts[i];
 8004fb2:	208c      	movs	r0, #140	; 0x8c
 8004fb4:	4345      	muls	r5, r0
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
	NET_ASSERT(net_pkt_iface(pkt));

	k_mutex_lock(&context->lock, K_FOREVER);
 8004fb6:	f105 0408 	add.w	r4, r5, #8
 8004fba:	4454      	add	r4, sl
 8004fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f00b ffec 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
			return &contexts[i];
 8004fca:	eb0a 0905 	add.w	r9, sl, r5
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
 8004fce:	69b0      	ldr	r0, [r6, #24]
 8004fd0:	f7ff fd90 	bl	8004af4 <net_if_get_by_iface>
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
 8004fd4:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8004fd8:	f889 0088 	strb.w	r0, [r9, #136]	; 0x88
	pkt->context = ctx;
 8004fdc:	f8c6 9014 	str.w	r9, [r6, #20]
 8004fe0:	b9cb      	cbnz	r3, 8005016 <net_context_packet_received+0x82>
	verdict = NET_OK;

	return verdict;

unlock:
	k_mutex_unlock(&context->lock);
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f00b ffe1 	bl	8010faa <k_mutex_unlock.isra.0>

	return verdict;
 8004fe8:	2002      	movs	r0, #2
}
 8004fea:	b002      	add	sp, #8
 8004fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8004ff0:	3501      	adds	r5, #1
 8004ff2:	2d06      	cmp	r5, #6
 8004ff4:	f104 048c 	add.w	r4, r4, #140	; 0x8c
 8004ff8:	d1d4      	bne.n	8004fa4 <net_context_packet_received+0x10>
	k_mutex_lock(&context->lock, K_FOREVER);
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005002:	2008      	movs	r0, #8
 8005004:	f00b ffcd 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
 8005008:	69b0      	ldr	r0, [r6, #24]
 800500a:	f7ff fd73 	bl	8004af4 <net_if_get_by_iface>
 800500e:	2300      	movs	r3, #0
 8005010:	f883 3088 	strb.w	r3, [r3, #136]	; 0x88
 8005014:	deff      	udf	#255	; 0xff
	k_sem_give(&context->recv_data_wait);
 8005016:	f105 0040 	add.w	r0, r5, #64	; 0x40
	z_impl_k_sem_give(sem);
 800501a:	4450      	add	r0, sl
 800501c:	f007 fac0 	bl	800c5a0 <z_impl_k_sem_give>
	k_mutex_unlock(&context->lock);
 8005020:	4620      	mov	r0, r4
 8005022:	f00b ffc2 	bl	8010faa <k_mutex_unlock.isra.0>
	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
 8005026:	2400      	movs	r4, #0
 8005028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	9400      	str	r4, [sp, #0]
 800502e:	4648      	mov	r0, r9
 8005030:	f8d9 5030 	ldr.w	r5, [r9, #48]	; 0x30
 8005034:	4643      	mov	r3, r8
 8005036:	463a      	mov	r2, r7
 8005038:	4631      	mov	r1, r6
 800503a:	47a8      	blx	r5
	return verdict;
 800503c:	4620      	mov	r0, r4
 800503e:	e7d4      	b.n	8004fea <net_context_packet_received+0x56>
 8005040:	20001f48 	.word	0x20001f48

08005044 <net_context_get>:
		if (!IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 8005044:	2802      	cmp	r0, #2
{
 8005046:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504a:	4606      	mov	r6, r0
 800504c:	460d      	mov	r5, r1
 800504e:	4690      	mov	r8, r2
 8005050:	4699      	mov	r9, r3
		if (!IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 8005052:	f000 80c8 	beq.w	80051e6 <net_context_get+0x1a2>
		if (!IS_ENABLED(CONFIG_NET_SOCKETS_CAN) && family == AF_CAN) {
 8005056:	2804      	cmp	r0, #4
 8005058:	f000 80c5 	beq.w	80051e6 <net_context_get+0x1a2>
		if (type == SOCK_RAW) {
 800505c:	2903      	cmp	r1, #3
 800505e:	d003      	beq.n	8005068 <net_context_get+0x24>
			} else if (family == AF_PACKET || family == AF_CAN) {
 8005060:	1ec3      	subs	r3, r0, #3
 8005062:	2b01      	cmp	r3, #1
 8005064:	f240 80c5 	bls.w	80051f2 <net_context_get+0x1ae>
		if (family != AF_INET && family != AF_INET6 &&
 8005068:	1e73      	subs	r3, r6, #1
 800506a:	2b03      	cmp	r3, #3
 800506c:	f200 80be 	bhi.w	80051ec <net_context_get+0x1a8>
		if (type != SOCK_DGRAM && type != SOCK_STREAM &&
 8005070:	1e6b      	subs	r3, r5, #1
 8005072:	2b02      	cmp	r3, #2
 8005074:	f200 80bd 	bhi.w	80051f2 <net_context_get+0x1ae>
		if (type != SOCK_RAW && ip_proto != IPPROTO_UDP &&
 8005078:	2d03      	cmp	r5, #3
 800507a:	d00a      	beq.n	8005092 <net_context_get+0x4e>
 800507c:	f1b8 0f11 	cmp.w	r8, #17
 8005080:	f000 80bd 	beq.w	80051fe <net_context_get+0x1ba>
 8005084:	f1b8 0f06 	cmp.w	r8, #6
 8005088:	f000 80bf 	beq.w	800520a <net_context_get+0x1c6>
			return -EPROTONOSUPPORT;
 800508c:	f06f 047a 	mvn.w	r4, #122	; 0x7a
 8005090:	e03d      	b.n	800510e <net_context_get+0xca>
		if (!context) {
 8005092:	f1b9 0f00 	cmp.w	r9, #0
 8005096:	f000 80af 	beq.w	80051f8 <net_context_get+0x1b4>
	return z_impl_k_sem_take(sem, timeout);
 800509a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800509e:	485c      	ldr	r0, [pc, #368]	; (8005210 <net_context_get+0x1cc>)
 80050a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050a4:	f007 faa2 	bl	800c5ec <z_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 80050a8:	4b5a      	ldr	r3, [pc, #360]	; (8005214 <net_context_get+0x1d0>)
 80050aa:	f04f 0a00 	mov.w	sl, #0
 80050ae:	461c      	mov	r4, r3
	return context->flags & NET_CONTEXT_IN_USE;
 80050b0:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
		if (net_context_is_used(&contexts[i])) {
 80050b4:	f011 0101 	ands.w	r1, r1, #1
 80050b8:	d02d      	beq.n	8005116 <net_context_get+0xd2>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 80050ba:	f10a 0a01 	add.w	sl, sl, #1
 80050be:	f1ba 0f06 	cmp.w	sl, #6
 80050c2:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 80050c6:	d1f3      	bne.n	80050b0 <net_context_get+0x6c>
	int i, ret = -ENOENT;
 80050c8:	f06f 0401 	mvn.w	r4, #1
	z_impl_k_sem_give(sem);
 80050cc:	4850      	ldr	r0, [pc, #320]	; (8005210 <net_context_get+0x1cc>)
 80050ce:	f007 fa67 	bl	800c5a0 <z_impl_k_sem_give>
	if (!ret && IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 80050d2:	b9e4      	cbnz	r4, 800510e <net_context_get+0xca>
	    net_if_is_ip_offloaded(net_if_get_default())) {
 80050d4:	f7ff fb2e 	bl	8004734 <net_if_get_default>
	return (iface->if_dev->offload != NULL);
 80050d8:	6803      	ldr	r3, [r0, #0]
	if (!ret && IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	b1bb      	cbz	r3, 800510e <net_context_get+0xca>
		ret = net_offload_get(net_if_get_default(),
 80050de:	f7ff fb29 	bl	8004734 <net_if_get_default>
 * @return NULL if there is no offload plugin defined, valid pointer otherwise
 */
static inline struct net_offload *net_if_offload(struct net_if *iface)
{
#if defined(CONFIG_NET_OFFLOAD)
	return iface->if_dev->offload;
 80050e2:	6803      	ldr	r3, [r0, #0]
{
	NET_ASSERT(iface);
	NET_ASSERT(net_if_offload(iface));
	NET_ASSERT(net_if_offload(iface)->get);

	return net_if_offload(iface)->get(family, type, ip_proto, context);
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	fa5f f288 	uxtb.w	r2, r8
 80050ea:	681c      	ldr	r4, [r3, #0]
 80050ec:	4629      	mov	r1, r5
 80050ee:	464b      	mov	r3, r9
 80050f0:	4630      	mov	r0, r6
 80050f2:	47a0      	blx	r4
		if (ret < 0) {
 80050f4:	1e04      	subs	r4, r0, #0
 80050f6:	da0a      	bge.n	800510e <net_context_get+0xca>
			(*context)->flags &= ~NET_CONTEXT_IN_USE;
 80050f8:	f8d9 2000 	ldr.w	r2, [r9]
 80050fc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
			*context = NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	f8c9 3000 	str.w	r3, [r9]
}
 800510e:	4620      	mov	r0, r4
 8005110:	b003      	add	sp, #12
 8005112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&contexts[i], 0, sizeof(contexts[i]));
 8005116:	228c      	movs	r2, #140	; 0x8c
 8005118:	fb02 f70a 	mul.w	r7, r2, sl
 800511c:	eb04 0b07 	add.w	fp, r4, r7
__ssp_bos_icheck3(memset, void *, int)
 8005120:	4658      	mov	r0, fp
 8005122:	f00f fb7e 	bl	8014822 <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
 8005126:	f7ff fb05 	bl	8004734 <net_if_get_default>
	return (iface->if_dev->offload != NULL);
 800512a:	6803      	ldr	r3, [r0, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	b3bb      	cbz	r3, 80051a0 <net_context_get+0x15c>
		contexts[i].iface = -1;
 8005130:	238c      	movs	r3, #140	; 0x8c
 8005132:	fb03 430a 	mla	r3, r3, sl, r4
 8005136:	22ff      	movs	r2, #255	; 0xff
 8005138:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		contexts[i].flags = 0U;
 800513c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800513e:	19e2      	adds	r2, r4, r7
 8005140:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 8005144:	3204      	adds	r2, #4
 8005146:	2101      	movs	r1, #1
 8005148:	f3bf 8f5b 	dmb	ish
 800514c:	e852 cf00 	ldrex	ip, [r2]
 8005150:	e842 1e00 	strex	lr, r1, [r2]
 8005154:	f1be 0f00 	cmp.w	lr, #0
 8005158:	d1f8      	bne.n	800514c <net_context_get+0x108>
 800515a:	f3bf 8f5b 	dmb	ish
		flag = family << 3;
 800515e:	00f2      	lsls	r2, r6, #3
	context->flags |= flag;
 8005160:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
	context->proto = proto;
 8005164:	f8a3 8084 	strh.w	r8, [r3, #132]	; 0x84
	context->flags |= flag;
 8005168:	b2d2      	uxtb	r2, r2
	context->flags |= flag;
 800516a:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800516e:	430a      	orrs	r2, r1
 8005170:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			(void)memset(&contexts[i].remote, 0,
 8005174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005178:	18e2      	adds	r2, r4, r3
 800517a:	50e0      	str	r0, [r4, r3]
			(void)memset(&contexts[i].local, 0,
 800517c:	f107 031c 	add.w	r3, r7, #28
 8005180:	18e1      	adds	r1, r4, r3
		if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 8005182:	2e01      	cmp	r6, #1
 8005184:	6050      	str	r0, [r2, #4]
 8005186:	50e0      	str	r0, [r4, r3]
 8005188:	6048      	str	r0, [r1, #4]
 800518a:	d112      	bne.n	80051b2 <net_context_get+0x16e>
			addr->sin_port = find_available_port(&contexts[i],
 800518c:	4658      	mov	r0, fp
 800518e:	9101      	str	r1, [sp, #4]
 8005190:	f7ff feea 	bl	8004f68 <find_available_port>
 8005194:	9901      	ldr	r1, [sp, #4]
 8005196:	8048      	strh	r0, [r1, #2]
			if (!addr->sin_port) {
 8005198:	b958      	cbnz	r0, 80051b2 <net_context_get+0x16e>
				ret = -EADDRINUSE;
 800519a:	f06f 046f 	mvn.w	r4, #111	; 0x6f
 800519e:	e795      	b.n	80050cc <net_context_get+0x88>
			&& ip_proto == IPPROTO_TCP) {
 80051a0:	f1b8 0f06 	cmp.w	r8, #6
 80051a4:	d1c4      	bne.n	8005130 <net_context_get+0xec>
			if (net_tcp_get(&contexts[i]) < 0) {
 80051a6:	4658      	mov	r0, fp
 80051a8:	f001 f964 	bl	8006474 <net_tcp_get>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	dabf      	bge.n	8005130 <net_context_get+0xec>
 80051b0:	e78a      	b.n	80050c8 <net_context_get+0x84>
		k_sem_init(&contexts[i].recv_data_wait, 1, K_SEM_MAX_LIMIT);
 80051b2:	f107 0040 	add.w	r0, r7, #64	; 0x40
	return z_impl_k_sem_init(sem, initial_count, limit);
 80051b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051ba:	2101      	movs	r1, #1
 80051bc:	4420      	add	r0, r4
 80051be:	f00e ff47 	bl	8014050 <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
 80051c2:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_mutex_init(mutex);
 80051c6:	4420      	add	r0, r4
 80051c8:	f00e fe80 	bl	8013ecc <z_impl_k_mutex_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
 80051cc:	238c      	movs	r3, #140	; 0x8c
 80051ce:	fb03 440a 	mla	r4, r3, sl, r4
 80051d2:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
		*context = &contexts[i];
 80051de:	f8c9 b000 	str.w	fp, [r9]
		ret = 0;
 80051e2:	2400      	movs	r4, #0
		break;
 80051e4:	e772      	b.n	80050cc <net_context_get+0x88>
			return -EPFNOSUPPORT;
 80051e6:	f06f 045f 	mvn.w	r4, #95	; 0x5f
 80051ea:	e790      	b.n	800510e <net_context_get+0xca>
			return -EAFNOSUPPORT;
 80051ec:	f06f 0469 	mvn.w	r4, #105	; 0x69
 80051f0:	e78d      	b.n	800510e <net_context_get+0xca>
				return -EPROTOTYPE;
 80051f2:	f06f 046a 	mvn.w	r4, #106	; 0x6a
 80051f6:	e78a      	b.n	800510e <net_context_get+0xca>
			return -EINVAL;
 80051f8:	f06f 0415 	mvn.w	r4, #21
 80051fc:	e787      	b.n	800510e <net_context_get+0xca>
		if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
 80051fe:	2d01      	cmp	r5, #1
 8005200:	f47f af47 	bne.w	8005092 <net_context_get+0x4e>
			return -EOPNOTSUPP;
 8005204:	f06f 045e 	mvn.w	r4, #94	; 0x5e
 8005208:	e781      	b.n	800510e <net_context_get+0xca>
		if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
 800520a:	2d02      	cmp	r5, #2
 800520c:	e7f8      	b.n	8005200 <net_context_get+0x1bc>
 800520e:	bf00      	nop
 8005210:	20002290 	.word	0x20002290
 8005214:	20001f48 	.word	0x20001f48

08005218 <net_context_put>:
{
 8005218:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
 800521a:	4604      	mov	r4, r0
 800521c:	b3a8      	cbz	r0, 800528a <net_context_put+0x72>
 800521e:	4b1c      	ldr	r3, [pc, #112]	; (8005290 <net_context_put+0x78>)
 8005220:	4298      	cmp	r0, r3
 8005222:	d332      	bcc.n	800528a <net_context_put+0x72>
 8005224:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8005228:	4298      	cmp	r0, r3
 800522a:	d22e      	bcs.n	800528a <net_context_put+0x72>
	k_mutex_lock(&context->lock, K_FOREVER);
 800522c:	f100 0608 	add.w	r6, r0, #8
 8005230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005238:	4630      	mov	r0, r6
 800523a:	f00b feb2 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
	    net_if_is_ip_offloaded(net_context_get_iface(context))) {
 800523e:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 8005242:	f00b feb0 	bl	8010fa6 <net_context_get_iface.isra.0>
 8005246:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 8005248:	699d      	ldr	r5, [r3, #24]
 800524a:	b1a5      	cbz	r5, 8005276 <net_context_put+0x5e>
		context->flags &= ~NET_CONTEXT_IN_USE;
 800524c:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
		ret = net_offload_put(net_context_get_iface(context), context);
 8005250:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
		context->flags &= ~NET_CONTEXT_IN_USE;
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
		ret = net_offload_put(net_context_get_iface(context), context);
 800525c:	f00b fea3 	bl	8010fa6 <net_context_get_iface.isra.0>
	return iface->if_dev->offload;
 8005260:	6803      	ldr	r3, [r0, #0]
{
	NET_ASSERT(iface);
	NET_ASSERT(net_if_offload(iface));
	NET_ASSERT(net_if_offload(iface)->put);

	return net_if_offload(iface)->put(context);
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	4620      	mov	r0, r4
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	4798      	blx	r3
 800526a:	4605      	mov	r5, r0
	k_mutex_unlock(&context->lock);
 800526c:	4630      	mov	r0, r6
 800526e:	f00b fe9c 	bl	8010faa <k_mutex_unlock.isra.0>
}
 8005272:	4628      	mov	r0, r5
 8005274:	bd70      	pop	{r4, r5, r6, pc}
	context->send_cb = NULL;
 8005276:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
	context->connect_cb = NULL;
 800527a:	63a5      	str	r5, [r4, #56]	; 0x38
	net_tcp_put(context);
 800527c:	4620      	mov	r0, r4
 800527e:	f001 fc3f 	bl	8006b00 <net_tcp_put>
	net_context_unref(context);
 8005282:	4620      	mov	r0, r4
 8005284:	f00b fea1 	bl	8010fca <net_context_unref>
 8005288:	e7f0      	b.n	800526c <net_context_put+0x54>
		return -EINVAL;
 800528a:	f06f 0515 	mvn.w	r5, #21
 800528e:	e7f0      	b.n	8005272 <net_context_put+0x5a>
 8005290:	20001f48 	.word	0x20001f48

08005294 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     k_timeout_t timeout,
		     void *user_data)
{
 8005294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005298:	461f      	mov	r7, r3
	return context->flags & NET_CONTEXT_IN_USE;
 800529a:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800529e:	b089      	sub	sp, #36	; 0x24
	int ret;
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
 80052a0:	07db      	lsls	r3, r3, #31
{
 80052a2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 80052a6:	4604      	mov	r4, r0
 80052a8:	4688      	mov	r8, r1
 80052aa:	4616      	mov	r6, r2
	if (!net_context_is_used(context)) {
 80052ac:	f140 809f 	bpl.w	80053ee <net_context_recv+0x15a>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
 80052b0:	f100 0908 	add.w	r9, r0, #8
 80052b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052bc:	4648      	mov	r0, r9
 80052be:	f00b fe70 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>

	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	    net_if_is_ip_offloaded(net_context_get_iface(context))) {
 80052c2:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 80052c6:	f00b fe6e 	bl	8010fa6 <net_context_get_iface.isra.0>
	return (iface->if_dev->offload != NULL);
 80052ca:	6803      	ldr	r3, [r0, #0]
 80052cc:	f8d3 b018 	ldr.w	fp, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 80052d0:	f1bb 0f00 	cmp.w	fp, #0
 80052d4:	d023      	beq.n	800531e <net_context_recv+0x8a>
		ret = net_offload_recv(
 80052d6:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 80052da:	f00b fe64 	bl	8010fa6 <net_context_get_iface.isra.0>
	return iface->if_dev->offload;
 80052de:	6803      	ldr	r3, [r0, #0]
	return net_if_offload(iface)->recv(
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	69dd      	ldr	r5, [r3, #28]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80052e4:	ea56 0307 	orrs.w	r3, r6, r7
 80052e8:	d014      	beq.n	8005314 <net_context_recv+0x80>
	} else if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80052ea:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80052ee:	bf08      	it	eq
 80052f0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 80052f4:	d010      	beq.n	8005318 <net_context_recv+0x84>
			return ((uint32_t)t) / (from_hz / to_hz);
 80052f6:	220a      	movs	r2, #10
 80052f8:	fbb6 f2f2 	udiv	r2, r6, r2
	return net_if_offload(iface)->recv(
 80052fc:	4653      	mov	r3, sl
 80052fe:	4641      	mov	r1, r8
 8005300:	4620      	mov	r0, r4
 8005302:	47a8      	blx	r5
 8005304:	4605      	mov	r5, r0
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
 8005306:	4648      	mov	r0, r9
 8005308:	f00b fe4f 	bl	8010faa <k_mutex_unlock.isra.0>

	return ret;
}
 800530c:	4628      	mov	r0, r5
 800530e:	b009      	add	sp, #36	; 0x24
 8005310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8005314:	2200      	movs	r2, #0
 8005316:	e7f1      	b.n	80052fc <net_context_recv+0x68>
		return -1;
 8005318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800531c:	e7ee      	b.n	80052fc <net_context_recv+0x68>
	return context->proto;
 800531e:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 8005322:	2b11      	cmp	r3, #17
 8005324:	d158      	bne.n	80053d8 <net_context_recv+0x144>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8005326:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (context->conn_handler) {
 800532a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800532c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	struct sockaddr local_addr = {
 8005330:	e9cd bb06 	strd	fp, fp, [sp, #24]
 8005334:	f8ad 3018 	strh.w	r3, [sp, #24]
	if (context->conn_handler) {
 8005338:	b118      	cbz	r0, 8005342 <net_context_recv+0xae>
		net_conn_unregister(context->conn_handler);
 800533a:	f000 fd19 	bl	8005d70 <net_conn_unregister>
		context->conn_handler = NULL;
 800533e:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	ret = bind_default(context);
 8005342:	4620      	mov	r0, r4
 8005344:	f00b fee8 	bl	8011118 <bind_default>
	if (ret) {
 8005348:	4605      	mov	r5, r0
 800534a:	bb48      	cbnz	r0, 80053a0 <net_context_recv+0x10c>
 800534c:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8005350:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d13c      	bne.n	80053d2 <net_context_recv+0x13e>
		if (net_sin_ptr(&context->local)->sin_addr) {
 8005358:	6a23      	ldr	r3, [r4, #32]
 800535a:	b113      	cbz	r3, 8005362 <net_context_recv+0xce>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	9307      	str	r3, [sp, #28]
			laddr = &local_addr;
 8005360:	ab06      	add	r3, sp, #24
		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
 8005362:	8be2      	ldrh	r2, [r4, #30]
 8005364:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
	return context->proto;
 8005368:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
	context->recv_cb = cb;
 800536c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	ret = net_conn_register(net_context_get_ip_proto(context),
 8005370:	f3c5 01c2 	ubfx	r1, r5, #3, #3
 8005374:	05ed      	lsls	r5, r5, #23
 8005376:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 800537a:	e9cd a504 	strd	sl, r5, [sp, #16]
 800537e:	4d1d      	ldr	r5, [pc, #116]	; (80053f4 <net_context_recv+0x160>)
 8005380:	ba52      	rev16	r2, r2
 8005382:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005386:	b292      	uxth	r2, r2
 8005388:	9201      	str	r2, [sp, #4]
 800538a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800538c:	ba52      	rev16	r2, r2
 800538e:	b292      	uxth	r2, r2
 8005390:	bf48      	it	mi
 8005392:	f104 0b24 	addmi.w	fp, r4, #36	; 0x24
 8005396:	9200      	str	r2, [sp, #0]
 8005398:	465a      	mov	r2, fp
 800539a:	f000 fc2d 	bl	8005bf8 <net_conn_register>
		ret = net_tcp_recv(context, cb, user_data);
 800539e:	4605      	mov	r5, r0
	if (ret < 0) {
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	dbb0      	blt.n	8005306 <net_context_recv+0x72>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80053a4:	ea56 0307 	orrs.w	r3, r6, r7
 80053a8:	d0ad      	beq.n	8005306 <net_context_recv+0x72>
		k_sem_reset(&context->recv_data_wait);
 80053aa:	3440      	adds	r4, #64	; 0x40
	z_impl_k_sem_reset(sem);
 80053ac:	4620      	mov	r0, r4
 80053ae:	f007 f945 	bl	800c63c <z_impl_k_sem_reset>
		k_mutex_unlock(&context->lock);
 80053b2:	4648      	mov	r0, r9
 80053b4:	f00b fdf9 	bl	8010faa <k_mutex_unlock.isra.0>
	return z_impl_k_sem_take(sem, timeout);
 80053b8:	4632      	mov	r2, r6
 80053ba:	463b      	mov	r3, r7
 80053bc:	4620      	mov	r0, r4
 80053be:	f007 f915 	bl	800c5ec <z_impl_k_sem_take>
		k_mutex_lock(&context->lock, K_FOREVER);
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ca:	4648      	mov	r0, r9
 80053cc:	f00b fde9 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
		if (ret == -EAGAIN) {
 80053d0:	e799      	b.n	8005306 <net_context_recv+0x72>
	struct sockaddr *laddr = NULL;
 80053d2:	4603      	mov	r3, r0
	uint16_t lport = 0U;
 80053d4:	4602      	mov	r2, r0
 80053d6:	e7c5      	b.n	8005364 <net_context_recv+0xd0>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 80053d8:	2b06      	cmp	r3, #6
 80053da:	d105      	bne.n	80053e8 <net_context_recv+0x154>
		ret = net_tcp_recv(context, cb, user_data);
 80053dc:	4652      	mov	r2, sl
 80053de:	4641      	mov	r1, r8
 80053e0:	4620      	mov	r0, r4
 80053e2:	f00d f9f5 	bl	80127d0 <net_tcp_recv>
 80053e6:	e7da      	b.n	800539e <net_context_recv+0x10a>
			ret = -EPROTOTYPE;
 80053e8:	f06f 056a 	mvn.w	r5, #106	; 0x6a
 80053ec:	e78b      	b.n	8005306 <net_context_recv+0x72>
		return -EBADF;
 80053ee:	f06f 0508 	mvn.w	r5, #8
 80053f2:	e78b      	b.n	800530c <net_context_recv+0x78>
 80053f4:	08004f95 	.word	0x08004f95

080053f8 <net_context_get_option>:
}

int net_context_get_option(struct net_context *context,
			    enum net_context_option option,
			    void *value, size_t *len)
{
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	460d      	mov	r5, r1
	int ret = 0;

	NET_ASSERT(context);

	if (!PART_OF_ARRAY(contexts, context)) {
 80053fc:	b1d0      	cbz	r0, 8005434 <net_context_get_option+0x3c>
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <net_context_get_option+0x44>)
 8005400:	4298      	cmp	r0, r3
 8005402:	d317      	bcc.n	8005434 <net_context_get_option+0x3c>
 8005404:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8005408:	4298      	cmp	r0, r3
 800540a:	d213      	bcs.n	8005434 <net_context_get_option+0x3c>
		return -EINVAL;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
 800540c:	f100 0408 	add.w	r4, r0, #8
 8005410:	3d01      	subs	r5, #1
 8005412:	4620      	mov	r0, r4
 8005414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800541c:	f00b fdc1 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
 8005420:	2d04      	cmp	r5, #4
	case NET_OPT_SNDTIMEO:
		ret = get_context_sndtimeo(context, value, len);
		break;
	}

	k_mutex_unlock(&context->lock);
 8005422:	4620      	mov	r0, r4
	k_mutex_lock(&context->lock, K_FOREVER);
 8005424:	bf8c      	ite	hi
 8005426:	2500      	movhi	r5, #0
 8005428:	f06f 0585 	mvnls.w	r5, #133	; 0x85
	k_mutex_unlock(&context->lock);
 800542c:	f00b fdbd 	bl	8010faa <k_mutex_unlock.isra.0>

	return ret;
}
 8005430:	4628      	mov	r0, r5
 8005432:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8005434:	f06f 0515 	mvn.w	r5, #21
 8005438:	e7fa      	b.n	8005430 <net_context_get_option+0x38>
 800543a:	bf00      	nop
 800543c:	20001f48 	.word	0x20001f48

08005440 <net_context_foreach>:

void net_context_foreach(net_context_cb_t cb, void *user_data)
{
 8005440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	4607      	mov	r7, r0
 8005446:	4688      	mov	r8, r1
 8005448:	4812      	ldr	r0, [pc, #72]	; (8005494 <net_context_foreach+0x54>)
 800544a:	4c13      	ldr	r4, [pc, #76]	; (8005498 <net_context_foreach+0x58>)
 800544c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005454:	f007 f8ca 	bl	800c5ec <z_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);
 8005458:	2606      	movs	r6, #6
	return context->flags & NET_CONTEXT_IN_USE;
 800545a:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
 800545e:	07db      	lsls	r3, r3, #31
 8005460:	d50e      	bpl.n	8005480 <net_context_foreach+0x40>
			continue;
		}

		k_mutex_lock(&contexts[i].lock, K_FOREVER);
 8005462:	f104 0508 	add.w	r5, r4, #8
 8005466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800546a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800546e:	4628      	mov	r0, r5
 8005470:	f00b fd97 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>

		cb(&contexts[i], user_data);
 8005474:	4620      	mov	r0, r4
 8005476:	4641      	mov	r1, r8
 8005478:	47b8      	blx	r7

		k_mutex_unlock(&contexts[i].lock);
 800547a:	4628      	mov	r0, r5
 800547c:	f00b fd95 	bl	8010faa <k_mutex_unlock.isra.0>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8005480:	3e01      	subs	r6, #1
 8005482:	f104 048c 	add.w	r4, r4, #140	; 0x8c
 8005486:	d1e8      	bne.n	800545a <net_context_foreach+0x1a>
	z_impl_k_sem_give(sem);
 8005488:	4802      	ldr	r0, [pc, #8]	; (8005494 <net_context_foreach+0x54>)
	}

	k_sem_give(&contexts_lock);
}
 800548a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800548e:	f007 b887 	b.w	800c5a0 <z_impl_k_sem_give>
 8005492:	bf00      	nop
 8005494:	20002290 	.word	0x20002290
 8005498:	20001f48 	.word	0x20001f48

0800549c <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <net_context_init+0xc>)
 800549e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a2:	2101      	movs	r1, #1
 80054a4:	f00e bdd4 	b.w	8014050 <z_impl_k_sem_init>
 80054a8:	20002290 	.word	0x20002290

080054ac <net_pkt_get_reserve_rx_data>:
}

#else /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */

struct net_buf *net_pkt_get_reserve_rx_data(k_timeout_t timeout)
{
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
	return net_pkt_get_reserve_data(&rx_bufs, timeout);
 80054b0:	4801      	ldr	r0, [pc, #4]	; (80054b8 <net_pkt_get_reserve_rx_data+0xc>)
 80054b2:	f00c ba6e 	b.w	8011992 <net_pkt_get_reserve_data>
 80054b6:	bf00      	nop
 80054b8:	20000518 	.word	0x20000518

080054bc <net_pkt_get_reserve_tx_data>:
}

struct net_buf *net_pkt_get_reserve_tx_data(k_timeout_t timeout)
{
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
	return net_pkt_get_reserve_data(&tx_bufs, timeout);
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <net_pkt_get_reserve_tx_data+0xc>)
 80054c2:	f00c ba66 	b.w	8011992 <net_pkt_get_reserve_data>
 80054c6:	bf00      	nop
 80054c8:	20000544 	.word	0x20000544

080054cc <net_pkt_get_frag>:
{
 80054cc:	b410      	push	{r4}
 80054ce:	4604      	mov	r4, r0
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
	if (pkt->slab == &rx_pkts) {
 80054d4:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <net_pkt_get_frag+0x1c>)
 80054d6:	6862      	ldr	r2, [r4, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d102      	bne.n	80054e2 <net_pkt_get_frag+0x16>
}
 80054dc:	bc10      	pop	{r4}
		return net_pkt_get_reserve_rx_data(timeout);
 80054de:	f7ff bfe5 	b.w	80054ac <net_pkt_get_reserve_rx_data>
}
 80054e2:	bc10      	pop	{r4}
	return net_pkt_get_reserve_tx_data(timeout);
 80054e4:	f7ff bfea 	b.w	80054bc <net_pkt_get_reserve_tx_data>
 80054e8:	200003c0 	.word	0x200003c0

080054ec <net_pkt_get_info>:

void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
 80054ec:	b510      	push	{r4, lr}
	if (rx) {
 80054ee:	b108      	cbz	r0, 80054f4 <net_pkt_get_info+0x8>
		*rx = &rx_pkts;
 80054f0:	4c05      	ldr	r4, [pc, #20]	; (8005508 <net_pkt_get_info+0x1c>)
 80054f2:	6004      	str	r4, [r0, #0]
	}

	if (tx) {
 80054f4:	b109      	cbz	r1, 80054fa <net_pkt_get_info+0xe>
		*tx = &tx_pkts;
 80054f6:	4805      	ldr	r0, [pc, #20]	; (800550c <net_pkt_get_info+0x20>)
 80054f8:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
 80054fa:	b10a      	cbz	r2, 8005500 <net_pkt_get_info+0x14>
		*rx_data = &rx_bufs;
 80054fc:	4904      	ldr	r1, [pc, #16]	; (8005510 <net_pkt_get_info+0x24>)
 80054fe:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
 8005500:	b10b      	cbz	r3, 8005506 <net_pkt_get_info+0x1a>
		*tx_data = &tx_bufs;
 8005502:	4a04      	ldr	r2, [pc, #16]	; (8005514 <net_pkt_get_info+0x28>)
 8005504:	601a      	str	r2, [r3, #0]
	}
}
 8005506:	bd10      	pop	{r4, pc}
 8005508:	200003c0 	.word	0x200003c0
 800550c:	200003f8 	.word	0x200003f8
 8005510:	20000518 	.word	0x20000518
 8005514:	20000544 	.word	0x20000544

08005518 <pkt_alloc>:
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout,
				 const char *caller, int line)
#else
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout)
#endif
{
 8005518:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800551a:	4604      	mov	r4, r0
 800551c:	4616      	mov	r6, r2
 800551e:	461d      	mov	r5, r3
	struct net_pkt *pkt;
	uint32_t create_time;
	int ret;

	if (k_is_in_isr()) {
 8005520:	f00e fca5 	bl	8013e6e <k_is_in_isr>
 8005524:	b108      	cbz	r0, 800552a <pkt_alloc+0x12>
		timeout = K_NO_WAIT;
 8005526:	2600      	movs	r6, #0
 8005528:	4635      	mov	r5, r6
		create_time = k_cycle_get_32();
	} else {
		ARG_UNUSED(create_time);
	}

	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
 800552a:	462b      	mov	r3, r5
 800552c:	4632      	mov	r2, r6
 800552e:	a901      	add	r1, sp, #4
 8005530:	4620      	mov	r0, r4
 8005532:	f006 fdb7 	bl	800c0a4 <k_mem_slab_alloc>
	if (ret) {
 8005536:	4605      	mov	r5, r0
 8005538:	b9c0      	cbnz	r0, 800556c <pkt_alloc+0x54>
 800553a:	2240      	movs	r2, #64	; 0x40
 800553c:	4601      	mov	r1, r0
 800553e:	9801      	ldr	r0, [sp, #4]
 8005540:	f00f f96f 	bl	8014822 <memset>
#define RX_DEFAULT_PRIORITY CONFIG_NET_RX_DEFAULT_PRIORITY
#else
#define RX_DEFAULT_PRIORITY 0
#endif

	if (&tx_pkts == slab) {
 8005544:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <pkt_alloc+0x58>)
	pkt->atomic_ref = ATOMIC_INIT(1);
 8005546:	9801      	ldr	r0, [sp, #4]
 8005548:	2301      	movs	r3, #1
	if (&tx_pkts == slab) {
 800554a:	4294      	cmp	r4, r2
	pkt->atomic_ref = ATOMIC_INIT(1);
 800554c:	61c3      	str	r3, [r0, #28]
	pkt->slab = slab;
 800554e:	6044      	str	r4, [r0, #4]
	if (&tx_pkts == slab) {
 8005550:	d106      	bne.n	8005560 <pkt_alloc+0x48>
}

static inline void net_pkt_set_priority(struct net_pkt *pkt,
					uint8_t priority)
{
	pkt->priority = priority;
 8005552:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	net_pkt_alloc_add(pkt, true, caller, line);
#endif

	net_pkt_cursor_init(pkt);
 8005556:	f00c fabd 	bl	8011ad4 <net_pkt_cursor_init>

	return pkt;
 800555a:	9801      	ldr	r0, [sp, #4]
}
 800555c:	b002      	add	sp, #8
 800555e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (&rx_pkts == slab) {
 8005560:	4b04      	ldr	r3, [pc, #16]	; (8005574 <pkt_alloc+0x5c>)
 8005562:	429c      	cmp	r4, r3
 8005564:	bf08      	it	eq
 8005566:	f880 503c 	strbeq.w	r5, [r0, #60]	; 0x3c
}
 800556a:	e7f4      	b.n	8005556 <pkt_alloc+0x3e>
		return NULL;
 800556c:	2000      	movs	r0, #0
 800556e:	e7f5      	b.n	800555c <pkt_alloc+0x44>
 8005570:	200003f8 	.word	0x200003f8
 8005574:	200003c0 	.word	0x200003c0

08005578 <net_pkt_alloc>:
struct net_pkt *net_pkt_alloc_debug(k_timeout_t timeout,
				    const char *caller, int line)
#else
struct net_pkt *net_pkt_alloc(k_timeout_t timeout)
#endif
{
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc(&tx_pkts, timeout, caller, line);
#else
	return pkt_alloc(&tx_pkts, timeout);
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <net_pkt_alloc+0xc>)
 800557e:	f7ff bfcb 	b.w	8005518 <pkt_alloc>
 8005582:	bf00      	nop
 8005584:	200003f8 	.word	0x200003f8

08005588 <net_pkt_rx_alloc>:
struct net_pkt *net_pkt_rx_alloc_debug(k_timeout_t timeout,
				       const char *caller, int line)
#else
struct net_pkt *net_pkt_rx_alloc(k_timeout_t timeout)
#endif
{
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc(&rx_pkts, timeout, caller, line);
#else
	return pkt_alloc(&rx_pkts, timeout);
 800558c:	4801      	ldr	r0, [pc, #4]	; (8005594 <net_pkt_rx_alloc+0xc>)
 800558e:	f7ff bfc3 	b.w	8005518 <pkt_alloc>
 8005592:	bf00      	nop
 8005594:	200003c0 	.word	0x200003c0

08005598 <net_pkt_alloc_buffer>:
{
 8005598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
 80055a0:	4607      	mov	r7, r0
 80055a2:	460e      	mov	r6, r1
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 80055a4:	4628      	mov	r0, r5
 80055a6:	4621      	mov	r1, r4
{
 80055a8:	4692      	mov	sl, r2
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 80055aa:	f00e ff60 	bl	801446e <sys_clock_timeout_end_calc>
 80055ae:	4680      	mov	r8, r0
 80055b0:	4689      	mov	r9, r1
	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
 80055b2:	b94e      	cbnz	r6, 80055c8 <net_pkt_alloc_buffer+0x30>
 80055b4:	f1ba 0f00 	cmp.w	sl, #0
 80055b8:	d106      	bne.n	80055c8 <net_pkt_alloc_buffer+0x30>
	return pkt->family;
 80055ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055be:	f013 0f0e 	tst.w	r3, #14
 80055c2:	f3c3 0042 	ubfx	r0, r3, #1, #3
 80055c6:	d052      	beq.n	800566e <net_pkt_alloc_buffer+0xd6>
	if (k_is_in_isr()) {
 80055c8:	f00e fc51 	bl	8013e6e <k_is_in_isr>
 80055cc:	b108      	cbz	r0, 80055d2 <net_pkt_alloc_buffer+0x3a>
		timeout = K_NO_WAIT;
 80055ce:	2500      	movs	r5, #0
 80055d0:	462c      	mov	r4, r5
	alloc_len = net_pkt_available_buffer(pkt);
 80055d2:	4638      	mov	r0, r7
 80055d4:	f00c fa38 	bl	8011a48 <net_pkt_available_buffer>
	if (!alloc_len) {
 80055d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055dc:	4602      	mov	r2, r0
 80055de:	2800      	cmp	r0, #0
 80055e0:	d148      	bne.n	8005674 <net_pkt_alloc_buffer+0xdc>
	if (family == AF_UNSPEC) {
 80055e2:	f013 0f0e 	tst.w	r3, #14
		hdr_len = pkt_estimate_headers_length(pkt,
 80055e6:	f3c3 0042 	ubfx	r0, r3, #1, #3
	if (family == AF_UNSPEC) {
 80055ea:	d045      	beq.n	8005678 <net_pkt_alloc_buffer+0xe0>
 80055ec:	4651      	mov	r1, sl
 80055ee:	f00c f94d 	bl	801188c <pkt_estimate_headers_length.part.0>
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
 80055f2:	1831      	adds	r1, r6, r0
 80055f4:	f3c3 0042 	ubfx	r0, r3, #1, #3
	return pkt->iface;
 80055f8:	69bb      	ldr	r3, [r7, #24]
	if (net_pkt_iface(pkt)) {
 80055fa:	b10b      	cbz	r3, 8005600 <net_pkt_alloc_buffer+0x68>
{
	if (iface == NULL) {
		return 0U;
	}

	return iface->if_dev->mtu;
 80055fc:	681b      	ldr	r3, [r3, #0]
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
 80055fe:	8b9b      	ldrh	r3, [r3, #28]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 8005600:	2801      	cmp	r0, #1
 8005602:	d13b      	bne.n	800567c <net_pkt_alloc_buffer+0xe4>
		max_len = MAX(max_len, NET_IPV4_MTU);
 8005604:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8005608:	bf38      	it	cc
 800560a:	f44f 7310 	movcc.w	r3, #576	; 0x240
	max_len -= existing;
 800560e:	1a9e      	subs	r6, r3, r2
	return MIN(size, max_len);
 8005610:	428e      	cmp	r6, r1
 8005612:	bf28      	it	cs
 8005614:	460e      	movcs	r6, r1
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
 8005616:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <net_pkt_alloc_buffer+0x158>)
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4836      	ldr	r0, [pc, #216]	; (80056f4 <net_pkt_alloc_buffer+0x15c>)
 800561c:	4936      	ldr	r1, [pc, #216]	; (80056f8 <net_pkt_alloc_buffer+0x160>)
 800561e:	4282      	cmp	r2, r0
 8005620:	bf0c      	ite	eq
 8005622:	468a      	moveq	sl, r1
 8005624:	469a      	movne	sl, r3
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8005626:	ea55 0304 	orrs.w	r3, r5, r4
 800562a:	d00f      	beq.n	800564c <net_pkt_alloc_buffer+0xb4>
 800562c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005630:	bf08      	it	eq
 8005632:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8005636:	d009      	beq.n	800564c <net_pkt_alloc_buffer+0xb4>
		int64_t remaining = end - sys_clock_tick_get();
 8005638:	f007 feaa 	bl	800d390 <sys_clock_tick_get>
 800563c:	ebb8 0500 	subs.w	r5, r8, r0
 8005640:	eb69 0401 	sbc.w	r4, r9, r1
 8005644:	2c00      	cmp	r4, #0
 8005646:	bfbc      	itt	lt
 8005648:	2500      	movlt	r5, #0
 800564a:	462c      	movlt	r4, r5
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 800564c:	4628      	mov	r0, r5
 800564e:	4621      	mov	r1, r4
 8005650:	f00e ff0d 	bl	801446e <sys_clock_timeout_end_calc>
 8005654:	468b      	mov	fp, r1
	struct net_buf *current = NULL;
 8005656:	2100      	movs	r1, #0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8005658:	4681      	mov	r9, r0
	struct net_buf *first = NULL;
 800565a:	4688      	mov	r8, r1
	while (size) {
 800565c:	b986      	cbnz	r6, 8005680 <net_pkt_alloc_buffer+0xe8>
	if (!buf) {
 800565e:	f1b8 0f00 	cmp.w	r8, #0
 8005662:	d019      	beq.n	8005698 <net_pkt_alloc_buffer+0x100>
	net_pkt_append_buffer(pkt, buf);
 8005664:	4638      	mov	r0, r7
 8005666:	4641      	mov	r1, r8
 8005668:	f00c fa49 	bl	8011afe <net_pkt_append_buffer>
	return 0;
 800566c:	2000      	movs	r0, #0
}
 800566e:	b003      	add	sp, #12
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t hdr_len = 0;
 8005674:	2000      	movs	r0, #0
 8005676:	e7bc      	b.n	80055f2 <net_pkt_alloc_buffer+0x5a>
 8005678:	4610      	mov	r0, r2
 800567a:	e7ba      	b.n	80055f2 <net_pkt_alloc_buffer+0x5a>
			max_len = size;
 800567c:	460b      	mov	r3, r1
 800567e:	e7c6      	b.n	800560e <net_pkt_alloc_buffer+0x76>
		new = net_buf_alloc_fixed(pool, timeout);
 8005680:	4623      	mov	r3, r4
 8005682:	462a      	mov	r2, r5
 8005684:	4650      	mov	r0, sl
 8005686:	9101      	str	r1, [sp, #4]
 8005688:	f00a ff66 	bl	8010558 <net_buf_alloc_fixed>
		if (!new) {
 800568c:	9901      	ldr	r1, [sp, #4]
 800568e:	4603      	mov	r3, r0
 8005690:	b928      	cbnz	r0, 800569e <net_pkt_alloc_buffer+0x106>
	if (first) {
 8005692:	f1b8 0f00 	cmp.w	r8, #0
 8005696:	d126      	bne.n	80056e6 <net_pkt_alloc_buffer+0x14e>
		return -ENOMEM;
 8005698:	f06f 000b 	mvn.w	r0, #11
 800569c:	e7e7      	b.n	800566e <net_pkt_alloc_buffer+0xd6>
		if (!first && !current) {
 800569e:	f1b8 0f00 	cmp.w	r8, #0
 80056a2:	d100      	bne.n	80056a6 <net_pkt_alloc_buffer+0x10e>
 80056a4:	b1e9      	cbz	r1, 80056e2 <net_pkt_alloc_buffer+0x14a>
			current->frags = new;
 80056a6:	600b      	str	r3, [r1, #0]
		if (current->size > size) {
 80056a8:	89da      	ldrh	r2, [r3, #14]
 80056aa:	42b2      	cmp	r2, r6
			current->size = size;
 80056ac:	bf88      	it	hi
 80056ae:	81de      	strhhi	r6, [r3, #14]
		size -= current->size;
 80056b0:	89da      	ldrh	r2, [r3, #14]
 80056b2:	1ab6      	subs	r6, r6, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 80056b4:	ea55 0204 	orrs.w	r2, r5, r4
 80056b8:	d011      	beq.n	80056de <net_pkt_alloc_buffer+0x146>
 80056ba:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80056be:	bf08      	it	eq
 80056c0:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 80056c4:	d00b      	beq.n	80056de <net_pkt_alloc_buffer+0x146>
 80056c6:	9301      	str	r3, [sp, #4]
			int64_t remaining = end - sys_clock_tick_get();
 80056c8:	f007 fe62 	bl	800d390 <sys_clock_tick_get>
 80056cc:	ebb9 0500 	subs.w	r5, r9, r0
 80056d0:	eb6b 0401 	sbc.w	r4, fp, r1
			if (remaining <= 0) {
 80056d4:	2d01      	cmp	r5, #1
 80056d6:	f174 0300 	sbcs.w	r3, r4, #0
 80056da:	9b01      	ldr	r3, [sp, #4]
 80056dc:	dbbf      	blt.n	800565e <net_pkt_alloc_buffer+0xc6>
 80056de:	4619      	mov	r1, r3
 80056e0:	e7bc      	b.n	800565c <net_pkt_alloc_buffer+0xc4>
 80056e2:	4680      	mov	r8, r0
 80056e4:	e7e0      	b.n	80056a8 <net_pkt_alloc_buffer+0x110>
		net_buf_unref(first);
 80056e6:	4640      	mov	r0, r8
 80056e8:	f7fe fc96 	bl	8004018 <net_buf_unref>
	if (!buf) {
 80056ec:	e7d4      	b.n	8005698 <net_pkt_alloc_buffer+0x100>
 80056ee:	bf00      	nop
 80056f0:	20000518 	.word	0x20000518
 80056f4:	200003f8 	.word	0x200003f8
 80056f8:	20000544 	.word	0x20000544

080056fc <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
 80056fc:	b530      	push	{r4, r5, lr}
 80056fe:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
 8005700:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	460a      	mov	r2, r1
 800570e:	4601      	mov	r1, r0
 8005710:	4802      	ldr	r0, [pc, #8]	; (800571c <net_pkt_alloc_with_buffer+0x20>)
 8005712:	f00c fa05 	bl	8011b20 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
 8005716:	b005      	add	sp, #20
 8005718:	bd30      	pop	{r4, r5, pc}
 800571a:	bf00      	nop
 800571c:	200003f8 	.word	0x200003f8

08005720 <net_pkt_rx_alloc_with_buffer>:
					     size_t size,
					     sa_family_t family,
					     enum net_ip_protocol proto,
					     k_timeout_t timeout)
#endif
{
 8005720:	b530      	push	{r4, r5, lr}
 8005722:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
					proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
 8005724:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	460a      	mov	r2, r1
 8005732:	4601      	mov	r1, r0
 8005734:	4802      	ldr	r0, [pc, #8]	; (8005740 <net_pkt_rx_alloc_with_buffer+0x20>)
 8005736:	f00c f9f3 	bl	8011b20 <pkt_alloc_with_buffer>
					proto, timeout);
#endif
}
 800573a:	b005      	add	sp, #20
 800573c:	bd30      	pop	{r4, r5, pc}
 800573e:	bf00      	nop
 8005740:	200003c0 	.word	0x200003c0

08005744 <net_tc_rx_init>:
	}
#endif
}

void net_tc_rx_init(void)
{
 8005744:	b530      	push	{r4, r5, lr}
 8005746:	b08b      	sub	sp, #44	; 0x2c
	z_impl_k_queue_init(queue);
 8005748:	4c16      	ldr	r4, [pc, #88]	; (80057a4 <net_tc_rx_init+0x60>)
 800574a:	4620      	mov	r0, r4
 800574c:	f00e fc36 	bl	8013fbc <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8005750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005758:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800575c:	2500      	movs	r5, #0
 800575e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005762:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8005766:	9400      	str	r4, [sp, #0]
 8005768:	f104 0018 	add.w	r0, r4, #24
 800576c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <net_tc_rx_init+0x64>)
 8005772:	490e      	ldr	r1, [pc, #56]	; (80057ac <net_tc_rx_init+0x68>)
 8005774:	f44f 62bc 	mov.w	r2, #1504	; 0x5e0
 8005778:	f006 fdaa 	bl	800c2d0 <z_impl_k_thread_create>
		tid = k_thread_create(&rx_classes[i].handler, rx_stack[i],
				      K_KERNEL_STACK_SIZEOF(rx_stack[i]),
				      (k_thread_entry_t)tc_rx_handler,
				      &rx_classes[i].fifo, NULL, NULL,
				      priority, 0, K_FOREVER);
		if (!tid) {
 800577c:	4604      	mov	r4, r0
 800577e:	b178      	cbz	r0, 80057a0 <net_tc_rx_init+0x5c>
		}

		if (IS_ENABLED(CONFIG_THREAD_NAME)) {
			char name[MAX_NAME_LEN];

			snprintk(name, sizeof(name), "rx_q[%d]", i);
 8005780:	4a0b      	ldr	r2, [pc, #44]	; (80057b0 <net_tc_rx_init+0x6c>)
 8005782:	462b      	mov	r3, r5
 8005784:	2108      	movs	r1, #8
 8005786:	a808      	add	r0, sp, #32
 8005788:	f008 fff6 	bl	800e778 <snprintk>
	return z_impl_k_thread_name_set(thread, str);
 800578c:	a908      	add	r1, sp, #32
 800578e:	4620      	mov	r0, r4
 8005790:	f006 fcee 	bl	800c170 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8005794:	4620      	mov	r0, r4
		}

		k_thread_start(tid);
	}
#endif
}
 8005796:	b00b      	add	sp, #44	; 0x2c
 8005798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800579c:	f00e bb6f 	b.w	8013e7e <z_impl_k_thread_start>
 80057a0:	b00b      	add	sp, #44	; 0x2c
 80057a2:	bd30      	pop	{r4, r5, pc}
 80057a4:	20000aa8 	.word	0x20000aa8
 80057a8:	08011f25 	.word	0x08011f25
 80057ac:	20002ee0 	.word	0x20002ee0
 80057b0:	08017310 	.word	0x08017310

080057b4 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 80057b4:	4801      	ldr	r0, [pc, #4]	; (80057bc <k_mutex_unlock.constprop.0.isra.0+0x8>)
 80057b6:	f006 be7b 	b.w	800c4b0 <z_impl_k_mutex_unlock>
 80057ba:	bf00      	nop
 80057bc:	20000478 	.word	0x20000478

080057c0 <mgmt_thread>:
	log_stack_usage(&mgmt_thread_data);
#endif
}

static void mgmt_thread(void)
{
 80057c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (out_event < 0 || !events[out_event].event) {
 80057c4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80058f0 <mgmt_thread+0x130>
	return z_impl_k_sem_take(sem, timeout);
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057d0:	4848      	ldr	r0, [pc, #288]	; (80058f4 <mgmt_thread+0x134>)
 80057d2:	f006 ff0b 	bl	800c5ec <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
 80057d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057da:	4847      	ldr	r0, [pc, #284]	; (80058f8 <mgmt_thread+0x138>)
 80057dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057e0:	f006 fdee 	bl	800c3c0 <z_impl_k_mutex_lock>
 80057e4:	4b45      	ldr	r3, [pc, #276]	; (80058fc <mgmt_thread+0x13c>)
 80057e6:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	db24      	blt.n	8005838 <mgmt_thread+0x78>
 80057ee:	2238      	movs	r2, #56	; 0x38
 80057f0:	436a      	muls	r2, r5
 80057f2:	f858 2002 	ldr.w	r2, [r8, r2]
 80057f6:	b1fa      	cbz	r2, 8005838 <mgmt_thread+0x78>
	if (o_idx == in_event) {
 80057f8:	4941      	ldr	r1, [pc, #260]	; (8005900 <mgmt_thread+0x140>)
 80057fa:	f9b1 0000 	ldrsh.w	r0, [r1]
	out_event++;
 80057fe:	1c6a      	adds	r2, r5, #1
 8005800:	b212      	sxth	r2, r2
	if (o_idx == in_event) {
 8005802:	42a8      	cmp	r0, r5
	out_event++;
 8005804:	801a      	strh	r2, [r3, #0]
	if (o_idx == in_event) {
 8005806:	d113      	bne.n	8005830 <mgmt_thread+0x70>
		in_event = -1;
 8005808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800580c:	800a      	strh	r2, [r1, #0]
		out_event = 0;
 800580e:	801a      	strh	r2, [r3, #0]
	return list->head;
 8005810:	4e3c      	ldr	r6, [pc, #240]	; (8005904 <mgmt_thread+0x144>)
 8005812:	6834      	ldr	r4, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 8005814:	b9cc      	cbnz	r4, 800584a <mgmt_thread+0x8a>
	mgmt_event->event = 0U;
 8005816:	2338      	movs	r3, #56	; 0x38
 8005818:	435d      	muls	r5, r3
 800581a:	eb08 0205 	add.w	r2, r8, r5
 800581e:	2300      	movs	r3, #0
	mgmt_event->iface = NULL;
 8005820:	6053      	str	r3, [r2, #4]
	mgmt_event->event = 0U;
 8005822:	f848 3005 	str.w	r3, [r8, r5]

		mgmt_run_callbacks(mgmt_event);

		mgmt_clean_event(mgmt_event);

		(void)k_mutex_unlock(&net_mgmt_lock);
 8005826:	f7ff ffc5 	bl	80057b4 <k_mutex_unlock.constprop.0.isra.0>
	z_impl_k_yield();
 800582a:	f007 faed 	bl	800ce08 <z_impl_k_yield>
 800582e:	e7cb      	b.n	80057c8 <mgmt_thread+0x8>
	} else if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
 8005830:	2a02      	cmp	r2, #2
 8005832:	d1ed      	bne.n	8005810 <mgmt_thread+0x50>
		out_event = 0;
 8005834:	2200      	movs	r2, #0
 8005836:	e7ea      	b.n	800580e <mgmt_thread+0x4e>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8005838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800583c:	2100      	movs	r1, #0
 800583e:	482d      	ldr	r0, [pc, #180]	; (80058f4 <mgmt_thread+0x134>)
 8005840:	f00e fc06 	bl	8014050 <z_impl_k_sem_init>
			(void)k_mutex_unlock(&net_mgmt_lock);
 8005844:	f7ff ffb6 	bl	80057b4 <k_mutex_unlock.constprop.0.isra.0>
			continue;
 8005848:	e7be      	b.n	80057c8 <mgmt_thread+0x8>
			cb->info = (void *)mgmt_event->info;
 800584a:	2738      	movs	r7, #56	; 0x38
 800584c:	fb05 8a07 	mla	sl, r5, r7, r8
 8005850:	2200      	movs	r2, #0
	return node->next;
 8005852:	f8d4 9000 	ldr.w	r9, [r4]
 8005856:	f10a 0a08 	add.w	sl, sl, #8
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 800585a:	fb07 8705 	mla	r7, r7, r5, r8
	parent->next = child;
 800585e:	4693      	mov	fp, r2
 8005860:	6839      	ldr	r1, [r7, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
 8005862:	6920      	ldr	r0, [r4, #16]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 8005864:	ea81 0c00 	eor.w	ip, r1, r0
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
 8005868:	ea81 0300 	eor.w	r3, r1, r0
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 800586c:	f3cc 7c01 	ubfx	ip, ip, #28, #2
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
 8005870:	f3c3 430a 	ubfx	r3, r3, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
 8005874:	ea5c 0303 	orrs.w	r3, ip, r3
 8005878:	d126      	bne.n	80058c8 <mgmt_thread+0x108>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
 800587a:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
 800587c:	b12b      	cbz	r3, 800588a <mgmt_thread+0xca>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
 800587e:	b283      	uxth	r3, r0
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
 8005880:	b11b      	cbz	r3, 800588a <mgmt_thread+0xca>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
 8005882:	ea01 0300 	and.w	r3, r1, r0
 8005886:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
 8005888:	b1f3      	cbz	r3, 80058c8 <mgmt_thread+0x108>
		if (mgmt_event->info_length) {
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	b31b      	cbz	r3, 80058d6 <mgmt_thread+0x116>
			cb->info = (void *)mgmt_event->info;
 800588e:	f8c4 a008 	str.w	sl, [r4, #8]
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
 8005892:	0100      	lsls	r0, r0, #4
			cb->info_length = 0;
 8005894:	60e3      	str	r3, [r4, #12]
			    sync_data->iface != mgmt_event->iface) {
 8005896:	f8d7 c004 	ldr.w	ip, [r7, #4]
			struct mgmt_event_wait *sync_data =
 800589a:	6863      	ldr	r3, [r4, #4]
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
 800589c:	d523      	bpl.n	80058e6 <mgmt_thread+0x126>
			if (sync_data->iface &&
 800589e:	6998      	ldr	r0, [r3, #24]
 80058a0:	b108      	cbz	r0, 80058a6 <mgmt_thread+0xe6>
 80058a2:	4560      	cmp	r0, ip
 80058a4:	d110      	bne.n	80058c8 <mgmt_thread+0x108>
			cb->raised_event = mgmt_event->event;
 80058a6:	6121      	str	r1, [r4, #16]
	return node->next;
 80058a8:	6820      	ldr	r0, [r4, #0]
			sync_data->iface = mgmt_event->iface;
 80058aa:	f8c3 c018 	str.w	ip, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
 80058ae:	b9a2      	cbnz	r2, 80058da <mgmt_thread+0x11a>
 80058b0:	6871      	ldr	r1, [r6, #4]
	list->head = node;
 80058b2:	6030      	str	r0, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 80058b4:	428c      	cmp	r4, r1
 80058b6:	d100      	bne.n	80058ba <mgmt_thread+0xfa>
	list->tail = node;
 80058b8:	6070      	str	r0, [r6, #4]
 80058ba:	9201      	str	r2, [sp, #4]
	parent->next = child;
 80058bc:	f8c4 b000 	str.w	fp, [r4]
	z_impl_k_sem_give(sem);
 80058c0:	4618      	mov	r0, r3
 80058c2:	f006 fe6d 	bl	800c5a0 <z_impl_k_sem_give>
}
 80058c6:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 80058c8:	f1b9 0f00 	cmp.w	r9, #0
 80058cc:	d0a3      	beq.n	8005816 <mgmt_thread+0x56>
	return node->next;
 80058ce:	464c      	mov	r4, r9
 80058d0:	f8d9 9000 	ldr.w	r9, [r9]
 80058d4:	e7c4      	b.n	8005860 <mgmt_thread+0xa0>
			cb->info = NULL;
 80058d6:	60a3      	str	r3, [r4, #8]
 80058d8:	e7db      	b.n	8005892 <mgmt_thread+0xd2>
	return list->tail;
 80058da:	6871      	ldr	r1, [r6, #4]
	parent->next = child;
 80058dc:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 80058de:	428c      	cmp	r4, r1
	list->tail = node;
 80058e0:	bf08      	it	eq
 80058e2:	6072      	streq	r2, [r6, #4]
}
 80058e4:	e7e9      	b.n	80058ba <mgmt_thread+0xfa>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
 80058e6:	4662      	mov	r2, ip
 80058e8:	4620      	mov	r0, r4
 80058ea:	4798      	blx	r3
			prev = &cb->node;
 80058ec:	4622      	mov	r2, r4
 80058ee:	e7eb      	b.n	80058c8 <mgmt_thread+0x108>
 80058f0:	200022b0 	.word	0x200022b0
 80058f4:	200004b8 	.word	0x200004b8
 80058f8:	20000478 	.word	0x20000478
 80058fc:	20002572 	.word	0x20002572
 8005900:	20002570 	.word	0x20002570
 8005904:	200022a8 	.word	0x200022a8

08005908 <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
 8005908:	b510      	push	{r4, lr}
 800590a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800590c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005914:	4809      	ldr	r0, [pc, #36]	; (800593c <net_mgmt_add_event_callback+0x34>)
 8005916:	f006 fd53 	bl	800c3c0 <z_impl_k_mutex_lock>
	return list->head;
 800591a:	4b09      	ldr	r3, [pc, #36]	; (8005940 <net_mgmt_add_event_callback+0x38>)
	parent->next = child;
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 8005920:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 8005922:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 8005924:	b902      	cbnz	r2, 8005928 <net_mgmt_add_event_callback+0x20>
	list->tail = node;
 8005926:	605c      	str	r4, [r3, #4]
	global_event_mask |= event_mask;
 8005928:	4a06      	ldr	r2, [pc, #24]	; (8005944 <net_mgmt_add_event_callback+0x3c>)
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	6811      	ldr	r1, [r2, #0]
	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);

	(void)k_mutex_unlock(&net_mgmt_lock);
}
 800592e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	global_event_mask |= event_mask;
 8005932:	430b      	orrs	r3, r1
 8005934:	6013      	str	r3, [r2, #0]
	(void)k_mutex_unlock(&net_mgmt_lock);
 8005936:	f7ff bf3d 	b.w	80057b4 <k_mutex_unlock.constprop.0.isra.0>
 800593a:	bf00      	nop
 800593c:	20000478 	.word	0x20000478
 8005940:	200022a8 	.word	0x200022a8
 8005944:	20002320 	.word	0x20002320

08005948 <net_mgmt_del_event_callback>:

void net_mgmt_del_event_callback(struct net_mgmt_event_callback *cb)
{
 8005948:	b510      	push	{r4, lr}
 800594a:	4604      	mov	r4, r0
 800594c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005954:	4815      	ldr	r0, [pc, #84]	; (80059ac <net_mgmt_del_event_callback+0x64>)
 8005956:	f006 fd33 	bl	800c3c0 <z_impl_k_mutex_lock>
	return list->head;
 800595a:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <net_mgmt_del_event_callback+0x68>)
 800595c:	6813      	ldr	r3, [r2, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800595e:	2100      	movs	r1, #0
 8005960:	b153      	cbz	r3, 8005978 <net_mgmt_del_event_callback+0x30>
 8005962:	429c      	cmp	r4, r3
 8005964:	d119      	bne.n	800599a <net_mgmt_del_event_callback+0x52>
	return node->next;
 8005966:	6823      	ldr	r3, [r4, #0]
	return list->tail;
 8005968:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
 800596a:	b989      	cbnz	r1, 8005990 <net_mgmt_del_event_callback+0x48>
 800596c:	4284      	cmp	r4, r0
	list->head = node;
 800596e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 8005970:	d100      	bne.n	8005974 <net_mgmt_del_event_callback+0x2c>
	list->tail = node;
 8005972:	6053      	str	r3, [r2, #4]
	parent->next = child;
 8005974:	2300      	movs	r3, #0
 8005976:	6023      	str	r3, [r4, #0]
	global_event_mask = 0U;
 8005978:	480e      	ldr	r0, [pc, #56]	; (80059b4 <net_mgmt_del_event_callback+0x6c>)
	return list->head;
 800597a:	6811      	ldr	r1, [r2, #0]
 800597c:	2300      	movs	r3, #0
 800597e:	6003      	str	r3, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 8005980:	b179      	cbz	r1, 80059a2 <net_mgmt_del_event_callback+0x5a>
	return node->next;
 8005982:	680a      	ldr	r2, [r1, #0]
	global_event_mask |= event_mask;
 8005984:	6909      	ldr	r1, [r1, #16]
 8005986:	430b      	orrs	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 8005988:	b152      	cbz	r2, 80059a0 <net_mgmt_del_event_callback+0x58>
 800598a:	4611      	mov	r1, r2
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	e7f9      	b.n	8005984 <net_mgmt_del_event_callback+0x3c>
Z_GENLIST_REMOVE(slist, snode)
 8005990:	4284      	cmp	r4, r0
	parent->next = child;
 8005992:	600b      	str	r3, [r1, #0]
	list->tail = node;
 8005994:	bf08      	it	eq
 8005996:	6051      	streq	r1, [r2, #4]
}
 8005998:	e7ec      	b.n	8005974 <net_mgmt_del_event_callback+0x2c>
	return node->next;
 800599a:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	e7df      	b.n	8005960 <net_mgmt_del_event_callback+0x18>
 80059a0:	6003      	str	r3, [r0, #0]
	sys_slist_find_and_remove(&event_callbacks, &cb->node);

	mgmt_rebuild_global_event_mask();

	(void)k_mutex_unlock(&net_mgmt_lock);
}
 80059a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)k_mutex_unlock(&net_mgmt_lock);
 80059a6:	f7ff bf05 	b.w	80057b4 <k_mutex_unlock.constprop.0.isra.0>
 80059aa:	bf00      	nop
 80059ac:	20000478 	.word	0x20000478
 80059b0:	200022a8 	.word	0x200022a8
 80059b4:	20002320 	.word	0x20002320

080059b8 <net_mgmt_event_notify_with_info>:

void net_mgmt_event_notify_with_info(uint32_t mgmt_event, struct net_if *iface,
				     const void *info, size_t length)
{
 80059b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	461f      	mov	r7, r3
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 80059be:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <net_mgmt_event_notify_with_info+0xd0>)
 80059c0:	681c      	ldr	r4, [r3, #0]
	return (((NET_MGMT_GET_LAYER(mgmt_event) &
 80059c2:	0f05      	lsrs	r5, r0, #28
		((NET_MGMT_GET_LAYER_CODE(mgmt_event) &
 80059c4:	0c03      	lsrs	r3, r0, #16
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 80059c6:	ea25 7514 	bic.w	r5, r5, r4, lsr #28
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
 80059ca:	ea23 4314 	bic.w	r3, r3, r4, lsr #16
 80059ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 80059d2:	f005 0503 	and.w	r5, r5, #3
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
 80059d6:	ea20 0404 	bic.w	r4, r0, r4
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 80059da:	431d      	orrs	r5, r3
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
 80059dc:	b2a4      	uxth	r4, r4
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 80059de:	ea55 0304 	orrs.w	r3, r5, r4
{
 80059e2:	4606      	mov	r6, r0
 80059e4:	4688      	mov	r8, r1
 80059e6:	4691      	mov	r9, r2
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 80059e8:	d14b      	bne.n	8005a82 <net_mgmt_event_notify_with_info+0xca>
	i_idx = in_event + 1;
 80059ea:	4d28      	ldr	r5, [pc, #160]	; (8005a8c <net_mgmt_event_notify_with_info+0xd4>)
 80059ec:	4828      	ldr	r0, [pc, #160]	; (8005a90 <net_mgmt_event_notify_with_info+0xd8>)
 80059ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f6:	f006 fce3 	bl	800c3c0 <z_impl_k_mutex_lock>
 80059fa:	882c      	ldrh	r4, [r5, #0]
 80059fc:	3401      	adds	r4, #1
 80059fe:	b224      	sxth	r4, r4
		i_idx = 0;
 8005a00:	2c02      	cmp	r4, #2
 8005a02:	bf08      	it	eq
 8005a04:	2400      	moveq	r4, #0
	if (info && length) {
 8005a06:	f1b9 0f00 	cmp.w	r9, #0
 8005a0a:	d02f      	beq.n	8005a6c <net_mgmt_event_notify_with_info+0xb4>
 8005a0c:	b377      	cbz	r7, 8005a6c <net_mgmt_event_notify_with_info+0xb4>
		if (length <= NET_EVENT_INFO_MAX_SIZE) {
 8005a0e:	2f2b      	cmp	r7, #43	; 0x2b
 8005a10:	d825      	bhi.n	8005a5e <net_mgmt_event_notify_with_info+0xa6>
			memcpy(events[i_idx].info, info, length);
 8005a12:	f8df a080 	ldr.w	sl, [pc, #128]	; 8005a94 <net_mgmt_event_notify_with_info+0xdc>
 8005a16:	f04f 0b38 	mov.w	fp, #56	; 0x38
 8005a1a:	fb04 a00b 	mla	r0, r4, fp, sl
			events[i_idx].info_length = length;
 8005a1e:	fb0b aa04 	mla	sl, fp, r4, sl
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8005a22:	463a      	mov	r2, r7
 8005a24:	4649      	mov	r1, r9
 8005a26:	3008      	adds	r0, #8
 8005a28:	f00e fec0 	bl	80147ac <memcpy>
 8005a2c:	f8ca 7034 	str.w	r7, [sl, #52]	; 0x34
	events[i_idx].event = mgmt_event;
 8005a30:	4818      	ldr	r0, [pc, #96]	; (8005a94 <net_mgmt_event_notify_with_info+0xdc>)
 8005a32:	2238      	movs	r2, #56	; 0x38
 8005a34:	fb02 f304 	mul.w	r3, r2, r4
 8005a38:	18c1      	adds	r1, r0, r3
 8005a3a:	50c6      	str	r6, [r0, r3]
	events[i_idx].iface = iface;
 8005a3c:	f8c1 8004 	str.w	r8, [r1, #4]
	if (i_idx == out_event) {
 8005a40:	4915      	ldr	r1, [pc, #84]	; (8005a98 <net_mgmt_event_notify_with_info+0xe0>)
 8005a42:	f9b1 3000 	ldrsh.w	r3, [r1]
 8005a46:	429c      	cmp	r4, r3
 8005a48:	d117      	bne.n	8005a7a <net_mgmt_event_notify_with_info+0xc2>
		uint16_t o_idx = out_event + 1;
 8005a4a:	1c63      	adds	r3, r4, #1
 8005a4c:	b29b      	uxth	r3, r3
			o_idx = 0U;
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	bf08      	it	eq
 8005a52:	2300      	moveq	r3, #0
		if (events[o_idx].event) {
 8005a54:	435a      	muls	r2, r3
 8005a56:	5882      	ldr	r2, [r0, r2]
 8005a58:	b102      	cbz	r2, 8005a5c <net_mgmt_event_notify_with_info+0xa4>
			out_event = o_idx;
 8005a5a:	800b      	strh	r3, [r1, #0]
	in_event = i_idx;
 8005a5c:	802c      	strh	r4, [r5, #0]
	(void)k_mutex_unlock(&net_mgmt_lock);
 8005a5e:	f7ff fea9 	bl	80057b4 <k_mutex_unlock.constprop.0.isra.0>
	z_impl_k_sem_give(sem);
 8005a62:	480e      	ldr	r0, [pc, #56]	; (8005a9c <net_mgmt_event_notify_with_info+0xe4>)
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
	}
}
 8005a64:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a68:	f006 bd9a 	b.w	800c5a0 <z_impl_k_sem_give>
		events[i_idx].info_length = 0;
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <net_mgmt_event_notify_with_info+0xdc>)
 8005a6e:	2238      	movs	r2, #56	; 0x38
 8005a70:	fb02 3304 	mla	r3, r2, r4, r3
 8005a74:	2200      	movs	r2, #0
 8005a76:	635a      	str	r2, [r3, #52]	; 0x34
 8005a78:	e7da      	b.n	8005a30 <net_mgmt_event_notify_with_info+0x78>
	} else if (out_event < 0) {
 8005a7a:	2b00      	cmp	r3, #0
		out_event = i_idx;
 8005a7c:	bfb8      	it	lt
 8005a7e:	800c      	strhlt	r4, [r1, #0]
 8005a80:	e7ec      	b.n	8005a5c <net_mgmt_event_notify_with_info+0xa4>
}
 8005a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a86:	bf00      	nop
 8005a88:	20002320 	.word	0x20002320
 8005a8c:	20002570 	.word	0x20002570
 8005a90:	20000478 	.word	0x20000478
 8005a94:	200022b0 	.word	0x200022b0
 8005a98:	20002572 	.word	0x20002572
 8005a9c:	200004b8 	.word	0x200004b8

08005aa0 <net_mgmt_event_init>:
				    raised_event, NULL, info, info_length,
				    timeout);
}

void net_mgmt_event_init(void)
{
 8005aa0:	b510      	push	{r4, lr}
	in_event = -1;
 8005aa2:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <net_mgmt_event_init+0x50>)
	out_event = -1;

	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
 8005aa4:	4813      	ldr	r0, [pc, #76]	; (8005af4 <net_mgmt_event_init+0x54>)
	in_event = -1;
 8005aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aaa:	8013      	strh	r3, [r2, #0]
	out_event = -1;
 8005aac:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <net_mgmt_event_init+0x58>)
{
 8005aae:	b088      	sub	sp, #32
	out_event = -1;
 8005ab0:	8013      	strh	r3, [r2, #0]
	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	2270      	movs	r2, #112	; 0x70
 8005ab6:	f00e feb4 	bl	8014822 <memset>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8005aba:	4c10      	ldr	r4, [pc, #64]	; (8005afc <net_mgmt_event_init+0x5c>)
 8005abc:	4910      	ldr	r1, [pc, #64]	; (8005b00 <net_mgmt_event_init+0x60>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005acc:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8005ad0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <net_mgmt_event_init+0x64>)
 8005adc:	4620      	mov	r0, r4
 8005ade:	f006 fbf7 	bl	800c2d0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8005ae2:	4909      	ldr	r1, [pc, #36]	; (8005b08 <net_mgmt_event_init+0x68>)
 8005ae4:	4620      	mov	r0, r4
	k_thread_name_set(&mgmt_thread_data, "net_mgmt");

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
 8005ae6:	b008      	add	sp, #32
 8005ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aec:	f006 bb40 	b.w	800c170 <z_impl_k_thread_name_set>
 8005af0:	20002570 	.word	0x20002570
 8005af4:	200022b0 	.word	0x200022b0
 8005af8:	20002572 	.word	0x20002572
 8005afc:	20000b80 	.word	0x20000b80
 8005b00:	200034e0 	.word	0x200034e0
 8005b04:	080057c1 	.word	0x080057c1
 8005b08:	08017319 	.word	0x08017319

08005b0c <net_icmpv4_register_handler>:
	return list->head;
 8005b0c:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <net_icmpv4_register_handler+0x10>)
	parent->next = child;
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
 8005b12:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 8005b14:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 8005b16:	b902      	cbnz	r2, 8005b1a <net_icmpv4_register_handler+0xe>
	list->tail = node;
 8005b18:	6058      	str	r0, [r3, #4]
}

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
 8005b1a:	4770      	bx	lr
 8005b1c:	20002324 	.word	0x20002324

08005b20 <net_icmpv4_unregister_handler>:

void net_icmpv4_unregister_handler(struct net_icmpv4_handler *handler)
{
 8005b20:	b510      	push	{r4, lr}
	return list->head;
 8005b22:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <net_icmpv4_unregister_handler+0x34>)
 8005b24:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005b26:	2100      	movs	r1, #0
 8005b28:	b153      	cbz	r3, 8005b40 <net_icmpv4_unregister_handler+0x20>
 8005b2a:	4298      	cmp	r0, r3
 8005b2c:	d10e      	bne.n	8005b4c <net_icmpv4_unregister_handler+0x2c>
	return node->next;
 8005b2e:	6803      	ldr	r3, [r0, #0]
	return list->tail;
 8005b30:	6854      	ldr	r4, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
 8005b32:	b931      	cbnz	r1, 8005b42 <net_icmpv4_unregister_handler+0x22>
 8005b34:	42a0      	cmp	r0, r4
	list->head = node;
 8005b36:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 8005b38:	d100      	bne.n	8005b3c <net_icmpv4_unregister_handler+0x1c>
	list->tail = node;
 8005b3a:	6053      	str	r3, [r2, #4]
	parent->next = child;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6003      	str	r3, [r0, #0]
	sys_slist_find_and_remove(&handlers, &handler->node);
}
 8005b40:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
 8005b42:	42a0      	cmp	r0, r4
	parent->next = child;
 8005b44:	600b      	str	r3, [r1, #0]
	list->tail = node;
 8005b46:	bf08      	it	eq
 8005b48:	6051      	streq	r1, [r2, #4]
}
 8005b4a:	e7f7      	b.n	8005b3c <net_icmpv4_unregister_handler+0x1c>
	return node->next;
 8005b4c:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	e7ea      	b.n	8005b28 <net_icmpv4_unregister_handler+0x8>
 8005b52:	bf00      	nop
 8005b54:	20002324 	.word	0x20002324

08005b58 <net_icmpv4_input>:

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
 8005b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2304      	movs	r3, #4
{
 8005b5e:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8005b60:	4669      	mov	r1, sp
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8005b62:	e9cd 2300 	strd	r2, r3, [sp]
{
 8005b66:	4605      	mov	r5, r0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8005b68:	f00c f9b8 	bl	8011edc <net_pkt_get_data>
	if (!icmp_hdr) {
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	b910      	cbnz	r0, 8005b76 <net_icmpv4_input+0x1e>
		NET_DBG("DROP: NULL ICMPv4 header");
		return NET_DROP;
 8005b70:	2002      	movs	r0, #2

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
 8005b72:	b002      	add	sp, #8
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline uint16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMP);
 8005b76:	2101      	movs	r1, #1
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f00b f92e 	bl	8010dda <net_calc_chksum>
	if (net_calc_chksum_icmpv4(pkt) != 0U) {
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d1f6      	bne.n	8005b70 <net_icmpv4_input+0x18>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
 8005b82:	69a8      	ldr	r0, [r5, #24]
 8005b84:	f106 0110 	add.w	r1, r6, #16
 8005b88:	f00c f9f6 	bl	8011f78 <net_ipv4_is_addr_bcast>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d1ef      	bne.n	8005b70 <net_icmpv4_input+0x18>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
 8005b90:	9901      	ldr	r1, [sp, #4]
 8005b92:	4628      	mov	r0, r5
 8005b94:	f00c f803 	bl	8011b9e <net_pkt_skip>
	return list->head;
 8005b98:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <net_icmpv4_input+0x70>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0e7      	beq.n	8005b70 <net_icmpv4_input+0x18>
		if (cb->type == icmp_hdr->type &&
 8005ba0:	7821      	ldrb	r1, [r4, #0]
 8005ba2:	7a1a      	ldrb	r2, [r3, #8]
 8005ba4:	428a      	cmp	r2, r1
 8005ba6:	d10a      	bne.n	8005bbe <net_icmpv4_input+0x66>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 8005ba8:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
 8005baa:	7860      	ldrb	r0, [r4, #1]
 8005bac:	4290      	cmp	r0, r2
 8005bae:	d000      	beq.n	8005bb2 <net_icmpv4_input+0x5a>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 8005bb0:	b92a      	cbnz	r2, 8005bbe <net_icmpv4_input+0x66>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	4798      	blx	r3
 8005bbc:	e7d9      	b.n	8005b72 <net_icmpv4_input+0x1a>
	return node->next;
 8005bbe:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ee      	bne.n	8005ba2 <net_icmpv4_input+0x4a>
 8005bc4:	e7d4      	b.n	8005b70 <net_icmpv4_input+0x18>
 8005bc6:	bf00      	nop
 8005bc8:	20002324 	.word	0x20002324

08005bcc <net_icmpv4_init>:
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
	net_icmpv4_register_handler(&echo_request_handler);
 8005bcc:	4801      	ldr	r0, [pc, #4]	; (8005bd4 <net_icmpv4_init+0x8>)
 8005bce:	f7ff bf9d 	b.w	8005b0c <net_icmpv4_register_handler>
 8005bd2:	bf00      	nop
 8005bd4:	20000158 	.word	0x20000158

08005bd8 <conn_set_unused>:

	sys_slist_prepend(&conn_used, &conn->node);
}

static void conn_set_unused(struct net_conn *conn)
{
 8005bd8:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
 8005bda:	2224      	movs	r2, #36	; 0x24
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4604      	mov	r4, r0
 8005be0:	f00e fe1f 	bl	8014822 <memset>
	return list->head;
 8005be4:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <conn_set_unused+0x1c>)
	parent->next = child;
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 8005bea:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 8005bec:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 8005bee:	b902      	cbnz	r2, 8005bf2 <conn_set_unused+0x1a>
	list->tail = node;
 8005bf0:	605c      	str	r4, [r3, #4]
	(void)memset(conn, 0, sizeof(*conn));

	sys_slist_prepend(&conn_unused, &conn->node);
}
 8005bf2:	bd10      	pop	{r4, pc}
 8005bf4:	2000232c 	.word	0x2000232c

08005bf8 <net_conn_register>:
		      uint16_t local_port,
		      struct net_context *context,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
 8005bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	468e      	mov	lr, r1
	return list->head;
 8005bfe:	495a      	ldr	r1, [pc, #360]	; (8005d68 <net_conn_register+0x170>)
 8005c00:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8005c04:	6809      	ldr	r1, [r1, #0]
 8005c06:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8005c0a:	4684      	mov	ip, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
 8005c0c:	2900      	cmp	r1, #0
 8005c0e:	f000 80a4 	beq.w	8005d5a <net_conn_register+0x162>
	return node->next;
 8005c12:	fa95 f895 	rev16.w	r8, r5
 8005c16:	fa96 f996 	rev16.w	r9, r6
 8005c1a:	6808      	ldr	r0, [r1, #0]
 8005c1c:	fa1f f888 	uxth.w	r8, r8
 8005c20:	fa1f f989 	uxth.w	r9, r9
 8005c24:	460c      	mov	r4, r1
		if (conn->proto != proto) {
 8005c26:	8c27      	ldrh	r7, [r4, #32]
 8005c28:	4567      	cmp	r7, ip
 8005c2a:	d11b      	bne.n	8005c64 <net_conn_register+0x6c>
		if (conn->family != family) {
 8005c2c:	f894 7022 	ldrb.w	r7, [r4, #34]	; 0x22
 8005c30:	4577      	cmp	r7, lr
 8005c32:	d117      	bne.n	8005c64 <net_conn_register+0x6c>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
 8005c34:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
 8005c38:	f007 0a02 	and.w	sl, r7, #2
		if (remote_addr) {
 8005c3c:	b1ba      	cbz	r2, 8005c6e <net_conn_register+0x76>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
 8005c3e:	f1ba 0f00 	cmp.w	sl, #0
 8005c42:	d00f      	beq.n	8005c64 <net_conn_register+0x6c>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8005c44:	f8b2 a000 	ldrh.w	sl, [r2]
 8005c48:	f1ba 0f01 	cmp.w	sl, #1
 8005c4c:	d10a      	bne.n	8005c64 <net_conn_register+0x6c>
				   remote_addr->sa_family == AF_INET &&
 8005c4e:	f8b4 a004 	ldrh.w	sl, [r4, #4]
 8005c52:	f1ba 0f01 	cmp.w	sl, #1
 8005c56:	d105      	bne.n	8005c64 <net_conn_register+0x6c>
 8005c58:	f8d2 b004 	ldr.w	fp, [r2, #4]
 8005c5c:	f8d4 a008 	ldr.w	sl, [r4, #8]
				if (!net_ipv4_addr_cmp(
 8005c60:	45d3      	cmp	fp, sl
 8005c62:	d007      	beq.n	8005c74 <net_conn_register+0x7c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d078      	beq.n	8005d5a <net_conn_register+0x162>
 8005c68:	4604      	mov	r4, r0
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	e7db      	b.n	8005c26 <net_conn_register+0x2e>
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
 8005c6e:	f1ba 0f00 	cmp.w	sl, #0
 8005c72:	d1f7      	bne.n	8005c64 <net_conn_register+0x6c>
		if (local_addr) {
 8005c74:	f007 0704 	and.w	r7, r7, #4
 8005c78:	b1ab      	cbz	r3, 8005ca6 <net_conn_register+0xae>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
 8005c7a:	2f00      	cmp	r7, #0
 8005c7c:	d0f2      	beq.n	8005c64 <net_conn_register+0x6c>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8005c7e:	881f      	ldrh	r7, [r3, #0]
 8005c80:	2f01      	cmp	r7, #1
 8005c82:	d1ef      	bne.n	8005c64 <net_conn_register+0x6c>
				   local_addr->sa_family == AF_INET &&
 8005c84:	89a7      	ldrh	r7, [r4, #12]
 8005c86:	2f01      	cmp	r7, #1
 8005c88:	d1ec      	bne.n	8005c64 <net_conn_register+0x6c>
 8005c8a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8005c8e:	6927      	ldr	r7, [r4, #16]
				if (!net_ipv4_addr_cmp(
 8005c90:	45ba      	cmp	sl, r7
 8005c92:	d1e7      	bne.n	8005c64 <net_conn_register+0x6c>
		if (net_sin(&conn->remote_addr)->sin_port !=
 8005c94:	88e7      	ldrh	r7, [r4, #6]
 8005c96:	4547      	cmp	r7, r8
 8005c98:	d1e4      	bne.n	8005c64 <net_conn_register+0x6c>
		if (net_sin(&conn->local_addr)->sin_port !=
 8005c9a:	89e4      	ldrh	r4, [r4, #14]
 8005c9c:	454c      	cmp	r4, r9
 8005c9e:	d1e1      	bne.n	8005c64 <net_conn_register+0x6c>

	conn = conn_find_handler(proto, family, remote_addr, local_addr,
				 remote_port, local_port);
	if (conn) {
		NET_ERR("Identical connection handler %p already found.", conn);
		return -EALREADY;
 8005ca0:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8005ca4:	e057      	b.n	8005d56 <net_conn_register+0x15e>
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
 8005ca6:	2f00      	cmp	r7, #0
 8005ca8:	d0f4      	beq.n	8005c94 <net_conn_register+0x9c>
 8005caa:	e7db      	b.n	8005c64 <net_conn_register+0x6c>
Z_GENLIST_REMOVE(slist, snode)
 8005cac:	f8d7 8004 	ldr.w	r8, [r7, #4]
	return node->next;
 8005cb0:	6804      	ldr	r4, [r0, #0]
	list->head = node;
 8005cb2:	603c      	str	r4, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 8005cb4:	4540      	cmp	r0, r8
	list->tail = node;
 8005cb6:	bf08      	it	eq
 8005cb8:	607c      	streq	r4, [r7, #4]
	parent->next = child;
 8005cba:	2400      	movs	r4, #0
 8005cbc:	6004      	str	r4, [r0, #0]
	conn = conn_get_unused();
	if (!conn) {
		return -ENOENT;
	}

	if (remote_addr) {
 8005cbe:	2a00      	cmp	r2, #0
 8005cc0:	d043      	beq.n	8005d4a <net_conn_register+0x152>
			if (!net_ipv6_is_addr_unspecified(
				    &net_sin6(remote_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8005cc2:	8814      	ldrh	r4, [r2, #0]
 8005cc4:	2c01      	cmp	r4, #1
 8005cc6:	d142      	bne.n	8005d4e <net_conn_register+0x156>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8005cc8:	6814      	ldr	r4, [r2, #0]
 8005cca:	6044      	str	r4, [r0, #4]
 8005ccc:	6854      	ldr	r4, [r2, #4]
 8005cce:	6084      	str	r4, [r0, #8]
			   remote_addr->sa_family == AF_INET) {
			memcpy(&conn->remote_addr, remote_addr,
			       sizeof(struct sockaddr_in));

			if (net_sin(remote_addr)->sin_addr.s_addr) {
 8005cd0:	6854      	ldr	r4, [r2, #4]
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
 8005cd2:	2c00      	cmp	r4, #0
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2700      	moveq	r7, #0
 8005cd8:	2720      	movne	r7, #32
		} else {
			NET_ERR("Remote address family not set");
			goto error;
		}

		flags |= NET_CONN_REMOTE_ADDR_SET;
 8005cda:	f047 0702 	orr.w	r7, r7, #2
	}

	if (local_addr) {
 8005cde:	b18b      	cbz	r3, 8005d04 <net_conn_register+0x10c>
			if (!net_ipv6_is_addr_unspecified(
				    &net_sin6(local_addr)->
				    sin6_addr)) {
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
			}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8005ce0:	881c      	ldrh	r4, [r3, #0]
 8005ce2:	2c01      	cmp	r4, #1
 8005ce4:	d133      	bne.n	8005d4e <net_conn_register+0x156>
 8005ce6:	681c      	ldr	r4, [r3, #0]
 8005ce8:	60c4      	str	r4, [r0, #12]
 8005cea:	685c      	ldr	r4, [r3, #4]
 8005cec:	6104      	str	r4, [r0, #16]
			   local_addr->sa_family == AF_INET) {
			memcpy(&conn->local_addr, local_addr,
			       sizeof(struct sockaddr_in));

			if (net_sin(local_addr)->sin_addr.s_addr) {
 8005cee:	685c      	ldr	r4, [r3, #4]
 8005cf0:	b10c      	cbz	r4, 8005cf6 <net_conn_register+0xfe>
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
 8005cf2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
		} else {
			NET_ERR("Local address family not set");
			goto error;
		}

		flags |= NET_CONN_LOCAL_ADDR_SET;
 8005cf6:	f047 0704 	orr.w	r7, r7, #4
	}

	if (remote_addr && local_addr) {
 8005cfa:	b11a      	cbz	r2, 8005d04 <net_conn_register+0x10c>
		if (remote_addr->sa_family != local_addr->sa_family) {
 8005cfc:	8812      	ldrh	r2, [r2, #0]
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d124      	bne.n	8005d4e <net_conn_register+0x156>
			NET_ERR("Address families different");
			goto error;
		}
	}

	if (remote_port) {
 8005d04:	b11d      	cbz	r5, 8005d0e <net_conn_register+0x116>
		flags |= NET_CONN_REMOTE_PORT_SPEC;
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
 8005d06:	ba6d      	rev16	r5, r5
		flags |= NET_CONN_REMOTE_PORT_SPEC;
 8005d08:	f047 0708 	orr.w	r7, r7, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
 8005d0c:	80c5      	strh	r5, [r0, #6]
	}

	if (local_port) {
 8005d0e:	b11e      	cbz	r6, 8005d18 <net_conn_register+0x120>
		flags |= NET_CONN_LOCAL_PORT_SPEC;
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
 8005d10:	ba76      	rev16	r6, r6
		flags |= NET_CONN_LOCAL_PORT_SPEC;
 8005d12:	f047 0710 	orr.w	r7, r7, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
 8005d16:	81c6      	strh	r6, [r0, #14]
	}

	conn->cb = cb;
 8005d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d1a:	6143      	str	r3, [r0, #20]
	conn->user_data = user_data;
 8005d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d1e:	61c3      	str	r3, [r0, #28]
	conn->flags = flags;
	conn->proto = proto;
	conn->family = family;
	conn->context = context;
 8005d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d22:	6183      	str	r3, [r0, #24]

	if (handle) {
 8005d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	conn->proto = proto;
 8005d26:	f8a0 c020 	strh.w	ip, [r0, #32]
	conn->family = family;
 8005d2a:	f880 e022 	strb.w	lr, [r0, #34]	; 0x22
	if (handle) {
 8005d2e:	b103      	cbz	r3, 8005d32 <net_conn_register+0x13a>
		*handle = (struct net_conn_handle *)conn;
 8005d30:	6018      	str	r0, [r3, #0]
	list->head = node;
 8005d32:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <net_conn_register+0x170>)
	parent->next = child;
 8005d34:	6001      	str	r1, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
 8005d36:	6853      	ldr	r3, [r2, #4]
	list->head = node;
 8005d38:	6010      	str	r0, [r2, #0]
	conn->flags |= NET_CONN_IN_USE;
 8005d3a:	f047 0701 	orr.w	r7, r7, #1
 8005d3e:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
Z_GENLIST_PREPEND(slist, snode)
 8005d42:	b903      	cbnz	r3, 8005d46 <net_conn_register+0x14e>
	list->tail = node;
 8005d44:	6050      	str	r0, [r2, #4]

	conn_set_used(conn);

	conn_register_debug(conn, remote_port, local_port);

	return 0;
 8005d46:	2000      	movs	r0, #0
 8005d48:	e005      	b.n	8005d56 <net_conn_register+0x15e>
	uint8_t flags = 0U;
 8005d4a:	4617      	mov	r7, r2
 8005d4c:	e7c7      	b.n	8005cde <net_conn_register+0xe6>
error:
	conn_set_unused(conn);
 8005d4e:	f7ff ff43 	bl	8005bd8 <conn_set_unused>
	return -EINVAL;
 8005d52:	f06f 0015 	mvn.w	r0, #21
}
 8005d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
 8005d5a:	4f04      	ldr	r7, [pc, #16]	; (8005d6c <net_conn_register+0x174>)
 8005d5c:	6838      	ldr	r0, [r7, #0]
	if (!node) {
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d1a4      	bne.n	8005cac <net_conn_register+0xb4>
		return -ENOENT;
 8005d62:	f06f 0001 	mvn.w	r0, #1
 8005d66:	e7f6      	b.n	8005d56 <net_conn_register+0x15e>
 8005d68:	20002334 	.word	0x20002334
 8005d6c:	2000232c 	.word	0x2000232c

08005d70 <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
 8005d70:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <net_conn_unregister+0x58>)
 8005d72:	4298      	cmp	r0, r3
{
 8005d74:	b510      	push	{r4, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
 8005d76:	d321      	bcc.n	8005dbc <net_conn_unregister+0x4c>
 8005d78:	3390      	adds	r3, #144	; 0x90
 8005d7a:	4298      	cmp	r0, r3
 8005d7c:	d81e      	bhi.n	8005dbc <net_conn_unregister+0x4c>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
 8005d7e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005d82:	07db      	lsls	r3, r3, #31
 8005d84:	d51d      	bpl.n	8005dc2 <net_conn_unregister+0x52>
 8005d86:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <net_conn_unregister+0x5c>)
 8005d88:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	b153      	cbz	r3, 8005da4 <net_conn_unregister+0x34>
 8005d8e:	4298      	cmp	r0, r3
 8005d90:	d111      	bne.n	8005db6 <net_conn_unregister+0x46>
	return node->next;
 8005d92:	6803      	ldr	r3, [r0, #0]
	return list->tail;
 8005d94:	6854      	ldr	r4, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
 8005d96:	b949      	cbnz	r1, 8005dac <net_conn_unregister+0x3c>
 8005d98:	42a0      	cmp	r0, r4
	list->head = node;
 8005d9a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 8005d9c:	d100      	bne.n	8005da0 <net_conn_unregister+0x30>
	list->tail = node;
 8005d9e:	6053      	str	r3, [r2, #4]
	parent->next = child;
 8005da0:	2300      	movs	r3, #0
 8005da2:	6003      	str	r3, [r0, #0]

	NET_DBG("Connection handler %p removed", conn);

	sys_slist_find_and_remove(&conn_used, &conn->node);

	conn_set_unused(conn);
 8005da4:	f7ff ff18 	bl	8005bd8 <conn_set_unused>

	return 0;
 8005da8:	2000      	movs	r0, #0
}
 8005daa:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
 8005dac:	42a0      	cmp	r0, r4
	parent->next = child;
 8005dae:	600b      	str	r3, [r1, #0]
	list->tail = node;
 8005db0:	bf08      	it	eq
 8005db2:	6051      	streq	r1, [r2, #4]
}
 8005db4:	e7f4      	b.n	8005da0 <net_conn_unregister+0x30>
	return node->next;
 8005db6:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	e7e7      	b.n	8005d8c <net_conn_unregister+0x1c>
		return -EINVAL;
 8005dbc:	f06f 0015 	mvn.w	r0, #21
 8005dc0:	e7f3      	b.n	8005daa <net_conn_unregister+0x3a>
		return -ENOENT;
 8005dc2:	f06f 0001 	mvn.w	r0, #1
 8005dc6:	e7f0      	b.n	8005daa <net_conn_unregister+0x3a>
 8005dc8:	2000233c 	.word	0x2000233c
 8005dcc:	20002334 	.word	0x20002334

08005dd0 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				uint8_t proto,
				union net_proto_header *proto_hdr)
{
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_conn *conn;
	enum net_verdict ret;
	uint16_t src_port;
	uint16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8005dd4:	2a11      	cmp	r2, #17
{
 8005dd6:	b089      	sub	sp, #36	; 0x24
 8005dd8:	4605      	mov	r5, r0
 8005dda:	460e      	mov	r6, r1
 8005ddc:	4617      	mov	r7, r2
 8005dde:	4699      	mov	r9, r3
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8005de0:	d13f      	bne.n	8005e62 <net_conn_input+0x92>
		src_port = proto_hdr->udp->src_port;
 8005de2:	681b      	ldr	r3, [r3, #0]
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
		if (proto_hdr->tcp == NULL) {
			return NET_DROP;
		}

		src_port = proto_hdr->tcp->src_port;
 8005de4:	881a      	ldrh	r2, [r3, #0]
 8005de6:	9204      	str	r2, [sp, #16]
		dst_port = proto_hdr->tcp->dst_port;
 8005de8:	885b      	ldrh	r3, [r3, #2]
 8005dea:	9303      	str	r3, [sp, #12]
	return pkt->family;
 8005dec:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 8005df0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d03c      	beq.n	8005e72 <net_conn_input+0xa2>
	bool is_bcast_pkt = false;
 8005df8:	f04f 0a00 	mov.w	sl, #0
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
 8005dfc:	f04f 0b00 	mov.w	fp, #0
	return list->head;
 8005e00:	4b82      	ldr	r3, [pc, #520]	; (800600c <net_conn_input+0x23c>)
 8005e02:	681c      	ldr	r4, [r3, #0]
		if (net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->ipv6->dst)) {
			is_mcast_pkt = true;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 8005e04:	b1dc      	cbz	r4, 8005e3e <net_conn_input+0x6e>
 8005e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e0a:	f04f 0800 	mov.w	r8, #0
 8005e0e:	9305      	str	r3, [sp, #20]
			if ((conn->proto != proto) && (proto != ETH_P_ALL) &&
				(proto != IPPROTO_RAW)) {
				continue;
			}
		} else {
			if ((conn->proto != proto)) {
 8005e10:	b2bb      	uxth	r3, r7
 8005e12:	4642      	mov	r2, r8
 8005e14:	9306      	str	r3, [sp, #24]
		if (conn->context != NULL &&
 8005e16:	69a3      	ldr	r3, [r4, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d164      	bne.n	8005ee6 <net_conn_input+0x116>
			if ((conn->proto != proto)) {
 8005e1c:	8c23      	ldrh	r3, [r4, #32]
 8005e1e:	9906      	ldr	r1, [sp, #24]
 8005e20:	428b      	cmp	r3, r1
 8005e22:	d06e      	beq.n	8005f02 <net_conn_input+0x132>
	return node->next;
 8005e24:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 8005e26:	2c00      	cmp	r4, #0
 8005e28:	d1f5      	bne.n	8005e16 <net_conn_input+0x46>
			best_rank = 0;
			best_match = conn;
		}
	}

	if ((is_mcast_pkt && mcast_pkt_delivered) ||
 8005e2a:	f1bb 0f00 	cmp.w	fp, #0
 8005e2e:	d002      	beq.n	8005e36 <net_conn_input+0x66>
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	f040 80d1 	bne.w	8005fd8 <net_conn_input+0x208>
			return NET_OK;
		}
	}

	conn = best_match;
	if (conn) {
 8005e36:	f1b8 0f00 	cmp.w	r8, #0
 8005e3a:	f040 80d4 	bne.w	8005fe6 <net_conn_input+0x216>
 8005e3e:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	 * sense here.
	 */
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
	    net_pkt_family(pkt) == AF_INET6 && is_mcast_pkt) {
		;
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8005e42:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d105      	bne.n	8005e56 <net_conn_input+0x86>
		   net_pkt_family(pkt) == AF_INET &&
 8005e4a:	f1bb 0f00 	cmp.w	fp, #0
 8005e4e:	d10a      	bne.n	8005e66 <net_conn_input+0x96>
		   (is_mcast_pkt || is_bcast_pkt)) {
 8005e50:	f1ba 0f00 	cmp.w	sl, #0
 8005e54:	d107      	bne.n	8005e66 <net_conn_input+0x96>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
 8005e56:	2203      	movs	r2, #3
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f00c f980 	bl	8012160 <net_icmpv4_send_error>
 8005e60:	e001      	b.n	8005e66 <net_conn_input+0x96>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8005e62:	2a06      	cmp	r2, #6
 8005e64:	d001      	beq.n	8005e6a <net_conn_input+0x9a>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
 8005e66:	2002      	movs	r0, #2
 8005e68:	e0ba      	b.n	8005fe0 <net_conn_input+0x210>
		if (proto_hdr->tcp == NULL) {
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1b9      	bne.n	8005de4 <net_conn_input+0x14>
 8005e70:	e7f9      	b.n	8005e66 <net_conn_input+0x96>
		if (net_ipv4_addr_cmp_raw(ip_hdr->ipv4->src,
 8005e72:	f8d6 a000 	ldr.w	sl, [r6]
	return pkt->iface;
 8005e76:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8005e7a:	f8da 200c 	ldr.w	r2, [sl, #12]
 8005e7e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	f000 80bc 	beq.w	8006000 <net_conn_input+0x230>
		    net_ipv4_is_my_addr((struct in_addr *)ip_hdr->ipv4->src)) {
 8005e88:	f10a 0b0c 	add.w	fp, sl, #12
 */
static inline bool net_ipv4_is_my_addr(const struct in_addr *addr)
{
	bool ret;

	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4658      	mov	r0, fp
 8005e90:	f7fe fd20 	bl	80048d4 <net_if_ipv4_addr_lookup>
	if (!ret) {
 8005e94:	4604      	mov	r4, r0
 8005e96:	b958      	cbnz	r0, 8005eb0 <net_conn_input+0xe0>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8005e98:	f7ff f83e 	bl	8004f18 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8005e9c:	f8da 200c 	ldr.w	r2, [sl, #12]
 8005ea0:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d004      	beq.n	8005eb0 <net_conn_input+0xe0>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8005ea6:	4659      	mov	r1, fp
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f7fe fc77 	bl	800479c <net_if_ipv4_is_addr_bcast>
					  ip_hdr->ipv4->dst) ||
 8005eae:	b118      	cbz	r0, 8005eb8 <net_conn_input+0xe8>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
 8005eb0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d0d6      	beq.n	8005e66 <net_conn_input+0x96>
	return pkt->family;
 8005eb8:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 8005ebc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d199      	bne.n	8005df8 <net_conn_input+0x28>
		if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->ipv4->dst)) {
 8005ec4:	6831      	ldr	r1, [r6, #0]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8005ec6:	690b      	ldr	r3, [r1, #16]
 8005ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ecc:	2be0      	cmp	r3, #224	; 0xe0
 8005ece:	d005      	beq.n	8005edc <net_conn_input+0x10c>
		} else if (net_if_ipv4_is_addr_bcast(
 8005ed0:	3110      	adds	r1, #16
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	f7fe fc62 	bl	800479c <net_if_ipv4_is_addr_bcast>
 8005ed8:	4682      	mov	sl, r0
 8005eda:	e78f      	b.n	8005dfc <net_conn_input+0x2c>
	bool is_bcast_pkt = false;
 8005edc:	f04f 0a00 	mov.w	sl, #0
			is_mcast_pkt = true;
 8005ee0:	f04f 0b01 	mov.w	fp, #1
 8005ee4:	e78c      	b.n	8005e00 <net_conn_input+0x30>
		if (conn->context != NULL &&
 8005ee6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8005eea:	0509      	lsls	r1, r1, #20
 8005eec:	d596      	bpl.n	8005e1c <net_conn_input+0x4c>
	return pkt->iface;
 8005eee:	69af      	ldr	r7, [r5, #24]
	return net_if_get_by_index(context->iface);
 8005ef0:	f993 0088 	ldrsb.w	r0, [r3, #136]	; 0x88
 8005ef4:	9207      	str	r2, [sp, #28]
		/* coverity[OVERRUN] */
		return (struct net_if *) arch_syscall_invoke1(*(uintptr_t *)&index, K_SYSCALL_NET_IF_GET_BY_INDEX);
	}
#endif
	compiler_barrier();
	return z_impl_net_if_get_by_index(index);
 8005ef6:	f7fe fbf9 	bl	80046ec <z_impl_net_if_get_by_index>
		    net_context_is_bound_to_iface(conn->context) &&
 8005efa:	4287      	cmp	r7, r0
 8005efc:	9a07      	ldr	r2, [sp, #28]
 8005efe:	d191      	bne.n	8005e24 <net_conn_input+0x54>
 8005f00:	e78c      	b.n	8005e1c <net_conn_input+0x4c>
		if (conn->family != AF_UNSPEC &&
 8005f02:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8005f06:	b129      	cbz	r1, 8005f14 <net_conn_input+0x144>
	return pkt->family;
 8005f08:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8005f0c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005f10:	428b      	cmp	r3, r1
 8005f12:	d187      	bne.n	8005e24 <net_conn_input+0x54>
			if (net_sin(&conn->remote_addr)->sin_port) {
 8005f14:	88e3      	ldrh	r3, [r4, #6]
 8005f16:	b113      	cbz	r3, 8005f1e <net_conn_input+0x14e>
				if (net_sin(&conn->remote_addr)->sin_port !=
 8005f18:	9904      	ldr	r1, [sp, #16]
 8005f1a:	428b      	cmp	r3, r1
 8005f1c:	d182      	bne.n	8005e24 <net_conn_input+0x54>
			if (net_sin(&conn->local_addr)->sin_port) {
 8005f1e:	89e3      	ldrh	r3, [r4, #14]
 8005f20:	b11b      	cbz	r3, 8005f2a <net_conn_input+0x15a>
				if (net_sin(&conn->local_addr)->sin_port !=
 8005f22:	9903      	ldr	r1, [sp, #12]
 8005f24:	428b      	cmp	r3, r1
 8005f26:	f47f af7d 	bne.w	8005e24 <net_conn_input+0x54>
			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
 8005f2a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005f2e:	079f      	lsls	r7, r3, #30
 8005f30:	d510      	bpl.n	8005f54 <net_conn_input+0x184>
 8005f32:	f895 1037 	ldrb.w	r1, [r5, #55]	; 0x37
	if (addr->sa_family != net_pkt_family(pkt)) {
 8005f36:	88a7      	ldrh	r7, [r4, #4]
 8005f38:	f3c1 0042 	ubfx	r0, r1, #1, #3
 8005f3c:	4287      	cmp	r7, r0
 8005f3e:	f47f af71 	bne.w	8005e24 <net_conn_input+0x54>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8005f42:	2801      	cmp	r0, #1
 8005f44:	d106      	bne.n	8005f54 <net_conn_input+0x184>
		if (net_sin(addr)->sin_addr.s_addr) {
 8005f46:	68a1      	ldr	r1, [r4, #8]
 8005f48:	b121      	cbz	r1, 8005f54 <net_conn_input+0x184>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8005f4a:	6830      	ldr	r0, [r6, #0]
 8005f4c:	68c0      	ldr	r0, [r0, #12]
			if (!net_ipv4_addr_cmp_raw((uint8_t *)&net_sin(addr)->sin_addr,
 8005f4e:	4281      	cmp	r1, r0
 8005f50:	f47f af68 	bne.w	8005e24 <net_conn_input+0x54>
			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
 8005f54:	0758      	lsls	r0, r3, #29
 8005f56:	d510      	bpl.n	8005f7a <net_conn_input+0x1aa>
 8005f58:	f895 1037 	ldrb.w	r1, [r5, #55]	; 0x37
	if (addr->sa_family != net_pkt_family(pkt)) {
 8005f5c:	89a7      	ldrh	r7, [r4, #12]
 8005f5e:	f3c1 0042 	ubfx	r0, r1, #1, #3
 8005f62:	4287      	cmp	r7, r0
 8005f64:	f47f af5e 	bne.w	8005e24 <net_conn_input+0x54>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8005f68:	2801      	cmp	r0, #1
 8005f6a:	d106      	bne.n	8005f7a <net_conn_input+0x1aa>
		if (net_sin(addr)->sin_addr.s_addr) {
 8005f6c:	6921      	ldr	r1, [r4, #16]
 8005f6e:	b121      	cbz	r1, 8005f7a <net_conn_input+0x1aa>
 8005f70:	6830      	ldr	r0, [r6, #0]
 8005f72:	6900      	ldr	r0, [r0, #16]
			if (!net_ipv4_addr_cmp_raw((uint8_t *)&net_sin(addr)->sin_addr,
 8005f74:	4281      	cmp	r1, r0
 8005f76:	f47f af55 	bne.w	8005e24 <net_conn_input+0x54>
			if (best_match != NULL &&
 8005f7a:	f1b8 0f00 	cmp.w	r8, #0
 8005f7e:	d004      	beq.n	8005f8a <net_conn_input+0x1ba>
 8005f80:	f898 1023 	ldrb.w	r1, [r8, #35]	; 0x23
 8005f84:	0709      	lsls	r1, r1, #28
 8005f86:	f53f af4d 	bmi.w	8005e24 <net_conn_input+0x54>
			if (best_rank < NET_CONN_RANK(conn->flags)) {
 8005f8a:	9905      	ldr	r1, [sp, #20]
 8005f8c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005f90:	4299      	cmp	r1, r3
 8005f92:	f6bf af47 	bge.w	8005e24 <net_conn_input+0x54>
				if (!is_mcast_pkt) {
 8005f96:	f1bb 0f00 	cmp.w	fp, #0
 8005f9a:	d103      	bne.n	8005fa4 <net_conn_input+0x1d4>
					best_rank = NET_CONN_RANK(conn->flags);
 8005f9c:	b21b      	sxth	r3, r3
 8005f9e:	9305      	str	r3, [sp, #20]
					continue;
 8005fa0:	46a0      	mov	r8, r4
 8005fa2:	e73f      	b.n	8005e24 <net_conn_input+0x54>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
 8005fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4628      	mov	r0, r5
 8005fac:	f00b fee1 	bl	8011d72 <net_pkt_clone>
				if (!mcast_pkt) {
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	f43f af57 	beq.w	8005e66 <net_conn_input+0x96>
				if (conn->cb(conn, mcast_pkt, ip_hdr,
 8005fb8:	69e3      	ldr	r3, [r4, #28]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	47e0      	blx	ip
 8005fca:	2802      	cmp	r0, #2
 8005fcc:	d102      	bne.n	8005fd4 <net_conn_input+0x204>
					net_pkt_unref(mcast_pkt);
 8005fce:	4638      	mov	r0, r7
 8005fd0:	f00b fd10 	bl	80119f4 <net_pkt_unref>
				mcast_pkt_delivered = true;
 8005fd4:	465a      	mov	r2, fp
 8005fd6:	e725      	b.n	8005e24 <net_conn_input+0x54>
			net_pkt_unref(pkt);
 8005fd8:	4628      	mov	r0, r5
 8005fda:	f00b fd0b 	bl	80119f4 <net_pkt_unref>
		return NET_OK;
 8005fde:	2000      	movs	r0, #0
}
 8005fe0:	b009      	add	sp, #36	; 0x24
 8005fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
 8005fe6:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	47a0      	blx	r4
 8005ffa:	2802      	cmp	r0, #2
 8005ffc:	d1ef      	bne.n	8005fde <net_conn_input+0x20e>
 8005ffe:	e732      	b.n	8005e66 <net_conn_input+0x96>
	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
 8006000:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8006004:	4293      	cmp	r3, r2
 8006006:	f43f af2e 	beq.w	8005e66 <net_conn_input+0x96>
 800600a:	e75b      	b.n	8005ec4 <net_conn_input+0xf4>
 800600c:	20002334 	.word	0x20002334

08006010 <net_conn_init>:
	list->head = NULL;
 8006010:	4a0d      	ldr	r2, [pc, #52]	; (8006048 <net_conn_init+0x38>)
	list->tail = NULL;
 8006012:	490e      	ldr	r1, [pc, #56]	; (800604c <net_conn_init+0x3c>)
 8006014:	2300      	movs	r3, #0
		cb(conn, user_data);
	}
}

void net_conn_init(void)
{
 8006016:	b570      	push	{r4, r5, r6, lr}
 8006018:	e9c2 3300 	strd	r3, r3, [r2]
 800601c:	4a0c      	ldr	r2, [pc, #48]	; (8006050 <net_conn_init+0x40>)
 800601e:	604b      	str	r3, [r1, #4]
 8006020:	4618      	mov	r0, r3
 8006022:	461d      	mov	r5, r3
	int i;

	sys_slist_init(&conn_unused);
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
 8006024:	461c      	mov	r4, r3
		sys_slist_prepend(&conn_unused, &conns[i].node);
 8006026:	462e      	mov	r6, r5
	parent->next = child;
 8006028:	6016      	str	r6, [r2, #0]
 800602a:	4615      	mov	r5, r2
Z_GENLIST_PREPEND(slist, snode)
 800602c:	b908      	cbnz	r0, 8006032 <net_conn_init+0x22>
 800602e:	4610      	mov	r0, r2
 8006030:	2301      	movs	r3, #1
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
 8006032:	3401      	adds	r4, #1
 8006034:	2c04      	cmp	r4, #4
 8006036:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800603a:	d1f4      	bne.n	8006026 <net_conn_init+0x16>
 800603c:	4a05      	ldr	r2, [pc, #20]	; (8006054 <net_conn_init+0x44>)
 800603e:	600a      	str	r2, [r1, #0]
 8006040:	b103      	cbz	r3, 8006044 <net_conn_init+0x34>
 8006042:	6048      	str	r0, [r1, #4]
	}
}
 8006044:	bd70      	pop	{r4, r5, r6, pc}
 8006046:	bf00      	nop
 8006048:	20002334 	.word	0x20002334
 800604c:	2000232c 	.word	0x2000232c
 8006050:	2000233c 	.word	0x2000233c
 8006054:	200023a8 	.word	0x200023a8

08006058 <tcp_send>:
	   net_pkt_lladdr_dst(pkt)->type == NET_LINK_IEEE802154) ||	\
	  (IS_ENABLED(CONFIG_NET_L2_CANBUS) &&				\
	   net_pkt_lladdr_dst(pkt)->type == NET_LINK_CANBUS)))

static void tcp_send(struct net_pkt *pkt)
{
 8006058:	b510      	push	{r4, lr}
 800605a:	4604      	mov	r4, r0
	NET_DBG("%s", log_strdup(tcp_th(pkt)));

	tcp_pkt_ref(pkt);
 800605c:	f00b fcaa 	bl	80119b4 <net_pkt_ref>

	if (tcp_send_cb) {
 8006060:	4b08      	ldr	r3, [pc, #32]	; (8006084 <tcp_send+0x2c>)
 8006062:	681b      	ldr	r3, [r3, #0]
		if (tcp_send_cb(pkt) < 0) {
 8006064:	4620      	mov	r0, r4
	if (tcp_send_cb) {
 8006066:	b153      	cbz	r3, 800607e <tcp_send+0x26>
		if (tcp_send_cb(pkt) < 0) {
 8006068:	4798      	blx	r3
 800606a:	2800      	cmp	r0, #0
 800606c:	da02      	bge.n	8006074 <tcp_send+0x1c>
			NET_ERR("net_send_data()");
			tcp_pkt_unref(pkt);
 800606e:	4620      	mov	r0, r4
 8006070:	f00b fcc0 	bl	80119f4 <net_pkt_unref>
			NET_ERR("net_send_data()");
			tcp_pkt_unref(pkt);
		}
	}
out:
	tcp_pkt_unref(pkt);
 8006074:	4620      	mov	r0, r4
}
 8006076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tcp_pkt_unref(pkt);
 800607a:	f00b bcbb 	b.w	80119f4 <net_pkt_unref>
		if (net_send_data(pkt) < 0) {
 800607e:	f00a fb87 	bl	8010790 <net_send_data>
 8006082:	e7f2      	b.n	800606a <tcp_send+0x12>
 8006084:	200023d8 	.word	0x200023d8

08006088 <tcp_init_isn>:

	return seq_scale(UNALIGNED_GET((uint32_t *)&hash[0]));
}

static uint32_t tcp_init_isn(struct sockaddr *saddr, struct sockaddr *daddr)
{
 8006088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		    saddr->sa_family == AF_INET6) {
			return tcpv6_init_isn(&net_sin6(saddr)->sin6_addr,
					      &net_sin6(daddr)->sin6_addr,
					      net_sin6(saddr)->sin6_port,
					      net_sin6(daddr)->sin6_port);
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 800608c:	8805      	ldrh	r5, [r0, #0]
 800608e:	2d01      	cmp	r5, #1
{
 8006090:	b08c      	sub	sp, #48	; 0x30
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8006092:	d132      	bne.n	80060fa <tcp_init_isn+0x72>
			   saddr->sa_family == AF_INET) {
			return tcpv4_init_isn(&net_sin(saddr)->sin_addr,
 8006094:	884c      	ldrh	r4, [r1, #2]
 8006096:	8846      	ldrh	r6, [r0, #2]
 *
 * @return Pointer to IPv4 socket address
 */
static inline struct sockaddr_in *net_sin(const struct sockaddr *addr)
{
	return (struct sockaddr_in *)addr;
 8006098:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800609c:	684f      	ldr	r7, [r1, #4]
	} buf = {
 800609e:	2210      	movs	r2, #16
 80060a0:	2100      	movs	r1, #0
 80060a2:	a805      	add	r0, sp, #20
 80060a4:	f00e fbbd 	bl	8014822 <memset>
 80060a8:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
	if (!once) {
 80060ac:	4c15      	ldr	r4, [pc, #84]	; (8006104 <tcp_init_isn+0x7c>)
	} buf = {
 80060ae:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	if (!once) {
 80060b2:	7823      	ldrb	r3, [r4, #0]
	} buf = {
 80060b4:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
	if (!once) {
 80060b8:	b923      	cbnz	r3, 80060c4 <tcp_init_isn+0x3c>
		arch_syscall_invoke2(*(uintptr_t *)&dst, *(uintptr_t *)&len, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
 80060ba:	4813      	ldr	r0, [pc, #76]	; (8006108 <tcp_init_isn+0x80>)
 80060bc:	2110      	movs	r1, #16
 80060be:	f00c fd39 	bl	8012b34 <z_impl_sys_rand_get>
		once = true;
 80060c2:	7025      	strb	r5, [r4, #0]
	memcpy(buf.key, unique_key, sizeof(unique_key));
 80060c4:	4b10      	ldr	r3, [pc, #64]	; (8006108 <tcp_init_isn+0x80>)
 80060c6:	ac05      	add	r4, sp, #20
 80060c8:	f103 0510 	add.w	r5, r3, #16
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	6859      	ldr	r1, [r3, #4]
 80060d0:	4622      	mov	r2, r4
 80060d2:	c203      	stmia	r2!, {r0, r1}
 80060d4:	3308      	adds	r3, #8
 80060d6:	42ab      	cmp	r3, r5
 80060d8:	4614      	mov	r4, r2
 80060da:	d1f7      	bne.n	80060cc <tcp_init_isn+0x44>
	mbedtls_md5((const unsigned char *)&buf, sizeof(buf), hash);
 80060dc:	aa01      	add	r2, sp, #4
 80060de:	211c      	movs	r1, #28
 80060e0:	a805      	add	r0, sp, #20
 80060e2:	f005 fe1b 	bl	800bd1c <mbedtls_md5>
	return seq_scale(UNALIGNED_GET((uint32_t *)&hash[0]));
 80060e6:	9c01      	ldr	r4, [sp, #4]
	return z_impl_k_uptime_ticks();
 80060e8:	f00e f9bf 	bl	801446a <z_impl_k_uptime_ticks>
			return ((uint32_t)t) * (to_hz / from_hz);
 80060ec:	4b07      	ldr	r3, [pc, #28]	; (800610c <tcp_init_isn+0x84>)
 80060ee:	4358      	muls	r0, r3
	return seq + (k_ticks_to_ns_floor32(k_uptime_ticks()) >> 6);
 80060f0:	eb04 1090 	add.w	r0, r4, r0, lsr #6
					      net_sin(daddr)->sin_port);
		}
	}

	return sys_rand32_get();
}
 80060f4:	b00c      	add	sp, #48	; 0x30
 80060f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060fa:	b00c      	add	sp, #48	; 0x30
 80060fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_sys_rand32_get();
 8006100:	f002 be32 	b.w	8008d68 <z_impl_sys_rand32_get>
 8006104:	20002620 	.word	0x20002620
 8006108:	20002621 	.word	0x20002621
 800610c:	000186a0 	.word	0x000186a0

08006110 <tcp_send_process_no_lock>:
{
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	4605      	mov	r5, r0
	pkt = tcp_slist(conn, &conn->send_queue, peek_head,
 8006114:	f100 0724 	add.w	r7, r0, #36	; 0x24
 8006118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800611c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006120:	4638      	mov	r0, r7
 8006122:	f00c fa01 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8006126:	69ac      	ldr	r4, [r5, #24]
 8006128:	b104      	cbz	r4, 800612c <tcp_send_process_no_lock+0x1c>
 800612a:	3c30      	subs	r4, #48	; 0x30
 800612c:	4638      	mov	r0, r7
 800612e:	f00c fad8 	bl	80126e2 <k_mutex_unlock.isra.0>
	if (!pkt) {
 8006132:	b90c      	cbnz	r4, 8006138 <tcp_send_process_no_lock+0x28>
	bool unref = false;
 8006134:	2000      	movs	r0, #0
 8006136:	e044      	b.n	80061c2 <tcp_send_process_no_lock+0xb2>
	if (conn->in_retransmission) {
 8006138:	f895 31b9 	ldrb.w	r3, [r5, #441]	; 0x1b9
 800613c:	07da      	lsls	r2, r3, #31
 800613e:	d51e      	bpl.n	800617e <tcp_send_process_no_lock+0x6e>
		if (conn->send_retries > 0) {
 8006140:	f8d5 319c 	ldr.w	r3, [r5, #412]	; 0x19c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d05a      	beq.n	80061fe <tcp_send_process_no_lock+0xee>
			struct net_pkt *clone = tcp_pkt_clone(pkt);
 8006148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800614c:	2300      	movs	r3, #0
 800614e:	4620      	mov	r0, r4
 8006150:	f00b fe0f 	bl	8011d72 <net_pkt_clone>
			if (clone) {
 8006154:	b130      	cbz	r0, 8006164 <tcp_send_process_no_lock+0x54>
				tcp_send(clone);
 8006156:	f7ff ff7f 	bl	8006058 <tcp_send>
				conn->send_retries--;
 800615a:	f8d5 319c 	ldr.w	r3, [r5, #412]	; 0x19c
 800615e:	3b01      	subs	r3, #1
 8006160:	f8c5 319c 	str.w	r3, [r5, #412]	; 0x19c
	if (conn->in_retransmission) {
 8006164:	f895 31b9 	ldrb.w	r3, [r5, #441]	; 0x1b9
 8006168:	07db      	lsls	r3, r3, #31
 800616a:	d5e3      	bpl.n	8006134 <tcp_send_process_no_lock+0x24>
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
 800616c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006170:	2300      	movs	r3, #0
 8006172:	f105 0178 	add.w	r1, r5, #120	; 0x78
 8006176:	4823      	ldr	r0, [pc, #140]	; (8006204 <tcp_send_process_no_lock+0xf4>)
 8006178:	f006 fbcc 	bl	800c914 <k_work_reschedule_for_queue>
 800617c:	e7da      	b.n	8006134 <tcp_send_process_no_lock+0x24>
		uint8_t fl = th_get(pkt)->th_flags;
 800617e:	4620      	mov	r0, r4
 8006180:	f00c f9fb 	bl	801257a <th_get>
 8006184:	7b43      	ldrb	r3, [r0, #13]
		bool forget = ACK == fl || PSH == fl || (ACK | PSH) == fl ||
 8006186:	2b10      	cmp	r3, #16
 8006188:	d006      	beq.n	8006198 <tcp_send_process_no_lock+0x88>
 800618a:	f003 02ef 	and.w	r2, r3, #239	; 0xef
 800618e:	2a08      	cmp	r2, #8
 8006190:	d002      	beq.n	8006198 <tcp_send_process_no_lock+0x88>
					 struct net_pkt, next) :
 8006192:	f013 0604 	ands.w	r6, r3, #4
 8006196:	d015      	beq.n	80061c4 <tcp_send_process_no_lock+0xb4>
		pkt = forget ? tcp_slist(conn, &conn->send_queue, get,
 8006198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800619c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061a0:	4638      	mov	r0, r7
 80061a2:	f00c f9c1 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
 80061a6:	f105 0018 	add.w	r0, r5, #24
 80061aa:	f00c f9ae 	bl	801250a <sys_slist_get>
 80061ae:	4604      	mov	r4, r0
 80061b0:	b108      	cbz	r0, 80061b6 <tcp_send_process_no_lock+0xa6>
 80061b2:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
 80061b6:	4638      	mov	r0, r7
 80061b8:	f00c fa93 	bl	80126e2 <k_mutex_unlock.isra.0>
 80061bc:	2601      	movs	r6, #1
	bool unref = false;
 80061be:	4620      	mov	r0, r4
		if (!pkt) {
 80061c0:	b944      	cbnz	r4, 80061d4 <tcp_send_process_no_lock+0xc4>
}
 80061c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tcp_pkt_clone(pkt);
 80061c4:	4620      	mov	r0, r4
 80061c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061ca:	2300      	movs	r3, #0
 80061cc:	f00b fdd1 	bl	8011d72 <net_pkt_clone>
 80061d0:	4604      	mov	r4, r0
 80061d2:	e7f4      	b.n	80061be <tcp_send_process_no_lock+0xae>
		tcp_send(pkt);
 80061d4:	f7ff ff40 	bl	8006058 <tcp_send>
		if (forget == false &&
 80061d8:	2e00      	cmp	r6, #0
 80061da:	d1c3      	bne.n	8006164 <tcp_send_process_no_lock+0x54>
}

static inline k_ticks_t k_work_delayable_remaining_get(
	const struct k_work_delayable *dwork)
{
	return z_timeout_remaining(&dwork->timeout);
 80061dc:	f105 0088 	add.w	r0, r5, #136	; 0x88
 80061e0:	f00e f915 	bl	801440e <z_timeout_remaining>
 80061e4:	ea50 0301 	orrs.w	r3, r0, r1
 80061e8:	d1bc      	bne.n	8006164 <tcp_send_process_no_lock+0x54>
			conn->send_retries = tcp_retries;
 80061ea:	2309      	movs	r3, #9
 80061ec:	f8c5 319c 	str.w	r3, [r5, #412]	; 0x19c
			conn->in_retransmission = true;
 80061f0:	f895 31b9 	ldrb.w	r3, [r5, #441]	; 0x1b9
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	f885 31b9 	strb.w	r3, [r5, #441]	; 0x1b9
 80061fc:	e7b2      	b.n	8006164 <tcp_send_process_no_lock+0x54>
			unref = true;
 80061fe:	2001      	movs	r0, #1
 8006200:	e7df      	b.n	80061c2 <tcp_send_process_no_lock+0xb2>
 8006202:	bf00      	nop
 8006204:	20000c38 	.word	0x20000c38

08006208 <tcp_send_timer_cancel>:
	if (conn->in_retransmission == false) {
 8006208:	f890 31b9 	ldrb.w	r3, [r0, #441]	; 0x1b9
 800620c:	07db      	lsls	r3, r3, #31
{
 800620e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006212:	4604      	mov	r4, r0
	if (conn->in_retransmission == false) {
 8006214:	d524      	bpl.n	8006260 <tcp_send_timer_cancel+0x58>
	k_work_cancel_delayable(&conn->send_timer);
 8006216:	f100 0678 	add.w	r6, r0, #120	; 0x78
 800621a:	4630      	mov	r0, r6
		struct net_pkt *pkt = tcp_slist(conn, &conn->send_queue, get,
 800621c:	f104 0724 	add.w	r7, r4, #36	; 0x24
	k_work_cancel_delayable(&conn->send_timer);
 8006220:	f00d ffda 	bl	80141d8 <k_work_cancel_delayable>
		struct net_pkt *pkt = tcp_slist(conn, &conn->send_queue, get,
 8006224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800622c:	4638      	mov	r0, r7
 800622e:	f00c f97b 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
 8006232:	f104 0018 	add.w	r0, r4, #24
 8006236:	f00c f968 	bl	801250a <sys_slist_get>
 800623a:	4605      	mov	r5, r0
 800623c:	b108      	cbz	r0, 8006242 <tcp_send_timer_cancel+0x3a>
 800623e:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 8006242:	4638      	mov	r0, r7
 8006244:	f00c fa4d 	bl	80126e2 <k_mutex_unlock.isra.0>
		if (pkt) {
 8006248:	b115      	cbz	r5, 8006250 <tcp_send_timer_cancel+0x48>
			tcp_pkt_unref(pkt);
 800624a:	4628      	mov	r0, r5
 800624c:	f00b fbd2 	bl	80119f4 <net_pkt_unref>
	if (sys_slist_is_empty(&conn->send_queue)) {
 8006250:	69a2      	ldr	r2, [r4, #24]
 8006252:	b93a      	cbnz	r2, 8006264 <tcp_send_timer_cancel+0x5c>
		conn->in_retransmission = false;
 8006254:	f894 31b9 	ldrb.w	r3, [r4, #441]	; 0x1b9
 8006258:	f362 0300 	bfi	r3, r2, #0, #1
 800625c:	f884 31b9 	strb.w	r3, [r4, #441]	; 0x1b9
}
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->send_retries = tcp_retries;
 8006264:	2309      	movs	r3, #9
 8006266:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
 800626a:	4631      	mov	r1, r6
 800626c:	4803      	ldr	r0, [pc, #12]	; (800627c <tcp_send_timer_cancel+0x74>)
}
 800626e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
 8006272:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006276:	2300      	movs	r3, #0
 8006278:	f006 bb4c 	b.w	800c914 <k_work_reschedule_for_queue>
 800627c:	20000c38 	.word	0x20000c38

08006280 <tcp_conn_unref>:
{
 8006280:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006282:	9003      	str	r0, [sp, #12]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8006284:	f3bf 8f5b 	dmb	ish
 8006288:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800628c:	f3bf 8f5b 	dmb	ish
	if (conn->in_connect) {
 8006290:	9803      	ldr	r0, [sp, #12]
 8006292:	f890 31b9 	ldrb.w	r3, [r0, #441]	; 0x1b9
 8006296:	079b      	lsls	r3, r3, #30
 8006298:	d504      	bpl.n	80062a4 <tcp_conn_unref+0x24>
		tcp_send_queue_flush(conn);
 800629a:	f00c fa3d 	bl	8012718 <tcp_send_queue_flush>
}
 800629e:	4628      	mov	r0, r5
 80062a0:	b004      	add	sp, #16
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80062a4:	f500 70d2 	add.w	r0, r0, #420	; 0x1a4
 80062a8:	f3bf 8f5b 	dmb	ish
 80062ac:	e850 5f00 	ldrex	r5, [r0]
 80062b0:	1e6b      	subs	r3, r5, #1
 80062b2:	e840 3200 	strex	r2, r3, [r0]
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	d1f8      	bne.n	80062ac <tcp_conn_unref+0x2c>
 80062ba:	f3bf 8f5b 	dmb	ish
	if (ref_count != 0) {
 80062be:	3d01      	subs	r5, #1
 80062c0:	d1ed      	bne.n	800629e <tcp_conn_unref+0x1e>
	k_mutex_lock(&tcp_lock, K_FOREVER);
 80062c2:	483b      	ldr	r0, [pc, #236]	; (80063b0 <tcp_conn_unref+0x130>)
 80062c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062cc:	f00c f92c 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	while ((pkt = k_fifo_get(&conn->recv_data, K_NO_WAIT)) != NULL) {
 80062d0:	9803      	ldr	r0, [sp, #12]
 80062d2:	3050      	adds	r0, #80	; 0x50
	return z_impl_k_queue_get(queue, timeout);
 80062d4:	2300      	movs	r3, #0
 80062d6:	2200      	movs	r2, #0
 80062d8:	f006 f92e 	bl	800c538 <z_impl_k_queue_get>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	4604      	mov	r4, r0
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d14d      	bne.n	8006380 <tcp_conn_unref+0x100>
	if (conn->context->conn_handler) {
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062e8:	b120      	cbz	r0, 80062f4 <tcp_conn_unref+0x74>
		net_conn_unregister(conn->context->conn_handler);
 80062ea:	f7ff fd41 	bl	8005d70 <net_conn_unregister>
		conn->context->conn_handler = NULL;
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	62dc      	str	r4, [r3, #44]	; 0x2c
	if (conn->context->recv_cb) {
 80062f4:	9b03      	ldr	r3, [sp, #12]
 80062f6:	6858      	ldr	r0, [r3, #4]
 80062f8:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80062fa:	b146      	cbz	r6, 800630e <tcp_conn_unref+0x8e>
		conn->context->recv_cb(conn->context, NULL, NULL, NULL,
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	2300      	movs	r3, #0
 8006308:	461a      	mov	r2, r3
 800630a:	4619      	mov	r1, r3
 800630c:	47b0      	blx	r6
	conn->context->tcp = NULL;
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	6858      	ldr	r0, [r3, #4]
 8006312:	2300      	movs	r3, #0
 8006314:	63c3      	str	r3, [r0, #60]	; 0x3c
	net_context_unref(conn->context);
 8006316:	f00a fe58 	bl	8010fca <net_context_unref>
	tcp_send_queue_flush(conn);
 800631a:	9803      	ldr	r0, [sp, #12]
 800631c:	f00c f9fc 	bl	8012718 <tcp_send_queue_flush>
	k_work_cancel_delayable(&conn->send_data_timer);
 8006320:	9803      	ldr	r0, [sp, #12]
 8006322:	30d8      	adds	r0, #216	; 0xd8
 8006324:	f00d ff58 	bl	80141d8 <k_work_cancel_delayable>
	tcp_pkt_unref(conn->send_data);
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	6898      	ldr	r0, [r3, #8]
 800632c:	f00b fb62 	bl	80119f4 <net_pkt_unref>
		tcp_pkt_unref(conn->queue_recv_data);
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	68d8      	ldr	r0, [r3, #12]
 8006334:	f00b fb5e 	bl	80119f4 <net_pkt_unref>
	k_work_cancel_delayable(&conn->timewait_timer);
 8006338:	9803      	ldr	r0, [sp, #12]
 800633a:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800633e:	f00d ff4b 	bl	80141d8 <k_work_cancel_delayable>
	k_work_cancel_delayable(&conn->fin_timer);
 8006342:	9803      	ldr	r0, [sp, #12]
 8006344:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8006348:	f00d ff46 	bl	80141d8 <k_work_cancel_delayable>
 800634c:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <tcp_conn_unref+0x134>)
	sys_slist_find_and_remove(&tcp_conns, &conn->next);
 800634e:	9803      	ldr	r0, [sp, #12]
 8006350:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006352:	b143      	cbz	r3, 8006366 <tcp_conn_unref+0xe6>
 8006354:	4298      	cmp	r0, r3
 8006356:	d127      	bne.n	80063a8 <tcp_conn_unref+0x128>
	return node->next;
 8006358:	6803      	ldr	r3, [r0, #0]
	return list->tail;
 800635a:	6851      	ldr	r1, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
 800635c:	b9fc      	cbnz	r4, 800639e <tcp_conn_unref+0x11e>
 800635e:	4288      	cmp	r0, r1
	list->head = node;
 8006360:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 8006362:	d100      	bne.n	8006366 <tcp_conn_unref+0xe6>
	list->tail = node;
 8006364:	6053      	str	r3, [r2, #4]
__ssp_bos_icheck3(memset, void *, int)
 8006366:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800636a:	2100      	movs	r1, #0
 800636c:	f00e fa59 	bl	8014822 <memset>
	k_mem_slab_free(&tcp_conns_slab, (void **)&conn);
 8006370:	4811      	ldr	r0, [pc, #68]	; (80063b8 <tcp_conn_unref+0x138>)
 8006372:	a903      	add	r1, sp, #12
 8006374:	f00d fd51 	bl	8013e1a <k_mem_slab_free>
	k_mutex_unlock(&tcp_lock);
 8006378:	480d      	ldr	r0, [pc, #52]	; (80063b0 <tcp_conn_unref+0x130>)
 800637a:	f00c f9b2 	bl	80126e2 <k_mutex_unlock.isra.0>
 800637e:	e78e      	b.n	800629e <tcp_conn_unref+0x1e>
			    (struct net_conn *)conn->context->conn_handler,
 8006380:	6858      	ldr	r0, [r3, #4]
		if (net_context_packet_received(
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	2300      	movs	r3, #0
 8006388:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800638a:	461a      	mov	r2, r3
 800638c:	4621      	mov	r1, r4
 800638e:	f7fe fe01 	bl	8004f94 <net_context_packet_received>
 8006392:	2802      	cmp	r0, #2
 8006394:	d19c      	bne.n	80062d0 <tcp_conn_unref+0x50>
			tcp_pkt_unref(pkt);
 8006396:	4620      	mov	r0, r4
 8006398:	f00b fb2c 	bl	80119f4 <net_pkt_unref>
 800639c:	e798      	b.n	80062d0 <tcp_conn_unref+0x50>
Z_GENLIST_REMOVE(slist, snode)
 800639e:	4288      	cmp	r0, r1
	parent->next = child;
 80063a0:	6023      	str	r3, [r4, #0]
	list->tail = node;
 80063a2:	bf08      	it	eq
 80063a4:	6054      	streq	r4, [r2, #4]
}
 80063a6:	e7de      	b.n	8006366 <tcp_conn_unref+0xe6>
	return node->next;
 80063a8:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	e7d1      	b.n	8006352 <tcp_conn_unref+0xd2>
 80063ae:	bf00      	nop
 80063b0:	2000048c 	.word	0x2000048c
 80063b4:	200023cc 	.word	0x200023cc
 80063b8:	200003dc 	.word	0x200003dc

080063bc <tcp_data_get>:
	if (tcp_recv_cb) {
 80063bc:	4b2c      	ldr	r3, [pc, #176]	; (8006470 <tcp_data_get+0xb4>)
{
 80063be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tcp_recv_cb) {
 80063c2:	f8d3 8000 	ldr.w	r8, [r3]
{
 80063c6:	4605      	mov	r5, r0
 80063c8:	4616      	mov	r6, r2
	if (tcp_recv_cb) {
 80063ca:	f1b8 0f00 	cmp.w	r8, #0
 80063ce:	d002      	beq.n	80063d6 <tcp_data_get+0x1a>
		tcp_recv_cb(conn, pkt);
 80063d0:	47c0      	blx	r8
	int ret = 0;
 80063d2:	2000      	movs	r0, #0
 80063d4:	e00c      	b.n	80063f0 <tcp_data_get+0x34>
	if (conn->context->recv_cb) {
 80063d6:	6843      	ldr	r3, [r0, #4]
 80063d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063da:	b148      	cbz	r0, 80063f0 <tcp_data_get+0x34>
		struct net_pkt *up = tcp_pkt_clone(pkt);
 80063dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063e0:	2300      	movs	r3, #0
 80063e2:	4608      	mov	r0, r1
 80063e4:	f00b fcc5 	bl	8011d72 <net_pkt_clone>
		if (!up) {
 80063e8:	4604      	mov	r4, r0
 80063ea:	b918      	cbnz	r0, 80063f4 <tcp_data_get+0x38>
			ret = -ENOBUFS;
 80063ec:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 80063f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT &&
 80063f4:	68eb      	ldr	r3, [r5, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 80063f8:	b9d3      	cbnz	r3, 8006430 <tcp_data_get+0x74>
	size_t pending_len = 0;
 80063fa:	2700      	movs	r7, #0
		*len += tcp_check_pending_data(conn, up, *len);
 80063fc:	6830      	ldr	r0, [r6, #0]
 80063fe:	4438      	add	r0, r7
 8006400:	6030      	str	r0, [r6, #0]
		net_pkt_cursor_init(up);
 8006402:	4620      	mov	r0, r4
 8006404:	f00b fb66 	bl	8011ad4 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
 8006408:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
		net_pkt_skip(up, net_pkt_get_len(up) - *len);
 800640c:	68a0      	ldr	r0, [r4, #8]
 800640e:	f043 0301 	orr.w	r3, r3, #1
 8006412:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8006416:	f00c f889 	bl	801252c <net_pkt_get_len.isra.0>
 800641a:	6831      	ldr	r1, [r6, #0]
 800641c:	1a41      	subs	r1, r0, r1
 800641e:	4620      	mov	r0, r4
 8006420:	f00b fbbd 	bl	8011b9e <net_pkt_skip>
		k_fifo_put(&conn->recv_data, up);
 8006424:	4621      	mov	r1, r4
 8006426:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800642a:	f00d fdf4 	bl	8014016 <k_queue_append>
 800642e:	e7d0      	b.n	80063d2 <tcp_data_get+0x16>
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	2a00      	cmp	r2, #0
 8006434:	d0e1      	beq.n	80063fa <tcp_data_get+0x3e>
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT &&
 8006436:	899b      	ldrh	r3, [r3, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0de      	beq.n	80063fa <tcp_data_get+0x3e>
		*len += tcp_check_pending_data(conn, up, *len);
 800643c:	6837      	ldr	r7, [r6, #0]
		struct tcphdr *th = th_get(pkt);
 800643e:	f00c f89c 	bl	801257a <th_get>
		pending_seq = tcp_get_seq(conn->queue_recv_data->buffer);
 8006442:	68ea      	ldr	r2, [r5, #12]
 8006444:	6843      	ldr	r3, [r0, #4]
 8006446:	6891      	ldr	r1, [r2, #8]
 8006448:	ba1b      	rev	r3, r3
		uint32_t expected_seq = th_seq(th) + len;
 800644a:	441f      	add	r7, r3
		if (pending_seq == expected_seq) {
 800644c:	694b      	ldr	r3, [r1, #20]
 800644e:	429f      	cmp	r7, r3
 8006450:	d1d3      	bne.n	80063fa <tcp_data_get+0x3e>
			pending_len = net_pkt_get_len(conn->queue_recv_data);
 8006452:	4608      	mov	r0, r1
 8006454:	f00c f86a 	bl	801252c <net_pkt_get_len.isra.0>
 8006458:	4607      	mov	r7, r0
			net_buf_frag_add(pkt->buffer,
 800645a:	68a0      	ldr	r0, [r4, #8]
 800645c:	f00a f892 	bl	8010584 <net_buf_frag_add>
			conn->queue_recv_data->buffer = NULL;
 8006460:	68eb      	ldr	r3, [r5, #12]
			k_work_cancel_delayable(&conn->recv_queue_timer);
 8006462:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
			conn->queue_recv_data->buffer = NULL;
 8006466:	f8c3 8008 	str.w	r8, [r3, #8]
			k_work_cancel_delayable(&conn->recv_queue_timer);
 800646a:	f00d feb5 	bl	80141d8 <k_work_cancel_delayable>
 800646e:	e7c5      	b.n	80063fc <tcp_data_get+0x40>
 8006470:	200023d4 	.word	0x200023d4

08006474 <net_tcp_get>:
{
 8006474:	b537      	push	{r0, r1, r2, r4, r5, lr}
	k_mutex_lock(&tcp_lock, K_FOREVER);
 8006476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800647a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
 800647e:	4605      	mov	r5, r0
	k_mutex_lock(&tcp_lock, K_FOREVER);
 8006480:	4849      	ldr	r0, [pc, #292]	; (80065a8 <net_tcp_get+0x134>)
 8006482:	f00c f851 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	struct tcp *conn = NULL;
 8006486:	2300      	movs	r3, #0
 8006488:	9301      	str	r3, [sp, #4]
	ret = k_mem_slab_alloc(&tcp_conns_slab, (void **)&conn, K_NO_WAIT);
 800648a:	4848      	ldr	r0, [pc, #288]	; (80065ac <net_tcp_get+0x138>)
 800648c:	2200      	movs	r2, #0
 800648e:	2300      	movs	r3, #0
 8006490:	a901      	add	r1, sp, #4
 8006492:	f005 fe07 	bl	800c0a4 <k_mem_slab_alloc>
	if (ret) {
 8006496:	4604      	mov	r4, r0
 8006498:	2800      	cmp	r0, #0
 800649a:	d167      	bne.n	800656c <net_tcp_get+0xf8>
 800649c:	4601      	mov	r1, r0
 800649e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80064a2:	9801      	ldr	r0, [sp, #4]
 80064a4:	f00e f9bd 	bl	8014822 <memset>
		conn->queue_recv_data = tcp_rx_pkt_alloc(conn, 0);
 80064a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064ac:	2100      	movs	r1, #0
 80064ae:	f7ff f86b 	bl	8005588 <net_pkt_rx_alloc>
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	60d8      	str	r0, [r3, #12]
		if (conn->queue_recv_data == NULL) {
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d060      	beq.n	800657c <net_tcp_get+0x108>
	conn->send_data = tcp_pkt_alloc(conn, 0);
 80064ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064be:	2100      	movs	r1, #0
 80064c0:	f7ff f85a 	bl	8005578 <net_pkt_alloc>
 80064c4:	9b01      	ldr	r3, [sp, #4]
 80064c6:	6098      	str	r0, [r3, #8]
	if (conn->send_data == NULL) {
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d057      	beq.n	800657c <net_tcp_get+0x108>
	return z_impl_k_mutex_init(mutex);
 80064cc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80064d0:	f00d fcfc 	bl	8013ecc <z_impl_k_mutex_init>
	k_fifo_init(&conn->recv_data);
 80064d4:	9801      	ldr	r0, [sp, #4]
 80064d6:	3050      	adds	r0, #80	; 0x50
	z_impl_k_queue_init(queue);
 80064d8:	f00d fd70 	bl	8013fbc <z_impl_k_queue_init>
	k_sem_init(&conn->connect_sem, 0, K_SEM_MAX_LIMIT);
 80064dc:	9801      	ldr	r0, [sp, #4]
 80064de:	3038      	adds	r0, #56	; 0x38
	return z_impl_k_sem_init(sem, initial_count, limit);
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e4:	4621      	mov	r1, r4
 80064e6:	f00d fdb3 	bl	8014050 <z_impl_k_sem_init>
	conn->in_connect = false;
 80064ea:	9801      	ldr	r0, [sp, #4]
	k_work_init_delayable(&conn->send_timer, tcp_send_process);
 80064ec:	4930      	ldr	r1, [pc, #192]	; (80065b0 <net_tcp_get+0x13c>)
	conn->in_connect = false;
 80064ee:	f890 21b9 	ldrb.w	r2, [r0, #441]	; 0x1b9
	conn->seq = 0U;
 80064f2:	f8c0 41ac 	str.w	r4, [r0, #428]	; 0x1ac
	conn->in_connect = false;
 80064f6:	f364 0241 	bfi	r2, r4, #1, #1
 80064fa:	f880 21b9 	strb.w	r2, [r0, #441]	; 0x1b9
	conn->state = TCP_LISTEN;
 80064fe:	2201      	movs	r2, #1
 8006500:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
	conn->recv_win = tcp_window;
 8006504:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006508:	f8a0 21b4 	strh.w	r2, [r0, #436]	; 0x1b4
	list->tail = NULL;
 800650c:	e9c0 4406 	strd	r4, r4, [r0, #24]
	k_work_init_delayable(&conn->send_timer, tcp_send_process);
 8006510:	3078      	adds	r0, #120	; 0x78
 8006512:	f00d fe53 	bl	80141bc <k_work_init_delayable>
	k_work_init_delayable(&conn->timewait_timer, tcp_timewait_timeout);
 8006516:	9801      	ldr	r0, [sp, #4]
 8006518:	4926      	ldr	r1, [pc, #152]	; (80065b4 <net_tcp_get+0x140>)
 800651a:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800651e:	f00d fe4d 	bl	80141bc <k_work_init_delayable>
	k_work_init_delayable(&conn->fin_timer, tcp_fin_timeout);
 8006522:	9801      	ldr	r0, [sp, #4]
 8006524:	4924      	ldr	r1, [pc, #144]	; (80065b8 <net_tcp_get+0x144>)
 8006526:	f500 709c 	add.w	r0, r0, #312	; 0x138
 800652a:	f00d fe47 	bl	80141bc <k_work_init_delayable>
	k_work_init_delayable(&conn->send_data_timer, tcp_resend_data);
 800652e:	9801      	ldr	r0, [sp, #4]
 8006530:	4922      	ldr	r1, [pc, #136]	; (80065bc <net_tcp_get+0x148>)
 8006532:	30d8      	adds	r0, #216	; 0xd8
 8006534:	f00d fe42 	bl	80141bc <k_work_init_delayable>
	k_work_init_delayable(&conn->recv_queue_timer, tcp_cleanup_recv_queue);
 8006538:	9801      	ldr	r0, [sp, #4]
 800653a:	4921      	ldr	r1, [pc, #132]	; (80065c0 <net_tcp_get+0x14c>)
 800653c:	30a8      	adds	r0, #168	; 0xa8
 800653e:	f00d fe3d 	bl	80141bc <k_work_init_delayable>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8006542:	9b01      	ldr	r3, [sp, #4]
 8006544:	f3bf 8f5b 	dmb	ish
 8006548:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800654c:	e853 2f00 	ldrex	r2, [r3]
 8006550:	3201      	adds	r2, #1
 8006552:	e843 2100 	strex	r1, r2, [r3]
 8006556:	2900      	cmp	r1, #0
 8006558:	d1f8      	bne.n	800654c <net_tcp_get+0xd8>
 800655a:	f3bf 8f5b 	dmb	ish
	return list->tail;
 800655e:	4a19      	ldr	r2, [pc, #100]	; (80065c4 <net_tcp_get+0x150>)
	sys_slist_append(&tcp_conns, &conn->next);
 8006560:	9b01      	ldr	r3, [sp, #4]
 8006562:	6851      	ldr	r1, [r2, #4]
	parent->next = child;
 8006564:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
 8006566:	b931      	cbnz	r1, 8006576 <net_tcp_get+0x102>
	list->head = node;
 8006568:	e9c2 3300 	strd	r3, r3, [r2]
	return conn;
 800656c:	9b01      	ldr	r3, [sp, #4]
	if (conn == NULL) {
 800656e:	b993      	cbnz	r3, 8006596 <net_tcp_get+0x122>
		ret = -ENOMEM;
 8006570:	f06f 040b 	mvn.w	r4, #11
 8006574:	e012      	b.n	800659c <net_tcp_get+0x128>
	parent->next = child;
 8006576:	600b      	str	r3, [r1, #0]
	list->tail = node;
 8006578:	6053      	str	r3, [r2, #4]
}
 800657a:	e7f7      	b.n	800656c <net_tcp_get+0xf8>
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT && conn->queue_recv_data) {
 800657c:	9b01      	ldr	r3, [sp, #4]
 800657e:	68d8      	ldr	r0, [r3, #12]
 8006580:	b120      	cbz	r0, 800658c <net_tcp_get+0x118>
		tcp_pkt_unref(conn->queue_recv_data);
 8006582:	f00b fa37 	bl	80119f4 <net_pkt_unref>
		conn->queue_recv_data = NULL;
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	60da      	str	r2, [r3, #12]
	k_mem_slab_free(&tcp_conns_slab, (void **)&conn);
 800658c:	4807      	ldr	r0, [pc, #28]	; (80065ac <net_tcp_get+0x138>)
 800658e:	a901      	add	r1, sp, #4
 8006590:	f00d fc43 	bl	8013e1a <k_mem_slab_free>
	if (conn == NULL) {
 8006594:	e7ec      	b.n	8006570 <net_tcp_get+0xfc>
	conn->context = context;
 8006596:	605d      	str	r5, [r3, #4]
	int ret = 0;
 8006598:	2400      	movs	r4, #0
	context->tcp = conn;
 800659a:	63eb      	str	r3, [r5, #60]	; 0x3c
	k_mutex_unlock(&tcp_lock);
 800659c:	4802      	ldr	r0, [pc, #8]	; (80065a8 <net_tcp_get+0x134>)
 800659e:	f00c f8a0 	bl	80126e2 <k_mutex_unlock.isra.0>
}
 80065a2:	4620      	mov	r0, r4
 80065a4:	b003      	add	sp, #12
 80065a6:	bd30      	pop	{r4, r5, pc}
 80065a8:	2000048c 	.word	0x2000048c
 80065ac:	200003dc 	.word	0x200003dc
 80065b0:	0801276f 	.word	0x0801276f
 80065b4:	0801251f 	.word	0x0801251f
 80065b8:	08012757 	.word	0x08012757
 80065bc:	08006a41 	.word	0x08006a41
 80065c0:	080126e7 	.word	0x080126e7
 80065c4:	200023cc 	.word	0x200023cc

080065c8 <net_tcp_accept>:
	return ret;
}

int net_tcp_accept(struct net_context *context, net_tcp_accept_cb_t cb,
		   void *user_data)
{
 80065c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct tcp *conn = context->tcp;
 80065ca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 80065cc:	b08d      	sub	sp, #52	; 0x34
 80065ce:	4617      	mov	r7, r2
	struct sockaddr local_addr = { };
 80065d0:	2200      	movs	r2, #0
 80065d2:	e9cd 2206 	strd	r2, r2, [sp, #24]
{
 80065d6:	4604      	mov	r4, r0
	uint16_t local_port, remote_port;

	if (!conn) {
 80065d8:	b173      	cbz	r3, 80065f8 <net_tcp_accept+0x30>
		return -EINVAL;
	}

	NET_DBG("context: %p, tcp: %p, cb: %p", context, conn, cb);

	if (conn->state != TCP_LISTEN) {
 80065da:	f893 21a8 	ldrb.w	r2, [r3, #424]	; 0x1a8
 80065de:	2a01      	cmp	r2, #1
 80065e0:	d10a      	bne.n	80065f8 <net_tcp_accept+0x30>
		return -EINVAL;
	}

	conn->accept_cb = cb;
 80065e2:	6219      	str	r1, [r3, #32]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 80065e4:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 80065e8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	local_addr.sa_family = net_context_get_family(context);

	switch (local_addr.sa_family) {
 80065ec:	2b01      	cmp	r3, #1
	local_addr.sa_family = net_context_get_family(context);
 80065ee:	f8ad 3018 	strh.w	r3, [sp, #24]
	switch (local_addr.sa_family) {
 80065f2:	d004      	beq.n	80065fe <net_tcp_accept+0x36>
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d02b      	beq.n	8006650 <net_tcp_accept+0x88>
		return -EINVAL;
 80065f8:	f06f 0015 	mvn.w	r0, #21
 80065fc:	e026      	b.n	800664c <net_tcp_accept+0x84>
		struct sockaddr_in6 *in6;

	case AF_INET:
		in = (struct sockaddr_in *)&local_addr;

		if (net_sin_ptr(&context->local)->sin_addr) {
 80065fe:	6a03      	ldr	r3, [r0, #32]
 8006600:	b10b      	cbz	r3, 8006606 <net_tcp_accept+0x3e>
			net_ipaddr_copy(&in->sin_addr,
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	9307      	str	r3, [sp, #28]
	return (struct sockaddr_in6 *)addr;
 8006606:	8be3      	ldrh	r3, [r4, #30]
 8006608:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
	context->user_data = user_data;

	/* Remove the temporary connection handler and register
	 * a proper now as we have an established connection.
	 */
	net_conn_unregister(context->conn_handler);
 800660a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	context->user_data = user_data;
 800660c:	6027      	str	r7, [r4, #0]
 800660e:	ba5e      	rev16	r6, r3
		in6->sin6_port =
 8006610:	f8ad 301a 	strh.w	r3, [sp, #26]
	net_conn_unregister(context->conn_handler);
 8006614:	f7ff fbac 	bl	8005d70 <net_conn_unregister>

	return net_conn_register(net_context_get_ip_proto(context),
 8006618:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 800661c:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
	return context->proto;
 8006620:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8006624:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8006628:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800662c:	ba6d      	rev16	r5, r5
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <net_tcp_accept+0xb0>)
 8006630:	b2b6      	uxth	r6, r6
 8006632:	b2ad      	uxth	r5, r5
 8006634:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8006638:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800663c:	e9cd 5600 	strd	r5, r6, [sp]
 8006640:	bf18      	it	ne
 8006642:	f104 0224 	addne.w	r2, r4, #36	; 0x24
 8006646:	ab06      	add	r3, sp, #24
 8006648:	f7ff fad6 	bl	8005bf8 <net_conn_register>
				 &context->remote : NULL,
				 &local_addr,
				 remote_port, local_port,
				 context, tcp_recv, context,
				 &context->conn_handler);
}
 800664c:	b00d      	add	sp, #52	; 0x34
 800664e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (net_sin6_ptr(&context->local)->sin6_addr) {
 8006650:	6a03      	ldr	r3, [r0, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0d7      	beq.n	8006606 <net_tcp_accept+0x3e>
			net_ipaddr_copy(&in6->sin6_addr,
 8006656:	ad08      	add	r5, sp, #32
 8006658:	f103 0c10 	add.w	ip, r3, #16
 800665c:	462a      	mov	r2, r5
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
 8006662:	462e      	mov	r6, r5
 8006664:	c603      	stmia	r6!, {r0, r1}
 8006666:	3308      	adds	r3, #8
 8006668:	4563      	cmp	r3, ip
 800666a:	4635      	mov	r5, r6
 800666c:	d1f7      	bne.n	800665e <net_tcp_accept+0x96>
 800666e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8006670:	ad07      	add	r5, sp, #28
 8006672:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006676:	e7c6      	b.n	8006606 <net_tcp_accept+0x3e>
 8006678:	08007521 	.word	0x08007521

0800667c <net_tcp_foreach>:
	}
}
#endif /* CONFIG_NET_TEST_PROTOCOL */

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
 800667c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct tcp *conn;
	struct tcp *tmp;

	k_mutex_lock(&tcp_lock, K_FOREVER);
 8006680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8006684:	4606      	mov	r6, r0
	k_mutex_lock(&tcp_lock, K_FOREVER);
 8006686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800668a:	4814      	ldr	r0, [pc, #80]	; (80066dc <net_tcp_foreach+0x60>)
{
 800668c:	460f      	mov	r7, r1
	k_mutex_lock(&tcp_lock, K_FOREVER);
 800668e:	f00b ff4b 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8006692:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <net_tcp_foreach+0x64>)
 8006694:	681c      	ldr	r4, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
 8006696:	b924      	cbnz	r4, 80066a2 <net_tcp_foreach+0x26>
			k_mutex_lock(&tcp_lock, K_FOREVER);
		}
	}

	k_mutex_unlock(&tcp_lock);
}
 8006698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&tcp_lock);
 800669c:	480f      	ldr	r0, [pc, #60]	; (80066dc <net_tcp_foreach+0x60>)
 800669e:	f00c b820 	b.w	80126e2 <k_mutex_unlock.isra.0>
	return node->next;
 80066a2:	6825      	ldr	r5, [r4, #0]
			k_mutex_unlock(&tcp_lock);
 80066a4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80066dc <net_tcp_foreach+0x60>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80066a8:	f3bf 8f5b 	dmb	ish
 80066ac:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 80066b0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&conn->ref_count) > 0) {
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dd0c      	ble.n	80066d2 <net_tcp_foreach+0x56>
			k_mutex_unlock(&tcp_lock);
 80066b8:	4640      	mov	r0, r8
 80066ba:	f00c f812 	bl	80126e2 <k_mutex_unlock.isra.0>
			cb(conn, user_data);
 80066be:	4620      	mov	r0, r4
 80066c0:	4639      	mov	r1, r7
 80066c2:	47b0      	blx	r6
			k_mutex_lock(&tcp_lock, K_FOREVER);
 80066c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066cc:	4640      	mov	r0, r8
 80066ce:	f00b ff2b 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
 80066d2:	2d00      	cmp	r5, #0
 80066d4:	d0e0      	beq.n	8006698 <net_tcp_foreach+0x1c>
 80066d6:	462c      	mov	r4, r5
 80066d8:	682d      	ldr	r5, [r5, #0]
 80066da:	e7e5      	b.n	80066a8 <net_tcp_foreach+0x2c>
 80066dc:	2000048c 	.word	0x2000048c
 80066e0:	200023cc 	.word	0x200023cc

080066e4 <tcp_out_ext>:
{
 80066e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	4698      	mov	r8, r3
	if (conn->send_options.mss_found) {
 80066ea:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
		alloc_len += sizeof(uint32_t);
 80066ee:	f013 0f01 	tst.w	r3, #1
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 80066f2:	6843      	ldr	r3, [r0, #4]
{
 80066f4:	4604      	mov	r4, r0
 80066f6:	4615      	mov	r5, r2
 80066f8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80066fc:	b08b      	sub	sp, #44	; 0x2c
	pkt = tcp_pkt_alloc(conn, alloc_len);
 80066fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
{
 8006702:	4689      	mov	r9, r1
	pkt = tcp_pkt_alloc(conn, alloc_len);
 8006704:	f04f 0100 	mov.w	r1, #0
 8006708:	e9cd 0100 	strd	r0, r1, [sp]
 800670c:	f04f 0306 	mov.w	r3, #6
 8006710:	6920      	ldr	r0, [r4, #16]
 8006712:	f3c2 02c2 	ubfx	r2, r2, #3, #3
 8006716:	bf0c      	ite	eq
 8006718:	2114      	moveq	r1, #20
 800671a:	2118      	movne	r1, #24
 800671c:	f7fe ffee 	bl	80056fc <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8006720:	4606      	mov	r6, r0
 8006722:	2800      	cmp	r0, #0
 8006724:	f000 80d8 	beq.w	80068d8 <tcp_out_ext+0x1f4>
	if (data) {
 8006728:	b125      	cbz	r5, 8006734 <tcp_out_ext+0x50>
		net_pkt_append_buffer(pkt, data->buffer);
 800672a:	68a9      	ldr	r1, [r5, #8]
 800672c:	f00b f9e7 	bl	8011afe <net_pkt_append_buffer>
		data->buffer = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	60ab      	str	r3, [r5, #8]
	return pkt->family;
 8006734:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 8006738:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800673c:	2b01      	cmp	r3, #1
 800673e:	f040 808c 	bne.w	800685a <tcp_out_ext+0x176>
		return net_context_create_ipv4_new(conn->context, pkt,
 8006742:	6860      	ldr	r0, [r4, #4]
 8006744:	f504 73c2 	add.w	r3, r4, #388	; 0x184
 8006748:	f504 72b6 	add.w	r2, r4, #364	; 0x16c
 800674c:	4631      	mov	r1, r6
 800674e:	f00a fd36 	bl	80111be <net_context_create_ipv4_new>
	if (ret < 0) {
 8006752:	1e05      	subs	r5, r0, #0
 8006754:	da06      	bge.n	8006764 <tcp_out_ext+0x80>
		tcp_pkt_unref(pkt);
 8006756:	4630      	mov	r0, r6
 8006758:	f00b f94c 	bl	80119f4 <net_pkt_unref>
}
 800675c:	4628      	mov	r0, r5
 800675e:	b00b      	add	sp, #44	; 0x2c
 8006760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	th = (struct tcphdr *)net_pkt_get_data(pkt, &tcp_access);
 8006764:	f10d 0a0c 	add.w	sl, sp, #12
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct tcphdr);
 8006768:	af05      	add	r7, sp, #20
 800676a:	f04f 0b14 	mov.w	fp, #20
	th = (struct tcphdr *)net_pkt_get_data(pkt, &tcp_access);
 800676e:	4651      	mov	r1, sl
 8006770:	4630      	mov	r0, r6
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct tcphdr);
 8006772:	9703      	str	r7, [sp, #12]
 8006774:	f8cd b010 	str.w	fp, [sp, #16]
	th = (struct tcphdr *)net_pkt_get_data(pkt, &tcp_access);
 8006778:	f00b fbb0 	bl	8011edc <net_pkt_get_data>
	if (!th) {
 800677c:	4605      	mov	r5, r0
 800677e:	b910      	cbnz	r0, 8006786 <tcp_out_ext+0xa2>
		return -ENOBUFS;
 8006780:	f06f 0568 	mvn.w	r5, #104	; 0x68
 8006784:	e7e7      	b.n	8006756 <tcp_out_ext+0x72>
 8006786:	465a      	mov	r2, fp
 8006788:	2100      	movs	r1, #0
 800678a:	f00e f84a 	bl	8014822 <memset>
	UNALIGNED_PUT(conn->src.sin.sin_port, &th->th_sport);
 800678e:	f8b4 316a 	ldrh.w	r3, [r4, #362]	; 0x16a
 8006792:	802b      	strh	r3, [r5, #0]
	UNALIGNED_PUT(conn->dst.sin.sin_port, &th->th_dport);
 8006794:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
 8006798:	806b      	strh	r3, [r5, #2]
	th->th_off = 5;
 800679a:	7b2b      	ldrb	r3, [r5, #12]
 800679c:	2205      	movs	r2, #5
 800679e:	f362 1307 	bfi	r3, r2, #4, #4
 80067a2:	732b      	strb	r3, [r5, #12]
	if (conn->send_options.mss_found) {
 80067a4:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	UNALIGNED_PUT(flags, &th->th_flags);
 80067a8:	f885 900d 	strb.w	r9, [r5, #13]
	if (conn->send_options.mss_found) {
 80067ac:	07da      	lsls	r2, r3, #31
		th->th_off++;
 80067ae:	bf41      	itttt	mi
 80067b0:	7b2b      	ldrbmi	r3, [r5, #12]
 80067b2:	2206      	movmi	r2, #6
 80067b4:	f362 1307 	bfimi	r3, r2, #4, #4
 80067b8:	732b      	strbmi	r3, [r5, #12]
	UNALIGNED_PUT(htons(conn->recv_win), &th->th_win);
 80067ba:	f8b4 31b4 	ldrh.w	r3, [r4, #436]	; 0x1b4
 80067be:	ba5b      	rev16	r3, r3
 80067c0:	81eb      	strh	r3, [r5, #14]
	UNALIGNED_PUT(htonl(seq), &th->th_seq);
 80067c2:	fa98 f888 	rev.w	r8, r8
 80067c6:	f8c5 8004 	str.w	r8, [r5, #4]
	if (ACK & flags) {
 80067ca:	f019 0f10 	tst.w	r9, #16
 80067ce:	d003      	beq.n	80067d8 <tcp_out_ext+0xf4>
		UNALIGNED_PUT(htonl(conn->ack), &th->th_ack);
 80067d0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80067d4:	ba1b      	rev	r3, r3
 80067d6:	60ab      	str	r3, [r5, #8]
	return net_pkt_set_data(pkt, &tcp_access);
 80067d8:	4651      	mov	r1, sl
 80067da:	4630      	mov	r0, r6
 80067dc:	f00b fb9d 	bl	8011f1a <net_pkt_set_data>
	if (ret < 0) {
 80067e0:	1e05      	subs	r5, r0, #0
 80067e2:	dbb8      	blt.n	8006756 <tcp_out_ext+0x72>
	if (conn->send_options.mss_found) {
 80067e4:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80067e8:	07db      	lsls	r3, r3, #31
 80067ea:	d51f      	bpl.n	800682c <tcp_out_ext+0x148>
	NET_PKT_DATA_ACCESS_DEFINE(mss_opt_access, struct tcp_mss_option);
 80067ec:	2304      	movs	r3, #4
	mss = net_pkt_get_data(pkt, &mss_opt_access);
 80067ee:	4639      	mov	r1, r7
 80067f0:	4630      	mov	r0, r6
	NET_PKT_DATA_ACCESS_DEFINE(mss_opt_access, struct tcp_mss_option);
 80067f2:	f8cd a014 	str.w	sl, [sp, #20]
 80067f6:	9306      	str	r3, [sp, #24]
	mss = net_pkt_get_data(pkt, &mss_opt_access);
 80067f8:	f00b fb70 	bl	8011edc <net_pkt_get_data>
	if (!mss) {
 80067fc:	4605      	mov	r5, r0
 80067fe:	2800      	cmp	r0, #0
 8006800:	d0be      	beq.n	8006780 <tcp_out_ext+0x9c>
	recv_mss = net_tcp_get_recv_mss(conn);
 8006802:	4620      	mov	r0, r4
 8006804:	f00c f829 	bl	801285a <net_tcp_get_recv_mss>
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
 8006808:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss), (uint32_t *)mss);
 800680c:	0203      	lsls	r3, r0, #8
 800680e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006812:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800681a:	f043 0302 	orr.w	r3, r3, #2
 800681e:	602b      	str	r3, [r5, #0]
	return net_pkt_set_data(pkt, &mss_opt_access);
 8006820:	4639      	mov	r1, r7
 8006822:	4630      	mov	r0, r6
 8006824:	f00b fb79 	bl	8011f1a <net_pkt_set_data>
		if (ret < 0) {
 8006828:	1e05      	subs	r5, r0, #0
 800682a:	db94      	blt.n	8006756 <tcp_out_ext+0x72>
	net_pkt_cursor_init(pkt);
 800682c:	4630      	mov	r0, r6
 800682e:	f00b f951 	bl	8011ad4 <net_pkt_cursor_init>
 8006832:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 8006836:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10d      	bne.n	800685a <tcp_out_ext+0x176>
		return net_ipv4_finalize(pkt, IPPROTO_TCP);
 800683e:	2106      	movs	r1, #6
 8006840:	4630      	mov	r0, r6
 8006842:	f00b fd7a 	bl	801233a <net_ipv4_finalize>
	if (ret < 0) {
 8006846:	1e05      	subs	r5, r0, #0
 8006848:	db85      	blt.n	8006756 <tcp_out_ext+0x72>
	if (tcp_send_cb) {
 800684a:	4b25      	ldr	r3, [pc, #148]	; (80068e0 <tcp_out_ext+0x1fc>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	b13a      	cbz	r2, 8006860 <tcp_out_ext+0x17c>
		ret = tcp_send_cb(pkt);
 8006850:	4630      	mov	r0, r6
}
 8006852:	b00b      	add	sp, #44	; 0x2c
 8006854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ret = tcp_send_cb(pkt);
 8006858:	4710      	bx	r2
	return -EINVAL;
 800685a:	f06f 0515 	mvn.w	r5, #21
 800685e:	e77a      	b.n	8006756 <tcp_out_ext+0x72>
	parent->next = child;
 8006860:	6332      	str	r2, [r6, #48]	; 0x30
	return list->tail;
 8006862:	69e2      	ldr	r2, [r4, #28]
	sys_slist_append(&conn->send_queue, &pkt->next);
 8006864:	f106 0330 	add.w	r3, r6, #48	; 0x30
Z_GENLIST_APPEND(slist, snode)
 8006868:	b9a2      	cbnz	r2, 8006894 <tcp_out_ext+0x1b0>
	list->head = node;
 800686a:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800686e:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 8006872:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006876:	2b01      	cmp	r3, #1
 8006878:	d124      	bne.n	80068c4 <tcp_out_ext+0x1e0>
	return pkt->frags->data;
 800687a:	68b3      	ldr	r3, [r6, #8]
 800687c:	689f      	ldr	r7, [r3, #8]
		if (net_ipv4_is_addr_loopback(
 800687e:	7c3b      	ldrb	r3, [r7, #16]
 8006880:	2b7f      	cmp	r3, #127	; 0x7f
 8006882:	d10a      	bne.n	800689a <tcp_out_ext+0x1b6>
		k_work_schedule_for_queue(&tcp_work_q,
 8006884:	2200      	movs	r2, #0
 8006886:	2300      	movs	r3, #0
 8006888:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800688c:	4815      	ldr	r0, [pc, #84]	; (80068e4 <tcp_out_ext+0x200>)
 800688e:	f006 f817 	bl	800c8c0 <k_work_schedule_for_queue>
 8006892:	e763      	b.n	800675c <tcp_out_ext+0x78>
	parent->next = child;
 8006894:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8006896:	61e3      	str	r3, [r4, #28]
}
 8006898:	e7e9      	b.n	800686e <tcp_out_ext+0x18a>
				(struct in_addr *)NET_IPV4_HDR(pkt)->dst)) {
 800689a:	f107 0810 	add.w	r8, r7, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 800689e:	2100      	movs	r1, #0
 80068a0:	4640      	mov	r0, r8
 80068a2:	f7fe f817 	bl	80048d4 <net_if_ipv4_addr_lookup>
	if (!ret) {
 80068a6:	4606      	mov	r6, r0
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d1eb      	bne.n	8006884 <tcp_out_ext+0x1a0>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80068ac:	f7fe fb34 	bl	8004f18 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d0e5      	beq.n	8006884 <tcp_out_ext+0x1a0>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 80068b8:	4641      	mov	r1, r8
 80068ba:	4630      	mov	r0, r6
 80068bc:	f7fd ff6e 	bl	800479c <net_if_ipv4_is_addr_bcast>
				(struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d1df      	bne.n	8006884 <tcp_out_ext+0x1a0>
	} else if (tcp_send_process_no_lock(conn)) {
 80068c4:	4620      	mov	r0, r4
 80068c6:	f7ff fc23 	bl	8006110 <tcp_send_process_no_lock>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	f43f af46 	beq.w	800675c <tcp_out_ext+0x78>
		tcp_conn_unref(conn);
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff fcd5 	bl	8006280 <tcp_conn_unref>
 80068d6:	e741      	b.n	800675c <tcp_out_ext+0x78>
		ret = -ENOBUFS;
 80068d8:	f06f 0568 	mvn.w	r5, #104	; 0x68
	return ret;
 80068dc:	e73e      	b.n	800675c <tcp_out_ext+0x78>
 80068de:	bf00      	nop
 80068e0:	200023d8 	.word	0x200023d8
 80068e4:	20000c38 	.word	0x20000c38

080068e8 <tcp_send_queued_data.part.0>:
static int tcp_send_queued_data(struct tcp *conn)
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	4604      	mov	r4, r0
	int ret = 0;
 80068ec:	2500      	movs	r5, #0
	if (conn->unacked_len > conn->send_data_total) {
 80068ee:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 80068f2:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d80b      	bhi.n	8006912 <tcp_send_queued_data.part.0+0x2a>
	unsent_len = conn->send_data_total - conn->unacked_len;
 80068fa:	1a9b      	subs	r3, r3, r2
	while (tcp_unsent_len(conn) > 0) {
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dd08      	ble.n	8006912 <tcp_send_queued_data.part.0+0x2a>
	bool window_full = !(conn->unacked_len < conn->send_win);
 8006900:	f8b4 31b6 	ldrh.w	r3, [r4, #438]	; 0x1b6
		if (tcp_window_full(conn)) {
 8006904:	4293      	cmp	r3, r2
 8006906:	dd06      	ble.n	8006916 <tcp_send_queued_data.part.0+0x2e>
		ret = tcp_send_data(conn);
 8006908:	4620      	mov	r0, r4
 800690a:	f00b ffbd 	bl	8012888 <tcp_send_data>
		if (ret < 0) {
 800690e:	1e05      	subs	r5, r0, #0
 8006910:	daed      	bge.n	80068ee <tcp_send_queued_data.part.0+0x6>
	bool subscribe = false;
 8006912:	2600      	movs	r6, #0
 8006914:	e000      	b.n	8006918 <tcp_send_queued_data.part.0+0x30>
			subscribe = true;
 8006916:	2601      	movs	r6, #1
	if (conn->unacked_len) {
 8006918:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800691c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
		subscribe = true;
 8006920:	2b00      	cmp	r3, #0
 8006922:	bf18      	it	ne
 8006924:	2601      	movne	r6, #1
 8006926:	f00d fd72 	bl	801440e <z_timeout_remaining>
	if (k_work_delayable_remaining_get(&conn->send_data_timer)) {
 800692a:	ea50 0301 	orrs.w	r3, r0, r1
 800692e:	d114      	bne.n	800695a <tcp_send_queued_data.part.0+0x72>
	if (ret == -ENOBUFS) {
 8006930:	f115 0f69 	cmn.w	r5, #105	; 0x69
 8006934:	d103      	bne.n	800693e <tcp_send_queued_data.part.0+0x56>
		k_work_cancel_delayable(&conn->send_data_timer);
 8006936:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800693a:	f00d fc4d 	bl	80141d8 <k_work_cancel_delayable>
	if (subscribe) {
 800693e:	b156      	cbz	r6, 8006956 <tcp_send_queued_data.part.0+0x6e>
		conn->send_data_retries = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	f884 31b8 	strb.w	r3, [r4, #440]	; 0x1b8
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_data_timer,
 8006946:	4807      	ldr	r0, [pc, #28]	; (8006964 <tcp_send_queued_data.part.0+0x7c>)
 8006948:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800694c:	2300      	movs	r3, #0
 800694e:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 8006952:	f005 ffdf 	bl	800c914 <k_work_reschedule_for_queue>
}
 8006956:	4628      	mov	r0, r5
 8006958:	bd70      	pop	{r4, r5, r6, pc}
	if (ret == -ENOBUFS) {
 800695a:	f115 0f69 	cmn.w	r5, #105	; 0x69
 800695e:	d1fa      	bne.n	8006956 <tcp_send_queued_data.part.0+0x6e>
		subscribe = false;
 8006960:	2600      	movs	r6, #0
 8006962:	e7e8      	b.n	8006936 <tcp_send_queued_data.part.0+0x4e>
 8006964:	20000c38 	.word	0x20000c38

08006968 <net_tcp_queue_data>:
{
 8006968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct tcp *conn = context->tcp;
 800696c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
{
 800696e:	460f      	mov	r7, r1
	if (!conn || conn->state != TCP_ESTABLISHED) {
 8006970:	2c00      	cmp	r4, #0
 8006972:	d04e      	beq.n	8006a12 <net_tcp_queue_data+0xaa>
 8006974:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
 8006978:	2b04      	cmp	r3, #4
 800697a:	d14a      	bne.n	8006a12 <net_tcp_queue_data+0xaa>
	k_mutex_lock(&conn->lock, K_FOREVER);
 800697c:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8006980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006988:	4650      	mov	r0, sl
 800698a:	f00b fdcd 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	bool window_full = !(conn->unacked_len < conn->send_win);
 800698e:	f8b4 21b6 	ldrh.w	r2, [r4, #438]	; 0x1b6
	if (tcp_window_full(conn)) {
 8006992:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8006996:	429a      	cmp	r2, r3
 8006998:	dc0e      	bgt.n	80069b8 <net_tcp_queue_data+0x50>
		(void)k_work_schedule_for_queue(&tcp_work_q,
 800699a:	4828      	ldr	r0, [pc, #160]	; (8006a3c <net_tcp_queue_data+0xd4>)
 800699c:	2200      	movs	r2, #0
 800699e:	2300      	movs	r3, #0
 80069a0:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 80069a4:	f005 ff8c 	bl	800c8c0 <k_work_schedule_for_queue>
		ret = -EAGAIN;
 80069a8:	f06f 050a 	mvn.w	r5, #10
	k_mutex_unlock(&conn->lock);
 80069ac:	4650      	mov	r0, sl
 80069ae:	f00b fe98 	bl	80126e2 <k_mutex_unlock.isra.0>
}
 80069b2:	4628      	mov	r0, r5
 80069b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = net_pkt_get_len(pkt);
 80069b8:	68b8      	ldr	r0, [r7, #8]
 80069ba:	f00b fdb7 	bl	801252c <net_pkt_get_len.isra.0>
	if (conn->send_data->buffer) {
 80069be:	68a3      	ldr	r3, [r4, #8]
 80069c0:	689e      	ldr	r6, [r3, #8]
	len = net_pkt_get_len(pkt);
 80069c2:	4680      	mov	r8, r0
	if (conn->send_data->buffer) {
 80069c4:	b11e      	cbz	r6, 80069ce <net_tcp_queue_data+0x66>
		orig_buf = net_buf_frag_last(conn->send_data->buffer);
 80069c6:	4630      	mov	r0, r6
 80069c8:	f009 fdcb 	bl	8010562 <net_buf_frag_last>
 80069cc:	4606      	mov	r6, r0
	net_pkt_append_buffer(conn->send_data, pkt->buffer);
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	68a0      	ldr	r0, [r4, #8]
 80069d2:	f00b f894 	bl	8011afe <net_pkt_append_buffer>
	conn->send_data_total += len;
 80069d6:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
	pkt->buffer = NULL;
 80069da:	f04f 0900 	mov.w	r9, #0
	conn->send_data_total += len;
 80069de:	4443      	add	r3, r8
 80069e0:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	pkt->buffer = NULL;
 80069e4:	f8c7 9008 	str.w	r9, [r7, #8]
	if (conn->data_mode == TCP_DATA_MODE_RESEND) {
 80069e8:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d020      	beq.n	8006a32 <net_tcp_queue_data+0xca>
 80069f0:	4620      	mov	r0, r4
 80069f2:	f7ff ff79 	bl	80068e8 <tcp_send_queued_data.part.0>
	if (ret < 0 && ret != -ENOBUFS) {
 80069f6:	1e05      	subs	r5, r0, #0
 80069f8:	da1c      	bge.n	8006a34 <net_tcp_queue_data+0xcc>
 80069fa:	f115 0f69 	cmn.w	r5, #105	; 0x69
 80069fe:	d00b      	beq.n	8006a18 <net_tcp_queue_data+0xb0>
		tcp_conn_unref(conn);
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7ff fc3d 	bl	8006280 <tcp_conn_unref>
		goto out;
 8006a06:	e7d1      	b.n	80069ac <net_tcp_queue_data+0x44>
			pkt->buffer = orig_buf->frags;
 8006a08:	6833      	ldr	r3, [r6, #0]
 8006a0a:	60bb      	str	r3, [r7, #8]
			orig_buf->frags = NULL;
 8006a0c:	f8c6 9000 	str.w	r9, [r6]
 8006a10:	e7cc      	b.n	80069ac <net_tcp_queue_data+0x44>
		return -ENOTCONN;
 8006a12:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8006a16:	e7cc      	b.n	80069b2 <net_tcp_queue_data+0x4a>
		conn->send_data_total -= len;
 8006a18:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
 8006a1c:	eba0 0008 	sub.w	r0, r0, r8
 8006a20:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
		if (orig_buf) {
 8006a24:	2e00      	cmp	r6, #0
 8006a26:	d1ef      	bne.n	8006a08 <net_tcp_queue_data+0xa0>
			pkt->buffer = conn->send_data->buffer;
 8006a28:	68a3      	ldr	r3, [r4, #8]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	60ba      	str	r2, [r7, #8]
			conn->send_data->buffer = NULL;
 8006a2e:	609e      	str	r6, [r3, #8]
 8006a30:	e7bc      	b.n	80069ac <net_tcp_queue_data+0x44>
	int ret = 0;
 8006a32:	464d      	mov	r5, r9
		tcp_pkt_unref(pkt);
 8006a34:	4638      	mov	r0, r7
 8006a36:	f00a ffdd 	bl	80119f4 <net_pkt_unref>
 8006a3a:	e7b7      	b.n	80069ac <net_tcp_queue_data+0x44>
 8006a3c:	20000c38 	.word	0x20000c38

08006a40 <tcp_resend_data>:
{
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	4604      	mov	r4, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
 8006a44:	f1a0 07b4 	sub.w	r7, r0, #180	; 0xb4
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, send_data_timer);
 8006a4c:	f1a0 06d8 	sub.w	r6, r0, #216	; 0xd8
	k_mutex_lock(&conn->lock, K_FOREVER);
 8006a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a54:	4638      	mov	r0, r7
 8006a56:	f00b fd67 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	if (conn->send_data_retries >= tcp_retries) {
 8006a5a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	f04f 0301 	mov.w	r3, #1
 8006a64:	d846      	bhi.n	8006af4 <tcp_resend_data+0xb4>
	conn->unacked_len = 0;
 8006a66:	2500      	movs	r5, #0
	conn->data_mode = TCP_DATA_MODE_RESEND;
 8006a68:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
	conn->unacked_len = 0;
 8006a6c:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
	ret = tcp_send_data(conn);
 8006a70:	4630      	mov	r0, r6
 8006a72:	f00b ff09 	bl	8012888 <tcp_send_data>
	conn->send_data_retries++;
 8006a76:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (ret == 0) {
 8006a80:	bb18      	cbnz	r0, 8006aca <tcp_resend_data+0x8a>
		if (conn->in_close && conn->send_data_total == 0) {
 8006a82:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
 8006a86:	075b      	lsls	r3, r3, #29
 8006a88:	d52c      	bpl.n	8006ae4 <tcp_resend_data+0xa4>
 8006a8a:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8006a8e:	bb4d      	cbnz	r5, 8006ae4 <tcp_resend_data+0xa4>
			k_work_reschedule_for_queue(&tcp_work_q,
 8006a90:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a94:	2300      	movs	r3, #0
 8006a96:	f104 0160 	add.w	r1, r4, #96	; 0x60
 8006a9a:	4818      	ldr	r0, [pc, #96]	; (8006afc <tcp_resend_data+0xbc>)
 8006a9c:	f005 ff3a 	bl	800c914 <k_work_reschedule_for_queue>
			conn_state(conn, TCP_FIN_WAIT_1);
 8006aa0:	2305      	movs	r3, #5
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
 8006aa2:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
			conn_state(conn, TCP_FIN_WAIT_1);
 8006aa6:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
 8006aaa:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8006aae:	2111      	movs	r1, #17
 8006ab0:	4413      	add	r3, r2
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	f7ff fe15 	bl	80066e4 <tcp_out_ext>
			if (ret == 0) {
 8006aba:	b920      	cbnz	r0, 8006ac6 <tcp_resend_data+0x86>
				conn_seq(conn, + 1);
 8006abc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	bool conn_unref = false;
 8006ac6:	2500      	movs	r5, #0
 8006ac8:	e003      	b.n	8006ad2 <tcp_resend_data+0x92>
	} else if (ret == -ENODATA) {
 8006aca:	303d      	adds	r0, #61	; 0x3d
 8006acc:	d10a      	bne.n	8006ae4 <tcp_resend_data+0xa4>
		conn->data_mode = TCP_DATA_MODE_SEND;
 8006ace:	f884 50d1 	strb.w	r5, [r4, #209]	; 0xd1
	k_mutex_unlock(&conn->lock);
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f00b fe05 	bl	80126e2 <k_mutex_unlock.isra.0>
	if (conn_unref) {
 8006ad8:	b175      	cbz	r5, 8006af8 <tcp_resend_data+0xb8>
		tcp_conn_unref(conn);
 8006ada:	4630      	mov	r0, r6
}
 8006adc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		tcp_conn_unref(conn);
 8006ae0:	f7ff bbce 	b.w	8006280 <tcp_conn_unref>
	k_work_reschedule_for_queue(&tcp_work_q, &conn->send_data_timer,
 8006ae4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4621      	mov	r1, r4
 8006aec:	4803      	ldr	r0, [pc, #12]	; (8006afc <tcp_resend_data+0xbc>)
 8006aee:	f005 ff11 	bl	800c914 <k_work_reschedule_for_queue>
 8006af2:	e7e8      	b.n	8006ac6 <tcp_resend_data+0x86>
		conn_unref = true;
 8006af4:	461d      	mov	r5, r3
 8006af6:	e7ec      	b.n	8006ad2 <tcp_resend_data+0x92>
}
 8006af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000c38 	.word	0x20000c38

08006b00 <net_tcp_put>:
{
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct tcp *conn = context->tcp;
 8006b02:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
{
 8006b04:	4605      	mov	r5, r0
	if (!conn) {
 8006b06:	2c00      	cmp	r4, #0
 8006b08:	d044      	beq.n	8006b94 <net_tcp_put+0x94>
	k_mutex_lock(&conn->lock, K_FOREVER);
 8006b0a:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8006b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b16:	4630      	mov	r0, r6
 8006b18:	f00b fd06 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	if (conn && conn->state == TCP_ESTABLISHED) {
 8006b1c:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d113      	bne.n	8006b4c <net_tcp_put+0x4c>
		if (conn->send_data_total > 0) {
 8006b24:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 8006b28:	b1c7      	cbz	r7, 8006b5c <net_tcp_put+0x5c>
			conn->in_close = true;
 8006b2a:	f894 31b9 	ldrb.w	r3, [r4, #441]	; 0x1b9
			k_work_reschedule_for_queue(&tcp_work_q,
 8006b2e:	481b      	ldr	r0, [pc, #108]	; (8006b9c <net_tcp_put+0x9c>)
			conn->in_close = true;
 8006b30:	f043 0304 	orr.w	r3, r3, #4
 8006b34:	f884 31b9 	strb.w	r3, [r4, #441]	; 0x1b9
			k_work_reschedule_for_queue(&tcp_work_q,
 8006b38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 8006b42:	f005 fee7 	bl	800c914 <k_work_reschedule_for_queue>
		net_context_ref(context);
 8006b46:	4628      	mov	r0, r5
 8006b48:	f00a fa31 	bl	8010fae <net_context_ref>
	k_mutex_unlock(&conn->lock);
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f00b fdc8 	bl	80126e2 <k_mutex_unlock.isra.0>
	net_context_unref(context);
 8006b52:	4628      	mov	r0, r5
 8006b54:	f00a fa39 	bl	8010fca <net_context_unref>
	return 0;
 8006b58:	2000      	movs	r0, #0
}
 8006b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_work_reschedule_for_queue(&tcp_work_q,
 8006b5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b60:	2300      	movs	r3, #0
 8006b62:	f504 719c 	add.w	r1, r4, #312	; 0x138
 8006b66:	480d      	ldr	r0, [pc, #52]	; (8006b9c <net_tcp_put+0x9c>)
 8006b68:	f005 fed4 	bl	800c914 <k_work_reschedule_for_queue>
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
 8006b6c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
 8006b70:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8006b74:	2111      	movs	r1, #17
 8006b76:	4413      	add	r3, r2
 8006b78:	4620      	mov	r0, r4
 8006b7a:	463a      	mov	r2, r7
 8006b7c:	f7ff fdb2 	bl	80066e4 <tcp_out_ext>
			if (ret == 0) {
 8006b80:	b920      	cbnz	r0, 8006b8c <net_tcp_put+0x8c>
				conn_seq(conn, + 1);
 8006b82:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
 8006b86:	3301      	adds	r3, #1
 8006b88:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
			conn_state(conn, TCP_FIN_WAIT_1);
 8006b8c:	2305      	movs	r3, #5
 8006b8e:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
 8006b92:	e7d8      	b.n	8006b46 <net_tcp_put+0x46>
		return -ENOENT;
 8006b94:	f06f 0001 	mvn.w	r0, #1
 8006b98:	e7df      	b.n	8006b5a <net_tcp_put+0x5a>
 8006b9a:	bf00      	nop
 8006b9c:	20000c38 	.word	0x20000c38

08006ba0 <tcp_in>:
{
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	b091      	sub	sp, #68	; 0x44
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
 8006ba8:	460e      	mov	r6, r1
 8006baa:	bb09      	cbnz	r1, 8006bf0 <tcp_in+0x50>
	uint8_t next = 0, fl = 0;
 8006bac:	f88d 1017 	strb.w	r1, [sp, #23]
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
 8006bb0:	460d      	mov	r5, r1
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 8006bb2:	460f      	mov	r7, r1
	k_mutex_lock(&conn->lock, K_FOREVER);
 8006bb4:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bc0:	4658      	mov	r0, fp
 8006bc2:	f00b fcb1 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	if (th && th_off(th) < 5) {
 8006bc6:	b33d      	cbz	r5, 8006c18 <tcp_in+0x78>
 8006bc8:	7b2b      	ldrb	r3, [r5, #12]
 8006bca:	2b4f      	cmp	r3, #79	; 0x4f
 8006bcc:	d824      	bhi.n	8006c18 <tcp_in+0x78>
		tcp_out(conn, RST);
 8006bce:	2104      	movs	r1, #4
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f00b fed1 	bl	8012978 <tcp_out>
		conn_state(conn, TCP_CLOSED);
 8006bd6:	230b      	movs	r3, #11
 8006bd8:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
 8006bdc:	f04f 0900 	mov.w	r9, #0
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
 8006be0:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8006ec4 <tcp_in+0x324>
 8006be4:	464f      	mov	r7, r9
	len = pkt ? tcp_data_len(pkt) : 0;
 8006be6:	2e00      	cmp	r6, #0
 8006be8:	f040 80a2 	bne.w	8006d30 <tcp_in+0x190>
 8006bec:	2000      	movs	r0, #0
 8006bee:	e0b2      	b.n	8006d56 <tcp_in+0x1b6>
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	f00b fcc2 	bl	801257a <th_get>
	uint8_t next = 0, fl = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f88d 3017 	strb.w	r3, [sp, #23]
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	b148      	cbz	r0, 8006c14 <tcp_in+0x74>
 8006c00:	7b07      	ldrb	r7, [r0, #12]
		fl = th_flags(th) & ~(ECN | CWR);
 8006c02:	7b43      	ldrb	r3, [r0, #13]
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 8006c04:	093f      	lsrs	r7, r7, #4
 8006c06:	3f05      	subs	r7, #5
		fl = th_flags(th) & ~(ECN | CWR);
 8006c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 8006c0c:	00bf      	lsls	r7, r7, #2
		fl = th_flags(th) & ~(ECN | CWR);
 8006c0e:	f88d 3017 	strb.w	r3, [sp, #23]
 8006c12:	e7cf      	b.n	8006bb4 <tcp_in+0x14>
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 8006c14:	4607      	mov	r7, r0
 8006c16:	e7cd      	b.n	8006bb4 <tcp_in+0x14>
	if (FL(&fl, &, RST)) {
 8006c18:	f89d 8017 	ldrb.w	r8, [sp, #23]
 8006c1c:	f1b8 0f00 	cmp.w	r8, #0
 8006c20:	d01c      	beq.n	8006c5c <tcp_in+0xbc>
 8006c22:	48a9      	ldr	r0, [pc, #676]	; (8006ec8 <tcp_in+0x328>)
 8006c24:	f7f9 fc7b 	bl	800051e <strlen>
 8006c28:	f018 0f04 	tst.w	r8, #4
 8006c2c:	d016      	beq.n	8006c5c <tcp_in+0xbc>
 8006c2e:	f028 0804 	bic.w	r8, r8, #4
 8006c32:	f88d 8017 	strb.w	r8, [sp, #23]
	return (net_tcp_seq_cmp(th_seq(hdr), conn->ack) >= 0) &&
 8006c36:	686b      	ldr	r3, [r5, #4]
 8006c38:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
 8006c3c:	ba1b      	rev	r3, r3
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline int32_t net_tcp_seq_cmp(uint32_t seq1, uint32_t seq2)
{
	return (int32_t)(seq1 - seq2);
 8006c3e:	1a5a      	subs	r2, r3, r1
 8006c40:	2a00      	cmp	r2, #0
 8006c42:	db05      	blt.n	8006c50 <tcp_in+0xb0>
		(net_tcp_seq_cmp(th_seq(hdr), conn->ack + conn->recv_win) < 0);
 8006c44:	f8b4 21b4 	ldrh.w	r2, [r4, #436]	; 0x1b4
 8006c48:	440a      	add	r2, r1
 8006c4a:	1a9b      	subs	r3, r3, r2
		if (!tcp_validate_seq(conn, th)) {
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dbc2      	blt.n	8006bd6 <tcp_in+0x36>
			k_mutex_unlock(&conn->lock);
 8006c50:	4658      	mov	r0, fp
}
 8006c52:	b011      	add	sp, #68	; 0x44
 8006c54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			k_mutex_unlock(&conn->lock);
 8006c58:	f00b bd43 	b.w	80126e2 <k_mutex_unlock.isra.0>
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
 8006c5c:	b35f      	cbz	r7, 8006cb6 <tcp_in+0x116>
	net_pkt_cursor_init(pkt);
 8006c5e:	4630      	mov	r0, r6
	backup->pos = pkt->cursor.pos;
 8006c60:	e9d6 9803 	ldrd	r9, r8, [r6, #12]
 8006c64:	f00a ff36 	bl	8011ad4 <net_pkt_cursor_init>
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt) +
 8006c68:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
 8006c6c:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
 8006c70:	4419      	add	r1, r3
 8006c72:	3114      	adds	r1, #20
 8006c74:	4630      	mov	r0, r6
 8006c76:	f00a ff92 	bl	8011b9e <net_pkt_skip>
	ret = net_pkt_read(pkt, buf, MIN(tcp_options_len, buf_len));
 8006c7a:	f10d 0a18 	add.w	sl, sp, #24
 8006c7e:	2f28      	cmp	r7, #40	; 0x28
 8006c80:	463a      	mov	r2, r7
 8006c82:	4651      	mov	r1, sl
 8006c84:	bf28      	it	cs
 8006c86:	2228      	movcs	r2, #40	; 0x28
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f00a ff9e 	bl	8011bca <net_pkt_read>
	recv_options->mss_found = false;
 8006c8e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
		buf = NULL;
 8006c92:	2800      	cmp	r0, #0
	recv_options->mss_found = false;
 8006c94:	f023 0303 	bic.w	r3, r3, #3
	pkt->cursor.pos = backup->pos;
 8006c98:	e9c6 9803 	strd	r9, r8, [r6, #12]
		buf = NULL;
 8006c9c:	bfac      	ite	ge
 8006c9e:	4651      	movge	r1, sl
 8006ca0:	2100      	movlt	r1, #0
	recv_options->mss_found = false;
 8006ca2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
 8006ca6:	463a      	mov	r2, r7
			recv_options->window = opt;
 8006ca8:	f04f 0c03 	mov.w	ip, #3
	for ( ; options && len >= 1; options += opt_len, len -= opt_len) {
 8006cac:	b109      	cbz	r1, 8006cb2 <tcp_in+0x112>
 8006cae:	2a00      	cmp	r2, #0
 8006cb0:	dc0e      	bgt.n	8006cd0 <tcp_in+0x130>
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
 8006cb2:	2f00      	cmp	r7, #0
 8006cb4:	dd8b      	ble.n	8006bce <tcp_in+0x2e>
	if (th) {
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	d090      	beq.n	8006bdc <tcp_in+0x3c>
		conn->send_win = ntohs(th_win(th));
 8006cba:	89eb      	ldrh	r3, [r5, #14]
 8006cbc:	ba5b      	rev16	r3, r3
 8006cbe:	b29a      	uxth	r2, r3
		if ((size_t)conn->send_win > max_win) {
 8006cc0:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
			conn->send_win = max_win;
 8006cc4:	bf88      	it	hi
 8006cc6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
 8006cca:	f8a4 31b6 	strh.w	r3, [r4, #438]	; 0x1b6
 8006cce:	e785      	b.n	8006bdc <tcp_in+0x3c>
		opt = options[0];
 8006cd0:	7808      	ldrb	r0, [r1, #0]
		if (opt == NET_TCP_END_OPT) {
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d0ed      	beq.n	8006cb2 <tcp_in+0x112>
		} else if (opt == NET_TCP_NOP_OPT) {
 8006cd6:	2801      	cmp	r0, #1
 8006cd8:	d028      	beq.n	8006d2c <tcp_in+0x18c>
			if (len < 2) { /* Only END and NOP can have length 1 */
 8006cda:	2a01      	cmp	r2, #1
 8006cdc:	f43f af77 	beq.w	8006bce <tcp_in+0x2e>
			opt_len = options[1];
 8006ce0:	784b      	ldrb	r3, [r1, #1]
		if (opt_len < 2 || opt_len > len) {
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	f67f af73 	bls.w	8006bce <tcp_in+0x2e>
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	f6ff af70 	blt.w	8006bce <tcp_in+0x2e>
		switch (opt) {
 8006cee:	2802      	cmp	r0, #2
 8006cf0:	d004      	beq.n	8006cfc <tcp_in+0x15c>
 8006cf2:	2803      	cmp	r0, #3
 8006cf4:	d010      	beq.n	8006d18 <tcp_in+0x178>
	for ( ; options && len >= 1; options += opt_len, len -= opt_len) {
 8006cf6:	4419      	add	r1, r3
 8006cf8:	1ad2      	subs	r2, r2, r3
 8006cfa:	e7d7      	b.n	8006cac <tcp_in+0x10c>
			if (opt_len != 4) {
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	f47f af66 	bne.w	8006bce <tcp_in+0x2e>
			recv_options->mss =
 8006d02:	8848      	ldrh	r0, [r1, #2]
 8006d04:	ba40      	rev16	r0, r0
 8006d06:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
			recv_options->mss_found = true;
 8006d0a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8006d0e:	f040 0001 	orr.w	r0, r0, #1
			recv_options->wnd_found = true;
 8006d12:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
			break;
 8006d16:	e7ee      	b.n	8006cf6 <tcp_in+0x156>
			if (opt_len != 3) {
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	f47f af58 	bne.w	8006bce <tcp_in+0x2e>
			recv_options->wnd_found = true;
 8006d1e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
			recv_options->window = opt;
 8006d22:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
			recv_options->wnd_found = true;
 8006d26:	f040 0002 	orr.w	r0, r0, #2
 8006d2a:	e7f2      	b.n	8006d12 <tcp_in+0x172>
			opt_len = 1;
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	e7e2      	b.n	8006cf6 <tcp_in+0x156>
	struct tcphdr *th = th_get(pkt);
 8006d30:	4630      	mov	r0, r6
 8006d32:	f00b fc22 	bl	801257a <th_get>
 8006d36:	4601      	mov	r1, r0
	int len = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
 8006d38:	68b0      	ldr	r0, [r6, #8]
 8006d3a:	f00b fbf7 	bl	801252c <net_pkt_get_len.isra.0>
 8006d3e:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
		net_pkt_ip_opts_len(pkt) - sizeof(*th) - tcp_options_len;
 8006d42:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
 8006d46:	4413      	add	r3, r2
 8006d48:	1ac3      	subs	r3, r0, r3
	size_t tcp_options_len = (th_off(th) - 5) * 4;
 8006d4a:	7b08      	ldrb	r0, [r1, #12]
 8006d4c:	0900      	lsrs	r0, r0, #4
		net_pkt_ip_opts_len(pkt) - sizeof(*th) - tcp_options_len;
 8006d4e:	eba3 0080 	sub.w	r0, r3, r0, lsl #2
	return len > 0 ? (size_t)len : 0;
 8006d52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	switch (conn->state) {
 8006d56:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
	len = pkt ? tcp_data_len(pkt) : 0;
 8006d5a:	9006      	str	r0, [sp, #24]
	switch (conn->state) {
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	2b0a      	cmp	r3, #10
 8006d60:	f200 812e 	bhi.w	8006fc0 <tcp_in+0x420>
 8006d64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006d68:	00b6000b 	.word	0x00b6000b
 8006d6c:	00f8005e 	.word	0x00f8005e
 8006d70:	022801f9 	.word	0x022801f9
 8006d74:	024301da 	.word	0x024301da
 8006d78:	025f01dc 	.word	0x025f01dc
 8006d7c:	0265      	.short	0x0265
		if (FL(&fl, ==, SYN)) {
 8006d7e:	f89d 6017 	ldrb.w	r6, [sp, #23]
 8006d82:	b3c6      	cbz	r6, 8006df6 <tcp_in+0x256>
 8006d84:	4850      	ldr	r0, [pc, #320]	; (8006ec8 <tcp_in+0x328>)
 8006d86:	f7f9 fbca 	bl	800051e <strlen>
 8006d8a:	2e02      	cmp	r6, #2
 8006d8c:	d133      	bne.n	8006df6 <tcp_in+0x256>
 8006d8e:	f88d 7017 	strb.w	r7, [sp, #23]
			conn->send_options.mss_found = true;
 8006d92:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8006d96:	f043 0301 	orr.w	r3, r3, #1
 8006d9a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
			conn_ack(conn, th_seq(th) + 1); /* capture peer's isn */
 8006d9e:	686b      	ldr	r3, [r5, #4]
 8006da0:	ba1a      	rev	r2, r3
 8006da2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8006da6:	3301      	adds	r3, #1
 8006da8:	4413      	add	r3, r2
 8006daa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
			tcp_out(conn, SYN | ACK);
 8006dae:	2112      	movs	r1, #18
 8006db0:	4620      	mov	r0, r4
 8006db2:	f00b fde1 	bl	8012978 <tcp_out>
			conn->send_options.mss_found = false;
 8006db6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
			k_work_reschedule_for_queue(&tcp_work_q,
 8006dba:	4844      	ldr	r0, [pc, #272]	; (8006ecc <tcp_in+0x32c>)
			conn->send_options.mss_found = false;
 8006dbc:	f367 0300 	bfi	r3, r7, #0, #1
 8006dc0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
			conn_seq(conn, + 1);
 8006dc4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
 8006dc8:	3301      	adds	r3, #1
 8006dca:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
			k_work_reschedule_for_queue(&tcp_work_q,
 8006dce:	f242 7210 	movw	r2, #10000	; 0x2710
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f504 719c 	add.w	r1, r4, #312	; 0x138
 8006dd8:	f005 fd9c 	bl	800c914 <k_work_reschedule_for_queue>
			next = TCP_SYN_RECEIVED;
 8006ddc:	2303      	movs	r3, #3
		conn_state(conn, next);
 8006dde:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
		if (connection_ok) {
 8006de2:	f1b9 0f00 	cmp.w	r9, #0
 8006de6:	d003      	beq.n	8006df0 <tcp_in+0x250>
	z_impl_k_sem_give(sem);
 8006de8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006dec:	f005 fbd8 	bl	800c5a0 <z_impl_k_sem_give>
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
 8006df0:	2500      	movs	r5, #0
 8006df2:	462e      	mov	r6, r5
 8006df4:	e6fa      	b.n	8006bec <tcp_in+0x4c>
			conn->send_options.mss_found = true;
 8006df6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
			tcp_out(conn, SYN);
 8006e02:	2102      	movs	r1, #2
 8006e04:	4620      	mov	r0, r4
 8006e06:	f00b fdb7 	bl	8012978 <tcp_out>
			conn->send_options.mss_found = false;
 8006e0a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8006e0e:	f36f 0300 	bfc	r3, #0, #1
 8006e12:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
			conn_seq(conn, + 1);
 8006e16:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
			next = TCP_SYN_SENT;
 8006e20:	2302      	movs	r3, #2
 8006e22:	e7dc      	b.n	8006dde <tcp_in+0x23e>
		if (FL(&fl, &, ACK, th_ack(th) == conn->seq &&
 8006e24:	f89d a017 	ldrb.w	sl, [sp, #23]
 8006e28:	f1ba 0f00 	cmp.w	sl, #0
 8006e2c:	f000 80c8 	beq.w	8006fc0 <tcp_in+0x420>
 8006e30:	4827      	ldr	r0, [pc, #156]	; (8006ed0 <tcp_in+0x330>)
 8006e32:	f7f9 fb74 	bl	800051e <strlen>
 8006e36:	b168      	cbz	r0, 8006e54 <tcp_in+0x2b4>
 8006e38:	68ab      	ldr	r3, [r5, #8]
 8006e3a:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
 8006e3e:	ba1b      	rev	r3, r3
 8006e40:	4293      	cmp	r3, r2
 8006e42:	f040 80bd 	bne.w	8006fc0 <tcp_in+0x420>
 8006e46:	686b      	ldr	r3, [r5, #4]
 8006e48:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 8006e4c:	ba1b      	rev	r3, r3
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	f040 80b6 	bne.w	8006fc0 <tcp_in+0x420>
 8006e54:	f01a 0f10 	tst.w	sl, #16
 8006e58:	f000 80b2 	beq.w	8006fc0 <tcp_in+0x420>
 8006e5c:	f02a 0a10 	bic.w	sl, sl, #16
 8006e60:	f88d a017 	strb.w	sl, [sp, #23]
			k_work_cancel_delayable(&conn->establish_timer);
 8006e64:	f504 709c 	add.w	r0, r4, #312	; 0x138
 8006e68:	f00d f9b6 	bl	80141d8 <k_work_cancel_delayable>
			tcp_send_timer_cancel(conn);
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f7ff f9cb 	bl	8006208 <tcp_send_timer_cancel>
			net_context_set_state(conn->context,
 8006e72:	6860      	ldr	r0, [r4, #4]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 8006e74:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 8006e78:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 8006e7c:	f043 0304 	orr.w	r3, r3, #4
 8006e80:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
			if (conn->accepted_conn) {
 8006e84:	6a23      	ldr	r3, [r4, #32]
 8006e86:	b13b      	cbz	r3, 8006e98 <tcp_in+0x2f8>
					&conn->accepted_conn->context->remote,
 8006e88:	6859      	ldr	r1, [r3, #4]
				conn->accepted_conn->accept_cb(
 8006e8a:	9100      	str	r1, [sp, #0]
 8006e8c:	6a1d      	ldr	r5, [r3, #32]
 8006e8e:	2208      	movs	r2, #8
 8006e90:	2300      	movs	r3, #0
 8006e92:	3124      	adds	r1, #36	; 0x24
 8006e94:	47a8      	blx	r5
				conn->accepted_conn = NULL;
 8006e96:	6227      	str	r7, [r4, #32]
			if (len) {
 8006e98:	9b06      	ldr	r3, [sp, #24]
 8006e9a:	b183      	cbz	r3, 8006ebe <tcp_in+0x31e>
				if (tcp_data_get(conn, pkt, &len) < 0) {
 8006e9c:	aa06      	add	r2, sp, #24
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7ff fa8b 	bl	80063bc <tcp_data_get>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	db09      	blt.n	8006ebe <tcp_in+0x31e>
				conn_ack(conn, + len);
 8006eaa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8006eae:	9a06      	ldr	r2, [sp, #24]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
				tcp_out(conn, ACK);
 8006eb6:	2110      	movs	r1, #16
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f00b fd5d 	bl	8012978 <tcp_out>
			next = TCP_ESTABLISHED;
 8006ebe:	2304      	movs	r3, #4
 8006ec0:	e78d      	b.n	8006dde <tcp_in+0x23e>
 8006ec2:	bf00      	nop
 8006ec4:	0801733d 	.word	0x0801733d
 8006ec8:	080164a2 	.word	0x080164a2
 8006ecc:	20000c38 	.word	0x20000c38
 8006ed0:	08017322 	.word	0x08017322
		if (FL(&fl, &, SYN | ACK, th && th_ack(th) == conn->seq)) {
 8006ed4:	f89d 9017 	ldrb.w	r9, [sp, #23]
 8006ed8:	f1b9 0f00 	cmp.w	r9, #0
 8006edc:	d070      	beq.n	8006fc0 <tcp_in+0x420>
 8006ede:	48b4      	ldr	r0, [pc, #720]	; (80071b0 <tcp_in+0x610>)
 8006ee0:	f7f9 fb1d 	bl	800051e <strlen>
 8006ee4:	b138      	cbz	r0, 8006ef6 <tcp_in+0x356>
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	d06a      	beq.n	8006fc0 <tcp_in+0x420>
 8006eea:	68ab      	ldr	r3, [r5, #8]
 8006eec:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
 8006ef0:	ba1b      	rev	r3, r3
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d164      	bne.n	8006fc0 <tcp_in+0x420>
 8006ef6:	f019 0f12 	tst.w	r9, #18
 8006efa:	d061      	beq.n	8006fc0 <tcp_in+0x420>
 8006efc:	f029 0912 	bic.w	r9, r9, #18
 8006f00:	f88d 9017 	strb.w	r9, [sp, #23]
			tcp_send_timer_cancel(conn);
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7ff f97f 	bl	8006208 <tcp_send_timer_cancel>
			conn_ack(conn, th_seq(th) + 1);
 8006f0a:	686b      	ldr	r3, [r5, #4]
 8006f0c:	ba1a      	rev	r2, r3
 8006f0e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8006f12:	3301      	adds	r3, #1
 8006f14:	4413      	add	r3, r2
 8006f16:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
			if (len) {
 8006f1a:	9b06      	ldr	r3, [sp, #24]
 8006f1c:	b163      	cbz	r3, 8006f38 <tcp_in+0x398>
				if (tcp_data_get(conn, pkt, &len) < 0) {
 8006f1e:	aa06      	add	r2, sp, #24
 8006f20:	4631      	mov	r1, r6
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7ff fa4a 	bl	80063bc <tcp_data_get>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	db49      	blt.n	8006fc0 <tcp_in+0x420>
				conn_ack(conn, + len);
 8006f2c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8006f30:	9a06      	ldr	r2, [sp, #24]
 8006f32:	4413      	add	r3, r2
 8006f34:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
			net_context_set_state(conn->context,
 8006f38:	6862      	ldr	r2, [r4, #4]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 8006f3a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8006f3e:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 8006f42:	f043 0304 	orr.w	r3, r3, #4
 8006f46:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
			tcp_out(conn, ACK);
 8006f4a:	2110      	movs	r1, #16
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f00b fd13 	bl	8012978 <tcp_out>
			connection_ok = true;
 8006f52:	f04f 0901 	mov.w	r9, #1
 8006f56:	e7b2      	b.n	8006ebe <tcp_in+0x31e>
		if (th && FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack)) {
 8006f58:	b395      	cbz	r5, 8006fc0 <tcp_in+0x420>
 8006f5a:	f89d a017 	ldrb.w	sl, [sp, #23]
 8006f5e:	f1ba 0f00 	cmp.w	sl, #0
 8006f62:	f000 8197 	beq.w	8007294 <tcp_in+0x6f4>
 8006f66:	4640      	mov	r0, r8
 8006f68:	f7f9 fad9 	bl	800051e <strlen>
 8006f6c:	b130      	cbz	r0, 8006f7c <tcp_in+0x3dc>
 8006f6e:	686b      	ldr	r3, [r5, #4]
 8006f70:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 8006f74:	ba1b      	rev	r3, r3
 8006f76:	4293      	cmp	r3, r2
 8006f78:	f040 81e0 	bne.w	800733c <tcp_in+0x79c>
 8006f7c:	f1ba 0f11 	cmp.w	sl, #17
 8006f80:	f040 81dc 	bne.w	800733c <tcp_in+0x79c>
 8006f84:	f88d 7017 	strb.w	r7, [sp, #23]
			if (net_tcp_seq_cmp(th_ack(th), conn->seq) > 0) {
 8006f88:	68ab      	ldr	r3, [r5, #8]
 8006f8a:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
 8006f8e:	ba1b      	rev	r3, r3
 8006f90:	1a9a      	subs	r2, r3, r2
 8006f92:	2a00      	cmp	r2, #0
				conn_seq(conn, + len_acked);
 8006f94:	bfc8      	it	gt
 8006f96:	f8c4 31ac 	strgt.w	r3, [r4, #428]	; 0x1ac
			conn_ack(conn, + 1);
 8006f9a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8006f9e:	3301      	adds	r3, #1
			conn_ack(conn, + len + 1);
 8006fa0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
			tcp_out(conn, FIN | ACK);
 8006fa4:	2111      	movs	r1, #17
		tcp_out(conn, FIN);
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f00b fce6 	bl	8012978 <tcp_out>
		next = TCP_LAST_ACK;
 8006fac:	2309      	movs	r3, #9
		break;
 8006fae:	e716      	b.n	8006dde <tcp_in+0x23e>
				if (tcp_data_get(conn, pkt, &len) < 0) {
 8006fb0:	aa06      	add	r2, sp, #24
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f7ff fa01 	bl	80063bc <tcp_data_get>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	f280 81b8 	bge.w	8007330 <tcp_in+0x790>
		break;
 8006fc0:	2700      	movs	r7, #0
 8006fc2:	e137      	b.n	8007234 <tcp_in+0x694>
			conn->send_data_total -= len_acked;
 8006fc4:	ebaa 0a03 	sub.w	sl, sl, r3
			if (conn->unacked_len < len_acked) {
 8006fc8:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
			conn->send_data_total -= len_acked;
 8006fcc:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
			if (conn->unacked_len < len_acked) {
 8006fd0:	428b      	cmp	r3, r1
				conn->unacked_len -= len_acked;
 8006fd2:	bf2c      	ite	cs
 8006fd4:	4453      	addcs	r3, sl
				conn->unacked_len = 0;
 8006fd6:	2300      	movcc	r3, #0
 8006fd8:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
			conn_seq(conn, + len_acked);
 8006fdc:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
			conn->send_data_total -= len_acked;
 8006fe0:	4452      	add	r2, sl
			conn_seq(conn, + len_acked);
 8006fe2:	4419      	add	r1, r3
			conn->send_data_total -= len_acked;
 8006fe4:	f8c4 2198 	str.w	r2, [r4, #408]	; 0x198
			conn_seq(conn, + len_acked);
 8006fe8:	f8c4 11ac 	str.w	r1, [r4, #428]	; 0x1ac
 8006fec:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8006ff0:	f00d fa0d 	bl	801440e <z_timeout_remaining>
			if (!k_work_delayable_remaining_get(
 8006ff4:	ea50 0301 	orrs.w	r3, r0, r1
 8006ff8:	f104 0ad8 	add.w	sl, r4, #216	; 0xd8
 8006ffc:	d0e0      	beq.n	8006fc0 <tcp_in+0x420>
			conn->send_data_retries = 0;
 8006ffe:	f884 71b8 	strb.w	r7, [r4, #440]	; 0x1b8
			k_work_cancel_delayable(&conn->send_data_timer);
 8007002:	4650      	mov	r0, sl
 8007004:	f00d f8e8 	bl	80141d8 <k_work_cancel_delayable>
			if (conn->data_mode == TCP_DATA_MODE_RESEND) {
 8007008:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
 800700c:	2b01      	cmp	r3, #1
			conn->data_mode = TCP_DATA_MODE_SEND;
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
			if (conn->in_close && conn->send_data_total == 0) {
 8007016:	f894 31b9 	ldrb.w	r3, [r4, #441]	; 0x1b9
				conn->unacked_len = 0;
 800701a:	bf08      	it	eq
 800701c:	f8c4 71a0 	streq.w	r7, [r4, #416]	; 0x1a0
			if (conn->in_close && conn->send_data_total == 0) {
 8007020:	075b      	lsls	r3, r3, #29
				tcp_send_timer_cancel(conn);
 8007022:	4620      	mov	r0, r4
			if (conn->in_close && conn->send_data_total == 0) {
 8007024:	d50f      	bpl.n	8007046 <tcp_in+0x4a6>
 8007026:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800702a:	b963      	cbnz	r3, 8007046 <tcp_in+0x4a6>
				tcp_send_timer_cancel(conn);
 800702c:	f7ff f8ec 	bl	8006208 <tcp_send_timer_cancel>
				tcp_out(conn, FIN | ACK);
 8007030:	2111      	movs	r1, #17
 8007032:	4620      	mov	r0, r4
 8007034:	f00b fca0 	bl	8012978 <tcp_out>
				conn_seq(conn, + 1);
 8007038:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
 800703c:	3301      	adds	r3, #1
 800703e:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				next = TCP_FIN_WAIT_1;
 8007042:	2305      	movs	r3, #5
				break;
 8007044:	e6cb      	b.n	8006dde <tcp_in+0x23e>
	if (conn->data_mode == TCP_DATA_MODE_RESEND) {
 8007046:	f7ff fc4f 	bl	80068e8 <tcp_send_queued_data.part.0>
			if (ret < 0 && ret != -ENOBUFS) {
 800704a:	2800      	cmp	r0, #0
 800704c:	da02      	bge.n	8007054 <tcp_in+0x4b4>
 800704e:	3069      	adds	r0, #105	; 0x69
 8007050:	f040 8137 	bne.w	80072c2 <tcp_in+0x722>
		if (th && len) {
 8007054:	9906      	ldr	r1, [sp, #24]
 8007056:	2900      	cmp	r1, #0
 8007058:	d0b2      	beq.n	8006fc0 <tcp_in+0x420>
			if (th_seq(th) == conn->ack) {
 800705a:	686d      	ldr	r5, [r5, #4]
 800705c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8007060:	ba2d      	rev	r5, r5
 8007062:	429d      	cmp	r5, r3
 8007064:	d111      	bne.n	800708a <tcp_in+0x4ea>
	if (tcp_data_get(conn, pkt, len) < 0) {
 8007066:	aa06      	add	r2, sp, #24
 8007068:	4631      	mov	r1, r6
 800706a:	4620      	mov	r0, r4
 800706c:	f7ff f9a6 	bl	80063bc <tcp_data_get>
 8007070:	2800      	cmp	r0, #0
 8007072:	dba5      	blt.n	8006fc0 <tcp_in+0x420>
	conn_ack(conn, *len);
 8007074:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8007078:	9a06      	ldr	r2, [sp, #24]
 800707a:	4413      	add	r3, r2
 800707c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
				tcp_out(conn, ACK); /* peer has resent */
 8007080:	2110      	movs	r1, #16
 8007082:	4620      	mov	r0, r4
 8007084:	f00b fc78 	bl	8012978 <tcp_out>
				net_stats_update_tcp_seg_ackerr(conn->iface);
 8007088:	e79a      	b.n	8006fc0 <tcp_in+0x420>
 800708a:	1b5b      	subs	r3, r3, r5
			} else if (net_tcp_seq_greater(conn->ack, th_seq(th))) {
 800708c:	2b00      	cmp	r3, #0
 800708e:	dcf7      	bgt.n	8007080 <tcp_in+0x4e0>
	headers_len = net_pkt_get_len(pkt) - data_len;
 8007090:	68b0      	ldr	r0, [r6, #8]
 8007092:	f00b fa4b 	bl	801252c <net_pkt_get_len.isra.0>
	if (tcp_pkt_pull(pkt, headers_len) < 0) {
 8007096:	1a41      	subs	r1, r0, r1
 8007098:	4630      	mov	r0, r6
 800709a:	f00b fa4f 	bl	801253c <tcp_pkt_pull>
 800709e:	2800      	cmp	r0, #0
 80070a0:	db8e      	blt.n	8006fc0 <tcp_in+0x420>
	tmp = pkt->buffer;
 80070a2:	68b2      	ldr	r2, [r6, #8]
	seq += tmp->len;
 80070a4:	8993      	ldrh	r3, [r2, #12]
	tmp = tmp->frags;
 80070a6:	6811      	ldr	r1, [r2, #0]
	*(uint32_t *)net_buf_user_data(buf) = seq;
 80070a8:	6155      	str	r5, [r2, #20]
	seq += tmp->len;
 80070aa:	442b      	add	r3, r5
	while (tmp) {
 80070ac:	bb09      	cbnz	r1, 80070f2 <tcp_in+0x552>
	if (!net_pkt_is_empty(conn->queue_recv_data)) {
 80070ae:	68e0      	ldr	r0, [r4, #12]
 80070b0:	6881      	ldr	r1, [r0, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 80070b2:	b379      	cbz	r1, 8007114 <tcp_in+0x574>
 80070b4:	688f      	ldr	r7, [r1, #8]
 80070b6:	b36f      	cbz	r7, 8007114 <tcp_in+0x574>
 80070b8:	898f      	ldrh	r7, [r1, #12]
 80070ba:	b35f      	cbz	r7, 8007114 <tcp_in+0x574>
		if (pending_seq == seq) {
 80070bc:	6948      	ldr	r0, [r1, #20]
 80070be:	4283      	cmp	r3, r0
 80070c0:	d11c      	bne.n	80070fc <tcp_in+0x55c>
			net_buf_frag_add(pkt->buffer,
 80070c2:	4610      	mov	r0, r2
 80070c4:	f009 fa5e 	bl	8010584 <net_buf_frag_add>
			conn->queue_recv_data->buffer = pkt->buffer;
 80070c8:	68e3      	ldr	r3, [r4, #12]
 80070ca:	68b2      	ldr	r2, [r6, #8]
 80070cc:	609a      	str	r2, [r3, #8]
		pkt->buffer = NULL;
 80070ce:	2300      	movs	r3, #0
		if (!k_work_delayable_is_pending(&conn->recv_queue_timer)) {
 80070d0:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
		pkt->buffer = NULL;
 80070d4:	60b3      	str	r3, [r6, #8]
	return k_work_delayable_busy_get(dwork) != 0;
 80070d6:	4628      	mov	r0, r5
 80070d8:	f00d f87c 	bl	80141d4 <k_work_delayable_busy_get>
		if (!k_work_delayable_is_pending(&conn->recv_queue_timer)) {
 80070dc:	2800      	cmp	r0, #0
 80070de:	f47f af6f 	bne.w	8006fc0 <tcp_in+0x420>
			k_work_reschedule_for_queue(
 80070e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070e6:	2300      	movs	r3, #0
 80070e8:	4629      	mov	r1, r5
		k_work_reschedule_for_queue(
 80070ea:	4832      	ldr	r0, [pc, #200]	; (80071b4 <tcp_in+0x614>)
 80070ec:	f005 fc12 	bl	800c914 <k_work_reschedule_for_queue>
		break;
 80070f0:	e766      	b.n	8006fc0 <tcp_in+0x420>
		seq += tmp->len;
 80070f2:	8988      	ldrh	r0, [r1, #12]
	*(uint32_t *)net_buf_user_data(buf) = seq;
 80070f4:	614b      	str	r3, [r1, #20]
		tmp = tmp->frags;
 80070f6:	6809      	ldr	r1, [r1, #0]
		seq += tmp->len;
 80070f8:	4403      	add	r3, r0
		tmp = tmp->frags;
 80070fa:	e7d7      	b.n	80070ac <tcp_in+0x50c>
			last = net_buf_frag_last(conn->queue_recv_data->buffer);
 80070fc:	4608      	mov	r0, r1
 80070fe:	f009 fa30 	bl	8010562 <net_buf_frag_last>
			if ((pending_seq + last->len) == seq_start) {
 8007102:	8983      	ldrh	r3, [r0, #12]
 8007104:	6942      	ldr	r2, [r0, #20]
 8007106:	4413      	add	r3, r2
 8007108:	429d      	cmp	r5, r3
 800710a:	f47f af59 	bne.w	8006fc0 <tcp_in+0x420>
				last->frags = pkt->buffer;
 800710e:	68b3      	ldr	r3, [r6, #8]
 8007110:	6003      	str	r3, [r0, #0]
	if (inserted) {
 8007112:	e7dc      	b.n	80070ce <tcp_in+0x52e>
		net_pkt_append_buffer(conn->queue_recv_data, pkt->buffer);
 8007114:	4611      	mov	r1, r2
 8007116:	f00a fcf2 	bl	8011afe <net_pkt_append_buffer>
	if (inserted) {
 800711a:	e7d8      	b.n	80070ce <tcp_in+0x52e>
		tcp_out(conn, FIN);
 800711c:	2101      	movs	r1, #1
 800711e:	e742      	b.n	8006fa6 <tcp_in+0x406>
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
 8007120:	2d00      	cmp	r5, #0
 8007122:	f43f af4d 	beq.w	8006fc0 <tcp_in+0x420>
 8007126:	f89d 6017 	ldrb.w	r6, [sp, #23]
 800712a:	2e00      	cmp	r6, #0
 800712c:	f43f af48 	beq.w	8006fc0 <tcp_in+0x420>
 8007130:	4640      	mov	r0, r8
 8007132:	f7f9 f9f4 	bl	800051e <strlen>
 8007136:	b130      	cbz	r0, 8007146 <tcp_in+0x5a6>
 8007138:	686b      	ldr	r3, [r5, #4]
 800713a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 800713e:	ba1b      	rev	r3, r3
 8007140:	4293      	cmp	r3, r2
 8007142:	f47f af3d 	bne.w	8006fc0 <tcp_in+0x420>
 8007146:	2e10      	cmp	r6, #16
 8007148:	f47f af3a 	bne.w	8006fc0 <tcp_in+0x420>
 800714c:	f88d 7017 	strb.w	r7, [sp, #23]
			tcp_send_timer_cancel(conn);
 8007150:	4620      	mov	r0, r4
 8007152:	f7ff f859 	bl	8006208 <tcp_send_timer_cancel>
			next = TCP_CLOSED;
 8007156:	230b      	movs	r3, #11
 8007158:	e641      	b.n	8006dde <tcp_in+0x23e>
		conn_ack(conn, + len);
 800715a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800715e:	4418      	add	r0, r3
 8007160:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
		if (th && FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack)) {
 8007164:	2d00      	cmp	r5, #0
 8007166:	f43f af2b 	beq.w	8006fc0 <tcp_in+0x420>
 800716a:	f89d 6017 	ldrb.w	r6, [sp, #23]
 800716e:	2e00      	cmp	r6, #0
 8007170:	f43f af26 	beq.w	8006fc0 <tcp_in+0x420>
 8007174:	4640      	mov	r0, r8
 8007176:	f7f9 f9d2 	bl	800051e <strlen>
 800717a:	b130      	cbz	r0, 800718a <tcp_in+0x5ea>
 800717c:	686b      	ldr	r3, [r5, #4]
 800717e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 8007182:	ba1b      	rev	r3, r3
 8007184:	4293      	cmp	r3, r2
 8007186:	f040 8108 	bne.w	800739a <tcp_in+0x7fa>
 800718a:	2e11      	cmp	r6, #17
 800718c:	f040 8105 	bne.w	800739a <tcp_in+0x7fa>
 8007190:	f88d 7017 	strb.w	r7, [sp, #23]
			tcp_send_timer_cancel(conn);
 8007194:	4620      	mov	r0, r4
 8007196:	f7ff f837 	bl	8006208 <tcp_send_timer_cancel>
			conn_ack(conn, + 1);
 800719a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800719e:	3301      	adds	r3, #1
 80071a0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
			tcp_out(conn, ACK);
 80071a4:	2110      	movs	r1, #16
 80071a6:	4620      	mov	r0, r4
 80071a8:	f00b fbe6 	bl	8012978 <tcp_out>
			next = TCP_TIME_WAIT;
 80071ac:	230a      	movs	r3, #10
 80071ae:	e616      	b.n	8006dde <tcp_in+0x23e>
 80071b0:	08017355 	.word	0x08017355
 80071b4:	20000c38 	.word	0x20000c38
		if (th && (FL(&fl, ==, FIN, th_seq(th) == conn->ack) ||
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	f43f af01 	beq.w	8006fc0 <tcp_in+0x420>
 80071be:	f89d 6017 	ldrb.w	r6, [sp, #23]
 80071c2:	2e00      	cmp	r6, #0
 80071c4:	f43f aefc 	beq.w	8006fc0 <tcp_in+0x420>
 80071c8:	4640      	mov	r0, r8
 80071ca:	f7f9 f9a8 	bl	800051e <strlen>
 80071ce:	b128      	cbz	r0, 80071dc <tcp_in+0x63c>
 80071d0:	686b      	ldr	r3, [r5, #4]
 80071d2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 80071d6:	ba1b      	rev	r3, r3
 80071d8:	4293      	cmp	r3, r2
 80071da:	d17a      	bne.n	80072d2 <tcp_in+0x732>
 80071dc:	2e01      	cmp	r6, #1
 80071de:	d178      	bne.n	80072d2 <tcp_in+0x732>
			   FL(&fl, ==, FIN | PSH | ACK,
 80071e0:	f88d 7017 	strb.w	r7, [sp, #23]
			k_work_cancel_delayable(&conn->fin_timer);
 80071e4:	f504 709c 	add.w	r0, r4, #312	; 0x138
 80071e8:	f00c fff6 	bl	80141d8 <k_work_cancel_delayable>
 80071ec:	e7d5      	b.n	800719a <tcp_in+0x5fa>
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	f43f aee6 	beq.w	8006fc0 <tcp_in+0x420>
 80071f4:	f89d 6017 	ldrb.w	r6, [sp, #23]
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	f43f aee1 	beq.w	8006fc0 <tcp_in+0x420>
 80071fe:	4640      	mov	r0, r8
 8007200:	f7f9 f98d 	bl	800051e <strlen>
 8007204:	b130      	cbz	r0, 8007214 <tcp_in+0x674>
 8007206:	686b      	ldr	r3, [r5, #4]
 8007208:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 800720c:	ba1b      	rev	r3, r3
 800720e:	4293      	cmp	r3, r2
 8007210:	f47f aed6 	bne.w	8006fc0 <tcp_in+0x420>
 8007214:	2e10      	cmp	r6, #16
 8007216:	f47f aed3 	bne.w	8006fc0 <tcp_in+0x420>
 800721a:	f88d 7017 	strb.w	r7, [sp, #23]
			tcp_send_timer_cancel(conn);
 800721e:	4620      	mov	r0, r4
 8007220:	f7fe fff2 	bl	8006208 <tcp_send_timer_cancel>
 8007224:	e7c2      	b.n	80071ac <tcp_in+0x60c>
		k_work_reschedule_for_queue(
 8007226:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800722a:	2300      	movs	r3, #0
 800722c:	f504 7184 	add.w	r1, r4, #264	; 0x108
 8007230:	e75b      	b.n	80070ea <tcp_in+0x54a>
		do_close = true;
 8007232:	2701      	movs	r7, #1
	if (conn->context) {
 8007234:	6866      	ldr	r6, [r4, #4]
 8007236:	b106      	cbz	r6, 800723a <tcp_in+0x69a>
		conn_handler = (struct net_conn *)conn->context->conn_handler;
 8007238:	6af6      	ldr	r6, [r6, #44]	; 0x2c
	recv_user_data = conn->recv_user_data;
 800723a:	f8d4 9014 	ldr.w	r9, [r4, #20]
	k_mutex_unlock(&conn->lock);
 800723e:	4658      	mov	r0, fp
 8007240:	f00b fa4f 	bl	80126e2 <k_mutex_unlock.isra.0>
	       (recv_pkt = k_fifo_get(recv_data_fifo, K_NO_WAIT)) != NULL) {
 8007244:	f104 0850 	add.w	r8, r4, #80	; 0x50
	while (conn_handler && atomic_get(&conn->ref_count) > 0 &&
 8007248:	b936      	cbnz	r6, 8007258 <tcp_in+0x6b8>
	if (do_close) {
 800724a:	b117      	cbz	r7, 8007252 <tcp_in+0x6b2>
		tcp_conn_unref(conn);
 800724c:	4620      	mov	r0, r4
 800724e:	f7ff f817 	bl	8006280 <tcp_conn_unref>
}
 8007252:	b011      	add	sp, #68	; 0x44
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	f3bf 8f5b 	dmb	ish
 800725c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8007260:	f3bf 8f5b 	dmb	ish
	while (conn_handler && atomic_get(&conn->ref_count) > 0 &&
 8007264:	2b00      	cmp	r3, #0
 8007266:	ddf0      	ble.n	800724a <tcp_in+0x6aa>
	return z_impl_k_queue_get(queue, timeout);
 8007268:	2200      	movs	r2, #0
 800726a:	2300      	movs	r3, #0
 800726c:	4640      	mov	r0, r8
 800726e:	f005 f963 	bl	800c538 <z_impl_k_queue_get>
 8007272:	4605      	mov	r5, r0
 8007274:	2800      	cmp	r0, #0
 8007276:	d0e8      	beq.n	800724a <tcp_in+0x6aa>
		if (net_context_packet_received(conn_handler, recv_pkt, NULL,
 8007278:	2300      	movs	r3, #0
 800727a:	f8cd 9000 	str.w	r9, [sp]
 800727e:	461a      	mov	r2, r3
 8007280:	4629      	mov	r1, r5
 8007282:	4630      	mov	r0, r6
 8007284:	f7fd fe86 	bl	8004f94 <net_context_packet_received>
 8007288:	2802      	cmp	r0, #2
 800728a:	d1dd      	bne.n	8007248 <tcp_in+0x6a8>
			tcp_pkt_unref(recv_pkt);
 800728c:	4628      	mov	r0, r5
 800728e:	f00a fbb1 	bl	80119f4 <net_pkt_unref>
 8007292:	e7d9      	b.n	8007248 <tcp_in+0x6a8>
		if (th && net_tcp_seq_cmp(th_ack(th), conn->seq) > 0) {
 8007294:	68ab      	ldr	r3, [r5, #8]
 8007296:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
 800729a:	ba1b      	rev	r3, r3
 800729c:	eba3 010a 	sub.w	r1, r3, sl
 80072a0:	2900      	cmp	r1, #0
 80072a2:	f77f aed7 	ble.w	8007054 <tcp_in+0x4b4>
			if ((conn->send_data_total < len_acked) ||
 80072a6:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 80072aa:	9303      	str	r3, [sp, #12]
 80072ac:	428a      	cmp	r2, r1
 80072ae:	d308      	bcc.n	80072c2 <tcp_in+0x722>
					(tcp_pkt_pull(conn->send_data,
 80072b0:	68a0      	ldr	r0, [r4, #8]
 80072b2:	9102      	str	r1, [sp, #8]
 80072b4:	f00b f942 	bl	801253c <tcp_pkt_pull>
			if ((conn->send_data_total < len_acked) ||
 80072b8:	2800      	cmp	r0, #0
 80072ba:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80072be:	f6bf ae81 	bge.w	8006fc4 <tcp_in+0x424>
				tcp_out(conn, RST);
 80072c2:	2104      	movs	r1, #4
 80072c4:	4620      	mov	r0, r4
 80072c6:	f00b fb57 	bl	8012978 <tcp_out>
				conn_state(conn, TCP_CLOSED);
 80072ca:	230b      	movs	r3, #11
 80072cc:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
				break;
 80072d0:	e676      	b.n	8006fc0 <tcp_in+0x420>
			   FL(&fl, ==, FIN | ACK, th_seq(th) == conn->ack) ||
 80072d2:	4640      	mov	r0, r8
 80072d4:	f7f9 f923 	bl	800051e <strlen>
 80072d8:	b128      	cbz	r0, 80072e6 <tcp_in+0x746>
 80072da:	686b      	ldr	r3, [r5, #4]
 80072dc:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 80072e0:	ba1b      	rev	r3, r3
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d102      	bne.n	80072ec <tcp_in+0x74c>
 80072e6:	2e11      	cmp	r6, #17
 80072e8:	f43f af7a 	beq.w	80071e0 <tcp_in+0x640>
			   FL(&fl, ==, FIN | PSH | ACK,
 80072ec:	4640      	mov	r0, r8
 80072ee:	f7f9 f916 	bl	800051e <strlen>
 80072f2:	b130      	cbz	r0, 8007302 <tcp_in+0x762>
 80072f4:	686b      	ldr	r3, [r5, #4]
 80072f6:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 80072fa:	ba1b      	rev	r3, r3
 80072fc:	4293      	cmp	r3, r2
 80072fe:	f47f ae5f 	bne.w	8006fc0 <tcp_in+0x420>
 8007302:	2e19      	cmp	r6, #25
 8007304:	f47f ae5c 	bne.w	8006fc0 <tcp_in+0x420>
 8007308:	e76a      	b.n	80071e0 <tcp_in+0x640>
		} else if (th && FL(&fl, ==, (FIN | ACK | PSH),
 800730a:	4640      	mov	r0, r8
 800730c:	f7f9 f907 	bl	800051e <strlen>
 8007310:	b128      	cbz	r0, 800731e <tcp_in+0x77e>
 8007312:	686b      	ldr	r3, [r5, #4]
 8007314:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 8007318:	ba1b      	rev	r3, r3
 800731a:	4293      	cmp	r3, r2
 800731c:	d1ba      	bne.n	8007294 <tcp_in+0x6f4>
 800731e:	f1ba 0f19 	cmp.w	sl, #25
 8007322:	d1b7      	bne.n	8007294 <tcp_in+0x6f4>
 8007324:	f88d 7017 	strb.w	r7, [sp, #23]
			if (len) {
 8007328:	9b06      	ldr	r3, [sp, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f47f ae40 	bne.w	8006fb0 <tcp_in+0x410>
			conn_ack(conn, + len + 1);
 8007330:	9b06      	ldr	r3, [sp, #24]
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8007338:	4413      	add	r3, r2
 800733a:	e631      	b.n	8006fa0 <tcp_in+0x400>
		} else if (th && FL(&fl, ==, FIN, th_seq(th) == conn->ack)) {
 800733c:	4640      	mov	r0, r8
 800733e:	f7f9 f8ee 	bl	800051e <strlen>
 8007342:	b128      	cbz	r0, 8007350 <tcp_in+0x7b0>
 8007344:	686b      	ldr	r3, [r5, #4]
 8007346:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 800734a:	ba1b      	rev	r3, r3
 800734c:	4293      	cmp	r3, r2
 800734e:	d1dc      	bne.n	800730a <tcp_in+0x76a>
 8007350:	f1ba 0f01 	cmp.w	sl, #1
 8007354:	d1d9      	bne.n	800730a <tcp_in+0x76a>
 8007356:	f88d 7017 	strb.w	r7, [sp, #23]
			conn_ack(conn, + 1);
 800735a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800735e:	3301      	adds	r3, #1
 8007360:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
			tcp_out(conn, ACK);
 8007364:	2110      	movs	r1, #16
 8007366:	4620      	mov	r0, r4
 8007368:	f00b fb06 	bl	8012978 <tcp_out>
			next = TCP_CLOSE_WAIT;
 800736c:	2307      	movs	r3, #7
			break;
 800736e:	e536      	b.n	8006dde <tcp_in+0x23e>
		} else if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
 8007370:	4640      	mov	r0, r8
 8007372:	f7f9 f8d4 	bl	800051e <strlen>
 8007376:	b130      	cbz	r0, 8007386 <tcp_in+0x7e6>
 8007378:	686b      	ldr	r3, [r5, #4]
 800737a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 800737e:	ba1b      	rev	r3, r3
 8007380:	4293      	cmp	r3, r2
 8007382:	f47f ae1d 	bne.w	8006fc0 <tcp_in+0x420>
 8007386:	2e10      	cmp	r6, #16
 8007388:	f47f ae1a 	bne.w	8006fc0 <tcp_in+0x420>
 800738c:	f88d 7017 	strb.w	r7, [sp, #23]
			tcp_send_timer_cancel(conn);
 8007390:	4620      	mov	r0, r4
 8007392:	f7fe ff39 	bl	8006208 <tcp_send_timer_cancel>
			next = TCP_FIN_WAIT_2;
 8007396:	2306      	movs	r3, #6
 8007398:	e521      	b.n	8006dde <tcp_in+0x23e>
		} else if (th && FL(&fl, ==, FIN, th_seq(th) == conn->ack)) {
 800739a:	4640      	mov	r0, r8
 800739c:	f7f9 f8bf 	bl	800051e <strlen>
 80073a0:	b128      	cbz	r0, 80073ae <tcp_in+0x80e>
 80073a2:	686b      	ldr	r3, [r5, #4]
 80073a4:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
 80073a8:	ba1b      	rev	r3, r3
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d1e0      	bne.n	8007370 <tcp_in+0x7d0>
 80073ae:	2e01      	cmp	r6, #1
 80073b0:	d1de      	bne.n	8007370 <tcp_in+0x7d0>
 80073b2:	f88d 7017 	strb.w	r7, [sp, #23]
			tcp_send_timer_cancel(conn);
 80073b6:	4620      	mov	r0, r4
 80073b8:	f7fe ff26 	bl	8006208 <tcp_send_timer_cancel>
			conn_ack(conn, + 1);
 80073bc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80073c0:	3301      	adds	r3, #1
 80073c2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
			tcp_out(conn, ACK);
 80073c6:	2110      	movs	r1, #16
 80073c8:	4620      	mov	r0, r4
 80073ca:	f00b fad5 	bl	8012978 <tcp_out>
			next = TCP_CLOSING;
 80073ce:	2308      	movs	r3, #8
 80073d0:	e505      	b.n	8006dde <tcp_in+0x23e>
 80073d2:	bf00      	nop

080073d4 <net_tcp_connect>:
{
 80073d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	4605      	mov	r5, r0
 80073da:	b086      	sub	sp, #24
	conn = context->tcp;
 80073dc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	conn->iface = net_context_get_iface(context);
 80073de:	f990 0088 	ldrsb.w	r0, [r0, #136]	; 0x88
{
 80073e2:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 80073e6:	4689      	mov	r9, r1
 80073e8:	4692      	mov	sl, r2
 80073ea:	461e      	mov	r6, r3
	conn->iface = net_context_get_iface(context);
 80073ec:	f00b f8c3 	bl	8012576 <net_context_get_iface.isra.0>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 80073f0:	f8b5 7086 	ldrh.w	r7, [r5, #134]	; 0x86
 80073f4:	6120      	str	r0, [r4, #16]
 80073f6:	f3c7 07c2 	ubfx	r7, r7, #3, #3
	switch (net_context_get_family(context)) {
 80073fa:	2f01      	cmp	r7, #1
 80073fc:	d050      	beq.n	80074a0 <net_tcp_connect+0xcc>
 80073fe:	2f02      	cmp	r7, #2
 8007400:	d06b      	beq.n	80074da <net_tcp_connect+0x106>
		conn->seq = tcp_init_isn(&conn->src.sa, &conn->dst.sa);
 8007402:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 8007406:	f504 70b4 	add.w	r0, r4, #360	; 0x168
 800740a:	f7fe fe3d 	bl	8006088 <tcp_init_isn>
 800740e:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 8007412:	f8b5 0086 	ldrh.w	r0, [r5, #134]	; 0x86
 8007416:	f020 0006 	bic.w	r0, r0, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 800741a:	f040 0002 	orr.w	r0, r0, #2
 800741e:	b280      	uxth	r0, r0
	ret = net_conn_register(net_context_get_ip_proto(context),
 8007420:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 8007424:	f8a5 0086 	strh.w	r0, [r5, #134]	; 0x86
 8007428:	e9cd 5304 	strd	r5, r3, [sp, #16]
 800742c:	4b3b      	ldr	r3, [pc, #236]	; (800751c <net_tcp_connect+0x148>)
 800742e:	fa98 f898 	rev16.w	r8, r8
 8007432:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8007436:	ba76      	rev16	r6, r6
 8007438:	fa1f f388 	uxth.w	r3, r8
 800743c:	b2b6      	uxth	r6, r6
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	9600      	str	r6, [sp, #0]
 8007442:	f3c0 01c2 	ubfx	r1, r0, #3, #3
 8007446:	4653      	mov	r3, sl
 8007448:	f8b5 0084 	ldrh.w	r0, [r5, #132]	; 0x84
 800744c:	464a      	mov	r2, r9
 800744e:	f7fe fbd3 	bl	8005bf8 <net_conn_register>
	if (ret < 0) {
 8007452:	1e05      	subs	r5, r0, #0
 8007454:	db20      	blt.n	8007498 <net_tcp_connect+0xc4>
	tcp_in(conn, NULL);
 8007456:	2100      	movs	r1, #0
 8007458:	4620      	mov	r0, r4
 800745a:	f7ff fba1 	bl	8006ba0 <tcp_in>
		conn->in_connect = true;
 800745e:	f894 31b9 	ldrb.w	r3, [r4, #441]	; 0x1b9
 8007462:	f043 0302 	orr.w	r3, r3, #2
 8007466:	f884 31b9 	strb.w	r3, [r4, #441]	; 0x1b9
	return z_impl_k_sem_take(sem, timeout);
 800746a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800746e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8007472:	f005 f8bb 	bl	800c5ec <z_impl_k_sem_take>
 8007476:	f894 31b9 	ldrb.w	r3, [r4, #441]	; 0x1b9
			conn->in_connect = false;
 800747a:	f36f 0341 	bfc	r3, #1, #1
		if (k_sem_take(&conn->connect_sem, timeout) != 0 &&
 800747e:	2800      	cmp	r0, #0
 8007480:	d049      	beq.n	8007516 <net_tcp_connect+0x142>
 8007482:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
 8007486:	2a04      	cmp	r2, #4
 8007488:	d045      	beq.n	8007516 <net_tcp_connect+0x142>
			conn->in_connect = false;
 800748a:	f884 31b9 	strb.w	r3, [r4, #441]	; 0x1b9
			tcp_conn_unref(conn);
 800748e:	4620      	mov	r0, r4
 8007490:	f7fe fef6 	bl	8006280 <tcp_conn_unref>
			ret = -ETIMEDOUT;
 8007494:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
 8007498:	4628      	mov	r0, r5
 800749a:	b006      	add	sp, #24
 800749c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a0:	2300      	movs	r3, #0
 80074a2:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 80074a6:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
		conn->src.sa.sa_family = AF_INET;
 80074aa:	f8a4 7168 	strh.w	r7, [r4, #360]	; 0x168
		conn->dst.sa.sa_family = AF_INET;
 80074ae:	f8a4 7180 	strh.w	r7, [r4, #384]	; 0x180
		conn->dst.sin.sin_port = remote_port;
 80074b2:	f8a4 6182 	strh.w	r6, [r4, #386]	; 0x182
		conn->src.sin.sin_port = local_port;
 80074b6:	f8a4 816a 	strh.w	r8, [r4, #362]	; 0x16a
		ip4 = net_if_ipv4_select_src_addr(
 80074ba:	f995 0088 	ldrsb.w	r0, [r5, #136]	; 0x88
 80074be:	f00b f85a 	bl	8012576 <net_context_get_iface.isra.0>
 80074c2:	f109 0104 	add.w	r1, r9, #4
 80074c6:	f7fd f9b1 	bl	800482c <net_if_ipv4_select_src_addr>
		conn->src.sin.sin_addr = *ip4;
 80074ca:	6803      	ldr	r3, [r0, #0]
 80074cc:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
		net_ipaddr_copy(&conn->dst.sin.sin_addr,
 80074d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80074d4:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
		break;
 80074d8:	e793      	b.n	8007402 <net_tcp_connect+0x2e>
 80074da:	f504 79b6 	add.w	r9, r4, #364	; 0x16c
 80074de:	2214      	movs	r2, #20
 80074e0:	2100      	movs	r1, #0
 80074e2:	4648      	mov	r0, r9
 80074e4:	f00d f99d 	bl	8014822 <memset>
 80074e8:	2214      	movs	r2, #20
 80074ea:	2100      	movs	r1, #0
 80074ec:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 80074f0:	f00d f997 	bl	8014822 <memset>
		conn->src.sin6.sin6_family = AF_INET6;
 80074f4:	f8a4 7168 	strh.w	r7, [r4, #360]	; 0x168
		conn->dst.sin6.sin6_family = AF_INET6;
 80074f8:	f8a4 7180 	strh.w	r7, [r4, #384]	; 0x180
		conn->dst.sin6.sin6_port = remote_port;
 80074fc:	f8a4 6182 	strh.w	r6, [r4, #386]	; 0x182
		conn->src.sin6.sin6_port = local_port;
 8007500:	f8a4 816a 	strh.w	r8, [r4, #362]	; 0x16a
		ip6 = net_if_ipv6_select_src_addr(
 8007504:	f995 0088 	ldrsb.w	r0, [r5, #136]	; 0x88
 8007508:	f00b f835 	bl	8012576 <net_context_get_iface.isra.0>
		conn->src.sin6.sin6_addr = *ip6;
 800750c:	2300      	movs	r3, #0
 800750e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007510:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8007514:	deff      	udf	#255	; 0xff
		conn->in_connect = false;
 8007516:	f884 31b9 	strb.w	r3, [r4, #441]	; 0x1b9
	return ret;
 800751a:	e7bd      	b.n	8007498 <net_tcp_connect+0xc4>
 800751c:	08007521 	.word	0x08007521

08007520 <tcp_recv>:
{
 8007520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return list->head;
 8007524:	4b58      	ldr	r3, [pc, #352]	; (8007688 <tcp_recv+0x168>)
 8007526:	681c      	ldr	r4, [r3, #0]
 8007528:	b08b      	sub	sp, #44	; 0x2c
 800752a:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
 800752c:	b94c      	cbnz	r4, 8007542 <tcp_recv+0x22>
	th = th_get(pkt);
 800752e:	4628      	mov	r0, r5
 8007530:	f00b f823 	bl	801257a <th_get>
	if (th_flags(th) & SYN && !(th_flags(th) & ACK)) {
 8007534:	7b46      	ldrb	r6, [r0, #13]
 8007536:	07b3      	lsls	r3, r6, #30
 8007538:	d41d      	bmi.n	8007576 <tcp_recv+0x56>
}
 800753a:	2002      	movs	r0, #2
 800753c:	b00b      	add	sp, #44	; 0x2c
 800753e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return node->next;
 8007542:	6826      	ldr	r6, [r4, #0]
	return tcp_endpoint_cmp(&conn->src, pkt, TCP_EP_DST) &&
 8007544:	2200      	movs	r2, #0
 8007546:	4629      	mov	r1, r5
 8007548:	f504 70b4 	add.w	r0, r4, #360	; 0x168
 800754c:	f00b f8b1 	bl	80126b2 <tcp_endpoint_cmp>
 8007550:	b920      	cbnz	r0, 800755c <tcp_recv+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
 8007552:	2e00      	cmp	r6, #0
 8007554:	d0eb      	beq.n	800752e <tcp_recv+0xe>
 8007556:	4634      	mov	r4, r6
 8007558:	6836      	ldr	r6, [r6, #0]
 800755a:	e7f3      	b.n	8007544 <tcp_recv+0x24>
		tcp_endpoint_cmp(&conn->dst, pkt, TCP_EP_SRC);
 800755c:	2201      	movs	r2, #1
 800755e:	4629      	mov	r1, r5
 8007560:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8007564:	f00b f8a5 	bl	80126b2 <tcp_endpoint_cmp>
		if (found) {
 8007568:	2800      	cmp	r0, #0
 800756a:	d0f2      	beq.n	8007552 <tcp_recv+0x32>
		tcp_in(conn, pkt);
 800756c:	4629      	mov	r1, r5
 800756e:	4620      	mov	r0, r4
 8007570:	f7ff fb16 	bl	8006ba0 <tcp_in>
	return NET_DROP;
 8007574:	e7e1      	b.n	800753a <tcp_recv+0x1a>
	if (th_flags(th) & SYN && !(th_flags(th) & ACK)) {
 8007576:	f016 0610 	ands.w	r6, r6, #16
 800757a:	d1de      	bne.n	800753a <tcp_recv+0x1a>
	return pkt->family;
 800757c:	f895 7037 	ldrb.w	r7, [r5, #55]	; 0x37
		struct tcp *conn_old = ((struct net_context *)user_data)->tcp;
 8007580:	9b12      	ldr	r3, [sp, #72]	; 0x48
	struct net_context *context = NULL;
 8007582:	9607      	str	r6, [sp, #28]
 8007584:	f3c7 0942 	ubfx	r9, r7, #1, #3
		struct tcp *conn_old = ((struct net_context *)user_data)->tcp;
 8007588:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
	ret = net_context_get(af, SOCK_STREAM, IPPROTO_TCP, &context);
 800758c:	2206      	movs	r2, #6
 800758e:	ab07      	add	r3, sp, #28
 8007590:	2101      	movs	r1, #1
 8007592:	4648      	mov	r0, r9
	struct sockaddr local_addr = { 0 };
 8007594:	e9cd 6608 	strd	r6, r6, [sp, #32]
	ret = net_context_get(af, SOCK_STREAM, IPPROTO_TCP, &context);
 8007598:	f7fd fd54 	bl	8005044 <net_context_get>
	if (ret < 0) {
 800759c:	2800      	cmp	r0, #0
 800759e:	dbcc      	blt.n	800753a <tcp_recv+0x1a>
	conn = context->tcp;
 80075a0:	9b07      	ldr	r3, [sp, #28]
 80075a2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
	conn->iface = pkt->iface;
 80075a4:	69ab      	ldr	r3, [r5, #24]
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	net_context_set_family(conn->context, net_pkt_family(pkt));
 80075ac:	6862      	ldr	r2, [r4, #4]
 80075ae:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (family == AF_UNSPEC || family == AF_INET || family == AF_INET6 ||
 80075b2:	2b04      	cmp	r3, #4
		flag = family << 3;
 80075b4:	bf98      	it	ls
 80075b6:	00de      	lslls	r6, r3, #3
	context->flags |= flag;
 80075b8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80075bc:	431e      	orrs	r6, r3
 80075be:	f8a2 6086 	strh.w	r6, [r2, #134]	; 0x86
	if (tcp_endpoint_set(&conn->dst, pkt, TCP_EP_SRC) < 0) {
 80075c2:	f504 76c0 	add.w	r6, r4, #384	; 0x180
 80075c6:	2201      	movs	r2, #1
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f00b f847 	bl	801265e <tcp_endpoint_set>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	da03      	bge.n	80075dc <tcp_recv+0xbc>
		net_context_unref(context);
 80075d4:	9807      	ldr	r0, [sp, #28]
 80075d6:	f009 fcf8 	bl	8010fca <net_context_unref>
		if (!conn) {
 80075da:	e7ae      	b.n	800753a <tcp_recv+0x1a>
	if (tcp_endpoint_set(&conn->src, pkt, TCP_EP_DST) < 0) {
 80075dc:	2200      	movs	r2, #0
 80075de:	4629      	mov	r1, r5
 80075e0:	f504 70b4 	add.w	r0, r4, #360	; 0x168
 80075e4:	f00b f83b 	bl	801265e <tcp_endpoint_set>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	dbf3      	blt.n	80075d4 <tcp_recv+0xb4>
	memcpy(&context->remote, &conn->dst, sizeof(context->remote));
 80075ec:	9a07      	ldr	r2, [sp, #28]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80075ee:	6833      	ldr	r3, [r6, #0]
 80075f0:	6253      	str	r3, [r2, #36]	; 0x24
 80075f2:	6873      	ldr	r3, [r6, #4]
 80075f4:	6293      	str	r3, [r2, #40]	; 0x28
	context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 80075f6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
	net_sin_ptr(&context->local)->sin_family = af;
 80075fa:	f8a2 901c 	strh.w	r9, [r2, #28]
	context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 80075fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007602:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8007606:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 800760a:	2b01      	cmp	r3, #1
	local_addr.sa_family = net_context_get_family(context);
 800760c:	f8ad 3020 	strh.w	r3, [sp, #32]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8007610:	d103      	bne.n	800761a <tcp_recv+0xfa>
		if (net_sin_ptr(&context->local)->sin_addr) {
 8007612:	6a13      	ldr	r3, [r2, #32]
 8007614:	b10b      	cbz	r3, 800761a <tcp_recv+0xfa>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	9309      	str	r3, [sp, #36]	; 0x24
	ret = net_context_bind(context, &local_addr, sizeof(local_addr));
 800761a:	9807      	ldr	r0, [sp, #28]
 800761c:	2208      	movs	r2, #8
 800761e:	a908      	add	r1, sp, #32
 8007620:	f009 fd02 	bl	8011028 <net_context_bind>
	if (ret < 0) {
 8007624:	2800      	cmp	r0, #0
 8007626:	dbd5      	blt.n	80075d4 <tcp_recv+0xb4>
		conn->seq = tcp_init_isn(&local_addr, &context->remote);
 8007628:	9907      	ldr	r1, [sp, #28]
 800762a:	a808      	add	r0, sp, #32
 800762c:	3124      	adds	r1, #36	; 0x24
 800762e:	f7fe fd2b 	bl	8006088 <tcp_init_isn>
				&context->remote, &local_addr,
 8007632:	9a07      	ldr	r2, [sp, #28]
		conn->seq = tcp_init_isn(&local_addr, &context->remote);
 8007634:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
	ret = net_conn_register(IPPROTO_TCP, af,
 8007638:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 800763c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007640:	4b12      	ldr	r3, [pc, #72]	; (800768c <tcp_recv+0x16c>)
 8007642:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007646:	f8b4 316a 	ldrh.w	r3, [r4, #362]	; 0x16a
 800764a:	ba5b      	rev16	r3, r3
 800764c:	b29b      	uxth	r3, r3
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
 8007654:	ba5b      	rev16	r3, r3
 8007656:	b29b      	uxth	r3, r3
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	3224      	adds	r2, #36	; 0x24
 800765c:	ab08      	add	r3, sp, #32
 800765e:	4649      	mov	r1, r9
 8007660:	2006      	movs	r0, #6
 8007662:	f7fe fac9 	bl	8005bf8 <net_conn_register>
	if (ret < 0) {
 8007666:	2800      	cmp	r0, #0
 8007668:	dbb4      	blt.n	80075d4 <tcp_recv+0xb4>
		net_ipaddr_copy(&conn_old->context->remote, &conn->dst.sa);
 800766a:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 800766e:	6871      	ldr	r1, [r6, #4]
 8007670:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007674:	ab08      	add	r3, sp, #32
 8007676:	c303      	stmia	r3!, {r0, r1}
 8007678:	ab08      	add	r3, sp, #32
 800767a:	cb03      	ldmia	r3!, {r0, r1}
 800767c:	6250      	str	r0, [r2, #36]	; 0x24
 800767e:	6291      	str	r1, [r2, #40]	; 0x28
		conn->accepted_conn = conn_old;
 8007680:	f8c4 8020 	str.w	r8, [r4, #32]
 8007684:	e772      	b.n	800756c <tcp_recv+0x4c>
 8007686:	bf00      	nop
 8007688:	200023cc 	.word	0x200023cc
 800768c:	08007521 	.word	0x08007521

08007690 <net_tcp_state_str>:
	switch (state) {
 8007690:	3801      	subs	r0, #1
 8007692:	b2c0      	uxtb	r0, r0
 8007694:	280a      	cmp	r0, #10
 8007696:	bf9a      	itte	ls
 8007698:	4b02      	ldrls	r3, [pc, #8]	; (80076a4 <net_tcp_state_str+0x14>)
 800769a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]

	return 0;
}

const char *net_tcp_state_str(enum tcp_state state)
{
 800769e:	2000      	movhi	r0, #0
	return tcp_state_to_str(state, false);
}
 80076a0:	3004      	adds	r0, #4
 80076a2:	4770      	bx	lr
 80076a4:	0801583c 	.word	0x0801583c

080076a8 <net_tcp_init>:

void net_tcp_init(void)
{
 80076a8:	b513      	push	{r0, r1, r4, lr}
#define THREAD_PRIORITY K_PRIO_PREEMPT(0)
#endif

	/* Use private workqueue in order not to block the system work queue.
	 */
	k_work_queue_start(&tcp_work_q, work_q_stack,
 80076aa:	4c09      	ldr	r4, [pc, #36]	; (80076d0 <net_tcp_init+0x28>)
 80076ac:	4909      	ldr	r1, [pc, #36]	; (80076d4 <net_tcp_init+0x2c>)
 80076ae:	2300      	movs	r3, #0
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076b6:	f06f 030f 	mvn.w	r3, #15
 80076ba:	4620      	mov	r0, r4
 80076bc:	f005 f8c8 	bl	800c850 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
 80076c0:	4905      	ldr	r1, [pc, #20]	; (80076d8 <net_tcp_init+0x30>)
 80076c2:	4620      	mov	r0, r4
			   K_KERNEL_STACK_SIZEOF(work_q_stack), THREAD_PRIORITY,
			   NULL);

	k_thread_name_set(&tcp_work_q.thread, "tcp_work");
	NET_DBG("Workq started. Thread ID: %p", &tcp_work_q.thread);
}
 80076c4:	b002      	add	sp, #8
 80076c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ca:	f004 bd51 	b.w	800c170 <z_impl_k_thread_name_set>
 80076ce:	bf00      	nop
 80076d0:	20000c38 	.word	0x20000c38
 80076d4:	20003800 	.word	0x20003800
 80076d8:	08017373 	.word	0x08017373

080076dc <cmd_net_websocket>:
}
#endif /* CONFIG_WEBSOCKET_CLIENT */

static int cmd_net_websocket(const struct shell *shell, size_t argc,
			     char *argv[])
{
 80076dc:	b507      	push	{r0, r1, r2, lr}

	if (count == 0) {
		PR("No connections\n");
	}
#else
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_WEBSOCKET_CLIENT",
 80076de:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <cmd_net_websocket+0x18>)
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	4a05      	ldr	r2, [pc, #20]	; (80076f8 <cmd_net_websocket+0x1c>)
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <cmd_net_websocket+0x20>)
 80076e6:	2102      	movs	r1, #2
 80076e8:	f007 fddc 	bl	800f2a4 <shell_fprintf>
		"Websocket");
#endif /* CONFIG_WEBSOCKET_CLIENT */

	return 0;
}
 80076ec:	2000      	movs	r0, #0
 80076ee:	b003      	add	sp, #12
 80076f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80076f4:	0801744a 	.word	0x0801744a
 80076f8:	0801742c 	.word	0x0801742c
 80076fc:	08017414 	.word	0x08017414

08007700 <cmd_net_vlan>:
{
 8007700:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_VLAN", "VLAN");
 8007702:	4b05      	ldr	r3, [pc, #20]	; (8007718 <cmd_net_vlan+0x18>)
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	4a05      	ldr	r2, [pc, #20]	; (800771c <cmd_net_vlan+0x1c>)
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <cmd_net_vlan+0x20>)
 800770a:	2102      	movs	r1, #2
 800770c:	f007 fdca 	bl	800f2a4 <shell_fprintf>
}
 8007710:	2000      	movs	r0, #0
 8007712:	b003      	add	sp, #12
 8007714:	f85d fb04 	ldr.w	pc, [sp], #4
 8007718:	0801745f 	.word	0x0801745f
 800771c:	0801742c 	.word	0x0801742c
 8007720:	08017454 	.word	0x08017454

08007724 <cmd_net_virtual>:
{
 8007724:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_L2_VIRTUAL",
 8007726:	4b05      	ldr	r3, [pc, #20]	; (800773c <cmd_net_virtual+0x18>)
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	4a05      	ldr	r2, [pc, #20]	; (8007740 <cmd_net_virtual+0x1c>)
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <cmd_net_virtual+0x20>)
 800772e:	2102      	movs	r1, #2
 8007730:	f007 fdb8 	bl	800f2a4 <shell_fprintf>
}
 8007734:	2000      	movs	r0, #0
 8007736:	b003      	add	sp, #12
 8007738:	f85d fb04 	ldr.w	pc, [sp], #4
 800773c:	0801747a 	.word	0x0801747a
 8007740:	0801742c 	.word	0x0801742c
 8007744:	08017464 	.word	0x08017464

08007748 <tcp_sent_cb>:
	PR_SHELL(tcp_shell, "Message sent\n");
 8007748:	4b02      	ldr	r3, [pc, #8]	; (8007754 <tcp_sent_cb+0xc>)
 800774a:	4a03      	ldr	r2, [pc, #12]	; (8007758 <tcp_sent_cb+0x10>)
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	2108      	movs	r1, #8
 8007750:	f007 bda8 	b.w	800f2a4 <shell_fprintf>
 8007754:	200023e4 	.word	0x200023e4
 8007758:	08017494 	.word	0x08017494

0800775c <cmd_net_suspend>:
{
 800775c:	b508      	push	{r3, lr}
	PR_INFO("You need a network driver supporting Power Management.\n");
 800775e:	4a03      	ldr	r2, [pc, #12]	; (800776c <cmd_net_suspend+0x10>)
 8007760:	2102      	movs	r1, #2
 8007762:	f007 fd9f 	bl	800f2a4 <shell_fprintf>
}
 8007766:	2000      	movs	r0, #0
 8007768:	bd08      	pop	{r3, pc}
 800776a:	bf00      	nop
 800776c:	080174a2 	.word	0x080174a2

08007770 <cmd_net_stats_all>:
{
 8007770:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_STATISTICS",
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <cmd_net_stats_all+0x18>)
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	4a05      	ldr	r2, [pc, #20]	; (800778c <cmd_net_stats_all+0x1c>)
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <cmd_net_stats_all+0x20>)
 800777a:	2102      	movs	r1, #2
 800777c:	f007 fd92 	bl	800f2a4 <shell_fprintf>
}
 8007780:	2000      	movs	r0, #0
 8007782:	b003      	add	sp, #12
 8007784:	f85d fb04 	ldr.w	pc, [sp], #4
 8007788:	080174f0 	.word	0x080174f0
 800778c:	0801742c 	.word	0x0801742c
 8007790:	080174da 	.word	0x080174da

08007794 <cmd_net_stacks>:
{
 8007794:	b508      	push	{r3, lr}
	PR("Type \"kernel stacks\" to see stack information.\n");
 8007796:	4a03      	ldr	r2, [pc, #12]	; (80077a4 <cmd_net_stacks+0x10>)
 8007798:	2108      	movs	r1, #8
 800779a:	f007 fd83 	bl	800f2a4 <shell_fprintf>
}
 800779e:	2000      	movs	r0, #0
 80077a0:	bd08      	pop	{r3, pc}
 80077a2:	bf00      	nop
 80077a4:	080174fb 	.word	0x080174fb

080077a8 <cmd_net_route>:
{
 80077a8:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_ROUTE",
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <cmd_net_route+0x18>)
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	4a05      	ldr	r2, [pc, #20]	; (80077c4 <cmd_net_route+0x1c>)
 80077b0:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <cmd_net_route+0x20>)
 80077b2:	2102      	movs	r1, #2
 80077b4:	f007 fd76 	bl	800f2a4 <shell_fprintf>
}
 80077b8:	2000      	movs	r0, #0
 80077ba:	b003      	add	sp, #12
 80077bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80077c0:	0801753c 	.word	0x0801753c
 80077c4:	0801742c 	.word	0x0801742c
 80077c8:	0801752b 	.word	0x0801752b

080077cc <cmd_net_ppp_status>:
{
 80077cc:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <cmd_net_ppp_status+0x18>)
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4a05      	ldr	r2, [pc, #20]	; (80077e8 <cmd_net_ppp_status+0x1c>)
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <cmd_net_ppp_status+0x20>)
 80077d6:	2102      	movs	r1, #2
 80077d8:	f007 fd64 	bl	800f2a4 <shell_fprintf>
}
 80077dc:	2000      	movs	r0, #0
 80077de:	b003      	add	sp, #12
 80077e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80077e4:	0801757d 	.word	0x0801757d
 80077e8:	0801742c 	.word	0x0801742c
 80077ec:	0801754a 	.word	0x0801754a

080077f0 <cmd_net_ppp_ping>:
{
 80077f0:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_L2_PPP", "PPP");
 80077f2:	4b05      	ldr	r3, [pc, #20]	; (8007808 <cmd_net_ppp_ping+0x18>)
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4a05      	ldr	r2, [pc, #20]	; (800780c <cmd_net_ppp_ping+0x1c>)
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <cmd_net_ppp_ping+0x20>)
 80077fa:	2102      	movs	r1, #2
 80077fc:	f007 fd52 	bl	800f2a4 <shell_fprintf>
}
 8007800:	2000      	movs	r0, #0
 8007802:	b003      	add	sp, #12
 8007804:	f85d fb04 	ldr.w	pc, [sp], #4
 8007808:	0801757d 	.word	0x0801757d
 800780c:	0801742c 	.word	0x0801742c
 8007810:	0801756f 	.word	0x0801756f

08007814 <cmd_net_nbr_rm>:
{
 8007814:	b508      	push	{r3, lr}
	PR_INFO("IPv6 not enabled.\n");
 8007816:	4a03      	ldr	r2, [pc, #12]	; (8007824 <cmd_net_nbr_rm+0x10>)
 8007818:	2102      	movs	r1, #2
 800781a:	f007 fd43 	bl	800f2a4 <shell_fprintf>
}
 800781e:	2000      	movs	r0, #0
 8007820:	bd08      	pop	{r3, pc}
 8007822:	bf00      	nop
 8007824:	08017581 	.word	0x08017581

08007828 <cmd_net_ipv6>:
{
 8007828:	b508      	push	{r3, lr}
	PR("IPv6 support                              : %s\n",
 800782a:	4a04      	ldr	r2, [pc, #16]	; (800783c <cmd_net_ipv6+0x14>)
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <cmd_net_ipv6+0x18>)
 800782e:	2108      	movs	r1, #8
 8007830:	f007 fd38 	bl	800f2a4 <shell_fprintf>
}
 8007834:	f06f 0007 	mvn.w	r0, #7
 8007838:	bd08      	pop	{r3, pc}
 800783a:	bf00      	nop
 800783c:	0801759d 	.word	0x0801759d
 8007840:	08017594 	.word	0x08017594

08007844 <cmd_net_gptp_port>:
{
 8007844:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_GPTP", "gPTP");
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <cmd_net_gptp_port+0x18>)
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	4a05      	ldr	r2, [pc, #20]	; (8007860 <cmd_net_gptp_port+0x1c>)
 800784c:	4b05      	ldr	r3, [pc, #20]	; (8007864 <cmd_net_gptp_port+0x20>)
 800784e:	2102      	movs	r1, #2
 8007850:	f007 fd28 	bl	800f2a4 <shell_fprintf>
}
 8007854:	2000      	movs	r0, #0
 8007856:	b003      	add	sp, #12
 8007858:	f85d fb04 	ldr.w	pc, [sp], #4
 800785c:	080175dd 	.word	0x080175dd
 8007860:	0801742c 	.word	0x0801742c
 8007864:	080175cd 	.word	0x080175cd

08007868 <cmd_net_events_on>:
{
 8007868:	b508      	push	{r3, lr}
	PR_INFO("Network management events are not supported. "
 800786a:	4a03      	ldr	r2, [pc, #12]	; (8007878 <cmd_net_events_on+0x10>)
 800786c:	2102      	movs	r1, #2
 800786e:	f007 fd19 	bl	800f2a4 <shell_fprintf>
}
 8007872:	2000      	movs	r0, #0
 8007874:	bd08      	pop	{r3, pc}
 8007876:	bf00      	nop
 8007878:	080175e2 	.word	0x080175e2

0800787c <cmd_net_dns_query>:
{
 800787c:	b508      	push	{r3, lr}
	PR_INFO("DNS resolver not supported. Set CONFIG_DNS_RESOLVER to "
 800787e:	4a03      	ldr	r2, [pc, #12]	; (800788c <cmd_net_dns_query+0x10>)
 8007880:	2102      	movs	r1, #2
 8007882:	f007 fd0f 	bl	800f2a4 <shell_fprintf>
}
 8007886:	2000      	movs	r0, #0
 8007888:	bd08      	pop	{r3, pc}
 800788a:	bf00      	nop
 800788c:	08017640 	.word	0x08017640

08007890 <cmd_net_dns_cancel>:
{
 8007890:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_DNS_RESOLVER",
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <cmd_net_dns_cancel+0x18>)
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	4a05      	ldr	r2, [pc, #20]	; (80078ac <cmd_net_dns_cancel+0x1c>)
 8007898:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <cmd_net_dns_cancel+0x20>)
 800789a:	2102      	movs	r1, #2
 800789c:	f007 fd02 	bl	800f2a4 <shell_fprintf>
}
 80078a0:	2000      	movs	r0, #0
 80078a2:	b003      	add	sp, #12
 80078a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80078a8:	08017697 	.word	0x08017697
 80078ac:	0801742c 	.word	0x0801742c
 80078b0:	08017683 	.word	0x08017683

080078b4 <cmd_net_capture>:
{
 80078b4:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 80078b6:	4b05      	ldr	r3, [pc, #20]	; (80078cc <cmd_net_capture+0x18>)
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	4a05      	ldr	r2, [pc, #20]	; (80078d0 <cmd_net_capture+0x1c>)
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <cmd_net_capture+0x20>)
 80078be:	2102      	movs	r1, #2
 80078c0:	f007 fcf0 	bl	800f2a4 <shell_fprintf>
}
 80078c4:	2000      	movs	r0, #0
 80078c6:	b003      	add	sp, #12
 80078c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80078cc:	080176b7 	.word	0x080176b7
 80078d0:	0801742c 	.word	0x0801742c
 80078d4:	080176a4 	.word	0x080176a4

080078d8 <cmd_net_arp>:
{
 80078d8:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 80078da:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <cmd_net_arp+0x18>)
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	4a05      	ldr	r2, [pc, #20]	; (80078f4 <cmd_net_arp+0x1c>)
 80078e0:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <cmd_net_arp+0x20>)
 80078e2:	2102      	movs	r1, #2
 80078e4:	f007 fcde 	bl	800f2a4 <shell_fprintf>
}
 80078e8:	2000      	movs	r0, #0
 80078ea:	b003      	add	sp, #12
 80078ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80078f0:	0801771c 	.word	0x0801771c
 80078f4:	0801742c 	.word	0x0801742c
 80078f8:	080176ce 	.word	0x080176ce

080078fc <cmd_net_allocs>:
{
 80078fc:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <cmd_net_allocs+0x18>)
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	4a05      	ldr	r2, [pc, #20]	; (8007918 <cmd_net_allocs+0x1c>)
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <cmd_net_allocs+0x20>)
 8007906:	2102      	movs	r1, #2
 8007908:	f007 fccc 	bl	800f2a4 <shell_fprintf>
}
 800790c:	2000      	movs	r0, #0
 800790e:	b003      	add	sp, #12
 8007910:	f85d fb04 	ldr.w	pc, [sp], #4
 8007914:	0801773f 	.word	0x0801773f
 8007918:	0801742c 	.word	0x0801742c
 800791c:	08017720 	.word	0x08017720

08007920 <get_iface_idx>:
{
 8007920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007922:	4605      	mov	r5, r0
	if (!index_str) {
 8007924:	460c      	mov	r4, r1
 8007926:	b939      	cbnz	r1, 8007938 <get_iface_idx+0x18>
		PR_WARNING("Interface index is missing.\n");
 8007928:	4a11      	ldr	r2, [pc, #68]	; (8007970 <get_iface_idx+0x50>)
 800792a:	2103      	movs	r1, #3
 800792c:	f007 fcba 	bl	800f2a4 <shell_fprintf>
		return -EINVAL;
 8007930:	f06f 0015 	mvn.w	r0, #21
}
 8007934:	b003      	add	sp, #12
 8007936:	bd30      	pop	{r4, r5, pc}
	idx = strtol(index_str, &endptr, 10);
 8007938:	220a      	movs	r2, #10
 800793a:	a901      	add	r1, sp, #4
 800793c:	4620      	mov	r0, r4
 800793e:	f005 ffc9 	bl	800d8d4 <strtol>
	if (*endptr != '\0') {
 8007942:	9b01      	ldr	r3, [sp, #4]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	b143      	cbz	r3, 800795a <get_iface_idx+0x3a>
		PR_WARNING("Invalid index %s\n", index_str);
 8007948:	4628      	mov	r0, r5
 800794a:	4a0a      	ldr	r2, [pc, #40]	; (8007974 <get_iface_idx+0x54>)
 800794c:	4623      	mov	r3, r4
 800794e:	2103      	movs	r1, #3
 8007950:	f007 fca8 	bl	800f2a4 <shell_fprintf>
		return -ENOENT;
 8007954:	f06f 0001 	mvn.w	r0, #1
 8007958:	e7ec      	b.n	8007934 <get_iface_idx+0x14>
	if (idx < 0 || idx > 255) {
 800795a:	28ff      	cmp	r0, #255	; 0xff
 800795c:	d9ea      	bls.n	8007934 <get_iface_idx+0x14>
		PR_WARNING("Invalid index %d\n", idx);
 800795e:	4603      	mov	r3, r0
 8007960:	4a05      	ldr	r2, [pc, #20]	; (8007978 <get_iface_idx+0x58>)
 8007962:	4628      	mov	r0, r5
 8007964:	2103      	movs	r1, #3
 8007966:	f007 fc9d 	bl	800f2a4 <shell_fprintf>
		return -ERANGE;
 800796a:	f06f 0021 	mvn.w	r0, #33	; 0x21
 800796e:	e7e1      	b.n	8007934 <get_iface_idx+0x14>
 8007970:	08017752 	.word	0x08017752
 8007974:	0801776f 	.word	0x0801776f
 8007978:	08017781 	.word	0x08017781

0800797c <cmd_net_tcp_recv>:
{
 800797c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 800797e:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <cmd_net_tcp_recv+0x48>)
{
 8007980:	4604      	mov	r4, r0
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	b118      	cbz	r0, 800798e <cmd_net_tcp_recv+0x12>
	return context->flags & NET_CONTEXT_IN_USE;
 8007986:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800798a:	07db      	lsls	r3, r3, #31
 800798c:	d408      	bmi.n	80079a0 <cmd_net_tcp_recv+0x24>
		PR_WARNING("Not connected\n");
 800798e:	4a0e      	ldr	r2, [pc, #56]	; (80079c8 <cmd_net_tcp_recv+0x4c>)
 8007990:	2103      	movs	r1, #3
 8007992:	4620      	mov	r0, r4
 8007994:	f007 fc86 	bl	800f2a4 <shell_fprintf>
		return -ENOEXEC;
 8007998:	f06f 0007 	mvn.w	r0, #7
}
 800799c:	b004      	add	sp, #16
 800799e:	bd10      	pop	{r4, pc}
	ret = net_context_recv(tcp_ctx, tcp_recv_cb, K_NO_WAIT, &user_data);
 80079a0:	ab02      	add	r3, sp, #8
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	4909      	ldr	r1, [pc, #36]	; (80079cc <cmd_net_tcp_recv+0x50>)
	user_data.shell = shell;
 80079a6:	9402      	str	r4, [sp, #8]
	ret = net_context_recv(tcp_ctx, tcp_recv_cb, K_NO_WAIT, &user_data);
 80079a8:	2300      	movs	r3, #0
 80079aa:	2200      	movs	r2, #0
 80079ac:	f7fd fc72 	bl	8005294 <net_context_recv>
	if (ret < 0) {
 80079b0:	1e03      	subs	r3, r0, #0
 80079b2:	da05      	bge.n	80079c0 <cmd_net_tcp_recv+0x44>
		PR_WARNING("Cannot recv data (%d)\n", ret);
 80079b4:	4a06      	ldr	r2, [pc, #24]	; (80079d0 <cmd_net_tcp_recv+0x54>)
 80079b6:	2103      	movs	r1, #3
 80079b8:	4620      	mov	r0, r4
 80079ba:	f007 fc73 	bl	800f2a4 <shell_fprintf>
 80079be:	e7eb      	b.n	8007998 <cmd_net_tcp_recv+0x1c>
	return 0;
 80079c0:	2000      	movs	r0, #0
 80079c2:	e7eb      	b.n	800799c <cmd_net_tcp_recv+0x20>
 80079c4:	200023e0 	.word	0x200023e0
 80079c8:	08017793 	.word	0x08017793
 80079cc:	080082ad 	.word	0x080082ad
 80079d0:	080177a2 	.word	0x080177a2

080079d4 <cmd_net_tcp_close>:
{
 80079d4:	b538      	push	{r3, r4, r5, lr}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 80079d6:	4d11      	ldr	r5, [pc, #68]	; (8007a1c <cmd_net_tcp_close+0x48>)
{
 80079d8:	4604      	mov	r4, r0
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 80079da:	6828      	ldr	r0, [r5, #0]
 80079dc:	b118      	cbz	r0, 80079e6 <cmd_net_tcp_close+0x12>
 80079de:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 80079e2:	07db      	lsls	r3, r3, #31
 80079e4:	d407      	bmi.n	80079f6 <cmd_net_tcp_close+0x22>
		PR_WARNING("Not connected\n");
 80079e6:	4a0e      	ldr	r2, [pc, #56]	; (8007a20 <cmd_net_tcp_close+0x4c>)
 80079e8:	2103      	movs	r1, #3
 80079ea:	4620      	mov	r0, r4
 80079ec:	f007 fc5a 	bl	800f2a4 <shell_fprintf>
		return -ENOEXEC;
 80079f0:	f06f 0007 	mvn.w	r0, #7
}
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
	ret = net_context_put(tcp_ctx);
 80079f6:	f7fd fc0f 	bl	8005218 <net_context_put>
	if (ret < 0) {
 80079fa:	1e03      	subs	r3, r0, #0
 80079fc:	da05      	bge.n	8007a0a <cmd_net_tcp_close+0x36>
		PR_WARNING("Cannot close the connection (%d)\n", ret);
 80079fe:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <cmd_net_tcp_close+0x50>)
 8007a00:	2103      	movs	r1, #3
 8007a02:	4620      	mov	r0, r4
 8007a04:	f007 fc4e 	bl	800f2a4 <shell_fprintf>
 8007a08:	e7f2      	b.n	80079f0 <cmd_net_tcp_close+0x1c>
	PR("Connection closed.\n");
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4a06      	ldr	r2, [pc, #24]	; (8007a28 <cmd_net_tcp_close+0x54>)
 8007a0e:	2108      	movs	r1, #8
 8007a10:	f007 fc48 	bl	800f2a4 <shell_fprintf>
	tcp_ctx = NULL;
 8007a14:	2000      	movs	r0, #0
 8007a16:	6028      	str	r0, [r5, #0]
	return 0;
 8007a18:	e7ec      	b.n	80079f4 <cmd_net_tcp_close+0x20>
 8007a1a:	bf00      	nop
 8007a1c:	200023e0 	.word	0x200023e0
 8007a20:	08017793 	.word	0x08017793
 8007a24:	080177b9 	.word	0x080177b9
 8007a28:	080177db 	.word	0x080177db

08007a2c <cmd_net_tcp_send>:
{
 8007a2c:	b570      	push	{r4, r5, r6, lr}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 8007a2e:	4b19      	ldr	r3, [pc, #100]	; (8007a94 <cmd_net_tcp_send+0x68>)
 8007a30:	681d      	ldr	r5, [r3, #0]
{
 8007a32:	b086      	sub	sp, #24
 8007a34:	4604      	mov	r4, r0
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 8007a36:	b11d      	cbz	r5, 8007a40 <cmd_net_tcp_send+0x14>
 8007a38:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
 8007a3c:	07db      	lsls	r3, r3, #31
 8007a3e:	d408      	bmi.n	8007a52 <cmd_net_tcp_send+0x26>
		PR_WARNING("Not connected\n");
 8007a40:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <cmd_net_tcp_send+0x6c>)
 8007a42:	2103      	movs	r1, #3
 8007a44:	4620      	mov	r0, r4
		PR_WARNING("No data to send.\n");
 8007a46:	f007 fc2d 	bl	800f2a4 <shell_fprintf>
		return -ENOEXEC;
 8007a4a:	f06f 0007 	mvn.w	r0, #7
}
 8007a4e:	b006      	add	sp, #24
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
	if (!argv[++arg]) {
 8007a52:	6856      	ldr	r6, [r2, #4]
 8007a54:	b916      	cbnz	r6, 8007a5c <cmd_net_tcp_send+0x30>
		PR_WARNING("No data to send.\n");
 8007a56:	4a11      	ldr	r2, [pc, #68]	; (8007a9c <cmd_net_tcp_send+0x70>)
 8007a58:	2103      	movs	r1, #3
 8007a5a:	e7f4      	b.n	8007a46 <cmd_net_tcp_send+0x1a>
	user_data.shell = shell;
 8007a5c:	9004      	str	r0, [sp, #16]
	ret = net_context_send(tcp_ctx, (uint8_t *)argv[arg],
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7f8 fd5d 	bl	800051e <strlen>
 8007a64:	ab04      	add	r3, sp, #16
 8007a66:	4602      	mov	r2, r0
 8007a68:	2100      	movs	r1, #0
 8007a6a:	f644 6020 	movw	r0, #20000	; 0x4e20
 8007a6e:	e9cd 0100 	strd	r0, r1, [sp]
 8007a72:	9302      	str	r3, [sp, #8]
 8007a74:	4631      	mov	r1, r6
 8007a76:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <cmd_net_tcp_send+0x74>)
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f009 fe07 	bl	801168c <net_context_send>
	if (ret < 0) {
 8007a7e:	1e03      	subs	r3, r0, #0
 8007a80:	da05      	bge.n	8007a8e <cmd_net_tcp_send+0x62>
		PR_WARNING("Cannot send msg (%d)\n", ret);
 8007a82:	4a08      	ldr	r2, [pc, #32]	; (8007aa4 <cmd_net_tcp_send+0x78>)
 8007a84:	2103      	movs	r1, #3
 8007a86:	4620      	mov	r0, r4
 8007a88:	f007 fc0c 	bl	800f2a4 <shell_fprintf>
 8007a8c:	e7dd      	b.n	8007a4a <cmd_net_tcp_send+0x1e>
	return 0;
 8007a8e:	2000      	movs	r0, #0
 8007a90:	e7dd      	b.n	8007a4e <cmd_net_tcp_send+0x22>
 8007a92:	bf00      	nop
 8007a94:	200023e0 	.word	0x200023e0
 8007a98:	08017793 	.word	0x08017793
 8007a9c:	080177ef 	.word	0x080177ef
 8007aa0:	08007749 	.word	0x08007749
 8007aa4:	08017801 	.word	0x08017801

08007aa8 <cmd_net_mem>:
{
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	4604      	mov	r4, r0
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
 8007aae:	ab05      	add	r3, sp, #20
 8007ab0:	aa04      	add	r2, sp, #16
 8007ab2:	a903      	add	r1, sp, #12
 8007ab4:	a802      	add	r0, sp, #8
 8007ab6:	f7fd fd19 	bl	80054ec <net_pkt_get_info>
	PR("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
 8007aba:	2380      	movs	r3, #128	; 0x80
 8007abc:	4620      	mov	r0, r4
 8007abe:	4a1c      	ldr	r2, [pc, #112]	; (8007b30 <cmd_net_mem+0x88>)
 8007ac0:	2108      	movs	r1, #8
 8007ac2:	f007 fbef 	bl	800f2a4 <shell_fprintf>
	PR("Network buffer pools:\n");
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4a1a      	ldr	r2, [pc, #104]	; (8007b34 <cmd_net_mem+0x8c>)
 8007aca:	2108      	movs	r1, #8
 8007acc:	f007 fbea 	bl	800f2a4 <shell_fprintf>
	PR("Address\t\tTotal\tName\n");
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	4a19      	ldr	r2, [pc, #100]	; (8007b38 <cmd_net_mem+0x90>)
 8007ad4:	2108      	movs	r1, #8
 8007ad6:	f007 fbe5 	bl	800f2a4 <shell_fprintf>
	PR("%p\t%d\tRX\n", rx, rx->num_blocks);
 8007ada:	9b02      	ldr	r3, [sp, #8]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	9200      	str	r2, [sp, #0]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	4a16      	ldr	r2, [pc, #88]	; (8007b3c <cmd_net_mem+0x94>)
 8007ae4:	2108      	movs	r1, #8
 8007ae6:	f007 fbdd 	bl	800f2a4 <shell_fprintf>
	PR("%p\t%d\tTX\n", tx, tx->num_blocks);
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	9200      	str	r2, [sp, #0]
 8007af0:	4620      	mov	r0, r4
 8007af2:	4a13      	ldr	r2, [pc, #76]	; (8007b40 <cmd_net_mem+0x98>)
 8007af4:	2108      	movs	r1, #8
 8007af6:	f007 fbd5 	bl	800f2a4 <shell_fprintf>
	PR("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	8b1a      	ldrh	r2, [r3, #24]
 8007afe:	9200      	str	r2, [sp, #0]
 8007b00:	4620      	mov	r0, r4
 8007b02:	4a10      	ldr	r2, [pc, #64]	; (8007b44 <cmd_net_mem+0x9c>)
 8007b04:	2108      	movs	r1, #8
 8007b06:	f007 fbcd 	bl	800f2a4 <shell_fprintf>
	PR("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
 8007b0a:	9b05      	ldr	r3, [sp, #20]
 8007b0c:	8b1a      	ldrh	r2, [r3, #24]
 8007b0e:	9200      	str	r2, [sp, #0]
 8007b10:	4620      	mov	r0, r4
 8007b12:	4a0d      	ldr	r2, [pc, #52]	; (8007b48 <cmd_net_mem+0xa0>)
 8007b14:	2108      	movs	r1, #8
 8007b16:	f007 fbc5 	bl	800f2a4 <shell_fprintf>
	PR_INFO("Set %s to enable %s support.\n",
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <cmd_net_mem+0xa4>)
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4620      	mov	r0, r4
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <cmd_net_mem+0xa8>)
 8007b22:	4a0c      	ldr	r2, [pc, #48]	; (8007b54 <cmd_net_mem+0xac>)
 8007b24:	2102      	movs	r1, #2
 8007b26:	f007 fbbd 	bl	800f2a4 <shell_fprintf>
}
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	b006      	add	sp, #24
 8007b2e:	bd10      	pop	{r4, pc}
 8007b30:	0801784e 	.word	0x0801784e
 8007b34:	08017868 	.word	0x08017868
 8007b38:	0801787f 	.word	0x0801787f
 8007b3c:	08017894 	.word	0x08017894
 8007b40:	0801789e 	.word	0x0801789e
 8007b44:	080178a8 	.word	0x080178a8
 8007b48:	080178b7 	.word	0x080178b7
 8007b4c:	080178e0 	.word	0x080178e0
 8007b50:	080178c6 	.word	0x080178c6
 8007b54:	0801742c 	.word	0x0801742c

08007b58 <cmd_net_iface>:
{
 8007b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (argv[1]) {
 8007b5a:	6851      	ldr	r1, [r2, #4]
{
 8007b5c:	4604      	mov	r4, r0
	if (argv[1]) {
 8007b5e:	b181      	cbz	r1, 8007b82 <cmd_net_iface+0x2a>
		idx = get_iface_idx(shell, argv[1]);
 8007b60:	f7ff fede 	bl	8007920 <get_iface_idx>
		if (idx < 0) {
 8007b64:	1e05      	subs	r5, r0, #0
 8007b66:	db09      	blt.n	8007b7c <cmd_net_iface+0x24>
		iface = net_if_get_by_index(idx);
 8007b68:	f00a ffc5 	bl	8012af6 <net_if_get_by_index>
		if (!iface) {
 8007b6c:	4601      	mov	r1, r0
 8007b6e:	b940      	cbnz	r0, 8007b82 <cmd_net_iface+0x2a>
			PR_WARNING("No such interface in index %d\n", idx);
 8007b70:	4a08      	ldr	r2, [pc, #32]	; (8007b94 <cmd_net_iface+0x3c>)
 8007b72:	462b      	mov	r3, r5
 8007b74:	2103      	movs	r1, #3
 8007b76:	4620      	mov	r0, r4
 8007b78:	f007 fb94 	bl	800f2a4 <shell_fprintf>
			return -ENOEXEC;
 8007b7c:	f06f 0007 	mvn.w	r0, #7
 8007b80:	e006      	b.n	8007b90 <cmd_net_iface+0x38>
	user_data.user_data = iface;
 8007b82:	e9cd 4100 	strd	r4, r1, [sp]
	net_if_foreach(iface_cb, &user_data);
 8007b86:	4804      	ldr	r0, [pc, #16]	; (8007b98 <cmd_net_iface+0x40>)
 8007b88:	4669      	mov	r1, sp
 8007b8a:	f7fc ffc5 	bl	8004b18 <net_if_foreach>
	return 0;
 8007b8e:	2000      	movs	r0, #0
}
 8007b90:	b003      	add	sp, #12
 8007b92:	bd30      	pop	{r4, r5, pc}
 8007b94:	080178f3 	.word	0x080178f3
 8007b98:	08007f41 	.word	0x08007f41

08007b9c <iface_index_get>:

SHELL_DYNAMIC_CMD_CREATE(iface_index, iface_index_get);

static void iface_index_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 8007b9c:	2300      	movs	r3, #0
{
 8007b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	entry->handler = NULL;
 8007ba0:	60cb      	str	r3, [r1, #12]
{
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	460d      	mov	r5, r1
	struct net_if *iface = net_if_get_by_index(idx);
 8007ba6:	f00a ffa6 	bl	8012af6 <net_if_get_by_index>
	if (!iface) {
 8007baa:	b180      	cbz	r0, 8007bce <iface_index_get+0x32>
	return (iface->if_dev->offload != NULL);
 8007bac:	6803      	ldr	r3, [r0, #0]
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
 8007bae:	4c12      	ldr	r4, [pc, #72]	; (8007bf8 <iface_index_get+0x5c>)
	if (net_if_is_ip_offloaded(iface)) {
 8007bb0:	699f      	ldr	r7, [r3, #24]
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
 8007bb2:	4a12      	ldr	r2, [pc, #72]	; (8007bfc <iface_index_get+0x60>)
 8007bb4:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <iface_index_get+0x64>)
 8007bb6:	9000      	str	r0, [sp, #0]
 8007bb8:	211c      	movs	r1, #28
 8007bba:	fb01 4406 	mla	r4, r1, r6, r4
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	bf08      	it	eq
 8007bc2:	4613      	moveq	r3, r2
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	4a0f      	ldr	r2, [pc, #60]	; (8007c04 <iface_index_get+0x68>)
 8007bc8:	f006 fdd6 	bl	800e778 <snprintk>
	return iface_help_buffer[idx];
 8007bcc:	4620      	mov	r0, r4
	entry->help  = set_iface_index_help(idx);
	entry->subcmd = &iface_index;
 8007bce:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <iface_index_get+0x6c>)
	entry->help  = set_iface_index_help(idx);
 8007bd0:	6068      	str	r0, [r5, #4]
	entry->subcmd = &iface_index;
 8007bd2:	60ab      	str	r3, [r5, #8]
	struct net_if *iface = net_if_get_by_index(idx);
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f00a ff8e 	bl	8012af6 <net_if_get_by_index>
	if (!iface) {
 8007bda:	4604      	mov	r4, r0
 8007bdc:	b140      	cbz	r0, 8007bf0 <iface_index_get+0x54>
	snprintk(iface_index_buffer[idx], MAX_IFACE_STR_LEN, "%zu", idx);
 8007bde:	4c0b      	ldr	r4, [pc, #44]	; (8007c0c <iface_index_get+0x70>)
 8007be0:	4a0b      	ldr	r2, [pc, #44]	; (8007c10 <iface_index_get+0x74>)
 8007be2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8007be6:	4633      	mov	r3, r6
 8007be8:	2104      	movs	r1, #4
 8007bea:	4620      	mov	r0, r4
 8007bec:	f006 fdc4 	bl	800e778 <snprintk>
	entry->syntax = set_iface_index_buffer(idx);
 8007bf0:	602c      	str	r4, [r5, #0]
}
 8007bf2:	b003      	add	sp, #12
 8007bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20002649 	.word	0x20002649
 8007bfc:	0801791d 	.word	0x0801791d
 8007c00:	08017912 	.word	0x08017912
 8007c04:	0801792c 	.word	0x0801792c
 8007c08:	080158a0 	.word	0x080158a0
 8007c0c:	20002665 	.word	0x20002665
 8007c10:	08017934 	.word	0x08017934

08007c14 <cmd_net_iface_down>:
{
 8007c14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	idx = get_iface_idx(shell, argv[1]);
 8007c16:	6851      	ldr	r1, [r2, #4]
{
 8007c18:	4606      	mov	r6, r0
	idx = get_iface_idx(shell, argv[1]);
 8007c1a:	f7ff fe81 	bl	8007920 <get_iface_idx>
	if (idx < 0) {
 8007c1e:	1e05      	subs	r5, r0, #0
 8007c20:	db08      	blt.n	8007c34 <cmd_net_iface_down+0x20>
	iface = net_if_get_by_index(idx);
 8007c22:	f00a ff68 	bl	8012af6 <net_if_get_by_index>
	if (!iface) {
 8007c26:	b940      	cbnz	r0, 8007c3a <cmd_net_iface_down+0x26>
		PR_WARNING("No such interface in index %d\n", idx);
 8007c28:	4a0e      	ldr	r2, [pc, #56]	; (8007c64 <cmd_net_iface_down+0x50>)
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	2103      	movs	r1, #3
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f007 fb38 	bl	800f2a4 <shell_fprintf>
		return -ENOEXEC;
 8007c34:	f06f 0407 	mvn.w	r4, #7
 8007c38:	e011      	b.n	8007c5e <cmd_net_iface_down+0x4a>
	ret = net_if_down(iface);
 8007c3a:	f7fc ffb9 	bl	8004bb0 <net_if_down>
	if (ret) {
 8007c3e:	4604      	mov	r4, r0
 8007c40:	b138      	cbz	r0, 8007c52 <cmd_net_iface_down+0x3e>
		PR_WARNING("Cannot take interface %d down (%d)\n", idx, ret);
 8007c42:	9000      	str	r0, [sp, #0]
 8007c44:	4a08      	ldr	r2, [pc, #32]	; (8007c68 <cmd_net_iface_down+0x54>)
 8007c46:	462b      	mov	r3, r5
 8007c48:	2103      	movs	r1, #3
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f007 fb2a 	bl	800f2a4 <shell_fprintf>
		return -ENOEXEC;
 8007c50:	e7f0      	b.n	8007c34 <cmd_net_iface_down+0x20>
		PR("Interface %d is down\n", idx);
 8007c52:	4a06      	ldr	r2, [pc, #24]	; (8007c6c <cmd_net_iface_down+0x58>)
 8007c54:	462b      	mov	r3, r5
 8007c56:	2108      	movs	r1, #8
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f007 fb23 	bl	800f2a4 <shell_fprintf>
}
 8007c5e:	4620      	mov	r0, r4
 8007c60:	b002      	add	sp, #8
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	080178f3 	.word	0x080178f3
 8007c68:	08017938 	.word	0x08017938
 8007c6c:	0801795c 	.word	0x0801795c

08007c70 <cmd_net_conn>:
{
 8007c70:	b510      	push	{r4, lr}
 8007c72:	b086      	sub	sp, #24
	int count = 0;
 8007c74:	2300      	movs	r3, #0
	PR("     Context   \tIface  Flags            Local             Remote\n");
 8007c76:	4a18      	ldr	r2, [pc, #96]	; (8007cd8 <cmd_net_conn+0x68>)
	int count = 0;
 8007c78:	9303      	str	r3, [sp, #12]
	PR("     Context   \tIface  Flags            Local             Remote\n");
 8007c7a:	2108      	movs	r1, #8
{
 8007c7c:	4604      	mov	r4, r0
	PR("     Context   \tIface  Flags            Local             Remote\n");
 8007c7e:	f007 fb11 	bl	800f2a4 <shell_fprintf>
	user_data.user_data = &count;
 8007c82:	ab03      	add	r3, sp, #12
	net_context_foreach(context_cb, &user_data);
 8007c84:	4815      	ldr	r0, [pc, #84]	; (8007cdc <cmd_net_conn+0x6c>)
	user_data.user_data = &count;
 8007c86:	9305      	str	r3, [sp, #20]
	net_context_foreach(context_cb, &user_data);
 8007c88:	a904      	add	r1, sp, #16
	user_data.shell = shell;
 8007c8a:	9404      	str	r4, [sp, #16]
	net_context_foreach(context_cb, &user_data);
 8007c8c:	f7fd fbd8 	bl	8005440 <net_context_foreach>
	if (count == 0) {
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	b923      	cbnz	r3, 8007c9e <cmd_net_conn+0x2e>
		PR("No connections\n");
 8007c94:	4a12      	ldr	r2, [pc, #72]	; (8007ce0 <cmd_net_conn+0x70>)
 8007c96:	2108      	movs	r1, #8
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f007 fb03 	bl	800f2a4 <shell_fprintf>
	PR("\nTCP        Context   Src port Dst port   "
 8007c9e:	4a11      	ldr	r2, [pc, #68]	; (8007ce4 <cmd_net_conn+0x74>)
 8007ca0:	2108      	movs	r1, #8
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f007 fafe 	bl	800f2a4 <shell_fprintf>
	count = 0;
 8007ca8:	2300      	movs	r3, #0
	net_tcp_foreach(tcp_cb, &user_data);
 8007caa:	480f      	ldr	r0, [pc, #60]	; (8007ce8 <cmd_net_conn+0x78>)
	count = 0;
 8007cac:	9303      	str	r3, [sp, #12]
	net_tcp_foreach(tcp_cb, &user_data);
 8007cae:	a904      	add	r1, sp, #16
 8007cb0:	f7fe fce4 	bl	800667c <net_tcp_foreach>
	if (count == 0) {
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	b923      	cbnz	r3, 8007cc2 <cmd_net_conn+0x52>
		PR("No TCP connections\n");
 8007cb8:	4a0c      	ldr	r2, [pc, #48]	; (8007cec <cmd_net_conn+0x7c>)
 8007cba:	2108      	movs	r1, #8
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f007 faf1 	bl	800f2a4 <shell_fprintf>
	PR_INFO("Set %s to enable %s support.\n",
 8007cc2:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <cmd_net_conn+0x80>)
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <cmd_net_conn+0x84>)
 8007cca:	4a0b      	ldr	r2, [pc, #44]	; (8007cf8 <cmd_net_conn+0x88>)
 8007ccc:	2102      	movs	r1, #2
 8007cce:	f007 fae9 	bl	800f2a4 <shell_fprintf>
}
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	b006      	add	sp, #24
 8007cd6:	bd10      	pop	{r4, pc}
 8007cd8:	08017972 	.word	0x08017972
 8007cdc:	08008315 	.word	0x08008315
 8007ce0:	080179b4 	.word	0x080179b4
 8007ce4:	080179c4 	.word	0x080179c4
 8007ce8:	08007cfd 	.word	0x08007cfd
 8007cec:	08017a11 	.word	0x08017a11
 8007cf0:	08017a42 	.word	0x08017a42
 8007cf4:	08017a25 	.word	0x08017a25
 8007cf8:	0801742c 	.word	0x0801742c

08007cfc <tcp_cb>:
{
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	4604      	mov	r4, r0
 8007d02:	b08b      	sub	sp, #44	; 0x2c
	int *count = data->user_data;
 8007d04:	e9d1 8700 	ldrd	r8, r7, [r1]
	uint16_t recv_mss = net_tcp_get_recv_mss(conn);
 8007d08:	f00a fda7 	bl	801285a <net_tcp_get_recv_mss>
	PR("%p %p   %5u    %5u %10u %10u %5u   %s\n",
 8007d0c:	e9d4 b36b 	ldrd	fp, r3, [r4, #428]	; 0x1ac
 8007d10:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007d14:	9309      	str	r3, [sp, #36]	; 0x24
 8007d16:	f8b9 501e 	ldrh.w	r5, [r9, #30]
 8007d1a:	f8b9 6026 	ldrh.w	r6, [r9, #38]	; 0x26
	uint16_t recv_mss = net_tcp_get_recv_mss(conn);
 8007d1e:	4682      	mov	sl, r0
	PR("%p %p   %5u    %5u %10u %10u %5u   %s\n",
 8007d20:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
 8007d24:	f7ff fcb4 	bl	8007690 <net_tcp_state_str>
 8007d28:	ba6d      	rev16	r5, r5
 8007d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2c:	4a0b      	ldr	r2, [pc, #44]	; (8007d5c <tcp_cb+0x60>)
 8007d2e:	f8cd 9000 	str.w	r9, [sp]
 8007d32:	ba76      	rev16	r6, r6
 8007d34:	b2ad      	uxth	r5, r5
 8007d36:	b2b6      	uxth	r6, r6
 8007d38:	e9cd a005 	strd	sl, r0, [sp, #20]
 8007d3c:	e9cd b303 	strd	fp, r3, [sp, #12]
 8007d40:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8007d44:	4623      	mov	r3, r4
 8007d46:	2108      	movs	r1, #8
 8007d48:	4640      	mov	r0, r8
 8007d4a:	f007 faab 	bl	800f2a4 <shell_fprintf>
	(*count)++;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	3301      	adds	r3, #1
 8007d52:	603b      	str	r3, [r7, #0]
}
 8007d54:	b00b      	add	sp, #44	; 0x2c
 8007d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5a:	bf00      	nop
 8007d5c:	08017a50 	.word	0x08017a50

08007d60 <cmd_net_udp_close>:
	if (!udp_ctx || !net_context_is_used(udp_ctx)) {
 8007d60:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <cmd_net_udp_close+0x38>)
{
 8007d62:	b510      	push	{r4, lr}
 8007d64:	4604      	mov	r4, r0
	if (!udp_ctx || !net_context_is_used(udp_ctx)) {
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	b118      	cbz	r0, 8007d72 <cmd_net_udp_close+0x12>
 8007d6a:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 8007d6e:	07db      	lsls	r3, r3, #31
 8007d70:	d407      	bmi.n	8007d82 <cmd_net_udp_close+0x22>
		PR_WARNING("Network context is not used. Cannot close.\n");
 8007d72:	4620      	mov	r0, r4
 8007d74:	4a09      	ldr	r2, [pc, #36]	; (8007d9c <cmd_net_udp_close+0x3c>)
 8007d76:	2103      	movs	r1, #3
 8007d78:	f007 fa94 	bl	800f2a4 <shell_fprintf>
 8007d7c:	f06f 0015 	mvn.w	r0, #21
}
 8007d80:	bd10      	pop	{r4, pc}
	ret = net_context_put(udp_ctx);
 8007d82:	f7fd fa49 	bl	8005218 <net_context_put>
	if (ret < 0) {
 8007d86:	1e03      	subs	r3, r0, #0
 8007d88:	da04      	bge.n	8007d94 <cmd_net_udp_close+0x34>
		PR_WARNING("Cannot close UDP port (%d)\n", ret);
 8007d8a:	4a05      	ldr	r2, [pc, #20]	; (8007da0 <cmd_net_udp_close+0x40>)
 8007d8c:	2103      	movs	r1, #3
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f007 fa88 	bl	800f2a4 <shell_fprintf>
	return 0;
 8007d94:	2000      	movs	r0, #0
 8007d96:	e7f3      	b.n	8007d80 <cmd_net_udp_close+0x20>
 8007d98:	200023e8 	.word	0x200023e8
 8007d9c:	08017a77 	.word	0x08017a77
 8007da0:	08017aa3 	.word	0x08017aa3

08007da4 <tcp_connected>:
		PR_SHELL(tcp_shell, "TCP connection failed (%d)\n", status);
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <tcp_connected+0x30>)
{
 8007da6:	b510      	push	{r4, lr}
 8007da8:	4604      	mov	r4, r0
		PR_SHELL(tcp_shell, "TCP connection failed (%d)\n", status);
 8007daa:	6818      	ldr	r0, [r3, #0]
	if (status < 0) {
 8007dac:	1e0b      	subs	r3, r1, #0
 8007dae:	da0a      	bge.n	8007dc6 <tcp_connected+0x22>
		PR_SHELL(tcp_shell, "TCP connection failed (%d)\n", status);
 8007db0:	4a09      	ldr	r2, [pc, #36]	; (8007dd8 <tcp_connected+0x34>)
 8007db2:	2108      	movs	r1, #8
 8007db4:	f007 fa76 	bl	800f2a4 <shell_fprintf>
		net_context_put(context);
 8007db8:	4620      	mov	r0, r4
 8007dba:	f7fd fa2d 	bl	8005218 <net_context_put>
		tcp_ctx = NULL;
 8007dbe:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <tcp_connected+0x38>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
}
 8007dc4:	bd10      	pop	{r4, pc}
 8007dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PR_SHELL(tcp_shell, "TCP connected\n");
 8007dca:	4a05      	ldr	r2, [pc, #20]	; (8007de0 <tcp_connected+0x3c>)
 8007dcc:	2108      	movs	r1, #8
 8007dce:	f007 ba69 	b.w	800f2a4 <shell_fprintf>
 8007dd2:	bf00      	nop
 8007dd4:	200023e4 	.word	0x200023e4
 8007dd8:	08017abf 	.word	0x08017abf
 8007ddc:	200023e0 	.word	0x200023e0
 8007de0:	08017adb 	.word	0x08017adb

08007de4 <cmd_net_tcp_connect>:
{
 8007de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (tcp_ctx && net_context_is_used(tcp_ctx)) {
 8007de8:	4f49      	ldr	r7, [pc, #292]	; (8007f10 <cmd_net_tcp_connect+0x12c>)
 8007dea:	683b      	ldr	r3, [r7, #0]
{
 8007dec:	b08b      	sub	sp, #44	; 0x2c
 8007dee:	4605      	mov	r5, r0
 8007df0:	4690      	mov	r8, r2
	if (tcp_ctx && net_context_is_used(tcp_ctx)) {
 8007df2:	b163      	cbz	r3, 8007e0e <cmd_net_tcp_connect+0x2a>
 8007df4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8007df8:	07db      	lsls	r3, r3, #31
 8007dfa:	d508      	bpl.n	8007e0e <cmd_net_tcp_connect+0x2a>
		PR("Already connected\n");
 8007dfc:	4a45      	ldr	r2, [pc, #276]	; (8007f14 <cmd_net_tcp_connect+0x130>)
 8007dfe:	2108      	movs	r1, #8
		PR_WARNING("Peer port missing.\n");
 8007e00:	f007 fa50 	bl	800f2a4 <shell_fprintf>
		return -ENOEXEC;
 8007e04:	f06f 0007 	mvn.w	r0, #7
}
 8007e08:	b00b      	add	sp, #44	; 0x2c
 8007e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!argv[++arg]) {
 8007e0e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8007e12:	f1b9 0f00 	cmp.w	r9, #0
 8007e16:	d103      	bne.n	8007e20 <cmd_net_tcp_connect+0x3c>
		PR_WARNING("Peer IP address missing.\n");
 8007e18:	4a3f      	ldr	r2, [pc, #252]	; (8007f18 <cmd_net_tcp_connect+0x134>)
		PR_WARNING("Peer port missing.\n");
 8007e1a:	2103      	movs	r1, #3
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	e7ef      	b.n	8007e00 <cmd_net_tcp_connect+0x1c>
	if (!argv[++arg]) {
 8007e20:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8007e24:	b908      	cbnz	r0, 8007e2a <cmd_net_tcp_connect+0x46>
		PR_WARNING("Peer port missing.\n");
 8007e26:	4a3d      	ldr	r2, [pc, #244]	; (8007f1c <cmd_net_tcp_connect+0x138>)
 8007e28:	e7f7      	b.n	8007e1a <cmd_net_tcp_connect+0x36>
	port = strtol(argv[arg], &endptr, 10);
 8007e2a:	220a      	movs	r2, #10
 8007e2c:	a905      	add	r1, sp, #20
 8007e2e:	f005 fd51 	bl	800d8d4 <strtol>
	if (*endptr != '\0') {
 8007e32:	9b05      	ldr	r3, [sp, #20]
 8007e34:	781c      	ldrb	r4, [r3, #0]
	port = strtol(argv[arg], &endptr, 10);
 8007e36:	4606      	mov	r6, r0
	if (*endptr != '\0') {
 8007e38:	b13c      	cbz	r4, 8007e4a <cmd_net_tcp_connect+0x66>
		PR_WARNING("Invalid port %s\n", argv[arg]);
 8007e3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e3e:	4a38      	ldr	r2, [pc, #224]	; (8007f20 <cmd_net_tcp_connect+0x13c>)
 8007e40:	2103      	movs	r1, #3
 8007e42:	4628      	mov	r0, r5
 8007e44:	f007 fa2e 	bl	800f2a4 <shell_fprintf>
 8007e48:	e7dc      	b.n	8007e04 <cmd_net_tcp_connect+0x20>
	struct net_if *iface = net_if_get_default();
 8007e4a:	f7fc fc73 	bl	8004734 <net_if_get_default>
 8007e4e:	4680      	mov	r8, r0
	return z_impl_net_addr_pton(family, src, dst);
 8007e50:	2001      	movs	r0, #1
 8007e52:	aa09      	add	r2, sp, #36	; 0x24
 8007e54:	4649      	mov	r1, r9
 8007e56:	f008 fe9c 	bl	8010b92 <z_impl_net_addr_pton>
		if (ret < 0) {
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	da06      	bge.n	8007e6c <cmd_net_tcp_connect+0x88>
			PR_WARNING("Invalid IPv4 address\n");
 8007e5e:	4a31      	ldr	r2, [pc, #196]	; (8007f24 <cmd_net_tcp_connect+0x140>)
 8007e60:	2103      	movs	r1, #3
 8007e62:	4628      	mov	r0, r5
 8007e64:	f007 fa1e 	bl	800f2a4 <shell_fprintf>
	return 0;
 8007e68:	2000      	movs	r0, #0
 8007e6a:	e7cd      	b.n	8007e08 <cmd_net_tcp_connect+0x24>
 8007e6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	net_sin(myaddr)->sin_port = 0U; /* let the IP stack to select */
 8007e70:	f8ad 401a 	strh.w	r4, [sp, #26]
		net_sin(&addr)->sin_port = htons(port);
 8007e74:	ba76      	rev16	r6, r6
 8007e76:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
		family = addr.sa_family = myaddr.sa_family = AF_INET;
 8007e7a:	2601      	movs	r6, #1
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	9307      	str	r3, [sp, #28]
			PR("Connecting from %s:%u ",
 8007e80:	a907      	add	r1, sp, #28
 8007e82:	4630      	mov	r0, r6
		family = addr.sa_family = myaddr.sa_family = AF_INET;
 8007e84:	f8ad 6018 	strh.w	r6, [sp, #24]
 8007e88:	f8ad 6020 	strh.w	r6, [sp, #32]
			PR("Connecting from %s:%u ",
 8007e8c:	f7fd f82a 	bl	8004ee4 <net_sprint_addr>
 8007e90:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8007e94:	ba52      	rev16	r2, r2
 8007e96:	b292      	uxth	r2, r2
 8007e98:	4603      	mov	r3, r0
 8007e9a:	9200      	str	r2, [sp, #0]
 8007e9c:	2108      	movs	r1, #8
 8007e9e:	4a22      	ldr	r2, [pc, #136]	; (8007f28 <cmd_net_tcp_connect+0x144>)
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f007 f9ff 	bl	800f2a4 <shell_fprintf>
			PR("to %s:%u\n",
 8007ea6:	a909      	add	r1, sp, #36	; 0x24
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7fd f81b 	bl	8004ee4 <net_sprint_addr>
 8007eae:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8007eb2:	ba52      	rev16	r2, r2
 8007eb4:	b292      	uxth	r2, r2
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	9200      	str	r2, [sp, #0]
 8007eba:	2108      	movs	r1, #8
 8007ebc:	4a1b      	ldr	r2, [pc, #108]	; (8007f2c <cmd_net_tcp_connect+0x148>)
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f007 f9f0 	bl	800f2a4 <shell_fprintf>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
 8007ec4:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <cmd_net_tcp_connect+0x12c>)
 8007ec6:	2206      	movs	r2, #6
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7fd f8ba 	bl	8005044 <net_context_get>
	if (ret < 0) {
 8007ed0:	1e03      	subs	r3, r0, #0
 8007ed2:	da05      	bge.n	8007ee0 <cmd_net_tcp_connect+0xfc>
		PR_WARNING("Cannot get TCP context (%d)\n", ret);
 8007ed4:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <cmd_net_tcp_connect+0x14c>)
		PR_WARNING("Cannot bind TCP (%d)\n", ret);
 8007ed6:	2103      	movs	r1, #3
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f007 f9e3 	bl	800f2a4 <shell_fprintf>
		return;
 8007ede:	e7c3      	b.n	8007e68 <cmd_net_tcp_connect+0x84>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
 8007ee0:	6838      	ldr	r0, [r7, #0]
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	a906      	add	r1, sp, #24
 8007ee6:	f009 f89f 	bl	8011028 <net_context_bind>
	if (ret < 0) {
 8007eea:	1e03      	subs	r3, r0, #0
 8007eec:	da01      	bge.n	8007ef2 <cmd_net_tcp_connect+0x10e>
		PR_WARNING("Cannot bind TCP (%d)\n", ret);
 8007eee:	4a11      	ldr	r2, [pc, #68]	; (8007f34 <cmd_net_tcp_connect+0x150>)
 8007ef0:	e7f1      	b.n	8007ed6 <cmd_net_tcp_connect+0xf2>
	tcp_shell = shell;
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <cmd_net_tcp_connect+0x154>)
	net_context_connect(*ctx, &addr, addrlen, tcp_connected,
 8007ef4:	6838      	ldr	r0, [r7, #0]
	tcp_shell = shell;
 8007ef6:	601d      	str	r5, [r3, #0]
	net_context_connect(*ctx, &addr, addrlen, tcp_connected,
 8007ef8:	f247 5230 	movw	r2, #30000	; 0x7530
 8007efc:	2300      	movs	r3, #0
 8007efe:	e9cd 2300 	strd	r2, r3, [sp]
 8007f02:	9402      	str	r4, [sp, #8]
 8007f04:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <cmd_net_tcp_connect+0x158>)
 8007f06:	2208      	movs	r2, #8
 8007f08:	a908      	add	r1, sp, #32
 8007f0a:	f009 fac2 	bl	8011492 <net_context_connect>
 8007f0e:	e7ab      	b.n	8007e68 <cmd_net_tcp_connect+0x84>
 8007f10:	200023e0 	.word	0x200023e0
 8007f14:	08017aea 	.word	0x08017aea
 8007f18:	08017afd 	.word	0x08017afd
 8007f1c:	08017b17 	.word	0x08017b17
 8007f20:	08017b2b 	.word	0x08017b2b
 8007f24:	08017b3c 	.word	0x08017b3c
 8007f28:	08017b52 	.word	0x08017b52
 8007f2c:	08017b69 	.word	0x08017b69
 8007f30:	08017b73 	.word	0x08017b73
 8007f34:	08017b90 	.word	0x08017b90
 8007f38:	200023e4 	.word	0x200023e4
 8007f3c:	08007da5 	.word	0x08007da5

08007f40 <iface_cb>:
{
 8007f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (data->user_data && data->user_data != iface) {
 8007f44:	684b      	ldr	r3, [r1, #4]
{
 8007f46:	b085      	sub	sp, #20
 8007f48:	4606      	mov	r6, r0
 8007f4a:	460c      	mov	r4, r1
	if (data->user_data && data->user_data != iface) {
 8007f4c:	b113      	cbz	r3, 8007f54 <iface_cb+0x14>
 8007f4e:	4283      	cmp	r3, r0
 8007f50:	f040 809a 	bne.w	8008088 <iface_cb+0x148>
 8007f54:	6833      	ldr	r3, [r6, #0]
		*extra = "==============";
 8007f56:	4a99      	ldr	r2, [pc, #612]	; (80081bc <iface_cb+0x27c>)
	if (net_if_is_ip_offloaded(iface)) {
 8007f58:	699b      	ldr	r3, [r3, #24]
		*extra = "==============";
 8007f5a:	4f99      	ldr	r7, [pc, #612]	; (80081c0 <iface_cb+0x280>)
	const struct shell *shell = data->shell;
 8007f5c:	6825      	ldr	r5, [r4, #0]
		*extra = "==============";
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	4b98      	ldr	r3, [pc, #608]	; (80081c4 <iface_cb+0x284>)
 8007f62:	bf08      	it	eq
 8007f64:	461f      	moveq	r7, r3
 8007f66:	4b98      	ldr	r3, [pc, #608]	; (80081c8 <iface_cb+0x288>)
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
 8007f68:	4630      	mov	r0, r6
		*extra = "==============";
 8007f6a:	bf14      	ite	ne
 8007f6c:	4698      	movne	r8, r3
 8007f6e:	4690      	moveq	r8, r2
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
 8007f70:	f7fc fdc0 	bl	8004af4 <net_if_get_by_iface>
 8007f74:	4a95      	ldr	r2, [pc, #596]	; (80081cc <iface_cb+0x28c>)
 8007f76:	e9cd 8000 	strd	r8, r0, [sp]
 8007f7a:	4633      	mov	r3, r6
 8007f7c:	2108      	movs	r1, #8
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f007 f990 	bl	800f2a4 <shell_fprintf>
	PR("===========================%s\n", extra);
 8007f84:	2108      	movs	r1, #8
 8007f86:	4628      	mov	r0, r5
 8007f88:	4a91      	ldr	r2, [pc, #580]	; (80081d0 <iface_cb+0x290>)
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	f007 f98a 	bl	800f2a4 <shell_fprintf>
 */
static inline bool net_if_is_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
 8007f90:	2100      	movs	r1, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	f00a fdb3 	bl	8012afe <net_if_flag_is_set>
	if (!net_if_is_up(iface)) {
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d06d      	beq.n	8008078 <iface_cb+0x138>
	return &iface->if_dev->link_addr;
 8007f9c:	6831      	ldr	r1, [r6, #0]
	    net_if_get_link_addr(iface)->addr) {
 8007f9e:	6908      	ldr	r0, [r1, #16]
	if (net_if_get_link_addr(iface) &&
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d174      	bne.n	800808e <iface_cb+0x14e>
	return iface->if_dev->mtu;
 8007fa4:	6833      	ldr	r3, [r6, #0]
	PR("MTU       : %d\n", net_if_get_mtu(iface));
 8007fa6:	4a8b      	ldr	r2, [pc, #556]	; (80081d4 <iface_cb+0x294>)
 8007fa8:	8b9b      	ldrh	r3, [r3, #28]
 8007faa:	2108      	movs	r1, #8
 8007fac:	4628      	mov	r0, r5
 8007fae:	f007 f979 	bl	800f2a4 <shell_fprintf>
	if (net_if_flag_is_set(iface, NET_IF_POINTOPOINT)) {
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f00a fda2 	bl	8012afe <net_if_flag_is_set>
 8007fba:	4604      	mov	r4, r0
 8007fbc:	b128      	cbz	r0, 8007fca <iface_cb+0x8a>
		pos += snprintk(str + pos, sizeof(str) - pos,
 8007fbe:	4a86      	ldr	r2, [pc, #536]	; (80081d8 <iface_cb+0x298>)
 8007fc0:	4886      	ldr	r0, [pc, #536]	; (80081dc <iface_cb+0x29c>)
 8007fc2:	2144      	movs	r1, #68	; 0x44
 8007fc4:	f006 fbd8 	bl	800e778 <snprintk>
 8007fc8:	4604      	mov	r4, r0
	if (net_if_flag_is_set(iface, NET_IF_PROMISC)) {
 8007fca:	2102      	movs	r1, #2
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f00a fd96 	bl	8012afe <net_if_flag_is_set>
 8007fd2:	4f82      	ldr	r7, [pc, #520]	; (80081dc <iface_cb+0x29c>)
 8007fd4:	b130      	cbz	r0, 8007fe4 <iface_cb+0xa4>
		pos += snprintk(str + pos, sizeof(str) - pos,
 8007fd6:	f1c4 0144 	rsb	r1, r4, #68	; 0x44
 8007fda:	1938      	adds	r0, r7, r4
 8007fdc:	4a80      	ldr	r2, [pc, #512]	; (80081e0 <iface_cb+0x2a0>)
 8007fde:	f006 fbcb 	bl	800e778 <snprintk>
 8007fe2:	4404      	add	r4, r0
	if (net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
 8007fe4:	2103      	movs	r1, #3
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f00a fd89 	bl	8012afe <net_if_flag_is_set>
 8007fec:	4603      	mov	r3, r0
		pos += snprintk(str + pos, sizeof(str) - pos,
 8007fee:	f1c4 0144 	rsb	r1, r4, #68	; 0x44
 8007ff2:	1938      	adds	r0, r7, r4
	if (net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d056      	beq.n	80080a6 <iface_cb+0x166>
		pos += snprintk(str + pos, sizeof(str) - pos,
 8007ff8:	4a7a      	ldr	r2, [pc, #488]	; (80081e4 <iface_cb+0x2a4>)
		pos += snprintk(str + pos, sizeof(str) - pos,
 8007ffa:	f006 fbbd 	bl	800e778 <snprintk>
	if (net_if_flag_is_set(iface, NET_IF_FORWARD_MULTICASTS)) {
 8007ffe:	2105      	movs	r1, #5
		pos += snprintk(str + pos, sizeof(str) - pos,
 8008000:	4404      	add	r4, r0
	if (net_if_flag_is_set(iface, NET_IF_FORWARD_MULTICASTS)) {
 8008002:	4630      	mov	r0, r6
 8008004:	f00a fd7b 	bl	8012afe <net_if_flag_is_set>
 8008008:	b130      	cbz	r0, 8008018 <iface_cb+0xd8>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800800a:	f1c4 0144 	rsb	r1, r4, #68	; 0x44
 800800e:	1938      	adds	r0, r7, r4
 8008010:	4a75      	ldr	r2, [pc, #468]	; (80081e8 <iface_cb+0x2a8>)
 8008012:	f006 fbb1 	bl	800e778 <snprintk>
 8008016:	4404      	add	r4, r0
	if (net_if_flag_is_set(iface, NET_IF_IPV4)) {
 8008018:	2106      	movs	r1, #6
 800801a:	4630      	mov	r0, r6
 800801c:	f00a fd6f 	bl	8012afe <net_if_flag_is_set>
 8008020:	b130      	cbz	r0, 8008030 <iface_cb+0xf0>
		pos += snprintk(str + pos, sizeof(str) - pos,
 8008022:	f1c4 0144 	rsb	r1, r4, #68	; 0x44
 8008026:	1938      	adds	r0, r7, r4
 8008028:	4a70      	ldr	r2, [pc, #448]	; (80081ec <iface_cb+0x2ac>)
 800802a:	f006 fba5 	bl	800e778 <snprintk>
 800802e:	4404      	add	r4, r0
	if (net_if_flag_is_set(iface, NET_IF_IPV6)) {
 8008030:	2107      	movs	r1, #7
 8008032:	4630      	mov	r0, r6
 8008034:	f00a fd63 	bl	8012afe <net_if_flag_is_set>
 8008038:	b130      	cbz	r0, 8008048 <iface_cb+0x108>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800803a:	f1c4 0144 	rsb	r1, r4, #68	; 0x44
 800803e:	1938      	adds	r0, r7, r4
 8008040:	4a6b      	ldr	r2, [pc, #428]	; (80081f0 <iface_cb+0x2b0>)
 8008042:	f006 fb99 	bl	800e778 <snprintk>
 8008046:	4404      	add	r4, r0
	str[pos - 1] = '\0';
 8008048:	443c      	add	r4, r7
 800804a:	2700      	movs	r7, #0
	PR("Flags     : %s\n", iface_flags2str(iface));
 800804c:	2108      	movs	r1, #8
 800804e:	4628      	mov	r0, r5
 8008050:	4b62      	ldr	r3, [pc, #392]	; (80081dc <iface_cb+0x29c>)
 8008052:	4a68      	ldr	r2, [pc, #416]	; (80081f4 <iface_cb+0x2b4>)
	str[pos - 1] = '\0';
 8008054:	f804 7c01 	strb.w	r7, [r4, #-1]
	PR("Flags     : %s\n", iface_flags2str(iface));
 8008058:	f007 f924 	bl	800f2a4 <shell_fprintf>
	if (!net_if_flag_is_set(iface, NET_IF_IPV4)) {
 800805c:	2106      	movs	r1, #6
 800805e:	4630      	mov	r0, r6
 8008060:	f00a fd4d 	bl	8012afe <net_if_flag_is_set>
 8008064:	bb08      	cbnz	r0, 80080aa <iface_cb+0x16a>
		PR("%s not %s for this interface.\n", "IPv4", "enabled");
 8008066:	4b64      	ldr	r3, [pc, #400]	; (80081f8 <iface_cb+0x2b8>)
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	4a64      	ldr	r2, [pc, #400]	; (80081fc <iface_cb+0x2bc>)
 800806c:	4b64      	ldr	r3, [pc, #400]	; (8008200 <iface_cb+0x2c0>)
 800806e:	2108      	movs	r1, #8
 8008070:	4628      	mov	r0, r5
 8008072:	f007 f917 	bl	800f2a4 <shell_fprintf>
	if (ipv4) {
 8008076:	e007      	b.n	8008088 <iface_cb+0x148>
		PR_INFO("Interface is down.\n");
 8008078:	4a62      	ldr	r2, [pc, #392]	; (8008204 <iface_cb+0x2c4>)
 800807a:	2102      	movs	r1, #2
 800807c:	4628      	mov	r0, r5
 800807e:	f007 f911 	bl	800f2a4 <shell_fprintf>
		if (data->user_data == NULL) {
 8008082:	6863      	ldr	r3, [r4, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d189      	bne.n	8007f9c <iface_cb+0x5c>
}
 8008088:	b005      	add	sp, #20
 800808a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

static inline char *net_sprint_ll_addr(const uint8_t *ll, uint8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
 800808e:	4a5e      	ldr	r2, [pc, #376]	; (8008208 <iface_cb+0x2c8>)
 8008090:	7d09      	ldrb	r1, [r1, #20]
 8008092:	2318      	movs	r3, #24
 8008094:	f7fc fe0e 	bl	8004cb4 <net_sprint_ll_addr_buf>
		PR("Link addr : %s\n",
 8008098:	4a5c      	ldr	r2, [pc, #368]	; (800820c <iface_cb+0x2cc>)
 800809a:	4603      	mov	r3, r0
 800809c:	2108      	movs	r1, #8
 800809e:	4628      	mov	r0, r5
 80080a0:	f007 f900 	bl	800f2a4 <shell_fprintf>
 80080a4:	e77e      	b.n	8007fa4 <iface_cb+0x64>
		pos += snprintk(str + pos, sizeof(str) - pos,
 80080a6:	4a5a      	ldr	r2, [pc, #360]	; (8008210 <iface_cb+0x2d0>)
 80080a8:	e7a7      	b.n	8007ffa <iface_cb+0xba>
	PR("IPv4 unicast addresses (max %d):\n", NET_IF_MAX_IPV4_ADDR);
 80080aa:	4628      	mov	r0, r5
 80080ac:	4a59      	ldr	r2, [pc, #356]	; (8008214 <iface_cb+0x2d4>)
	ipv4 = iface->config.ip.ipv4;
 80080ae:	6876      	ldr	r6, [r6, #4]
	PR("IPv4 unicast addresses (max %d):\n", NET_IF_MAX_IPV4_ADDR);
 80080b0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8008218 <iface_cb+0x2d8>
 80080b4:	2301      	movs	r3, #1
 80080b6:	2108      	movs	r1, #8
 80080b8:	f007 f8f4 	bl	800f2a4 <shell_fprintf>
	count = 0;
 80080bc:	463c      	mov	r4, r7
	for (i = 0; ipv4 && i < NET_IF_MAX_IPV4_ADDR; i++) {
 80080be:	4638      	mov	r0, r7
		PR("\t%s %s %s%s\n",
 80080c0:	4f56      	ldr	r7, [pc, #344]	; (800821c <iface_cb+0x2dc>)
	for (i = 0; ipv4 && i < NET_IF_MAX_IPV4_ADDR; i++) {
 80080c2:	b10e      	cbz	r6, 80080c8 <iface_cb+0x188>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d036      	beq.n	8008136 <iface_cb+0x1f6>
	if (count == 0) {
 80080c8:	b924      	cbnz	r4, 80080d4 <iface_cb+0x194>
		PR("\t<none>\n");
 80080ca:	4a55      	ldr	r2, [pc, #340]	; (8008220 <iface_cb+0x2e0>)
 80080cc:	2108      	movs	r1, #8
 80080ce:	4628      	mov	r0, r5
 80080d0:	f007 f8e8 	bl	800f2a4 <shell_fprintf>
	PR("IPv4 multicast addresses (max %d):\n", NET_IF_MAX_IPV4_MADDR);
 80080d4:	4a53      	ldr	r2, [pc, #332]	; (8008224 <iface_cb+0x2e4>)
		PR("\t%s\n", net_sprint_ipv4_addr(&mcast->address.in_addr));
 80080d6:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8008228 <iface_cb+0x2e8>
	PR("IPv4 multicast addresses (max %d):\n", NET_IF_MAX_IPV4_MADDR);
 80080da:	2301      	movs	r3, #1
 80080dc:	2108      	movs	r1, #8
 80080de:	4628      	mov	r0, r5
 80080e0:	f007 f8e0 	bl	800f2a4 <shell_fprintf>
	count = 0;
 80080e4:	2400      	movs	r4, #0
	for (i = 0; ipv4 && i < NET_IF_MAX_IPV4_MADDR; i++) {
 80080e6:	4627      	mov	r7, r4
		PR("\t%s\n", net_sprint_ipv4_addr(&mcast->address.in_addr));
 80080e8:	f106 081c 	add.w	r8, r6, #28
	for (i = 0; ipv4 && i < NET_IF_MAX_IPV4_MADDR; i++) {
 80080ec:	2e00      	cmp	r6, #0
 80080ee:	d061      	beq.n	80081b4 <iface_cb+0x274>
 80080f0:	2f00      	cmp	r7, #0
 80080f2:	d04d      	beq.n	8008190 <iface_cb+0x250>
	if (count == 0) {
 80080f4:	b934      	cbnz	r4, 8008104 <iface_cb+0x1c4>
		PR("\t<none>\n");
 80080f6:	4a4a      	ldr	r2, [pc, #296]	; (8008220 <iface_cb+0x2e0>)
 80080f8:	2108      	movs	r1, #8
 80080fa:	4628      	mov	r0, r5
 80080fc:	f007 f8d2 	bl	800f2a4 <shell_fprintf>
	if (ipv4) {
 8008100:	2e00      	cmp	r6, #0
 8008102:	d0c1      	beq.n	8008088 <iface_cb+0x148>
		PR("IPv4 gateway : %s\n",
 8008104:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8008108:	2001      	movs	r0, #1
 800810a:	f7fc feeb 	bl	8004ee4 <net_sprint_addr>
 800810e:	4a47      	ldr	r2, [pc, #284]	; (800822c <iface_cb+0x2ec>)
 8008110:	4603      	mov	r3, r0
 8008112:	2108      	movs	r1, #8
 8008114:	4628      	mov	r0, r5
 8008116:	f007 f8c5 	bl	800f2a4 <shell_fprintf>
		PR("IPv4 netmask : %s\n",
 800811a:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800811e:	2001      	movs	r0, #1
 8008120:	f7fc fee0 	bl	8004ee4 <net_sprint_addr>
 8008124:	4a42      	ldr	r2, [pc, #264]	; (8008230 <iface_cb+0x2f0>)
 8008126:	4603      	mov	r3, r0
 8008128:	2108      	movs	r1, #8
 800812a:	4628      	mov	r0, r5
}
 800812c:	b005      	add	sp, #20
 800812e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		PR("IPv4 netmask : %s\n",
 8008132:	f007 b8b7 	b.w	800f2a4 <shell_fprintf>
		if (!unicast->is_used) {
 8008136:	7db3      	ldrb	r3, [r6, #22]
 8008138:	079a      	lsls	r2, r3, #30
 800813a:	f04f 0001 	mov.w	r0, #1
 800813e:	d5c0      	bpl.n	80080c2 <iface_cb+0x182>
		PR("\t%s %s %s%s\n",
 8008140:	1d31      	adds	r1, r6, #4
 8008142:	f7fc fecf 	bl	8004ee4 <net_sprint_addr>
 8008146:	7d32      	ldrb	r2, [r6, #20]
 8008148:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8008234 <iface_cb+0x2f4>
 800814c:	2a04      	cmp	r2, #4
 800814e:	bf98      	it	ls
 8008150:	f858 1022 	ldrls.w	r1, [r8, r2, lsl #2]
 8008154:	7d72      	ldrb	r2, [r6, #21]
 8008156:	f102 0201 	add.w	r2, r2, #1
 800815a:	b2d2      	uxtb	r2, r2
 800815c:	bf88      	it	hi
 800815e:	4639      	movhi	r1, r7
	switch (addr_state) {
 8008160:	2a03      	cmp	r2, #3
		PR("\t%s %s %s%s\n",
 8008162:	4603      	mov	r3, r0
 8008164:	bf96      	itet	ls
 8008166:	4834      	ldrls	r0, [pc, #208]	; (8008238 <iface_cb+0x2f8>)
	switch (addr_state) {
 8008168:	4834      	ldrhi	r0, [pc, #208]	; (800823c <iface_cb+0x2fc>)
 800816a:	f850 0022 	ldrls.w	r0, [r0, r2, lsl #2]
		PR("\t%s %s %s%s\n",
 800816e:	7db2      	ldrb	r2, [r6, #22]
 8008170:	9100      	str	r1, [sp, #0]
 8008172:	f012 0f01 	tst.w	r2, #1
 8008176:	4a32      	ldr	r2, [pc, #200]	; (8008240 <iface_cb+0x300>)
 8008178:	bf08      	it	eq
 800817a:	4662      	moveq	r2, ip
 800817c:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8008180:	2108      	movs	r1, #8
 8008182:	4628      	mov	r0, r5
 8008184:	4a2f      	ldr	r2, [pc, #188]	; (8008244 <iface_cb+0x304>)
 8008186:	f007 f88d 	bl	800f2a4 <shell_fprintf>
		count++;
 800818a:	3401      	adds	r4, #1
 800818c:	2001      	movs	r0, #1
 800818e:	e798      	b.n	80080c2 <iface_cb+0x182>
		if (!mcast->is_used) {
 8008190:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8008194:	07db      	lsls	r3, r3, #31
 8008196:	f04f 0701 	mov.w	r7, #1
 800819a:	d5a7      	bpl.n	80080ec <iface_cb+0x1ac>
		PR("\t%s\n", net_sprint_ipv4_addr(&mcast->address.in_addr));
 800819c:	4641      	mov	r1, r8
 800819e:	4638      	mov	r0, r7
 80081a0:	f7fc fea0 	bl	8004ee4 <net_sprint_addr>
 80081a4:	464a      	mov	r2, r9
 80081a6:	4603      	mov	r3, r0
 80081a8:	2108      	movs	r1, #8
 80081aa:	4628      	mov	r0, r5
 80081ac:	f007 f87a 	bl	800f2a4 <shell_fprintf>
		count++;
 80081b0:	443c      	add	r4, r7
 80081b2:	e79b      	b.n	80080ec <iface_cb+0x1ac>
	if (count == 0) {
 80081b4:	2c00      	cmp	r4, #0
 80081b6:	f47f af67 	bne.w	8008088 <iface_cb+0x148>
 80081ba:	e79c      	b.n	80080f6 <iface_cb+0x1b6>
 80081bc:	0801791d 	.word	0x0801791d
 80081c0:	08017baa 	.word	0x08017baa
 80081c4:	08017ba6 	.word	0x08017ba6
 80081c8:	08017912 	.word	0x08017912
 80081cc:	08017bde 	.word	0x08017bde
 80081d0:	08017bf7 	.word	0x08017bf7
 80081d4:	08017d3d 	.word	0x08017d3d
 80081d8:	08017c3a 	.word	0x08017c3a
 80081dc:	20002669 	.word	0x20002669
 80081e0:	08017c47 	.word	0x08017c47
 80081e4:	08017c50 	.word	0x08017c50
 80081e8:	08017c5f 	.word	0x08017c5f
 80081ec:	08017c6e 	.word	0x08017c6e
 80081f0:	08017c74 	.word	0x08017c74
 80081f4:	08017c7a 	.word	0x08017c7a
 80081f8:	08017cae 	.word	0x08017cae
 80081fc:	08017c8f 	.word	0x08017c8f
 8008200:	08017c8a 	.word	0x08017c8a
 8008204:	08017c16 	.word	0x08017c16
 8008208:	20002631 	.word	0x20002631
 800820c:	08017c2a 	.word	0x08017c2a
 8008210:	08017c53 	.word	0x08017c53
 8008214:	08017cb6 	.word	0x08017cb6
 8008218:	08015868 	.word	0x08015868
 800821c:	08017bb5 	.word	0x08017bb5
 8008220:	08017ce5 	.word	0x08017ce5
 8008224:	08017cee 	.word	0x08017cee
 8008228:	08017d12 	.word	0x08017d12
 800822c:	08017d17 	.word	0x08017d17
 8008230:	08017d2a 	.word	0x08017d2a
 8008234:	080164a2 	.word	0x080164a2
 8008238:	0801587c 	.word	0x0801587c
 800823c:	08017bc4 	.word	0x08017bc4
 8008240:	08017bd4 	.word	0x08017bd4
 8008244:	08017cd8 	.word	0x08017cd8

08008248 <udp_rcvd>:
{
 8008248:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (pkt) {
 800824c:	460c      	mov	r4, r1
 800824e:	b199      	cbz	r1, 8008278 <udp_rcvd+0x30>
		size_t len = net_pkt_remaining_data(pkt);
 8008250:	4608      	mov	r0, r1
 8008252:	f009 fd24 	bl	8011c9e <net_pkt_remaining_data>
		PR_SHELL(udp_shell, "Received UDP packet: ");
 8008256:	4d11      	ldr	r5, [pc, #68]	; (800829c <udp_rcvd+0x54>)
 8008258:	4a11      	ldr	r2, [pc, #68]	; (80082a0 <udp_rcvd+0x58>)
			PR_SHELL(udp_shell, "%02x ", byte);
 800825a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80082a4 <udp_rcvd+0x5c>
		size_t len = net_pkt_remaining_data(pkt);
 800825e:	4607      	mov	r7, r0
		PR_SHELL(udp_shell, "Received UDP packet: ");
 8008260:	2108      	movs	r1, #8
 8008262:	6828      	ldr	r0, [r5, #0]
 8008264:	f007 f81e 	bl	800f2a4 <shell_fprintf>
		for (size_t i = 0; i < len; ++i) {
 8008268:	2600      	movs	r6, #0
 800826a:	42b7      	cmp	r7, r6
 800826c:	d107      	bne.n	800827e <udp_rcvd+0x36>
		PR_SHELL(udp_shell, "\n");
 800826e:	4a0e      	ldr	r2, [pc, #56]	; (80082a8 <udp_rcvd+0x60>)
 8008270:	6828      	ldr	r0, [r5, #0]
 8008272:	2108      	movs	r1, #8
 8008274:	f007 f816 	bl	800f2a4 <shell_fprintf>
}
 8008278:	b002      	add	sp, #8
 800827a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_pkt_read(pkt, data, 1);
 800827e:	2201      	movs	r2, #1
 8008280:	f10d 0107 	add.w	r1, sp, #7
 8008284:	4620      	mov	r0, r4
 8008286:	f009 fca0 	bl	8011bca <net_pkt_read>
			PR_SHELL(udp_shell, "%02x ", byte);
 800828a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800828e:	6828      	ldr	r0, [r5, #0]
 8008290:	4642      	mov	r2, r8
 8008292:	2108      	movs	r1, #8
 8008294:	f007 f806 	bl	800f2a4 <shell_fprintf>
		for (size_t i = 0; i < len; ++i) {
 8008298:	3601      	adds	r6, #1
 800829a:	e7e6      	b.n	800826a <udp_rcvd+0x22>
 800829c:	200023ec 	.word	0x200023ec
 80082a0:	08017d4d 	.word	0x08017d4d
 80082a4:	08016ab9 	.word	0x08016ab9
 80082a8:	080164a1 	.word	0x080164a1

080082ac <tcp_recv_cb>:
{
 80082ac:	b570      	push	{r4, r5, r6, lr}
	if (pkt == NULL) {
 80082ae:	460c      	mov	r4, r1
 80082b0:	b9c9      	cbnz	r1, 80082e6 <tcp_recv_cb+0x3a>
		if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 80082b2:	4d13      	ldr	r5, [pc, #76]	; (8008300 <tcp_recv_cb+0x54>)
 80082b4:	6828      	ldr	r0, [r5, #0]
 80082b6:	b1a8      	cbz	r0, 80082e4 <tcp_recv_cb+0x38>
 80082b8:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 80082bc:	07db      	lsls	r3, r3, #31
 80082be:	d511      	bpl.n	80082e4 <tcp_recv_cb+0x38>
		ret = net_context_put(tcp_ctx);
 80082c0:	f7fc ffaa 	bl	8005218 <net_context_put>
		if (ret < 0) {
 80082c4:	1e03      	subs	r3, r0, #0
 80082c6:	480f      	ldr	r0, [pc, #60]	; (8008304 <tcp_recv_cb+0x58>)
 80082c8:	da06      	bge.n	80082d8 <tcp_recv_cb+0x2c>
			PR_SHELL(tcp_shell,
 80082ca:	4a0f      	ldr	r2, [pc, #60]	; (8008308 <tcp_recv_cb+0x5c>)
 80082cc:	6800      	ldr	r0, [r0, #0]
 80082ce:	2108      	movs	r1, #8
}
 80082d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PR_SHELL(tcp_shell, "%zu bytes received\n", net_pkt_get_len(pkt));
 80082d4:	f006 bfe6 	b.w	800f2a4 <shell_fprintf>
		PR_SHELL(tcp_shell, "Connection closed by remote peer.\n");
 80082d8:	4a0c      	ldr	r2, [pc, #48]	; (800830c <tcp_recv_cb+0x60>)
 80082da:	6800      	ldr	r0, [r0, #0]
 80082dc:	2108      	movs	r1, #8
 80082de:	f006 ffe1 	bl	800f2a4 <shell_fprintf>
		tcp_ctx = NULL;
 80082e2:	602c      	str	r4, [r5, #0]
}
 80082e4:	bd70      	pop	{r4, r5, r6, pc}
	PR_SHELL(tcp_shell, "%zu bytes received\n", net_pkt_get_len(pkt));
 80082e6:	4b07      	ldr	r3, [pc, #28]	; (8008304 <tcp_recv_cb+0x58>)
 80082e8:	688a      	ldr	r2, [r1, #8]
 80082ea:	6818      	ldr	r0, [r3, #0]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
 80082ec:	2300      	movs	r3, #0

	while (buf) {
 80082ee:	b912      	cbnz	r2, 80082f6 <tcp_recv_cb+0x4a>
 80082f0:	4a07      	ldr	r2, [pc, #28]	; (8008310 <tcp_recv_cb+0x64>)
 80082f2:	2108      	movs	r1, #8
 80082f4:	e7ec      	b.n	80082d0 <tcp_recv_cb+0x24>
		bytes += buf->len;
 80082f6:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
 80082f8:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
 80082fa:	440b      	add	r3, r1
		buf = buf->frags;
 80082fc:	e7f7      	b.n	80082ee <tcp_recv_cb+0x42>
 80082fe:	bf00      	nop
 8008300:	200023e0 	.word	0x200023e0
 8008304:	200023e4 	.word	0x200023e4
 8008308:	080177b9 	.word	0x080177b9
 800830c:	08017d63 	.word	0x08017d63
 8008310:	08017d86 	.word	0x08017d86

08008314 <context_cb>:
{
 8008314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008318:	4604      	mov	r4, r0
 800831a:	b095      	sub	sp, #84	; 0x54
	int *count = data->user_data;
 800831c:	e9d1 9700 	ldrd	r9, r7, [r1]
	char addr_remote[ADDR_LEN + 7] = "";
 8008320:	2213      	movs	r2, #19
 8008322:	2100      	movs	r1, #0
 8008324:	a80f      	add	r0, sp, #60	; 0x3c
 8008326:	910e      	str	r1, [sp, #56]	; 0x38
 8008328:	f00c fa7b 	bl	8014822 <memset>
	if (context->local.family == AF_INET) {
 800832c:	8ba5      	ldrh	r5, [r4, #28]
 800832e:	2d01      	cmp	r5, #1
 8008330:	ae08      	add	r6, sp, #32
 8008332:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008336:	d155      	bne.n	80083e4 <context_cb+0xd0>
		snprintk(addr_local, local_len, "%s:%d",
 8008338:	6a21      	ldr	r1, [r4, #32]
 800833a:	4628      	mov	r0, r5
 800833c:	f7fc fdd2 	bl	8004ee4 <net_sprint_addr>
 8008340:	8be2      	ldrh	r2, [r4, #30]
 8008342:	ba52      	rev16	r2, r2
 8008344:	b292      	uxth	r2, r2
 8008346:	4603      	mov	r3, r0
 8008348:	9200      	str	r2, [sp, #0]
 800834a:	2117      	movs	r1, #23
 800834c:	4a34      	ldr	r2, [pc, #208]	; (8008420 <context_cb+0x10c>)
 800834e:	4630      	mov	r0, r6
 8008350:	f006 fa12 	bl	800e778 <snprintk>
		snprintk(addr_remote, remote_len, "%s:%d",
 8008354:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8008358:	4628      	mov	r0, r5
 800835a:	f7fc fdc3 	bl	8004ee4 <net_sprint_addr>
 800835e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008360:	ba52      	rev16	r2, r2
 8008362:	b292      	uxth	r2, r2
 8008364:	4603      	mov	r3, r0
 8008366:	9200      	str	r2, [sp, #0]
 8008368:	2117      	movs	r1, #23
 800836a:	4a2d      	ldr	r2, [pc, #180]	; (8008420 <context_cb+0x10c>)
 800836c:	4640      	mov	r0, r8
 800836e:	f006 fa03 	bl	800e778 <snprintk>
	return net_if_get_by_index(context->iface);
 8008372:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
	PR("[%2d] %p\t%d      %c%c%c   %16s\t%16s\n",
 8008376:	683d      	ldr	r5, [r7, #0]
 8008378:	f00a fbbd 	bl	8012af6 <net_if_get_by_index>
 800837c:	f7fc fbba 	bl	8004af4 <net_if_get_by_iface>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8008380:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 8008384:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 8008388:	2b02      	cmp	r3, #2
 800838a:	f105 0501 	add.w	r5, r5, #1
 800838e:	d03f      	beq.n	8008410 <context_cb+0xfc>
 8008390:	2b01      	cmp	r3, #1
 8008392:	bf0c      	ite	eq
 8008394:	2134      	moveq	r1, #52	; 0x34
 8008396:	2120      	movne	r1, #32
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 8008398:	f3c2 1281 	ubfx	r2, r2, #6, #2
 800839c:	2a02      	cmp	r2, #2
 800839e:	d039      	beq.n	8008414 <context_cb+0x100>
 80083a0:	2a01      	cmp	r2, #1
 80083a2:	b2d3      	uxtb	r3, r2
 80083a4:	d038      	beq.n	8008418 <context_cb+0x104>
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	bf0c      	ite	eq
 80083aa:	2352      	moveq	r3, #82	; 0x52
 80083ac:	2320      	movne	r3, #32
	return context->proto;
 80083ae:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 80083b2:	2a11      	cmp	r2, #17
 80083b4:	d032      	beq.n	800841c <context_cb+0x108>
 80083b6:	2a06      	cmp	r2, #6
 80083b8:	bf0c      	ite	eq
 80083ba:	2254      	moveq	r2, #84	; 0x54
 80083bc:	2220      	movne	r2, #32
 80083be:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80083c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80083c6:	462b      	mov	r3, r5
 80083c8:	e9cd 6805 	strd	r6, r8, [sp, #20]
 80083cc:	4a15      	ldr	r2, [pc, #84]	; (8008424 <context_cb+0x110>)
 80083ce:	9400      	str	r4, [sp, #0]
 80083d0:	2108      	movs	r1, #8
 80083d2:	4648      	mov	r0, r9
 80083d4:	f006 ff66 	bl	800f2a4 <shell_fprintf>
	(*count)++;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	3301      	adds	r3, #1
 80083dc:	603b      	str	r3, [r7, #0]
}
 80083de:	b015      	add	sp, #84	; 0x54
 80083e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (context->local.family == AF_UNSPEC) {
 80083e4:	b92d      	cbnz	r5, 80083f2 <context_cb+0xde>
		snprintk(addr_local, local_len, "AF_UNSPEC");
 80083e6:	4a10      	ldr	r2, [pc, #64]	; (8008428 <context_cb+0x114>)
		snprintk(addr_local, local_len, "AF_PACKET");
 80083e8:	2117      	movs	r1, #23
 80083ea:	4630      	mov	r0, r6
 80083ec:	f006 f9c4 	bl	800e778 <snprintk>
 80083f0:	e7bf      	b.n	8008372 <context_cb+0x5e>
	} else if (context->local.family == AF_PACKET) {
 80083f2:	2d03      	cmp	r5, #3
 80083f4:	d101      	bne.n	80083fa <context_cb+0xe6>
		snprintk(addr_local, local_len, "AF_PACKET");
 80083f6:	4a0d      	ldr	r2, [pc, #52]	; (800842c <context_cb+0x118>)
 80083f8:	e7f6      	b.n	80083e8 <context_cb+0xd4>
	} else if (context->local.family == AF_CAN) {
 80083fa:	2d04      	cmp	r5, #4
 80083fc:	d101      	bne.n	8008402 <context_cb+0xee>
		snprintk(addr_local, local_len, "AF_CAN");
 80083fe:	4a0c      	ldr	r2, [pc, #48]	; (8008430 <context_cb+0x11c>)
 8008400:	e7f2      	b.n	80083e8 <context_cb+0xd4>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
 8008402:	4a0c      	ldr	r2, [pc, #48]	; (8008434 <context_cb+0x120>)
 8008404:	462b      	mov	r3, r5
 8008406:	2117      	movs	r1, #23
 8008408:	4630      	mov	r0, r6
 800840a:	f006 f9b5 	bl	800e778 <snprintk>
 800840e:	e7b0      	b.n	8008372 <context_cb+0x5e>
	PR("[%2d] %p\t%d      %c%c%c   %16s\t%16s\n",
 8008410:	2136      	movs	r1, #54	; 0x36
 8008412:	e7c1      	b.n	8008398 <context_cb+0x84>
 8008414:	2344      	movs	r3, #68	; 0x44
 8008416:	e7ca      	b.n	80083ae <context_cb+0x9a>
 8008418:	2353      	movs	r3, #83	; 0x53
 800841a:	e7c8      	b.n	80083ae <context_cb+0x9a>
 800841c:	2255      	movs	r2, #85	; 0x55
 800841e:	e7ce      	b.n	80083be <context_cb+0xaa>
 8008420:	08017d9a 	.word	0x08017d9a
 8008424:	08017dc6 	.word	0x08017dc6
 8008428:	08017da0 	.word	0x08017da0
 800842c:	08017daa 	.word	0x08017daa
 8008430:	08017db4 	.word	0x08017db4
 8008434:	08017dbb 	.word	0x08017dbb

08008438 <cmd_net_dns>:
 8008438:	b508      	push	{r3, lr}
 800843a:	4a03      	ldr	r2, [pc, #12]	; (8008448 <cmd_net_dns+0x10>)
 800843c:	2102      	movs	r1, #2
 800843e:	f006 ff31 	bl	800f2a4 <shell_fprintf>
 8008442:	2000      	movs	r0, #0
 8008444:	bd08      	pop	{r3, pc}
 8008446:	bf00      	nop
 8008448:	08017640 	.word	0x08017640

0800844c <cmd_net_resume>:
 800844c:	b508      	push	{r3, lr}
 800844e:	4a03      	ldr	r2, [pc, #12]	; (800845c <cmd_net_resume+0x10>)
 8008450:	2102      	movs	r1, #2
 8008452:	f006 ff27 	bl	800f2a4 <shell_fprintf>
 8008456:	2000      	movs	r0, #0
 8008458:	bd08      	pop	{r3, pc}
 800845a:	bf00      	nop
 800845c:	080174a2 	.word	0x080174a2

08008460 <cmd_net_events_off>:
 8008460:	b508      	push	{r3, lr}
 8008462:	4a03      	ldr	r2, [pc, #12]	; (8008470 <cmd_net_events_off+0x10>)
 8008464:	2102      	movs	r1, #2
 8008466:	f006 ff1d 	bl	800f2a4 <shell_fprintf>
 800846a:	2000      	movs	r0, #0
 800846c:	bd08      	pop	{r3, pc}
 800846e:	bf00      	nop
 8008470:	080175e2 	.word	0x080175e2

08008474 <cmd_net_events>:
 8008474:	b508      	push	{r3, lr}
 8008476:	4a03      	ldr	r2, [pc, #12]	; (8008484 <cmd_net_events+0x10>)
 8008478:	2102      	movs	r1, #2
 800847a:	f006 ff13 	bl	800f2a4 <shell_fprintf>
 800847e:	2000      	movs	r0, #0
 8008480:	bd08      	pop	{r3, pc}
 8008482:	bf00      	nop
 8008484:	080175e2 	.word	0x080175e2

08008488 <cmd_net_nbr>:
 8008488:	b508      	push	{r3, lr}
 800848a:	4a03      	ldr	r2, [pc, #12]	; (8008498 <cmd_net_nbr+0x10>)
 800848c:	2102      	movs	r1, #2
 800848e:	f006 ff09 	bl	800f2a4 <shell_fprintf>
 8008492:	2000      	movs	r0, #0
 8008494:	bd08      	pop	{r3, pc}
 8008496:	bf00      	nop
 8008498:	08017581 	.word	0x08017581

0800849c <udp_sent>:
{
 800849c:	b508      	push	{r3, lr}
	PR_SHELL(udp_shell, "Message sent\n");
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <udp_sent+0x18>)
 80084a0:	4a05      	ldr	r2, [pc, #20]	; (80084b8 <udp_sent+0x1c>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	2108      	movs	r1, #8
 80084a6:	f006 fefd 	bl	800f2a4 <shell_fprintf>
	z_impl_k_sem_give(sem);
 80084aa:	4804      	ldr	r0, [pc, #16]	; (80084bc <udp_sent+0x20>)
}
 80084ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084b0:	f004 b876 	b.w	800c5a0 <z_impl_k_sem_give>
 80084b4:	200023ec 	.word	0x200023ec
 80084b8:	08017494 	.word	0x08017494
 80084bc:	200004e8 	.word	0x200004e8

080084c0 <cmd_net_iface_up>:
{
 80084c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	idx = get_iface_idx(shell, argv[1]);
 80084c2:	6851      	ldr	r1, [r2, #4]
{
 80084c4:	4606      	mov	r6, r0
	idx = get_iface_idx(shell, argv[1]);
 80084c6:	f7ff fa2b 	bl	8007920 <get_iface_idx>
	if (idx < 0) {
 80084ca:	1e05      	subs	r5, r0, #0
 80084cc:	db09      	blt.n	80084e2 <cmd_net_iface_up+0x22>
	iface = net_if_get_by_index(idx);
 80084ce:	f00a fb12 	bl	8012af6 <net_if_get_by_index>
	if (!iface) {
 80084d2:	4602      	mov	r2, r0
 80084d4:	b940      	cbnz	r0, 80084e8 <cmd_net_iface_up+0x28>
		PR_WARNING("No such interface in index %d\n", idx);
 80084d6:	4a13      	ldr	r2, [pc, #76]	; (8008524 <cmd_net_iface_up+0x64>)
 80084d8:	462b      	mov	r3, r5
		PR_WARNING("Interface %d is already up.\n", idx);
 80084da:	2103      	movs	r1, #3
 80084dc:	4630      	mov	r0, r6
 80084de:	f006 fee1 	bl	800f2a4 <shell_fprintf>
		return -ENOEXEC;
 80084e2:	f06f 0407 	mvn.w	r4, #7
 80084e6:	e019      	b.n	800851c <cmd_net_iface_up+0x5c>
	return net_if_flag_is_set(iface, NET_IF_UP);
 80084e8:	2100      	movs	r1, #0
 80084ea:	f00a fb08 	bl	8012afe <net_if_flag_is_set>
	if (net_if_is_up(iface)) {
 80084ee:	b110      	cbz	r0, 80084f6 <cmd_net_iface_up+0x36>
		PR_WARNING("Interface %d is already up.\n", idx);
 80084f0:	4a0d      	ldr	r2, [pc, #52]	; (8008528 <cmd_net_iface_up+0x68>)
 80084f2:	462b      	mov	r3, r5
 80084f4:	e7f1      	b.n	80084da <cmd_net_iface_up+0x1a>
	ret = net_if_up(iface);
 80084f6:	4610      	mov	r0, r2
 80084f8:	f7fc fb20 	bl	8004b3c <net_if_up>
	if (ret) {
 80084fc:	4604      	mov	r4, r0
 80084fe:	b138      	cbz	r0, 8008510 <cmd_net_iface_up+0x50>
		PR_WARNING("Cannot take interface %d up (%d)\n", idx, ret);
 8008500:	9000      	str	r0, [sp, #0]
 8008502:	4a0a      	ldr	r2, [pc, #40]	; (800852c <cmd_net_iface_up+0x6c>)
 8008504:	462b      	mov	r3, r5
 8008506:	2103      	movs	r1, #3
 8008508:	4630      	mov	r0, r6
 800850a:	f006 fecb 	bl	800f2a4 <shell_fprintf>
		return -ENOEXEC;
 800850e:	e7e8      	b.n	80084e2 <cmd_net_iface_up+0x22>
		PR("Interface %d is up\n", idx);
 8008510:	4a07      	ldr	r2, [pc, #28]	; (8008530 <cmd_net_iface_up+0x70>)
 8008512:	462b      	mov	r3, r5
 8008514:	2108      	movs	r1, #8
 8008516:	4630      	mov	r0, r6
 8008518:	f006 fec4 	bl	800f2a4 <shell_fprintf>
}
 800851c:	4620      	mov	r0, r4
 800851e:	b002      	add	sp, #8
 8008520:	bd70      	pop	{r4, r5, r6, pc}
 8008522:	bf00      	nop
 8008524:	080178f3 	.word	0x080178f3
 8008528:	08017deb 	.word	0x08017deb
 800852c:	08017e08 	.word	0x08017e08
 8008530:	08017e2a 	.word	0x08017e2a

08008534 <cmd_net_ping>:
{
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	b087      	sub	sp, #28
	for (size_t i = 1; i < argc; ++i) {
 800853a:	2301      	movs	r3, #1
{
 800853c:	4604      	mov	r4, r0
 800853e:	4688      	mov	r8, r1
 8008540:	4616      	mov	r6, r2
	for (size_t i = 1; i < argc; ++i) {
 8008542:	9305      	str	r3, [sp, #20]
	int iface_idx = -1;
 8008544:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	int interval = 1000;
 8008548:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	int count = 3;
 800854c:	2703      	movs	r7, #3
	char *host = NULL;
 800854e:	f04f 0b00 	mov.w	fp, #0
	for (size_t i = 1; i < argc; ++i) {
 8008552:	9b05      	ldr	r3, [sp, #20]
 8008554:	4543      	cmp	r3, r8
 8008556:	d308      	bcc.n	800856a <cmd_net_ping+0x36>
	if (!host) {
 8008558:	f1bb 0f00 	cmp.w	fp, #0
 800855c:	d13d      	bne.n	80085da <cmd_net_ping+0xa6>
		PR_WARNING("Target host missing\n");
 800855e:	4a61      	ldr	r2, [pc, #388]	; (80086e4 <cmd_net_ping+0x1b0>)
				PR_WARNING("Feature is not supported\n");
 8008560:	2103      	movs	r1, #3
 8008562:	4620      	mov	r0, r4
 8008564:	f006 fe9e 	bl	800f2a4 <shell_fprintf>
 8008568:	e029      	b.n	80085be <cmd_net_ping+0x8a>
		if (*argv[i] != '-') {
 800856a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800856e:	781a      	ldrb	r2, [r3, #0]
 8008570:	2a2d      	cmp	r2, #45	; 0x2d
 8008572:	d130      	bne.n	80085d6 <cmd_net_ping+0xa2>
		switch (argv[i][1]) {
 8008574:	785a      	ldrb	r2, [r3, #1]
 8008576:	2a63      	cmp	r2, #99	; 0x63
 8008578:	d012      	beq.n	80085a0 <cmd_net_ping+0x6c>
 800857a:	2a69      	cmp	r2, #105	; 0x69
 800857c:	d022      	beq.n	80085c4 <cmd_net_ping+0x90>
 800857e:	2a49      	cmp	r2, #73	; 0x49
 8008580:	d127      	bne.n	80085d2 <cmd_net_ping+0x9e>
			iface_idx = parse_arg(&i, argc, argv);
 8008582:	4632      	mov	r2, r6
 8008584:	4641      	mov	r1, r8
 8008586:	a805      	add	r0, sp, #20
 8008588:	f00a fa90 	bl	8012aac <parse_arg>
			if (iface_idx < 0 || !net_if_get_by_index(iface_idx)) {
 800858c:	f1b0 0a00 	subs.w	sl, r0, #0
 8008590:	db0d      	blt.n	80085ae <cmd_net_ping+0x7a>
 8008592:	f00a fab0 	bl	8012af6 <net_if_get_by_index>
 8008596:	b150      	cbz	r0, 80085ae <cmd_net_ping+0x7a>
	for (size_t i = 1; i < argc; ++i) {
 8008598:	9b05      	ldr	r3, [sp, #20]
 800859a:	3301      	adds	r3, #1
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	e7d8      	b.n	8008552 <cmd_net_ping+0x1e>
			count = parse_arg(&i, argc, argv);
 80085a0:	4632      	mov	r2, r6
 80085a2:	4641      	mov	r1, r8
 80085a4:	a805      	add	r0, sp, #20
 80085a6:	f00a fa81 	bl	8012aac <parse_arg>
			if (count < 0) {
 80085aa:	1e07      	subs	r7, r0, #0
			if (interval < 0) {
 80085ac:	daf4      	bge.n	8008598 <cmd_net_ping+0x64>
				PR_WARNING("Parse error: %s\n", argv[i]);
 80085ae:	9b05      	ldr	r3, [sp, #20]
 80085b0:	4a4d      	ldr	r2, [pc, #308]	; (80086e8 <cmd_net_ping+0x1b4>)
 80085b2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
			PR_WARNING("Unrecognized argument: %s\n", argv[i]);
 80085b6:	2103      	movs	r1, #3
 80085b8:	4620      	mov	r0, r4
 80085ba:	f006 fe73 	bl	800f2a4 <shell_fprintf>
			return -ENOEXEC;
 80085be:	f06f 0a07 	mvn.w	sl, #7
 80085c2:	e08a      	b.n	80086da <cmd_net_ping+0x1a6>
			interval = parse_arg(&i, argc, argv);
 80085c4:	4632      	mov	r2, r6
 80085c6:	4641      	mov	r1, r8
 80085c8:	a805      	add	r0, sp, #20
 80085ca:	f00a fa6f 	bl	8012aac <parse_arg>
			if (interval < 0) {
 80085ce:	1e05      	subs	r5, r0, #0
 80085d0:	e7ec      	b.n	80085ac <cmd_net_ping+0x78>
			PR_WARNING("Unrecognized argument: %s\n", argv[i]);
 80085d2:	4a46      	ldr	r2, [pc, #280]	; (80086ec <cmd_net_ping+0x1b8>)
 80085d4:	e7ef      	b.n	80085b6 <cmd_net_ping+0x82>
 80085d6:	469b      	mov	fp, r3
 80085d8:	e7de      	b.n	8008598 <cmd_net_ping+0x64>
	shell_for_ping = shell;
 80085da:	4b45      	ldr	r3, [pc, #276]	; (80086f0 <cmd_net_ping+0x1bc>)
	struct net_if *iface = net_if_get_by_index(iface_idx);
 80085dc:	4650      	mov	r0, sl
	shell_for_ping = shell;
 80085de:	601c      	str	r4, [r3, #0]
	struct net_if *iface = net_if_get_by_index(iface_idx);
 80085e0:	f00a fa89 	bl	8012af6 <net_if_get_by_index>
 80085e4:	4606      	mov	r6, r0
 80085e6:	2001      	movs	r0, #1
 80085e8:	aa04      	add	r2, sp, #16
 80085ea:	4659      	mov	r1, fp
 80085ec:	f008 fad1 	bl	8010b92 <z_impl_net_addr_pton>
	if (net_addr_pton(AF_INET, host, &ipv4_target) < 0) {
 80085f0:	2800      	cmp	r0, #0
 80085f2:	db59      	blt.n	80086a8 <cmd_net_ping+0x174>
	if (!iface) {
 80085f4:	b91e      	cbnz	r6, 80085fe <cmd_net_ping+0xca>
		iface = net_if_ipv4_select_src_iface(&ipv4_target);
 80085f6:	a804      	add	r0, sp, #16
 80085f8:	f7fc f8f6 	bl	80047e8 <net_if_ipv4_select_src_iface>
 80085fc:	4606      	mov	r6, r0
	net_icmpv4_register_handler(&ping4_handler);
 80085fe:	483d      	ldr	r0, [pc, #244]	; (80086f4 <cmd_net_ping+0x1c0>)
 8008600:	f7fd fa84 	bl	8005b0c <net_icmpv4_register_handler>
	PR("PING %s\n", host);
 8008604:	4a3c      	ldr	r2, [pc, #240]	; (80086f8 <cmd_net_ping+0x1c4>)
 8008606:	465b      	mov	r3, fp
 8008608:	2108      	movs	r1, #8
 800860a:	4620      	mov	r0, r4
 800860c:	f006 fe4a 	bl	800f2a4 <shell_fprintf>
			return t * ((uint64_t)to_hz / from_hz);
 8008610:	f04f 090a 	mov.w	r9, #10
 8008614:	fb85 5909 	smull	r5, r9, r5, r9
	for (int i = 0; i < count; ++i) {
 8008618:	f04f 0800 	mov.w	r8, #0
 800861c:	4547      	cmp	r7, r8
 800861e:	d10f      	bne.n	8008640 <cmd_net_ping+0x10c>
 8008620:	f04f 0a00 	mov.w	sl, #0
	net_icmpv4_unregister_handler(&ping4_handler);
 8008624:	4833      	ldr	r0, [pc, #204]	; (80086f4 <cmd_net_ping+0x1c0>)
 8008626:	f7fd fa7b 	bl	8005b20 <net_icmpv4_unregister_handler>
		if (ret) {
 800862a:	f1ba 0f00 	cmp.w	sl, #0
 800862e:	d042      	beq.n	80086b6 <cmd_net_ping+0x182>
			if (ret == -EIO || ret == -ENETUNREACH) {
 8008630:	f11a 0f05 	cmn.w	sl, #5
 8008634:	d002      	beq.n	800863c <cmd_net_ping+0x108>
 8008636:	f11a 0f72 	cmn.w	sl, #114	; 0x72
 800863a:	d132      	bne.n	80086a2 <cmd_net_ping+0x16e>
				PR_WARNING("Cannot send IPv4 ping\n");
 800863c:	4a2f      	ldr	r2, [pc, #188]	; (80086fc <cmd_net_ping+0x1c8>)
 800863e:	e78f      	b.n	8008560 <cmd_net_ping+0x2c>
 8008640:	f002 fe92 	bl	800b368 <sys_clock_cycle_get_32>
 8008644:	9003      	str	r0, [sp, #12]
 8008646:	f002 fe8f 	bl	800b368 <sys_clock_cycle_get_32>
 800864a:	4683      	mov	fp, r0
 800864c:	f002 fe8c 	bl	800b368 <sys_clock_cycle_get_32>
 8008650:	4682      	mov	sl, r0
 8008652:	f002 fe89 	bl	800b368 <sys_clock_cycle_get_32>
		uint32_t time_stamp = htonl(k_cycle_get_32());
 8008656:	9a03      	ldr	r2, [sp, #12]
 8008658:	0603      	lsls	r3, r0, #24
 800865a:	ea4f 211b 	mov.w	r1, fp, lsr #8
 800865e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008662:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8008666:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800866a:	430b      	orrs	r3, r1
 800866c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8008670:	4313      	orrs	r3, r2
 8008672:	9305      	str	r3, [sp, #20]
 8008674:	f000 fb78 	bl	8008d68 <z_impl_sys_rand32_get>
		ret = net_icmpv4_send_echo_request(iface,
 8008678:	2304      	movs	r3, #4
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	ab05      	add	r3, sp, #20
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	b282      	uxth	r2, r0
 8008682:	fa1f f388 	uxth.w	r3, r8
 8008686:	a904      	add	r1, sp, #16
 8008688:	4630      	mov	r0, r6
 800868a:	f009 fd06 	bl	801209a <net_icmpv4_send_echo_request>
		if (ret) {
 800868e:	4682      	mov	sl, r0
 8008690:	2800      	cmp	r0, #0
 8008692:	d1c7      	bne.n	8008624 <cmd_net_ping+0xf0>
	return z_impl_k_sleep(timeout);
 8008694:	4628      	mov	r0, r5
 8008696:	4649      	mov	r1, r9
 8008698:	f004 fc3e 	bl	800cf18 <z_impl_k_sleep>
	for (int i = 0; i < count; ++i) {
 800869c:	f108 0801 	add.w	r8, r8, #1
 80086a0:	e7bc      	b.n	800861c <cmd_net_ping+0xe8>
			} else if (ret == -EINVAL) {
 80086a2:	f11a 0f16 	cmn.w	sl, #22
 80086a6:	d101      	bne.n	80086ac <cmd_net_ping+0x178>
				PR_WARNING("Invalid IP address\n");
 80086a8:	4a15      	ldr	r2, [pc, #84]	; (8008700 <cmd_net_ping+0x1cc>)
 80086aa:	e759      	b.n	8008560 <cmd_net_ping+0x2c>
			} else if (ret == -ENOTSUP) {
 80086ac:	f11a 0f86 	cmn.w	sl, #134	; 0x86
 80086b0:	d185      	bne.n	80085be <cmd_net_ping+0x8a>
				PR_WARNING("Feature is not supported\n");
 80086b2:	4a14      	ldr	r2, [pc, #80]	; (8008704 <cmd_net_ping+0x1d0>)
 80086b4:	e754      	b.n	8008560 <cmd_net_ping+0x2c>
	return z_impl_k_sem_take(sem, timeout);
 80086b6:	4814      	ldr	r0, [pc, #80]	; (8008708 <cmd_net_ping+0x1d4>)
 80086b8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80086bc:	2300      	movs	r3, #0
 80086be:	f003 ff95 	bl	800c5ec <z_impl_k_sem_take>
	if (ret == -EAGAIN) {
 80086c2:	300b      	adds	r0, #11
 80086c4:	d109      	bne.n	80086da <cmd_net_ping+0x1a6>
		PR_INFO("Ping timeout\n");
 80086c6:	4a11      	ldr	r2, [pc, #68]	; (800870c <cmd_net_ping+0x1d8>)
 80086c8:	2102      	movs	r1, #2
 80086ca:	4620      	mov	r0, r4
 80086cc:	f006 fdea 	bl	800f2a4 <shell_fprintf>
	net_icmpv4_unregister_handler(&ping4_handler);
 80086d0:	4808      	ldr	r0, [pc, #32]	; (80086f4 <cmd_net_ping+0x1c0>)
 80086d2:	f7fd fa25 	bl	8005b20 <net_icmpv4_unregister_handler>
		return -ETIMEDOUT;
 80086d6:	f06f 0a73 	mvn.w	sl, #115	; 0x73
}
 80086da:	4650      	mov	r0, sl
 80086dc:	b007      	add	sp, #28
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e2:	bf00      	nop
 80086e4:	08017e6a 	.word	0x08017e6a
 80086e8:	08017e3e 	.word	0x08017e3e
 80086ec:	08017e4f 	.word	0x08017e4f
 80086f0:	200023dc 	.word	0x200023dc
 80086f4:	20000164 	.word	0x20000164
 80086f8:	08017e7f 	.word	0x08017e7f
 80086fc:	08017e88 	.word	0x08017e88
 8008700:	08017e9f 	.word	0x08017e9f
 8008704:	08017eb3 	.word	0x08017eb3
 8008708:	200004d0 	.word	0x200004d0
 800870c:	08017ecd 	.word	0x08017ecd

08008710 <cmd_net_udp_bind>:
{
 8008710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008714:	b087      	sub	sp, #28
 8008716:	4615      	mov	r5, r2
	if (argc < 3) {
 8008718:	2902      	cmp	r1, #2
	char *endptr = NULL;
 800871a:	f04f 0200 	mov.w	r2, #0
{
 800871e:	4604      	mov	r4, r0
	char *endptr = NULL;
 8008720:	9203      	str	r2, [sp, #12]
	if (argc < 3) {
 8008722:	d809      	bhi.n	8008738 <cmd_net_udp_bind+0x28>
		PR_WARNING("Not enough arguments given for udp bind command\n");
 8008724:	4a41      	ldr	r2, [pc, #260]	; (800882c <cmd_net_udp_bind+0x11c>)
 8008726:	2103      	movs	r1, #3
		PR_WARNING("Invalid port number\n");
 8008728:	f006 fdbc 	bl	800f2a4 <shell_fprintf>
		return -EINVAL;
 800872c:	f06f 0515 	mvn.w	r5, #21
}
 8008730:	4628      	mov	r0, r5
 8008732:	b007      	add	sp, #28
 8008734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	port = strtol(argv[2], &endptr, 0);
 8008738:	68a8      	ldr	r0, [r5, #8]
	addr_str = argv[1];
 800873a:	f8d5 9004 	ldr.w	r9, [r5, #4]
	port = strtol(argv[2], &endptr, 0);
 800873e:	a903      	add	r1, sp, #12
 8008740:	f005 f8c8 	bl	800d8d4 <strtol>
	if (endptr == argv[2]) {
 8008744:	68aa      	ldr	r2, [r5, #8]
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	429a      	cmp	r2, r3
	port = strtol(argv[2], &endptr, 0);
 800874a:	4607      	mov	r7, r0
	if (endptr == argv[2]) {
 800874c:	d103      	bne.n	8008756 <cmd_net_udp_bind+0x46>
		PR_WARNING("Invalid port number\n");
 800874e:	4a38      	ldr	r2, [pc, #224]	; (8008830 <cmd_net_udp_bind+0x120>)
 8008750:	2103      	movs	r1, #3
 8008752:	4620      	mov	r0, r4
 8008754:	e7e8      	b.n	8008728 <cmd_net_udp_bind+0x18>
	if (udp_ctx && net_context_is_used(udp_ctx)) {
 8008756:	4e37      	ldr	r6, [pc, #220]	; (8008834 <cmd_net_udp_bind+0x124>)
 8008758:	6833      	ldr	r3, [r6, #0]
 800875a:	b15b      	cbz	r3, 8008774 <cmd_net_udp_bind+0x64>
	return context->flags & NET_CONTEXT_IN_USE;
 800875c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8008760:	07db      	lsls	r3, r3, #31
 8008762:	d507      	bpl.n	8008774 <cmd_net_udp_bind+0x64>
		PR_WARNING("Network context already in use\n");
 8008764:	4a34      	ldr	r2, [pc, #208]	; (8008838 <cmd_net_udp_bind+0x128>)
 8008766:	2103      	movs	r1, #3
 8008768:	4620      	mov	r0, r4
 800876a:	f006 fd9b 	bl	800f2a4 <shell_fprintf>
		return -EALREADY;
 800876e:	f06f 0577 	mvn.w	r5, #119	; 0x77
 8008772:	e7dd      	b.n	8008730 <cmd_net_udp_bind+0x20>
	memset(&addr, 0, sizeof(addr));
 8008774:	f04f 0800 	mov.w	r8, #0
	ret = net_ipaddr_parse(addr_str, strlen(addr_str), &addr);
 8008778:	4648      	mov	r0, r9
	memset(&addr, 0, sizeof(addr));
 800877a:	e9cd 8804 	strd	r8, r8, [sp, #16]
	ret = net_ipaddr_parse(addr_str, strlen(addr_str), &addr);
 800877e:	f7f7 fece 	bl	800051e <strlen>
 8008782:	aa04      	add	r2, sp, #16
 8008784:	4601      	mov	r1, r0
 8008786:	4648      	mov	r0, r9
 8008788:	f008 fbc2 	bl	8010f10 <net_ipaddr_parse>
	ret = net_context_get(addr.sa_family, SOCK_DGRAM, IPPROTO_UDP,
 800878c:	4b29      	ldr	r3, [pc, #164]	; (8008834 <cmd_net_udp_bind+0x124>)
 800878e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8008792:	2211      	movs	r2, #17
 8008794:	2102      	movs	r1, #2
 8008796:	f7fc fc55 	bl	8005044 <net_context_get>
	if (ret < 0) {
 800879a:	1e05      	subs	r5, r0, #0
 800879c:	da06      	bge.n	80087ac <cmd_net_udp_bind+0x9c>
		PR_WARNING("Cannot get UDP context (%d)\n", ret);
 800879e:	4a27      	ldr	r2, [pc, #156]	; (800883c <cmd_net_udp_bind+0x12c>)
 80087a0:	462b      	mov	r3, r5
 80087a2:	2103      	movs	r1, #3
 80087a4:	4620      	mov	r0, r4
 80087a6:	f006 fd7d 	bl	800f2a4 <shell_fprintf>
		return ret;
 80087aa:	e7c1      	b.n	8008730 <cmd_net_udp_bind+0x20>
	udp_shell = shell;
 80087ac:	4b24      	ldr	r3, [pc, #144]	; (8008840 <cmd_net_udp_bind+0x130>)
 80087ae:	601c      	str	r4, [r3, #0]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && addr.sa_family == AF_INET) {
 80087b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d116      	bne.n	80087e6 <cmd_net_udp_bind+0xd6>
		net_sin(&addr)->sin_port = htons(port);
 80087b8:	ba7f      	rev16	r7, r7
		iface = net_if_ipv4_select_src_iface(
 80087ba:	a805      	add	r0, sp, #20
		net_sin(&addr)->sin_port = htons(port);
 80087bc:	f8ad 7012 	strh.w	r7, [sp, #18]
		iface = net_if_ipv4_select_src_iface(
 80087c0:	f7fc f812 	bl	80047e8 <net_if_ipv4_select_src_iface>
	if (!iface) {
 80087c4:	b9b0      	cbnz	r0, 80087f4 <cmd_net_udp_bind+0xe4>
		PR_WARNING("No interface to send to given host\n");
 80087c6:	4a1f      	ldr	r2, [pc, #124]	; (8008844 <cmd_net_udp_bind+0x134>)
 80087c8:	2103      	movs	r1, #3
 80087ca:	4620      	mov	r0, r4
 80087cc:	f006 fd6a 	bl	800f2a4 <shell_fprintf>
	ret = net_context_put(udp_ctx);
 80087d0:	6830      	ldr	r0, [r6, #0]
 80087d2:	f7fc fd21 	bl	8005218 <net_context_put>
	if (ret < 0) {
 80087d6:	1e03      	subs	r3, r0, #0
 80087d8:	da24      	bge.n	8008824 <cmd_net_udp_bind+0x114>
		PR_WARNING("Cannot put UDP context (%d)\n", ret);
 80087da:	4a1b      	ldr	r2, [pc, #108]	; (8008848 <cmd_net_udp_bind+0x138>)
 80087dc:	2103      	movs	r1, #3
 80087de:	4620      	mov	r0, r4
 80087e0:	f006 fd60 	bl	800f2a4 <shell_fprintf>
 80087e4:	e01e      	b.n	8008824 <cmd_net_udp_bind+0x114>
		PR_WARNING("IPv6 and IPv4 are disabled, cannot %s.\n", "bind");
 80087e6:	4b19      	ldr	r3, [pc, #100]	; (800884c <cmd_net_udp_bind+0x13c>)
 80087e8:	4a19      	ldr	r2, [pc, #100]	; (8008850 <cmd_net_udp_bind+0x140>)
		PR_WARNING("Receiving from UDP port failed (%d)\n", ret);
 80087ea:	2103      	movs	r1, #3
 80087ec:	4620      	mov	r0, r4
 80087ee:	f006 fd59 	bl	800f2a4 <shell_fprintf>
		goto release_ctx;
 80087f2:	e7ed      	b.n	80087d0 <cmd_net_udp_bind+0xc0>
	net_context_set_iface(udp_ctx, iface);
 80087f4:	6835      	ldr	r5, [r6, #0]
	context->iface = net_if_get_by_iface(iface);
 80087f6:	f7fc f97d 	bl	8004af4 <net_if_get_by_iface>
	ret = net_context_bind(udp_ctx, &addr, addrlen);
 80087fa:	2208      	movs	r2, #8
 80087fc:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
 8008800:	a904      	add	r1, sp, #16
 8008802:	6830      	ldr	r0, [r6, #0]
 8008804:	f008 fc10 	bl	8011028 <net_context_bind>
	if (ret < 0) {
 8008808:	1e03      	subs	r3, r0, #0
 800880a:	da01      	bge.n	8008810 <cmd_net_udp_bind+0x100>
		PR_WARNING("Binding to UDP port failed (%d)\n", ret);
 800880c:	4a11      	ldr	r2, [pc, #68]	; (8008854 <cmd_net_udp_bind+0x144>)
 800880e:	e7ec      	b.n	80087ea <cmd_net_udp_bind+0xda>
	ret = net_context_recv(udp_ctx, udp_rcvd, K_NO_WAIT, NULL);
 8008810:	2300      	movs	r3, #0
 8008812:	4911      	ldr	r1, [pc, #68]	; (8008858 <cmd_net_udp_bind+0x148>)
 8008814:	6830      	ldr	r0, [r6, #0]
 8008816:	f8cd 8000 	str.w	r8, [sp]
 800881a:	2200      	movs	r2, #0
 800881c:	f7fc fd3a 	bl	8005294 <net_context_recv>
	if (ret < 0) {
 8008820:	1e03      	subs	r3, r0, #0
 8008822:	db01      	blt.n	8008828 <cmd_net_udp_bind+0x118>
	return 0;
 8008824:	2500      	movs	r5, #0
 8008826:	e783      	b.n	8008730 <cmd_net_udp_bind+0x20>
		PR_WARNING("Receiving from UDP port failed (%d)\n", ret);
 8008828:	4a0c      	ldr	r2, [pc, #48]	; (800885c <cmd_net_udp_bind+0x14c>)
 800882a:	e7de      	b.n	80087ea <cmd_net_udp_bind+0xda>
 800882c:	08017edb 	.word	0x08017edb
 8008830:	08017f0c 	.word	0x08017f0c
 8008834:	200023e8 	.word	0x200023e8
 8008838:	08017f21 	.word	0x08017f21
 800883c:	08017f41 	.word	0x08017f41
 8008840:	200023ec 	.word	0x200023ec
 8008844:	08017f8b 	.word	0x08017f8b
 8008848:	08017ff5 	.word	0x08017ff5
 800884c:	08017f5e 	.word	0x08017f5e
 8008850:	08017f63 	.word	0x08017f63
 8008854:	08017faf 	.word	0x08017faf
 8008858:	08008249 	.word	0x08008249
 800885c:	08017fd0 	.word	0x08017fd0

08008860 <cmd_net_udp_send>:
{
 8008860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	b08a      	sub	sp, #40	; 0x28
 8008866:	4615      	mov	r5, r2
	if (argc < 4) {
 8008868:	2903      	cmp	r1, #3
	char *endptr = NULL;
 800886a:	f04f 0200 	mov.w	r2, #0
{
 800886e:	4604      	mov	r4, r0
	char *endptr = NULL;
 8008870:	9207      	str	r2, [sp, #28]
	if (argc < 4) {
 8008872:	d809      	bhi.n	8008888 <cmd_net_udp_send+0x28>
		PR_WARNING("Not enough arguments given for udp send command\n");
 8008874:	4a4f      	ldr	r2, [pc, #316]	; (80089b4 <cmd_net_udp_send+0x154>)
 8008876:	2103      	movs	r1, #3
		PR_WARNING("Invalid port number\n");
 8008878:	f006 fd14 	bl	800f2a4 <shell_fprintf>
		return -EINVAL;
 800887c:	f06f 0515 	mvn.w	r5, #21
}
 8008880:	4628      	mov	r0, r5
 8008882:	b00a      	add	sp, #40	; 0x28
 8008884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	port = strtol(argv[2], &endptr, 0);
 8008888:	68a8      	ldr	r0, [r5, #8]
	host = argv[1];
 800888a:	f8d5 a004 	ldr.w	sl, [r5, #4]
	port = strtol(argv[2], &endptr, 0);
 800888e:	a907      	add	r1, sp, #28
 8008890:	f005 f820 	bl	800d8d4 <strtol>
	if (endptr == argv[2]) {
 8008894:	e9d5 2902 	ldrd	r2, r9, [r5, #8]
 8008898:	9b07      	ldr	r3, [sp, #28]
 800889a:	429a      	cmp	r2, r3
	port = strtol(argv[2], &endptr, 0);
 800889c:	4607      	mov	r7, r0
	if (endptr == argv[2]) {
 800889e:	d103      	bne.n	80088a8 <cmd_net_udp_send+0x48>
		PR_WARNING("Invalid port number\n");
 80088a0:	4a45      	ldr	r2, [pc, #276]	; (80089b8 <cmd_net_udp_send+0x158>)
 80088a2:	2103      	movs	r1, #3
 80088a4:	4620      	mov	r0, r4
 80088a6:	e7e7      	b.n	8008878 <cmd_net_udp_send+0x18>
	if (udp_ctx && net_context_is_used(udp_ctx)) {
 80088a8:	4e44      	ldr	r6, [pc, #272]	; (80089bc <cmd_net_udp_send+0x15c>)
 80088aa:	6833      	ldr	r3, [r6, #0]
 80088ac:	b15b      	cbz	r3, 80088c6 <cmd_net_udp_send+0x66>
	return context->flags & NET_CONTEXT_IN_USE;
 80088ae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80088b2:	07db      	lsls	r3, r3, #31
 80088b4:	d507      	bpl.n	80088c6 <cmd_net_udp_send+0x66>
		PR_WARNING("Network context already in use\n");
 80088b6:	4a42      	ldr	r2, [pc, #264]	; (80089c0 <cmd_net_udp_send+0x160>)
 80088b8:	2103      	movs	r1, #3
 80088ba:	4620      	mov	r0, r4
 80088bc:	f006 fcf2 	bl	800f2a4 <shell_fprintf>
		return -EALREADY;
 80088c0:	f06f 0577 	mvn.w	r5, #119	; 0x77
 80088c4:	e7dc      	b.n	8008880 <cmd_net_udp_send+0x20>
	memset(&addr, 0, sizeof(addr));
 80088c6:	f04f 0800 	mov.w	r8, #0
	ret = net_ipaddr_parse(host, strlen(host), &addr);
 80088ca:	4650      	mov	r0, sl
	memset(&addr, 0, sizeof(addr));
 80088cc:	e9cd 8808 	strd	r8, r8, [sp, #32]
	ret = net_ipaddr_parse(host, strlen(host), &addr);
 80088d0:	f7f7 fe25 	bl	800051e <strlen>
 80088d4:	aa08      	add	r2, sp, #32
 80088d6:	4601      	mov	r1, r0
 80088d8:	4650      	mov	r0, sl
 80088da:	f008 fb19 	bl	8010f10 <net_ipaddr_parse>
	ret = net_context_get(addr.sa_family, SOCK_DGRAM, IPPROTO_UDP,
 80088de:	4b37      	ldr	r3, [pc, #220]	; (80089bc <cmd_net_udp_send+0x15c>)
 80088e0:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 80088e4:	2211      	movs	r2, #17
 80088e6:	2102      	movs	r1, #2
 80088e8:	f7fc fbac 	bl	8005044 <net_context_get>
	if (ret < 0) {
 80088ec:	1e05      	subs	r5, r0, #0
 80088ee:	da06      	bge.n	80088fe <cmd_net_udp_send+0x9e>
		PR_WARNING("Cannot get UDP context (%d)\n", ret);
 80088f0:	4a34      	ldr	r2, [pc, #208]	; (80089c4 <cmd_net_udp_send+0x164>)
 80088f2:	462b      	mov	r3, r5
 80088f4:	2103      	movs	r1, #3
 80088f6:	4620      	mov	r0, r4
 80088f8:	f006 fcd4 	bl	800f2a4 <shell_fprintf>
		return ret;
 80088fc:	e7c0      	b.n	8008880 <cmd_net_udp_send+0x20>
	udp_shell = shell;
 80088fe:	4b32      	ldr	r3, [pc, #200]	; (80089c8 <cmd_net_udp_send+0x168>)
 8008900:	601c      	str	r4, [r3, #0]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && addr.sa_family == AF_INET) {
 8008902:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d10c      	bne.n	8008924 <cmd_net_udp_send+0xc4>
		net_sin(&addr)->sin_port = htons(port);
 800890a:	ba7f      	rev16	r7, r7
		iface = net_if_ipv4_select_src_iface(
 800890c:	a809      	add	r0, sp, #36	; 0x24
		net_sin(&addr)->sin_port = htons(port);
 800890e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
		iface = net_if_ipv4_select_src_iface(
 8008912:	f7fb ff69 	bl	80047e8 <net_if_ipv4_select_src_iface>
	if (!iface) {
 8008916:	b9b8      	cbnz	r0, 8008948 <cmd_net_udp_send+0xe8>
		PR_WARNING("No interface to send to given host\n");
 8008918:	4a2c      	ldr	r2, [pc, #176]	; (80089cc <cmd_net_udp_send+0x16c>)
		PR_WARNING("UDP packet sending failed\n");
 800891a:	2103      	movs	r1, #3
 800891c:	4620      	mov	r0, r4
 800891e:	f006 fcc1 	bl	800f2a4 <shell_fprintf>
 8008922:	e005      	b.n	8008930 <cmd_net_udp_send+0xd0>
		PR_WARNING("IPv6 and IPv4 are disabled, cannot %s.\n", "send");
 8008924:	4b2a      	ldr	r3, [pc, #168]	; (80089d0 <cmd_net_udp_send+0x170>)
 8008926:	4a2b      	ldr	r2, [pc, #172]	; (80089d4 <cmd_net_udp_send+0x174>)
		PR_WARNING("Setting rcv callback failed (%d)\n", ret);
 8008928:	2103      	movs	r1, #3
 800892a:	4620      	mov	r0, r4
 800892c:	f006 fcba 	bl	800f2a4 <shell_fprintf>
	ret = net_context_put(udp_ctx);
 8008930:	6830      	ldr	r0, [r6, #0]
 8008932:	f7fc fc71 	bl	8005218 <net_context_put>
	if (ret < 0) {
 8008936:	1e03      	subs	r3, r0, #0
 8008938:	da04      	bge.n	8008944 <cmd_net_udp_send+0xe4>
		PR_WARNING("Cannot put UDP context (%d)\n", ret);
 800893a:	4a27      	ldr	r2, [pc, #156]	; (80089d8 <cmd_net_udp_send+0x178>)
 800893c:	2103      	movs	r1, #3
 800893e:	4620      	mov	r0, r4
 8008940:	f006 fcb0 	bl	800f2a4 <shell_fprintf>
	return 0;
 8008944:	2500      	movs	r5, #0
 8008946:	e79b      	b.n	8008880 <cmd_net_udp_send+0x20>
	net_context_set_iface(udp_ctx, iface);
 8008948:	6835      	ldr	r5, [r6, #0]
	context->iface = net_if_get_by_iface(iface);
 800894a:	f7fc f8d3 	bl	8004af4 <net_if_get_by_iface>
	ret = net_context_recv(udp_ctx, udp_rcvd, K_NO_WAIT, NULL);
 800894e:	2300      	movs	r3, #0
 8008950:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
 8008954:	4921      	ldr	r1, [pc, #132]	; (80089dc <cmd_net_udp_send+0x17c>)
 8008956:	6830      	ldr	r0, [r6, #0]
 8008958:	f8cd 8000 	str.w	r8, [sp]
 800895c:	2200      	movs	r2, #0
 800895e:	f7fc fc99 	bl	8005294 <net_context_recv>
	if (ret < 0) {
 8008962:	1e03      	subs	r3, r0, #0
 8008964:	da01      	bge.n	800896a <cmd_net_udp_send+0x10a>
		PR_WARNING("Setting rcv callback failed (%d)\n", ret);
 8008966:	4a1e      	ldr	r2, [pc, #120]	; (80089e0 <cmd_net_udp_send+0x180>)
 8008968:	e7de      	b.n	8008928 <cmd_net_udp_send+0xc8>
	ret = net_context_sendto(udp_ctx, payload, strlen(payload), &addr,
 800896a:	4648      	mov	r0, r9
 800896c:	6835      	ldr	r5, [r6, #0]
 800896e:	f7f7 fdd6 	bl	800051e <strlen>
 8008972:	4b1c      	ldr	r3, [pc, #112]	; (80089e4 <cmd_net_udp_send+0x184>)
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	4602      	mov	r2, r0
 8008978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800897c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008980:	2308      	movs	r3, #8
 8008982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	f8cd 8010 	str.w	r8, [sp, #16]
 800898c:	ab08      	add	r3, sp, #32
 800898e:	4649      	mov	r1, r9
 8008990:	4628      	mov	r0, r5
 8008992:	f008 fed8 	bl	8011746 <net_context_sendto>
	if (ret < 0) {
 8008996:	1e03      	subs	r3, r0, #0
 8008998:	da01      	bge.n	800899e <cmd_net_udp_send+0x13e>
		PR_WARNING("Sending packet failed (%d)\n", ret);
 800899a:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <cmd_net_udp_send+0x188>)
 800899c:	e7c4      	b.n	8008928 <cmd_net_udp_send+0xc8>
 800899e:	4813      	ldr	r0, [pc, #76]	; (80089ec <cmd_net_udp_send+0x18c>)
 80089a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80089a4:	2300      	movs	r3, #0
 80089a6:	f003 fe21 	bl	800c5ec <z_impl_k_sem_take>
	if (ret == -EAGAIN) {
 80089aa:	300b      	adds	r0, #11
 80089ac:	d1c0      	bne.n	8008930 <cmd_net_udp_send+0xd0>
		PR_WARNING("UDP packet sending failed\n");
 80089ae:	4a10      	ldr	r2, [pc, #64]	; (80089f0 <cmd_net_udp_send+0x190>)
 80089b0:	e7b3      	b.n	800891a <cmd_net_udp_send+0xba>
 80089b2:	bf00      	nop
 80089b4:	08018012 	.word	0x08018012
 80089b8:	08017f0c 	.word	0x08017f0c
 80089bc:	200023e8 	.word	0x200023e8
 80089c0:	08017f21 	.word	0x08017f21
 80089c4:	08017f41 	.word	0x08017f41
 80089c8:	200023ec 	.word	0x200023ec
 80089cc:	08017f8b 	.word	0x08017f8b
 80089d0:	08018043 	.word	0x08018043
 80089d4:	08017f63 	.word	0x08017f63
 80089d8:	08017ff5 	.word	0x08017ff5
 80089dc:	08008249 	.word	0x08008249
 80089e0:	08018048 	.word	0x08018048
 80089e4:	0800849d 	.word	0x0800849d
 80089e8:	0801806a 	.word	0x0801806a
 80089ec:	200004e8 	.word	0x200004e8
 80089f0:	08018086 	.word	0x08018086

080089f4 <cmd_net_arp_flush>:
 80089f4:	b507      	push	{r0, r1, r2, lr}
 80089f6:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <cmd_net_arp_flush+0x18>)
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	4a05      	ldr	r2, [pc, #20]	; (8008a10 <cmd_net_arp_flush+0x1c>)
 80089fc:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <cmd_net_arp_flush+0x20>)
 80089fe:	2102      	movs	r1, #2
 8008a00:	f006 fc50 	bl	800f2a4 <shell_fprintf>
 8008a04:	2000      	movs	r0, #0
 8008a06:	b003      	add	sp, #12
 8008a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a0c:	0801771c 	.word	0x0801771c
 8008a10:	0801742c 	.word	0x0801742c
 8008a14:	080176ce 	.word	0x080176ce

08008a18 <cmd_net_pkt>:
{
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (argv[1]) {
 8008a1c:	6855      	ldr	r5, [r2, #4]
{
 8008a1e:	b087      	sub	sp, #28
 8008a20:	4604      	mov	r4, r0
 8008a22:	4616      	mov	r6, r2
	if (argv[1]) {
 8008a24:	2d00      	cmp	r5, #0
 8008a26:	f000 8091 	beq.w	8008b4c <cmd_net_pkt+0x134>
	if (ptr_str[0] == '0' && ptr_str[1] == 'x') {
 8008a2a:	782b      	ldrb	r3, [r5, #0]
 8008a2c:	2b30      	cmp	r3, #48	; 0x30
 8008a2e:	d103      	bne.n	8008a38 <cmd_net_pkt+0x20>
 8008a30:	786b      	ldrb	r3, [r5, #1]
 8008a32:	2b78      	cmp	r3, #120	; 0x78
		ptr_str += 2;
 8008a34:	bf08      	it	eq
 8008a36:	3502      	addeq	r5, #2
	len = hex2bin(ptr_str, strlen(ptr_str), buf, sizeof(buf));
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f7f7 fd70 	bl	800051e <strlen>
 8008a3e:	af05      	add	r7, sp, #20
 8008a40:	4601      	mov	r1, r0
 8008a42:	2304      	movs	r3, #4
 8008a44:	463a      	mov	r2, r7
 8008a46:	4628      	mov	r0, r5
 8008a48:	f005 fe3c 	bl	800e6c4 <hex2bin>
	if (!len) {
 8008a4c:	b128      	cbz	r0, 8008a5a <cmd_net_pkt+0x42>
	for (i = len - 1; i >= 0; i--) {
 8008a4e:	2300      	movs	r3, #0
 8008a50:	3801      	subs	r0, #1
	intptr_t ptr = 0;
 8008a52:	461d      	mov	r5, r3
	for (i = len - 1; i >= 0; i--) {
 8008a54:	2800      	cmp	r0, #0
 8008a56:	da09      	bge.n	8008a6c <cmd_net_pkt+0x54>
		if (!pkt) {
 8008a58:	b975      	cbnz	r5, 8008a78 <cmd_net_pkt+0x60>
			PR_ERROR("Invalid ptr value (%s). "
 8008a5a:	6873      	ldr	r3, [r6, #4]
 8008a5c:	4a3e      	ldr	r2, [pc, #248]	; (8008b58 <cmd_net_pkt+0x140>)
 8008a5e:	2101      	movs	r1, #1
 8008a60:	4620      	mov	r0, r4
 8008a62:	f006 fc1f 	bl	800f2a4 <shell_fprintf>
		return -ENOEXEC;
 8008a66:	f06f 0007 	mvn.w	r0, #7
 8008a6a:	e028      	b.n	8008abe <cmd_net_pkt+0xa6>
		ptr |= buf[i] << 8 * (len - 1 - i);
 8008a6c:	5c3a      	ldrb	r2, [r7, r0]
 8008a6e:	409a      	lsls	r2, r3
 8008a70:	4315      	orrs	r5, r2
	for (i = len - 1; i >= 0; i--) {
 8008a72:	3801      	subs	r0, #1
 8008a74:	3308      	adds	r3, #8
 8008a76:	e7ed      	b.n	8008a54 <cmd_net_pkt+0x3c>
	PR("net_pkt %p buffer chain:\n", pkt);
 8008a78:	4a38      	ldr	r2, [pc, #224]	; (8008b5c <cmd_net_pkt+0x144>)
	struct net_buf *buf = pkt->buffer;
 8008a7a:	68ae      	ldr	r6, [r5, #8]
	PR("net_pkt %p buffer chain:\n", pkt);
 8008a7c:	462b      	mov	r3, r5
 8008a7e:	2108      	movs	r1, #8
 8008a80:	4620      	mov	r0, r4
 8008a82:	f006 fc0f 	bl	800f2a4 <shell_fprintf>
 8008a86:	f3bf 8f5b 	dmb	ish
 8008a8a:	69eb      	ldr	r3, [r5, #28]
	PR("%p[%ld]", pkt, atomic_get(&pkt->atomic_ref));
 8008a8c:	4a34      	ldr	r2, [pc, #208]	; (8008b60 <cmd_net_pkt+0x148>)
 8008a8e:	f3bf 8f5b 	dmb	ish
 8008a92:	2108      	movs	r1, #8
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	4620      	mov	r0, r4
 8008a98:	462b      	mov	r3, r5
 8008a9a:	f105 081c 	add.w	r8, r5, #28
 8008a9e:	f006 fc01 	bl	800f2a4 <shell_fprintf>
	if (buf) {
 8008aa2:	b97e      	cbnz	r6, 8008ac4 <cmd_net_pkt+0xac>
	PR("\n");
 8008aa4:	4a2f      	ldr	r2, [pc, #188]	; (8008b64 <cmd_net_pkt+0x14c>)
 8008aa6:	2108      	movs	r1, #8
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f006 fbfb 	bl	800f2a4 <shell_fprintf>
		PR("\n");
 8008aae:	4a2d      	ldr	r2, [pc, #180]	; (8008b64 <cmd_net_pkt+0x14c>)
 8008ab0:	2108      	movs	r1, #8
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f006 fbf6 	bl	800f2a4 <shell_fprintf>
	struct net_buf *buf = pkt->buffer;
 8008ab8:	68ae      	ldr	r6, [r5, #8]
	if (!buf || buf->ref == 0) {
 8008aba:	bb5e      	cbnz	r6, 8008b14 <cmd_net_pkt+0xfc>
	return 0;
 8008abc:	2000      	movs	r0, #0
}
 8008abe:	b007      	add	sp, #28
 8008ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		PR("->");
 8008ac4:	4a28      	ldr	r2, [pc, #160]	; (8008b68 <cmd_net_pkt+0x150>)
		PR("%p[%ld/%u (%u/%u)]", buf, atomic_get(&pkt->atomic_ref),
 8008ac6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008b6c <cmd_net_pkt+0x154>
			PR("->");
 8008aca:	4f27      	ldr	r7, [pc, #156]	; (8008b68 <cmd_net_pkt+0x150>)
		PR("->");
 8008acc:	2108      	movs	r1, #8
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f006 fbe8 	bl	800f2a4 <shell_fprintf>
 8008ad4:	f3bf 8f5b 	dmb	ish
	return net_buf_simple_max_len(&buf->b);
 8008ad8:	f106 0008 	add.w	r0, r6, #8
 8008adc:	f8d8 a000 	ldr.w	sl, [r8]
 8008ae0:	f3bf 8f5b 	dmb	ish
		PR("%p[%ld/%u (%u/%u)]", buf, atomic_get(&pkt->atomic_ref),
 8008ae4:	f8b6 b00c 	ldrh.w	fp, [r6, #12]
 8008ae8:	f007 fd95 	bl	8010616 <net_buf_simple_max_len>
 8008aec:	89f3      	ldrh	r3, [r6, #14]
 8008aee:	464a      	mov	r2, r9
 8008af0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008af4:	e9cd ab00 	strd	sl, fp, [sp]
 8008af8:	4633      	mov	r3, r6
 8008afa:	2108      	movs	r1, #8
 8008afc:	4620      	mov	r0, r4
 8008afe:	f006 fbd1 	bl	800f2a4 <shell_fprintf>
		buf = buf->frags;
 8008b02:	6836      	ldr	r6, [r6, #0]
		if (buf) {
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	d0cd      	beq.n	8008aa4 <cmd_net_pkt+0x8c>
			PR("->");
 8008b08:	463a      	mov	r2, r7
 8008b0a:	2108      	movs	r1, #8
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f006 fbc9 	bl	800f2a4 <shell_fprintf>
	while (buf) {
 8008b12:	e7df      	b.n	8008ad4 <cmd_net_pkt+0xbc>
	if (!buf || buf->ref == 0) {
 8008b14:	7933      	ldrb	r3, [r6, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0d0      	beq.n	8008abc <cmd_net_pkt+0xa4>
	PR("net_pkt %p buffer chain hexdump:\n", pkt);
 8008b1a:	462b      	mov	r3, r5
 8008b1c:	4a14      	ldr	r2, [pc, #80]	; (8008b70 <cmd_net_pkt+0x158>)
		PR("net_buf[%d] %p\n", i++, buf);
 8008b1e:	4f15      	ldr	r7, [pc, #84]	; (8008b74 <cmd_net_pkt+0x15c>)
	PR("net_pkt %p buffer chain hexdump:\n", pkt);
 8008b20:	2108      	movs	r1, #8
 8008b22:	4620      	mov	r0, r4
 8008b24:	f006 fbbe 	bl	800f2a4 <shell_fprintf>
	int i = 0;
 8008b28:	2500      	movs	r5, #0
		PR("net_buf[%d] %p\n", i++, buf);
 8008b2a:	462b      	mov	r3, r5
 8008b2c:	9600      	str	r6, [sp, #0]
 8008b2e:	463a      	mov	r2, r7
 8008b30:	2108      	movs	r1, #8
 8008b32:	4620      	mov	r0, r4
 8008b34:	f006 fbb6 	bl	800f2a4 <shell_fprintf>
		shell_hexdump(shell, buf->data, buf->len);
 8008b38:	89b2      	ldrh	r2, [r6, #12]
 8008b3a:	68b1      	ldr	r1, [r6, #8]
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f006 fbbe 	bl	800f2be <shell_hexdump>
		buf = buf->frags;
 8008b42:	6836      	ldr	r6, [r6, #0]
		PR("net_buf[%d] %p\n", i++, buf);
 8008b44:	3501      	adds	r5, #1
	while (buf) {
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	d1ef      	bne.n	8008b2a <cmd_net_pkt+0x112>
 8008b4a:	e7b7      	b.n	8008abc <cmd_net_pkt+0xa4>
		PR_INFO("Pointer value must be given.\n");
 8008b4c:	4a0a      	ldr	r2, [pc, #40]	; (8008b78 <cmd_net_pkt+0x160>)
 8008b4e:	2102      	movs	r1, #2
 8008b50:	f006 fba8 	bl	800f2a4 <shell_fprintf>
 8008b54:	e787      	b.n	8008a66 <cmd_net_pkt+0x4e>
 8008b56:	bf00      	nop
 8008b58:	080180a1 	.word	0x080180a1
 8008b5c:	080180ce 	.word	0x080180ce
 8008b60:	080180e8 	.word	0x080180e8
 8008b64:	080164a1 	.word	0x080164a1
 8008b68:	080180f0 	.word	0x080180f0
 8008b6c:	080180f3 	.word	0x080180f3
 8008b70:	08018106 	.word	0x08018106
 8008b74:	08018128 	.word	0x08018128
 8008b78:	08018138 	.word	0x08018138

08008b7c <iface_up_handler>:
#endif /* CONFIG_NET_IPV6 */

#if defined(CONFIG_NET_NATIVE)
static void iface_up_handler(struct net_mgmt_event_callback *cb,
			     uint32_t mgmt_event, struct net_if *iface)
{
 8008b7c:	b508      	push	{r3, lr}
	if (mgmt_event == NET_EVENT_IF_UP) {
 8008b7e:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <iface_up_handler+0x1c>)
 8008b80:	4299      	cmp	r1, r3
 8008b82:	d107      	bne.n	8008b94 <iface_up_handler+0x18>
	z_impl_k_sem_reset(sem);
 8008b84:	4805      	ldr	r0, [pc, #20]	; (8008b9c <iface_up_handler+0x20>)
 8008b86:	f003 fd59 	bl	800c63c <z_impl_k_sem_reset>
	z_impl_k_sem_give(sem);
 8008b8a:	4805      	ldr	r0, [pc, #20]	; (8008ba0 <iface_up_handler+0x24>)
			 net_if_get_by_iface(iface), iface);

		k_sem_reset(&counter);
		k_sem_give(&waiter);
	}
}
 8008b8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b90:	f003 bd06 	b.w	800c5a0 <z_impl_k_sem_give>
 8008b94:	bd08      	pop	{r3, pc}
 8008b96:	bf00      	nop
 8008b98:	d0010002 	.word	0xd0010002
 8008b9c:	200004a0 	.word	0x200004a0
 8008ba0:	20000500 	.word	0x20000500

08008ba4 <net_config_init_by_iface>:
}
#endif

int net_config_init_by_iface(struct net_if *iface, const char *app_info,
			     uint32_t flags, int32_t timeout)
{
 8008ba4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#define LOOP_DIVIDER 10
	int loop = timeout / LOOP_DIVIDER;
 8008ba8:	250a      	movs	r5, #10
{
 8008baa:	4617      	mov	r7, r2
	int loop = timeout / LOOP_DIVIDER;
 8008bac:	fb93 f5f5 	sdiv	r5, r3, r5
{
 8008bb0:	461e      	mov	r6, r3
 8008bb2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31

	if (app_info) {
		NET_INFO("%s", log_strdup(app_info));
	}

	if (!iface) {
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d176      	bne.n	8008ca8 <net_config_init_by_iface+0x104>
		iface = net_if_get_default();
 8008bba:	f7fb fdbb 	bl	8004734 <net_if_get_default>
	}

	if (timeout < 0) {
 8008bbe:	2e00      	cmp	r6, #0
 8008bc0:	db2e      	blt.n	8008c20 <net_config_init_by_iface+0x7c>
		count = -1;
	} else if (timeout == 0) {
 8008bc2:	d030      	beq.n	8008c26 <net_config_init_by_iface+0x82>
		count = 0;
	} else {
		count = LOOP_DIVIDER;
 8008bc4:	240a      	movs	r4, #10
	if (iface == NULL) {
 8008bc6:	b398      	cbz	r0, 8008c30 <net_config_init_by_iface+0x8c>
 8008bc8:	6803      	ldr	r3, [r0, #0]
 8008bca:	f3bf 8f5b 	dmb	ish
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
 8008bd4:	07db      	lsls	r3, r3, #31
 8008bd6:	d52b      	bpl.n	8008c30 <net_config_init_by_iface+0x8c>
	z_impl_k_sem_reset(sem);
 8008bd8:	4836      	ldr	r0, [pc, #216]	; (8008cb4 <net_config_init_by_iface+0x110>)
 8008bda:	f003 fd2f 	bl	800c63c <z_impl_k_sem_reset>
	z_impl_k_sem_give(sem);
 8008bde:	4836      	ldr	r0, [pc, #216]	; (8008cb8 <net_config_init_by_iface+0x114>)
 8008be0:	f003 fcde 	bl	800c5a0 <z_impl_k_sem_give>
 8008be4:	230a      	movs	r3, #10
 8008be6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8008cbc <net_config_init_by_iface+0x118>
	return z_impl_k_sem_take(sem, timeout);
 8008bea:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8008cb8 <net_config_init_by_iface+0x114>
 8008bee:	fb85 5a03 	smull	r5, sl, r5, r3
 8008bf2:	f3bf 8f5b 	dmb	ish
 8008bf6:	f8d9 3000 	ldr.w	r3, [r9]
 8008bfa:	f3bf 8f5b 	dmb	ish
	setup_ipv6(iface, flags);

	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (!services_are_ready(flags) && count-- > 0) {
 8008bfe:	ea37 0303 	bics.w	r3, r7, r3
 8008c02:	d004      	beq.n	8008c0e <net_config_init_by_iface+0x6a>
 8008c04:	2c00      	cmp	r4, #0
 8008c06:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 8008c0a:	dc44      	bgt.n	8008c96 <net_config_init_by_iface+0xf2>
 8008c0c:	4644      	mov	r4, r8
		k_sem_take(&waiter, K_MSEC(loop));
	}

	if (count == -1 && timeout > 0) {
 8008c0e:	3401      	adds	r4, #1
 8008c10:	d148      	bne.n	8008ca4 <net_config_init_by_iface+0x100>
		NET_ERR("Timeout while waiting network %s", "setup");
		return -ETIMEDOUT;
 8008c12:	2e00      	cmp	r6, #0
 8008c14:	bfd4      	ite	le
 8008c16:	2000      	movle	r0, #0
 8008c18:	f06f 0073 	mvngt.w	r0, #115	; 0x73
	}

	return 0;
}
 8008c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		count = -1;
 8008c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c24:	e7cf      	b.n	8008bc6 <net_config_init_by_iface+0x22>
		count = 0;
 8008c26:	4634      	mov	r4, r6
 8008c28:	e7cd      	b.n	8008bc6 <net_config_init_by_iface+0x22>
		count = -1;
 8008c2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c2e:	e7cb      	b.n	8008bc8 <net_config_init_by_iface+0x24>
	cb->handler = handler;
 8008c30:	4823      	ldr	r0, [pc, #140]	; (8008cc0 <net_config_init_by_iface+0x11c>)
 8008c32:	4b24      	ldr	r3, [pc, #144]	; (8008cc4 <net_config_init_by_iface+0x120>)
 8008c34:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 8008c36:	4b24      	ldr	r3, [pc, #144]	; (8008cc8 <net_config_init_by_iface+0x124>)
 8008c38:	6103      	str	r3, [r0, #16]
	net_mgmt_add_event_callback(&mgmt_iface_cb);
 8008c3a:	f7fc fe65 	bl	8005908 <net_mgmt_add_event_callback>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8008c3e:	2101      	movs	r1, #1
 8008c40:	481c      	ldr	r0, [pc, #112]	; (8008cb4 <net_config_init_by_iface+0x110>)
	return sem->count;
 8008c42:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008cb4 <net_config_init_by_iface+0x110>
	return z_impl_k_sem_take(sem, timeout);
 8008c46:	f8df b070 	ldr.w	fp, [pc, #112]	; 8008cb8 <net_config_init_by_iface+0x114>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8008c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c4e:	f00b f9ff 	bl	8014050 <z_impl_k_sem_init>
 8008c52:	230a      	movs	r3, #10
 8008c54:	fb85 8a03 	smull	r8, sl, r5, r3
 8008c58:	4621      	mov	r1, r4
		while (count-- > 0) {
 8008c5a:	2900      	cmp	r1, #0
 8008c5c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008c60:	dd02      	ble.n	8008c68 <net_config_init_by_iface+0xc4>
			if (!k_sem_count_get(&counter)) {
 8008c62:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008c66:	b94b      	cbnz	r3, 8008c7c <net_config_init_by_iface+0xd8>
		net_mgmt_del_event_callback(&mgmt_iface_cb);
 8008c68:	4815      	ldr	r0, [pc, #84]	; (8008cc0 <net_config_init_by_iface+0x11c>)
 8008c6a:	f7fc fe6d 	bl	8005948 <net_mgmt_del_event_callback>
		if (timeout > 0 && count < 0) {
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	ddb8      	ble.n	8008be4 <net_config_init_by_iface+0x40>
 8008c72:	2c00      	cmp	r4, #0
 8008c74:	dab6      	bge.n	8008be4 <net_config_init_by_iface+0x40>
			return -ENETDOWN;
 8008c76:	f06f 0072 	mvn.w	r0, #114	; 0x72
 8008c7a:	e7cf      	b.n	8008c1c <net_config_init_by_iface+0x78>
	return z_impl_k_sem_take(sem, timeout);
 8008c7c:	4642      	mov	r2, r8
 8008c7e:	4653      	mov	r3, sl
 8008c80:	4658      	mov	r0, fp
 8008c82:	f003 fcb3 	bl	800c5ec <z_impl_k_sem_take>
			if (k_sem_take(&waiter, K_MSEC(loop))) {
 8008c86:	b908      	cbnz	r0, 8008c8c <net_config_init_by_iface+0xe8>
		while (count-- > 0) {
 8008c88:	4621      	mov	r1, r4
 8008c8a:	e7e6      	b.n	8008c5a <net_config_init_by_iface+0xb6>
				if (!k_sem_count_get(&counter)) {
 8008c8c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1f9      	bne.n	8008c88 <net_config_init_by_iface+0xe4>
 8008c94:	e7e8      	b.n	8008c68 <net_config_init_by_iface+0xc4>
 8008c96:	462a      	mov	r2, r5
 8008c98:	4653      	mov	r3, sl
 8008c9a:	4658      	mov	r0, fp
 8008c9c:	f003 fca6 	bl	800c5ec <z_impl_k_sem_take>
	while (!services_are_ready(flags) && count-- > 0) {
 8008ca0:	4644      	mov	r4, r8
 8008ca2:	e7a6      	b.n	8008bf2 <net_config_init_by_iface+0x4e>
	return 0;
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	e7b9      	b.n	8008c1c <net_config_init_by_iface+0x78>
	if (timeout < 0) {
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	dbbe      	blt.n	8008c2a <net_config_init_by_iface+0x86>
	} else if (timeout == 0) {
 8008cac:	d18a      	bne.n	8008bc4 <net_config_init_by_iface+0x20>
		count = 0;
 8008cae:	4634      	mov	r4, r6
 8008cb0:	e78a      	b.n	8008bc8 <net_config_init_by_iface+0x24>
 8008cb2:	bf00      	nop
 8008cb4:	200004a0 	.word	0x200004a0
 8008cb8:	20000500 	.word	0x20000500
 8008cbc:	20002404 	.word	0x20002404
 8008cc0:	200023f0 	.word	0x200023f0
 8008cc4:	08008b7d 	.word	0x08008b7d
 8008cc8:	d0010002 	.word	0xd0010002

08008ccc <net_config_init_app>:
		return;
	}
}

int net_config_init_app(const struct device *dev, const char *app_info)
{
 8008ccc:	b513      	push	{r0, r1, r4, lr}
	struct net_if *iface = NULL;
 8008cce:	2300      	movs	r3, #0
{
 8008cd0:	460c      	mov	r4, r1
	struct net_if *iface = NULL;
 8008cd2:	9301      	str	r3, [sp, #4]
	uint32_t flags = 0U;
	int ret;

	if (dev) {
 8008cd4:	b960      	cbnz	r0, 8008cf0 <net_config_init_app+0x24>
		flags |= NET_CONFIG_NEED_IPV4;
	}

	/* Only try to use a network interface that is auto started */
	if (iface == NULL) {
		net_if_foreach(iface_find_cb, &iface);
 8008cd6:	4809      	ldr	r0, [pc, #36]	; (8008cfc <net_config_init_app+0x30>)
 8008cd8:	a901      	add	r1, sp, #4
 8008cda:	f7fb ff1d 	bl	8004b18 <net_if_foreach>
	}

	/* Initialize the application automatically if needed */
	ret = net_config_init_by_iface(iface, app_info, flags,
 8008cde:	9801      	ldr	r0, [sp, #4]
 8008ce0:	f247 5330 	movw	r3, #30000	; 0x7530
 8008ce4:	2204      	movs	r2, #4
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	f7ff ff5c 	bl	8008ba4 <net_config_init_by_iface>
			log_backend_activate(backend, NULL);
		}
	}

	return ret;
}
 8008cec:	b002      	add	sp, #8
 8008cee:	bd10      	pop	{r4, pc}
		iface = net_if_lookup_by_dev(dev);
 8008cf0:	f7fb fd0e 	bl	8004710 <net_if_lookup_by_dev>
 8008cf4:	9001      	str	r0, [sp, #4]
	if (iface == NULL) {
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d1f1      	bne.n	8008cde <net_config_init_app+0x12>
 8008cfa:	e7ec      	b.n	8008cd6 <net_config_init_app+0xa>
 8008cfc:	08012b19 	.word	0x08012b19

08008d00 <init_app>:

#if defined(CONFIG_NET_CONFIG_AUTO_INIT)
static int init_app(const struct device *dev)
{
 8008d00:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	(void)net_config_init_app(NULL, "Initializing network");
 8008d02:	4903      	ldr	r1, [pc, #12]	; (8008d10 <init_app+0x10>)
 8008d04:	2000      	movs	r0, #0
 8008d06:	f7ff ffe1 	bl	8008ccc <net_config_init_app>

	return 0;
}
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	bd08      	pop	{r3, pc}
 8008d0e:	bf00      	nop
 8008d10:	08018d0c 	.word	0x08018d0c

08008d14 <rand_get>:
	return random_num;
}
#endif /* CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR */

static int rand_get(uint8_t *dst, size_t outlen, bool csrand)
{
 8008d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct device *dev = entropy_driver;
 8008d16:	4f12      	ldr	r7, [pc, #72]	; (8008d60 <rand_get+0x4c>)
{
 8008d18:	4606      	mov	r6, r0
	const struct device *dev = entropy_driver;
 8008d1a:	6838      	ldr	r0, [r7, #0]
{
 8008d1c:	460d      	mov	r5, r1
 8008d1e:	4614      	mov	r4, r2
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
 8008d20:	b918      	cbnz	r0, 8008d2a <rand_get+0x16>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8008d22:	4810      	ldr	r0, [pc, #64]	; (8008d64 <rand_get+0x50>)
 8008d24:	f003 f88e 	bl	800be44 <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
 8008d28:	6038      	str	r0, [r7, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
 8008d2a:	6883      	ldr	r3, [r0, #8]
 8008d2c:	b2aa      	uxth	r2, r5
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4631      	mov	r1, r6
 8008d32:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, dst, outlen);

	if (unlikely(ret < 0)) {
 8008d34:	2800      	cmp	r0, #0
 8008d36:	da02      	bge.n	8008d3e <rand_get+0x2a>
		/* Don't try to fill the buffer in case of
		 * cryptographically secure random numbers, just
		 * propagate the driver error.
		 */
		if (csrand) {
 8008d38:	b914      	cbnz	r4, 8008d40 <rand_get+0x2c>
		 */

		uint32_t len = 0;
		uint32_t blocksize = 4;

		while (len < outlen) {
 8008d3a:	42a5      	cmp	r5, r4
 8008d3c:	d802      	bhi.n	8008d44 <rand_get+0x30>
			(void)memcpy(&(dst[len]), &random_num, copylen);
			len += copylen;
		}
	}

	return 0;
 8008d3e:	2000      	movs	r0, #0
}
 8008d40:	b003      	add	sp, #12
 8008d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size_t copylen = outlen - len;
 8008d44:	1b2f      	subs	r7, r5, r4
			if (copylen > blocksize) {
 8008d46:	2f04      	cmp	r7, #4
 8008d48:	bf28      	it	cs
 8008d4a:	2704      	movcs	r7, #4
 8008d4c:	f002 fb0c 	bl	800b368 <sys_clock_cycle_get_32>
 8008d50:	463a      	mov	r2, r7
			random_num = k_cycle_get_32();
 8008d52:	9001      	str	r0, [sp, #4]
 8008d54:	a901      	add	r1, sp, #4
 8008d56:	1930      	adds	r0, r6, r4
 8008d58:	f00b fd28 	bl	80147ac <memcpy>
			len += copylen;
 8008d5c:	443c      	add	r4, r7
 8008d5e:	e7ec      	b.n	8008d3a <rand_get+0x26>
 8008d60:	20002408 	.word	0x20002408
 8008d64:	08018d21 	.word	0x08018d21

08008d68 <z_impl_sys_rand32_get>:
{
 8008d68:	b513      	push	{r0, r1, r4, lr}
	const struct device *dev = entropy_driver;
 8008d6a:	4c0a      	ldr	r4, [pc, #40]	; (8008d94 <z_impl_sys_rand32_get+0x2c>)
 8008d6c:	6820      	ldr	r0, [r4, #0]
	if (unlikely(!dev)) {
 8008d6e:	b918      	cbnz	r0, 8008d78 <z_impl_sys_rand32_get+0x10>
 8008d70:	4809      	ldr	r0, [pc, #36]	; (8008d98 <z_impl_sys_rand32_get+0x30>)
 8008d72:	f003 f867 	bl	800be44 <z_impl_device_get_binding>
		entropy_driver = dev;
 8008d76:	6020      	str	r0, [r4, #0]
 8008d78:	6883      	ldr	r3, [r0, #8]
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	eb0d 0102 	add.w	r1, sp, r2
 8008d82:	4798      	blx	r3
	if (unlikely(ret < 0)) {
 8008d84:	2800      	cmp	r0, #0
 8008d86:	da02      	bge.n	8008d8e <z_impl_sys_rand32_get+0x26>
 8008d88:	f002 faee 	bl	800b368 <sys_clock_cycle_get_32>
		random_num = k_cycle_get_32();
 8008d8c:	9001      	str	r0, [sp, #4]
}
 8008d8e:	9801      	ldr	r0, [sp, #4]
 8008d90:	b002      	add	sp, #8
 8008d92:	bd10      	pop	{r4, pc}
 8008d94:	20002408 	.word	0x20002408
 8008d98:	08018d21 	.word	0x08018d21

08008d9c <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8008d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8008da0:	4f0d      	ldr	r7, [pc, #52]	; (8008dd8 <__stm32_exti_isr.isra.0+0x3c>)
 8008da2:	4604      	mov	r4, r0
 8008da4:	460e      	mov	r6, r1
 8008da6:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8008da8:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8008dac:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8008db0:	42b4      	cmp	r4, r6
 8008db2:	db01      	blt.n	8008db8 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8008db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db8:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8008dba:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8008dbe:	ea33 0202 	bics.w	r2, r3, r2
 8008dc2:	d107      	bne.n	8008dd4 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8008dc4:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8008dc6:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8008dca:	b11b      	cbz	r3, 8008dd4 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8008dcc:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8008dd4:	3401      	adds	r4, #1
 8008dd6:	e7eb      	b.n	8008db0 <__stm32_exti_isr.isra.0+0x14>
 8008dd8:	40010400 	.word	0x40010400

08008ddc <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008ddc:	4a04      	ldr	r2, [pc, #16]	; (8008df0 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8008dde:	2301      	movs	r3, #1
 8008de0:	6811      	ldr	r1, [r2, #0]
 8008de2:	4083      	lsls	r3, r0
 8008de4:	430b      	orrs	r3, r1
 8008de6:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <stm32_exti_enable+0x18>)
 8008dea:	5618      	ldrsb	r0, [r3, r0]
 8008dec:	f7fa bcc4 	b.w	8003778 <arch_irq_enable>
 8008df0:	40010400 	.word	0x40010400
 8008df4:	08018d43 	.word	0x08018d43

08008df8 <stm32_exti_disable>:
	if (line < 32) {
 8008df8:	281f      	cmp	r0, #31
 8008dfa:	dc07      	bgt.n	8008e0c <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8008dfc:	4904      	ldr	r1, [pc, #16]	; (8008e10 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8008dfe:	2201      	movs	r2, #1
 8008e00:	680b      	ldr	r3, [r1, #0]
 8008e02:	fa02 f000 	lsl.w	r0, r2, r0
 8008e06:	ea23 0000 	bic.w	r0, r3, r0
 8008e0a:	6008      	str	r0, [r1, #0]
}
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	40010400 	.word	0x40010400

08008e14 <stm32_exti_trigger>:
	switch (trigger) {
 8008e14:	2903      	cmp	r1, #3
 8008e16:	d80f      	bhi.n	8008e38 <stm32_exti_trigger+0x24>
 8008e18:	e8df f001 	tbb	[pc, r1]
 8008e1c:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8008e20:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8008e22:	2201      	movs	r2, #1
 8008e24:	6899      	ldr	r1, [r3, #8]
 8008e26:	fa02 f000 	lsl.w	r0, r2, r0
 8008e2a:	ea21 0100 	bic.w	r1, r1, r0
 8008e2e:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008e36:	60d8      	str	r0, [r3, #12]
}
 8008e38:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8008e40:	4b0d      	ldr	r3, [pc, #52]	; (8008e78 <stm32_exti_trigger+0x64>)
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	4302      	orrs	r2, r0
 8008e46:	609a      	str	r2, [r3, #8]
 8008e48:	e7f2      	b.n	8008e30 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008e50:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <stm32_exti_trigger+0x64>)
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	4302      	orrs	r2, r0
 8008e56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8008e58:	689a      	ldr	r2, [r3, #8]
 8008e5a:	ea22 0000 	bic.w	r0, r2, r0
 8008e5e:	6098      	str	r0, [r3, #8]
}
 8008e60:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8008e62:	2301      	movs	r3, #1
 8008e64:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8008e68:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <stm32_exti_trigger+0x64>)
 8008e6a:	689a      	ldr	r2, [r3, #8]
 8008e6c:	4302      	orrs	r2, r0
 8008e6e:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	4310      	orrs	r0, r2
 8008e74:	e7df      	b.n	8008e36 <stm32_exti_trigger+0x22>
 8008e76:	bf00      	nop
 8008e78:	40010400 	.word	0x40010400

08008e7c <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8008e7c:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <stm32_exti_set_callback+0x20>)
{
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8008e82:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8008e86:	b928      	cbnz	r0, 8008e94 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8008e88:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8008e8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e90:	605a      	str	r2, [r3, #4]

	return 0;
}
 8008e92:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8008e94:	f06f 000f 	mvn.w	r0, #15
 8008e98:	e7fb      	b.n	8008e92 <stm32_exti_set_callback+0x16>
 8008e9a:	bf00      	nop
 8008e9c:	2000240c 	.word	0x2000240c

08008ea0 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8008ea0:	4b03      	ldr	r3, [pc, #12]	; (8008eb0 <stm32_exti_unset_callback+0x10>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8008ea8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008eac:	605a      	str	r2, [r3, #4]
}
 8008eae:	4770      	bx	lr
 8008eb0:	2000240c 	.word	0x2000240c

08008eb4 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8008eb4:	680b      	ldr	r3, [r1, #0]
{
 8008eb6:	b086      	sub	sp, #24
	switch (pclken->bus) {
 8008eb8:	2b06      	cmp	r3, #6
 8008eba:	d843      	bhi.n	8008f44 <stm32_clock_control_on+0x90>
 8008ebc:	e8df f003 	tbb	[pc, r3]
 8008ec0:	38241004 	.word	0x38241004
 8008ec4:	422e      	.short	0x422e
 8008ec6:	1a          	.byte	0x1a
 8008ec7:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008ec8:	4a20      	ldr	r2, [pc, #128]	; (8008f4c <stm32_clock_control_on+0x98>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8008eca:	684b      	ldr	r3, [r1, #4]
 8008ecc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8008ece:	4319      	orrs	r1, r3
 8008ed0:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008ed2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8008ed8:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8008eda:	2000      	movs	r0, #0
}
 8008edc:	b006      	add	sp, #24
 8008ede:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008ee0:	4a1a      	ldr	r2, [pc, #104]	; (8008f4c <stm32_clock_control_on+0x98>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8008ee2:	684b      	ldr	r3, [r1, #4]
 8008ee4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8008ee6:	4319      	orrs	r1, r3
 8008ee8:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008eea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008eec:	4013      	ands	r3, r2
 8008eee:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	e7f2      	b.n	8008eda <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008ef4:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <stm32_clock_control_on+0x98>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8008ef6:	684b      	ldr	r3, [r1, #4]
 8008ef8:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8008efa:	4319      	orrs	r1, r3
 8008efc:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008efe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008f00:	4013      	ands	r3, r2
 8008f02:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	e7e8      	b.n	8008eda <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008f08:	4a10      	ldr	r2, [pc, #64]	; (8008f4c <stm32_clock_control_on+0x98>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8008f0a:	684b      	ldr	r3, [r1, #4]
 8008f0c:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8008f0e:	4319      	orrs	r1, r3
 8008f10:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008f12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008f14:	4013      	ands	r3, r2
 8008f16:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	e7de      	b.n	8008eda <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8008f1c:	4a0b      	ldr	r2, [pc, #44]	; (8008f4c <stm32_clock_control_on+0x98>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8008f1e:	684b      	ldr	r3, [r1, #4]
 8008f20:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8008f22:	4319      	orrs	r1, r3
 8008f24:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8008f26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008f28:	4013      	ands	r3, r2
 8008f2a:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8008f2c:	9b04      	ldr	r3, [sp, #16]
 8008f2e:	e7d4      	b.n	8008eda <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008f30:	4a06      	ldr	r2, [pc, #24]	; (8008f4c <stm32_clock_control_on+0x98>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8008f32:	684b      	ldr	r3, [r1, #4]
 8008f34:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8008f36:	4319      	orrs	r1, r3
 8008f38:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008f3a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8008f40:	9b05      	ldr	r3, [sp, #20]
 8008f42:	e7ca      	b.n	8008eda <stm32_clock_control_on+0x26>
	switch (pclken->bus) {
 8008f44:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8008f48:	e7c8      	b.n	8008edc <stm32_clock_control_on+0x28>
 8008f4a:	bf00      	nop
 8008f4c:	40021000 	.word	0x40021000

08008f50 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8008f50:	680b      	ldr	r3, [r1, #0]
 8008f52:	2b06      	cmp	r3, #6
 8008f54:	d830      	bhi.n	8008fb8 <stm32_clock_control_off+0x68>
 8008f56:	e8df f003 	tbb	[pc, r3]
 8008f5a:	0c04      	.short	0x0c04
 8008f5c:	2f21281a 	.word	0x2f21281a
 8008f60:	13          	.byte	0x13
 8008f61:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8008f62:	4a17      	ldr	r2, [pc, #92]	; (8008fc0 <stm32_clock_control_off+0x70>)
 8008f64:	6849      	ldr	r1, [r1, #4]
 8008f66:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8008f68:	ea23 0301 	bic.w	r3, r3, r1
 8008f6c:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8008f6e:	2000      	movs	r0, #0
}
 8008f70:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8008f72:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <stm32_clock_control_off+0x70>)
 8008f74:	6849      	ldr	r1, [r1, #4]
 8008f76:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008f78:	ea23 0301 	bic.w	r3, r3, r1
 8008f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f7e:	e7f6      	b.n	8008f6e <stm32_clock_control_off+0x1e>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8008f80:	4a0f      	ldr	r2, [pc, #60]	; (8008fc0 <stm32_clock_control_off+0x70>)
 8008f82:	6849      	ldr	r1, [r1, #4]
 8008f84:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008f86:	ea23 0301 	bic.w	r3, r3, r1
 8008f8a:	6513      	str	r3, [r2, #80]	; 0x50
 8008f8c:	e7ef      	b.n	8008f6e <stm32_clock_control_off+0x1e>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8008f8e:	4a0c      	ldr	r2, [pc, #48]	; (8008fc0 <stm32_clock_control_off+0x70>)
 8008f90:	6849      	ldr	r1, [r1, #4]
 8008f92:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008f94:	ea23 0301 	bic.w	r3, r3, r1
 8008f98:	6593      	str	r3, [r2, #88]	; 0x58
 8008f9a:	e7e8      	b.n	8008f6e <stm32_clock_control_off+0x1e>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8008f9c:	4a08      	ldr	r2, [pc, #32]	; (8008fc0 <stm32_clock_control_off+0x70>)
 8008f9e:	6849      	ldr	r1, [r1, #4]
 8008fa0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8008fa2:	ea23 0301 	bic.w	r3, r3, r1
 8008fa6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8008fa8:	e7e1      	b.n	8008f6e <stm32_clock_control_off+0x1e>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8008faa:	4a05      	ldr	r2, [pc, #20]	; (8008fc0 <stm32_clock_control_off+0x70>)
 8008fac:	6849      	ldr	r1, [r1, #4]
 8008fae:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8008fb0:	ea23 0301 	bic.w	r3, r3, r1
 8008fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8008fb6:	e7da      	b.n	8008f6e <stm32_clock_control_off+0x1e>
	switch (pclken->bus) {
 8008fb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40021000 	.word	0x40021000

08008fc4 <stm32_clock_control_get_subsys_rate>:
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8008fc4:	680b      	ldr	r3, [r1, #0]
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	d901      	bls.n	8008fce <stm32_clock_control_get_subsys_rate+0xa>
 8008fca:	2b06      	cmp	r3, #6
 8008fcc:	d104      	bne.n	8008fd8 <stm32_clock_control_get_subsys_rate+0x14>
	uint32_t ahb_clock = SystemCoreClock;
 8008fce:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <stm32_clock_control_get_subsys_rate+0x1c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8008fd2:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8008fd4:	2000      	movs	r0, #0
		break;
 8008fd6:	4770      	bx	lr
	switch (pclken->bus) {
 8008fd8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	20000304 	.word	0x20000304

08008fe4 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 8008fe8:	2300      	movs	r3, #0
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008fea:	4c1d      	ldr	r4, [pc, #116]	; (8009060 <stm32_clock_control_init+0x7c>)
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8008fec:	9302      	str	r3, [sp, #8]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8008fee:	e9cd 3300 	strd	r3, r3, [sp]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8008ff2:	f000 f837 	bl	8009064 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8008ff6:	a803      	add	r0, sp, #12
 8008ff8:	f009 fde8 	bl	8012bcc <config_pll_init>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	055a      	lsls	r2, r3, #21
 8009000:	d406      	bmi.n	8009010 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009008:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	055b      	lsls	r3, r3, #21
 800900e:	d5fc      	bpl.n	800900a <stm32_clock_control_init+0x26>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8009010:	68a3      	ldr	r3, [r4, #8]
 8009012:	f023 0303 	bic.w	r3, r3, #3
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800901c:	68a3      	ldr	r3, [r4, #8]
 800901e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009022:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009024:	68a3      	ldr	r3, [r4, #8]
 8009026:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800902a:	2b04      	cmp	r3, #4
 800902c:	d1fa      	bne.n	8009024 <stm32_clock_control_init+0x40>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009034:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8009036:	68e3      	ldr	r3, [r4, #12]
 8009038:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800903c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009040:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8009042:	4669      	mov	r1, sp
 8009044:	a803      	add	r0, sp, #12
 8009046:	f002 fa93 	bl	800b570 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009050:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8009052:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8009054:	2000      	movs	r0, #0
 8009056:	f023 0301 	bic.w	r3, r3, #1
 800905a:	6023      	str	r3, [r4, #0]
 800905c:	b006      	add	sp, #24
 800905e:	bd10      	pop	{r4, pc}
 8009060:	40021000 	.word	0x40021000

08009064 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009064:	4b06      	ldr	r3, [pc, #24]	; (8009080 <config_enable_default_clocks+0x1c>)
 8009066:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009068:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800906c:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800906e:	6d9b      	ldr	r3, [r3, #88]	; 0x58

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8009070:	b082      	sub	sp, #8
 8009072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009076:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8009078:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 800907a:	b002      	add	sp, #8
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	40021000 	.word	0x40021000

08009084 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8009084:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8009086:	4b08      	ldr	r3, [pc, #32]	; (80090a8 <uart_console_init+0x24>)
 8009088:	4808      	ldr	r0, [pc, #32]	; (80090ac <uart_console_init+0x28>)
 800908a:	6018      	str	r0, [r3, #0]
 800908c:	f00a fe16 	bl	8013cbc <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 8009090:	b138      	cbz	r0, 80090a2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 8009092:	4807      	ldr	r0, [pc, #28]	; (80090b0 <uart_console_init+0x2c>)
 8009094:	f7fa fea8 	bl	8003de8 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8009098:	4805      	ldr	r0, [pc, #20]	; (80090b0 <uart_console_init+0x2c>)
 800909a:	f7f7 fca7 	bl	80009ec <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 800909e:	2000      	movs	r0, #0
}
 80090a0:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80090a2:	f06f 0012 	mvn.w	r0, #18
 80090a6:	e7fb      	b.n	80090a0 <uart_console_init+0x1c>
 80090a8:	2000248c 	.word	0x2000248c
 80090ac:	08014eb8 	.word	0x08014eb8
 80090b0:	080090b5 	.word	0x080090b5

080090b4 <console_out>:
	if ('\n' == c) {
 80090b4:	280a      	cmp	r0, #10
{
 80090b6:	b538      	push	{r3, r4, r5, lr}
 80090b8:	4d07      	ldr	r5, [pc, #28]	; (80090d8 <console_out+0x24>)
 80090ba:	4604      	mov	r4, r0
	if ('\n' == c) {
 80090bc:	d104      	bne.n	80090c8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 80090be:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
 80090c0:	6883      	ldr	r3, [r0, #8]
 80090c2:	210d      	movs	r1, #13
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 80090c8:	6828      	ldr	r0, [r5, #0]
 80090ca:	6883      	ldr	r3, [r0, #8]
 80090cc:	b2e1      	uxtb	r1, r4
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	4798      	blx	r3
}
 80090d2:	4620      	mov	r0, r4
 80090d4:	bd38      	pop	{r3, r4, r5, pc}
 80090d6:	bf00      	nop
 80090d8:	2000248c 	.word	0x2000248c

080090dc <clock_control_on.constprop.0>:
 *
 * @param dev Device structure whose driver controls the clock.
 * @param sys Opaque data representing the clock.
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	4605      	mov	r5, r0
 80090e0:	4c07      	ldr	r4, [pc, #28]	; (8009100 <clock_control_on.constprop.0+0x24>)
 80090e2:	4620      	mov	r0, r4
 80090e4:	f00a fdea 	bl	8013cbc <z_device_is_ready>
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 80090e8:	b130      	cbz	r0, 80090f8 <clock_control_on.constprop.0+0x1c>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	4629      	mov	r1, r5
 80090ee:	4620      	mov	r0, r4
 80090f0:	681b      	ldr	r3, [r3, #0]
}
 80090f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->on(dev, sys);
 80090f6:	4718      	bx	r3
}
 80090f8:	f06f 0012 	mvn.w	r0, #18
 80090fc:	bd70      	pop	{r4, r5, r6, pc}
 80090fe:	bf00      	nop
 8009100:	08014d98 	.word	0x08014d98

08009104 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8009104:	b508      	push	{r3, lr}
  * @rmtoll CR2          IOSV          LL_PWR_EnableVddIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8009106:	4a07      	ldr	r2, [pc, #28]	; (8009124 <gpio_stm32_init+0x20>)
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 8009108:	6903      	ldr	r3, [r0, #16]
 800910a:	6058      	str	r0, [r3, #4]
 800910c:	6853      	ldr	r3, [r2, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 800910e:	6840      	ldr	r0, [r0, #4]
 8009110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009114:	6053      	str	r3, [r2, #4]
		ret = clock_control_on(clk,
 8009116:	300c      	adds	r0, #12
 8009118:	f7ff ffe0 	bl	80090dc <clock_control_on.constprop.0>

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800911c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8009120:	bd08      	pop	{r3, pc}
 8009122:	bf00      	nop
 8009124:	40007000 	.word	0x40007000

08009128 <gpio_stm32_pin_interrupt_configure>:
{
 8009128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800912a:	460c      	mov	r4, r1
 800912c:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 800912e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8009132:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8009134:	6902      	ldr	r2, [r0, #16]
{
 8009136:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8009138:	d123      	bne.n	8009182 <gpio_stm32_pin_interrupt_configure+0x5a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800913a:	f004 0303 	and.w	r3, r4, #3
 800913e:	3304      	adds	r3, #4
 8009140:	009a      	lsls	r2, r3, #2
 8009142:	230f      	movs	r3, #15
 8009144:	4093      	lsls	r3, r2
 8009146:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 800914a:	b2da      	uxtb	r2, r3
 800914c:	4933      	ldr	r1, [pc, #204]	; (800921c <gpio_stm32_pin_interrupt_configure+0xf4>)
 800914e:	3202      	adds	r2, #2
 8009150:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009154:	0c19      	lsrs	r1, r3, #16
 8009156:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800915a:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800915e:	fab2 f282 	clz	r2, r2
 8009162:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	429a      	cmp	r2, r3
 8009168:	d109      	bne.n	800917e <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 800916a:	4620      	mov	r0, r4
 800916c:	f7ff fe44 	bl	8008df8 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8009170:	4620      	mov	r0, r4
 8009172:	f7ff fe95 	bl	8008ea0 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8009176:	2100      	movs	r1, #0
 8009178:	4620      	mov	r0, r4
 800917a:	f7ff fe4b 	bl	8008e14 <stm32_exti_trigger>
	int err = 0;
 800917e:	2500      	movs	r5, #0
 8009180:	e03e      	b.n	8009200 <gpio_stm32_pin_interrupt_configure+0xd8>
	if (mode == GPIO_INT_MODE_LEVEL) {
 8009182:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8009186:	d042      	beq.n	800920e <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8009188:	4925      	ldr	r1, [pc, #148]	; (8009220 <gpio_stm32_pin_interrupt_configure+0xf8>)
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff fe76 	bl	8008e7c <stm32_exti_set_callback>
 8009190:	4605      	mov	r5, r0
 8009192:	2800      	cmp	r0, #0
 8009194:	d13e      	bne.n	8009214 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8009196:	4a23      	ldr	r2, [pc, #140]	; (8009224 <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8009198:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 800919a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800919e:	466b      	mov	r3, sp
 80091a0:	e883 0003 	stmia.w	r3, {r0, r1}
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff ff99 	bl	80090dc <clock_control_on.constprop.0>
	if (ret != 0) {
 80091aa:	b9c0      	cbnz	r0, 80091de <gpio_stm32_pin_interrupt_configure+0xb6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80091ac:	f004 0103 	and.w	r1, r4, #3
 80091b0:	3104      	adds	r1, #4
 80091b2:	008b      	lsls	r3, r1, #2
 80091b4:	210f      	movs	r1, #15
 80091b6:	4099      	lsls	r1, r3
 80091b8:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80091bc:	b2ca      	uxtb	r2, r1
 80091be:	0092      	lsls	r2, r2, #2
 80091c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80091c4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80091c8:	0c0b      	lsrs	r3, r1, #16
 80091ca:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091cc:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80091d0:	fab3 f383 	clz	r3, r3
 80091d4:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 80091d8:	409f      	lsls	r7, r3
 80091da:	430f      	orrs	r7, r1
 80091dc:	6097      	str	r7, [r2, #8]
	switch (trig) {
 80091de:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80091e2:	d010      	beq.n	8009206 <gpio_stm32_pin_interrupt_configure+0xde>
 80091e4:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 80091e8:	d00f      	beq.n	800920a <gpio_stm32_pin_interrupt_configure+0xe2>
 80091ea:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 80091ee:	bf14      	ite	ne
 80091f0:	2100      	movne	r1, #0
 80091f2:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 80091f4:	4620      	mov	r0, r4
 80091f6:	f7ff fe0d 	bl	8008e14 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 80091fa:	4620      	mov	r0, r4
 80091fc:	f7ff fdee 	bl	8008ddc <stm32_exti_enable>
}
 8009200:	4628      	mov	r0, r5
 8009202:	b003      	add	sp, #12
 8009204:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8009206:	2101      	movs	r1, #1
 8009208:	e7f4      	b.n	80091f4 <gpio_stm32_pin_interrupt_configure+0xcc>
		edge = STM32_EXTI_TRIG_BOTH;
 800920a:	2103      	movs	r1, #3
 800920c:	e7f2      	b.n	80091f4 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -ENOTSUP;
 800920e:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8009212:	e7f5      	b.n	8009200 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -EBUSY;
 8009214:	f06f 050f 	mvn.w	r5, #15
	return err;
 8009218:	e7f2      	b.n	8009200 <gpio_stm32_pin_interrupt_configure+0xd8>
 800921a:	bf00      	nop
 800921c:	40010000 	.word	0x40010000
 8009220:	08012dfb 	.word	0x08012dfb
 8009224:	080152e8 	.word	0x080152e8

08009228 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8009228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 800922c:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 800922e:	6847      	ldr	r7, [r0, #4]
{
 8009230:	4604      	mov	r4, r0
 8009232:	4e31      	ldr	r6, [pc, #196]	; (80092f8 <spi_stm32_init+0xd0>)
 8009234:	4630      	mov	r0, r6
 8009236:	f00a fd41 	bl	8013cbc <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800923a:	2800      	cmp	r0, #0
 800923c:	d056      	beq.n	80092ec <spi_stm32_init+0xc4>
	return api->on(dev, sys);
 800923e:	68b3      	ldr	r3, [r6, #8]
 8009240:	4630      	mov	r0, r6
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4639      	mov	r1, r7
 8009246:	4798      	blx	r3
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8009248:	4606      	mov	r6, r0
 800924a:	2800      	cmp	r0, #0
 800924c:	d14e      	bne.n	80092ec <spi_stm32_init+0xc4>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800924e:	4601      	mov	r1, r0
 8009250:	aa01      	add	r2, sp, #4
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f00a fc6a 	bl	8013b2c <pinctrl_lookup_state>
	if (ret < 0) {
 8009258:	2800      	cmp	r0, #0
 800925a:	db44      	blt.n	80092e6 <spi_stm32_init+0xbe>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800925c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800925e:	4632      	mov	r2, r6
 8009260:	7919      	ldrb	r1, [r3, #4]
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	f002 f896 	bl	800b394 <pinctrl_configure_pins>
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8009268:	2800      	cmp	r0, #0
 800926a:	db3c      	blt.n	80092e6 <spi_stm32_init+0xbe>
			return err;
		}
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 800926c:	4620      	mov	r0, r4
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8009272:	68ac      	ldr	r4, [r5, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8009274:	2601      	movs	r6, #1
 8009276:	3408      	adds	r4, #8
 8009278:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800927c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009280:	f1a4 0208 	sub.w	r2, r4, #8
 8009284:	4293      	cmp	r3, r2
 8009286:	d804      	bhi.n	8009292 <spi_stm32_init+0x6a>
	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);
 8009288:	4628      	mov	r0, r5
 800928a:	f009 fe42 	bl	8012f12 <spi_context_unlock_unconditionally>

	return 0;
 800928e:	2000      	movs	r0, #0
 8009290:	e029      	b.n	80092e6 <spi_stm32_init+0xbe>
		if (!device_is_ready(cs_gpio->port)) {
 8009292:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8009296:	f00a fd11 	bl	8013cbc <z_device_is_ready>
 800929a:	b350      	cbz	r0, 80092f2 <spi_stm32_init+0xca>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 800929c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80092a0:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
 80092a4:	f814 3c03 	ldrb.w	r3, [r4, #-3]
	struct gpio_driver_data *data =
 80092a8:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 80092ac:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80092b0:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80092b4:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 80092b6:	bf54      	ite	pl
 80092b8:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80092bc:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80092c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80092c4:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80092c8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80092ca:	bf4c      	ite	mi
 80092cc:	ea47 070e 	orrmi.w	r7, r7, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80092d0:	ea27 070e 	bicpl.w	r7, r7, lr
	return api->pin_configure(port, pin, flags);
 80092d4:	f8d8 3000 	ldr.w	r3, [r8]
 80092d8:	f8cc 7000 	str.w	r7, [ip]
 80092dc:	4798      	blx	r3
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 80092de:	2800      	cmp	r0, #0
 80092e0:	f104 0408 	add.w	r4, r4, #8
 80092e4:	dac8      	bge.n	8009278 <spi_stm32_init+0x50>
}
 80092e6:	b002      	add	sp, #8
 80092e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 80092ec:	f06f 0004 	mvn.w	r0, #4
 80092f0:	e7f9      	b.n	80092e6 <spi_stm32_init+0xbe>
			return -ENODEV;
 80092f2:	f06f 0012 	mvn.w	r0, #18
 80092f6:	e7f6      	b.n	80092e6 <spi_stm32_init+0xbe>
 80092f8:	08014d98 	.word	0x08014d98

080092fc <spi_stm32_transceive>:
{
 80092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	461e      	mov	r6, r3
	SPI_TypeDef *spi = cfg->spi;
 8009302:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8009304:	6905      	ldr	r5, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8009306:	f8d3 8008 	ldr.w	r8, [r3, #8]
{
 800930a:	b08d      	sub	sp, #52	; 0x34
 800930c:	4682      	mov	sl, r0
 800930e:	460f      	mov	r7, r1
	if (!tx_bufs && !rx_bufs) {
 8009310:	4691      	mov	r9, r2
 8009312:	b90a      	cbnz	r2, 8009318 <spi_stm32_transceive+0x1c>
 8009314:	2e00      	cmp	r6, #0
 8009316:	d045      	beq.n	80093a4 <spi_stm32_transceive+0xa8>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8009318:	88bb      	ldrh	r3, [r7, #4]
 800931a:	049c      	lsls	r4, r3, #18
 800931c:	d446      	bmi.n	80093ac <spi_stm32_transceive+0xb0>
 800931e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009326:	f105 0010 	add.w	r0, r5, #16
 800932a:	f003 f95f 	bl	800c5ec <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800932e:	606f      	str	r7, [r5, #4]
	const struct spi_stm32_config *cfg = dev->config;
 8009330:	f8da 3004 	ldr.w	r3, [sl, #4]
	const uint32_t scaler[] = {
 8009334:	f8df c268 	ldr.w	ip, [pc, #616]	; 80095a0 <spi_stm32_transceive+0x2a4>
	const struct spi_stm32_config *cfg = dev->config;
 8009338:	9300      	str	r3, [sp, #0]
	struct spi_stm32_data *data = dev->data;
 800933a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800933e:	9301      	str	r3, [sp, #4]
	const uint32_t scaler[] = {
 8009340:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009344:	ac04      	add	r4, sp, #16
 8009346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009348:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800934c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8009350:	9b01      	ldr	r3, [sp, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	429f      	cmp	r7, r3
 8009356:	f000 808a 	beq.w	800946e <spi_stm32_transceive+0x172>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 800935a:	88bb      	ldrh	r3, [r7, #4]
 800935c:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8009360:	2a08      	cmp	r2, #8
 8009362:	d002      	beq.n	800936a <spi_stm32_transceive+0x6e>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8009364:	2a10      	cmp	r2, #16
 8009366:	f040 80ee 	bne.w	8009546 <spi_stm32_transceive+0x24a>
	SPI_TypeDef *spi = cfg->spi;
 800936a:	9a00      	ldr	r2, [sp, #0]
 800936c:	6894      	ldr	r4, [r2, #8]
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 800936e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8009372:	6863      	ldr	r3, [r4, #4]
 8009374:	bf14      	ite	ne
 8009376:	f043 0310 	orrne.w	r3, r3, #16
 800937a:	f023 0310 	biceq.w	r3, r3, #16
 800937e:	6063      	str	r3, [r4, #4]
 8009380:	f8df b220 	ldr.w	fp, [pc, #544]	; 80095a4 <spi_stm32_transceive+0x2a8>
 8009384:	4658      	mov	r0, fp
 8009386:	f00a fc99 	bl	8013cbc <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 800938a:	b9b0      	cbnz	r0, 80093ba <spi_stm32_transceive+0xbe>
		return -EIO;
 800938c:	f06f 0604 	mvn.w	r6, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	889b      	ldrh	r3, [r3, #4]
 8009394:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8009398:	d104      	bne.n	80093a4 <spi_stm32_transceive+0xa8>
		ctx->owner = NULL;
 800939a:	606b      	str	r3, [r5, #4]
	z_impl_k_sem_give(sem);
 800939c:	f105 0010 	add.w	r0, r5, #16
 80093a0:	f003 f8fe 	bl	800c5a0 <z_impl_k_sem_give>
}
 80093a4:	4630      	mov	r0, r6
 80093a6:	b00d      	add	sp, #52	; 0x34
 80093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 80093ac:	69ab      	ldr	r3, [r5, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1b5      	bne.n	800931e <spi_stm32_transceive+0x22>
		(k_sem_count_get(&ctx->lock) == 0) &&
 80093b2:	686b      	ldr	r3, [r5, #4]
 80093b4:	429f      	cmp	r7, r3
 80093b6:	d1b2      	bne.n	800931e <spi_stm32_transceive+0x22>
 80093b8:	e7ba      	b.n	8009330 <spi_stm32_transceive+0x34>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80093ba:	f8db 3008 	ldr.w	r3, [fp, #8]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0e3      	beq.n	800938c <spi_stm32_transceive+0x90>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80093c4:	9900      	ldr	r1, [sp, #0]
 80093c6:	aa03      	add	r2, sp, #12
 80093c8:	4658      	mov	r0, fp
 80093ca:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80093cc:	2800      	cmp	r0, #0
 80093ce:	dbdd      	blt.n	800938c <spi_stm32_transceive+0x90>
		uint32_t clk = clock >> br;
 80093d0:	9a03      	ldr	r2, [sp, #12]
		if (clk <= config->frequency) {
 80093d2:	6839      	ldr	r1, [r7, #0]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80093d4:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 80093d6:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 80093da:	4288      	cmp	r0, r1
 80093dc:	f240 80ca 	bls.w	8009574 <spi_stm32_transceive+0x278>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80093e0:	3301      	adds	r3, #1
 80093e2:	2b09      	cmp	r3, #9
 80093e4:	d1f7      	bne.n	80093d6 <spi_stm32_transceive+0xda>
		return -EINVAL;
 80093e6:	f06f 0615 	mvn.w	r6, #21
 80093ea:	e7d1      	b.n	8009390 <spi_stm32_transceive+0x94>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	f042 0202 	orr.w	r2, r2, #2
 80093f2:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80093f4:	6822      	ldr	r2, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 80093f6:	0758      	lsls	r0, r3, #29
 80093f8:	bf4c      	ite	mi
 80093fa:	f042 0201 	orrmi.w	r2, r2, #1
 80093fe:	f022 0201 	bicpl.w	r2, r2, #1
 8009402:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8009404:	6822      	ldr	r2, [r4, #0]
 8009406:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800940a:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800940c:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 800940e:	06d9      	lsls	r1, r3, #27
 8009410:	bf4c      	ite	mi
 8009412:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8009416:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 800941a:	6022      	str	r2, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 800941c:	6822      	ldr	r2, [r4, #0]
 800941e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009422:	6022      	str	r2, [r4, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	f003 0101 	and.w	r1, r3, #1
 800942a:	2a00      	cmp	r2, #0
 800942c:	d07b      	beq.n	8009526 <spi_stm32_transceive+0x22a>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800942e:	6822      	ldr	r2, [r4, #0]
 8009430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009434:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8009436:	6862      	ldr	r2, [r4, #4]
 8009438:	f022 0204 	bic.w	r2, r2, #4
 800943c:	6062      	str	r2, [r4, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800943e:	2900      	cmp	r1, #0
 8009440:	d07d      	beq.n	800953e <spi_stm32_transceive+0x242>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8009442:	6822      	ldr	r2, [r4, #0]
 8009444:	f422 7282 	bic.w	r2, r2, #260	; 0x104
 8009448:	6022      	str	r2, [r4, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 800944a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800944e:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8009450:	6863      	ldr	r3, [r4, #4]
 8009452:	bf06      	itte	eq
 8009454:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 8009458:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 800945c:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 8009460:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8009462:	6863      	ldr	r3, [r4, #4]
 8009464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009468:	6063      	str	r3, [r4, #4]
	data->ctx.config = config;
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	601f      	str	r7, [r3, #0]
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800946e:	f1b9 0f00 	cmp.w	r9, #0
 8009472:	d16b      	bne.n	800954c <spi_stm32_transceive+0x250>
 8009474:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8009478:	464a      	mov	r2, r9
 800947a:	64aa      	str	r2, [r5, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800947c:	2301      	movs	r3, #1
 800947e:	f105 0258 	add.w	r2, r5, #88	; 0x58
 8009482:	f105 0148 	add.w	r1, r5, #72	; 0x48
 8009486:	f105 0044 	add.w	r0, r5, #68	; 0x44
 800948a:	f009 fccf 	bl	8012e2c <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 800948e:	6568      	str	r0, [r5, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8009490:	2e00      	cmp	r6, #0
 8009492:	d163      	bne.n	800955c <spi_stm32_transceive+0x260>
 8009494:	64ee      	str	r6, [r5, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8009496:	4633      	mov	r3, r6
 8009498:	652b      	str	r3, [r5, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800949a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800949e:	2301      	movs	r3, #1
 80094a0:	f105 0150 	add.w	r1, r5, #80	; 0x50
 80094a4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 80094a8:	f009 fcc0 	bl	8012e2c <spi_context_get_next_buf>
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 80094ac:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
 80094ae:	65e8      	str	r0, [r5, #92]	; 0x5c
	ctx->sync_status = 0;
 80094b0:	642b      	str	r3, [r5, #64]	; 0x40
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80094b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 80094b6:	f012 0201 	ands.w	r2, r2, #1
 80094ba:	d155      	bne.n	8009568 <spi_stm32_transceive+0x26c>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80094bc:	f8d8 3000 	ldr.w	r3, [r8]
	_spi_context_cs_control(ctx, on, false);
 80094c0:	f8da 0010 	ldr.w	r0, [sl, #16]
 80094c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c8:	f8c8 3000 	str.w	r3, [r8]
 80094cc:	2101      	movs	r1, #1
 80094ce:	f009 fcfe 	bl	8012ece <_spi_context_cs_control>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_ERR(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 80094d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094d6:	f043 0320 	orr.w	r3, r3, #32
 80094da:	f8c8 3004 	str.w	r3, [r8, #4]
	if (rx_bufs) {
 80094de:	b12e      	cbz	r6, 80094ec <spi_stm32_transceive+0x1f0>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80094e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e8:	f8c8 3004 	str.w	r3, [r8, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80094ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 80094f0:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80094f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f6:	f8c8 3004 	str.w	r3, [r8, #4]
 80094fa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
			     ctx->config->frequency;
 80094fc:	4628      	mov	r0, r5
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 80094fe:	4293      	cmp	r3, r2
 8009500:	bf38      	it	cc
 8009502:	4613      	movcc	r3, r2
 8009504:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009508:	4353      	muls	r3, r2
			     ctx->config->frequency;
 800950a:	f850 2b28 	ldr.w	r2, [r0], #40
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 800950e:	6812      	ldr	r2, [r2, #0]
 8009510:	fbb3 f3f2 	udiv	r3, r3, r2
 8009514:	220a      	movs	r2, #10
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 8009516:	33c8      	adds	r3, #200	; 0xc8
 8009518:	fba3 2302 	umull	r2, r3, r3, r2
	return z_impl_k_sem_take(sem, timeout);
 800951c:	f003 f866 	bl	800c5ec <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
 8009520:	bb28      	cbnz	r0, 800956e <spi_stm32_transceive+0x272>
	status = ctx->sync_status;
 8009522:	6c2e      	ldr	r6, [r5, #64]	; 0x40
	return status;
 8009524:	e734      	b.n	8009390 <spi_stm32_transceive+0x94>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8009526:	6822      	ldr	r2, [r4, #0]
 8009528:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800952c:	2900      	cmp	r1, #0
 800952e:	d181      	bne.n	8009434 <spi_stm32_transceive+0x138>
 8009530:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009534:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8009536:	6862      	ldr	r2, [r4, #4]
 8009538:	f042 0204 	orr.w	r2, r2, #4
 800953c:	6062      	str	r2, [r4, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 8009544:	e780      	b.n	8009448 <spi_stm32_transceive+0x14c>
		return -ENOTSUP;
 8009546:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800954a:	e721      	b.n	8009390 <spi_stm32_transceive+0x94>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800954c:	f8d9 2000 	ldr.w	r2, [r9]
 8009550:	646a      	str	r2, [r5, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8009552:	2a00      	cmp	r2, #0
 8009554:	d091      	beq.n	800947a <spi_stm32_transceive+0x17e>
 8009556:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800955a:	e78e      	b.n	800947a <spi_stm32_transceive+0x17e>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800955c:	6833      	ldr	r3, [r6, #0]
 800955e:	64eb      	str	r3, [r5, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8009560:	2b00      	cmp	r3, #0
 8009562:	d099      	beq.n	8009498 <spi_stm32_transceive+0x19c>
 8009564:	6873      	ldr	r3, [r6, #4]
 8009566:	e797      	b.n	8009498 <spi_stm32_transceive+0x19c>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 8009568:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800956c:	e7a1      	b.n	80094b2 <spi_stm32_transceive+0x1b6>
		return -ETIMEDOUT;
 800956e:	f06f 0673 	mvn.w	r6, #115	; 0x73
 8009572:	e70d      	b.n	8009390 <spi_stm32_transceive+0x94>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8009574:	6822      	ldr	r2, [r4, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8009576:	a90c      	add	r1, sp, #48	; 0x30
 8009578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800957c:	6022      	str	r2, [r4, #0]
 800957e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8009588:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800958c:	4313      	orrs	r3, r2
 800958e:	6023      	str	r3, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8009590:	88bb      	ldrh	r3, [r7, #4]
 8009592:	079a      	lsls	r2, r3, #30
 8009594:	f53f af2a 	bmi.w	80093ec <spi_stm32_transceive+0xf0>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8009598:	6822      	ldr	r2, [r4, #0]
 800959a:	f022 0202 	bic.w	r2, r2, #2
 800959e:	e728      	b.n	80093f2 <spi_stm32_transceive+0xf6>
 80095a0:	080152f0 	.word	0x080152f0
 80095a4:	08014d98 	.word	0x08014d98

080095a8 <eswifi_lock>:
{
	return eswifi->bus->request(eswifi, cmd, clen, rsp, rlen);
}

static inline void eswifi_lock(struct eswifi_dev *eswifi)
{
 80095a8:	b570      	push	{r4, r5, r6, lr}
	/* Nested locking */
	if (atomic_get(&eswifi->mutex_owner) != (atomic_t)(uintptr_t)_current) {
 80095aa:	4e14      	ldr	r6, [pc, #80]	; (80095fc <eswifi_lock+0x54>)
 80095ac:	f3bf 8f5b 	dmb	ish
 80095b0:	f8d0 37cc 	ldr.w	r3, [r0, #1996]	; 0x7cc
 80095b4:	f3bf 8f5b 	dmb	ish
 80095b8:	68b2      	ldr	r2, [r6, #8]
 80095ba:	429a      	cmp	r2, r3
{
 80095bc:	4604      	mov	r4, r0
	if (atomic_get(&eswifi->mutex_owner) != (atomic_t)(uintptr_t)_current) {
 80095be:	f200 75cc 	addw	r5, r0, #1996	; 0x7cc
 80095c2:	d016      	beq.n	80095f2 <eswifi_lock+0x4a>
	return z_impl_k_mutex_lock(mutex, timeout);
 80095c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095cc:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 80095d0:	f002 fef6 	bl	800c3c0 <z_impl_k_mutex_lock>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80095d4:	68b3      	ldr	r3, [r6, #8]
 80095d6:	f3bf 8f5b 	dmb	ish
 80095da:	e855 2f00 	ldrex	r2, [r5]
 80095de:	e845 3100 	strex	r1, r3, [r5]
 80095e2:	2900      	cmp	r1, #0
 80095e4:	d1f9      	bne.n	80095da <eswifi_lock+0x32>
 80095e6:	f3bf 8f5b 	dmb	ish
		k_mutex_lock(&eswifi->mutex, K_FOREVER);
		atomic_set(&eswifi->mutex_owner, (atomic_t)(uintptr_t)_current);
		eswifi->mutex_depth = 1;
 80095ea:	2301      	movs	r3, #1
	} else {
		eswifi->mutex_depth++;
 80095ec:	f8c4 37d0 	str.w	r3, [r4, #2000]	; 0x7d0
	}
}
 80095f0:	bd70      	pop	{r4, r5, r6, pc}
		eswifi->mutex_depth++;
 80095f2:	f8d0 37d0 	ldr.w	r3, [r0, #2000]	; 0x7d0
 80095f6:	3301      	adds	r3, #1
 80095f8:	e7f8      	b.n	80095ec <eswifi_lock+0x44>
 80095fa:	bf00      	nop
 80095fc:	20002524 	.word	0x20002524

08009600 <eswifi_init>:

	return 0;
}

static int eswifi_init(const struct device *dev)
{
 8009600:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct eswifi_dev *eswifi = dev->data;
 8009602:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	eswifi->role = ESWIFI_ROLE_CLIENT;
 8009604:	2500      	movs	r5, #0
 8009606:	f884 516e 	strb.w	r5, [r4, #366]	; 0x16e
	return z_impl_k_mutex_init(mutex);
 800960a:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800960e:	f00a fc5d 	bl	8013ecc <z_impl_k_mutex_init>
	k_mutex_init(&eswifi->mutex);

	eswifi->bus = eswifi_get_bus();
 8009612:	f000 ffb1 	bl	800a578 <eswifi_get_bus>
	eswifi->bus->init(eswifi);
 8009616:	6803      	ldr	r3, [r0, #0]
	eswifi->bus = eswifi_get_bus();
 8009618:	6060      	str	r0, [r4, #4]
	eswifi->bus->init(eswifi);
 800961a:	4620      	mov	r0, r4
 800961c:	4798      	blx	r3
 800961e:	481c      	ldr	r0, [pc, #112]	; (8009690 <eswifi_init+0x90>)
 8009620:	f002 fc10 	bl	800be44 <z_impl_device_get_binding>

	eswifi->resetn.dev = device_get_binding(
 8009624:	60a0      	str	r0, [r4, #8]
			DT_INST_GPIO_LABEL(0, resetn_gpios));
	if (!eswifi->resetn.dev) {
 8009626:	b918      	cbnz	r0, 8009630 <eswifi_init+0x30>
		LOG_ERR("Failed to initialize GPIO driver: %s",
			    DT_INST_GPIO_LABEL(0, resetn_gpios));
		return -ENODEV;
 8009628:	f06f 0012 	mvn.w	r0, #18
	k_work_init(&eswifi->request_work, eswifi_request_work);

	eswifi_shell_register(eswifi);

	return 0;
}
 800962c:	b002      	add	sp, #8
 800962e:	bd70      	pop	{r4, r5, r6, pc}
	eswifi->resetn.pin = DT_INST_GPIO_PIN(0, resetn_gpios);
 8009630:	2108      	movs	r1, #8
 8009632:	60e1      	str	r1, [r4, #12]
	struct gpio_driver_data *data =
 8009634:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 8009636:	6886      	ldr	r6, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8009638:	6813      	ldr	r3, [r2, #0]
 800963a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800963e:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 8009640:	6833      	ldr	r3, [r6, #0]
 8009642:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009646:	4798      	blx	r3
 8009648:	4812      	ldr	r0, [pc, #72]	; (8009694 <eswifi_init+0x94>)
 800964a:	f002 fbfb 	bl	800be44 <z_impl_device_get_binding>
	eswifi->wakeup.dev = device_get_binding(
 800964e:	6120      	str	r0, [r4, #16]
	if (!eswifi->wakeup.dev) {
 8009650:	2800      	cmp	r0, #0
 8009652:	d0e9      	beq.n	8009628 <eswifi_init+0x28>
	eswifi->wakeup.pin = DT_INST_GPIO_PIN(0, wakeup_gpios);
 8009654:	210d      	movs	r1, #13
 8009656:	6161      	str	r1, [r4, #20]
	struct gpio_driver_data *data =
 8009658:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 800965a:	6886      	ldr	r6, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800965c:	6813      	ldr	r3, [r2, #0]
 800965e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009662:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 8009664:	6833      	ldr	r3, [r6, #0]
 8009666:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800966a:	4798      	blx	r3
	k_work_queue_start(&eswifi->work_q, eswifi_work_q_stack,
 800966c:	490a      	ldr	r1, [pc, #40]	; (8009698 <eswifi_init+0x98>)
 800966e:	9500      	str	r5, [sp, #0]
 8009670:	f06f 0301 	mvn.w	r3, #1
 8009674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009678:	f104 0020 	add.w	r0, r4, #32
 800967c:	f003 f8e8 	bl	800c850 <k_work_queue_start>
	k_work_init(&eswifi->request_work, eswifi_request_work);
 8009680:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 8009684:	4905      	ldr	r1, [pc, #20]	; (800969c <eswifi_init+0x9c>)
 8009686:	f00a fd63 	bl	8014150 <k_work_init>
	return 0;
 800968a:	4628      	mov	r0, r5
 800968c:	e7ce      	b.n	800962c <eswifi_init+0x2c>
 800968e:	bf00      	nop
 8009690:	08018d72 	.word	0x08018d72
 8009694:	08018d84 	.word	0x08018d84
 8009698:	20003c20 	.word	0x20003c20
 800969c:	080099a1 	.word	0x080099a1

080096a0 <eswifi_at_cmd_rsp>:
{
 80096a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const char startstr[] = "\r\n";
 80096a4:	4b25      	ldr	r3, [pc, #148]	; (800973c <eswifi_at_cmd_rsp+0x9c>)
{
 80096a6:	b086      	sub	sp, #24
 80096a8:	4615      	mov	r5, r2
	const char startstr[] = "\r\n";
 80096aa:	881a      	ldrh	r2, [r3, #0]
 80096ac:	f8ad 200c 	strh.w	r2, [sp, #12]
	const char endstr[] = "\r\nOK\r\n>";
 80096b0:	4a23      	ldr	r2, [pc, #140]	; (8009740 <eswifi_at_cmd_rsp+0xa0>)
	const char startstr[] = "\r\n";
 80096b2:	789b      	ldrb	r3, [r3, #2]
 80096b4:	f88d 300e 	strb.w	r3, [sp, #14]
{
 80096b8:	4606      	mov	r6, r0
 80096ba:	460c      	mov	r4, r1
	const char endstr[] = "\r\nOK\r\n>";
 80096bc:	6810      	ldr	r0, [r2, #0]
 80096be:	6851      	ldr	r1, [r2, #4]
 80096c0:	ab04      	add	r3, sp, #16
 80096c2:	c303      	stmia	r3!, {r0, r1}
	len = eswifi_request(eswifi, cmd, strlen(cmd), eswifi->buf,
 80096c4:	4620      	mov	r0, r4
 80096c6:	f7f6 ff2a 	bl	800051e <strlen>
	return eswifi->bus->request(eswifi, cmd, clen, rsp, rlen);
 80096ca:	6873      	ldr	r3, [r6, #4]
 80096cc:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80096d0:	9100      	str	r1, [sp, #0]
 80096d2:	f206 1775 	addw	r7, r6, #373	; 0x175
 80096d6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80096da:	4602      	mov	r2, r0
 80096dc:	4621      	mov	r1, r4
 80096de:	463b      	mov	r3, r7
 80096e0:	4630      	mov	r0, r6
 80096e2:	47c0      	blx	r8
	if (len < 0) {
 80096e4:	1e04      	subs	r4, r0, #0
 80096e6:	db26      	blt.n	8009736 <eswifi_at_cmd_rsp+0x96>
	if (strncmp(eswifi->buf, startstr, strlen(startstr))) {
 80096e8:	a803      	add	r0, sp, #12
 80096ea:	f7f6 ff18 	bl	800051e <strlen>
 80096ee:	a903      	add	r1, sp, #12
 80096f0:	4602      	mov	r2, r0
 80096f2:	4638      	mov	r0, r7
 80096f4:	f00b f8c0 	bl	8014878 <strncmp>
 80096f8:	b120      	cbz	r0, 8009704 <eswifi_at_cmd_rsp+0x64>
		return -EINVAL;
 80096fa:	f06f 0015 	mvn.w	r0, #21
}
 80096fe:	b006      	add	sp, #24
 8009700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (len < sizeof(endstr) - 1 + sizeof(startstr) - 1) {
 8009704:	2c08      	cmp	r4, #8
 8009706:	ddf8      	ble.n	80096fa <eswifi_at_cmd_rsp+0x5a>
	for (i = len - sizeof(endstr); i > 0; i--) {
 8009708:	3c08      	subs	r4, #8
		if (!strncmp(&eswifi->buf[i], endstr, 7)) {
 800970a:	eb07 0804 	add.w	r8, r7, r4
 800970e:	2207      	movs	r2, #7
 8009710:	a904      	add	r1, sp, #16
 8009712:	4640      	mov	r0, r8
 8009714:	f00b f8b0 	bl	8014878 <strncmp>
 8009718:	b950      	cbnz	r0, 8009730 <eswifi_at_cmd_rsp+0x90>
			if (rsp) {
 800971a:	2d00      	cmp	r5, #0
 800971c:	d0ef      	beq.n	80096fe <eswifi_at_cmd_rsp+0x5e>
				eswifi->buf[i] = '\0';
 800971e:	4434      	add	r4, r6
 8009720:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
				*rsp = &eswifi->buf[2];
 8009724:	f206 1077 	addw	r0, r6, #375	; 0x177
 8009728:	6028      	str	r0, [r5, #0]
				rsplen = &eswifi->buf[i] - *rsp;
 800972a:	eba8 0000 	sub.w	r0, r8, r0
 800972e:	e7e6      	b.n	80096fe <eswifi_at_cmd_rsp+0x5e>
	for (i = len - sizeof(endstr); i > 0; i--) {
 8009730:	3c01      	subs	r4, #1
 8009732:	d1ea      	bne.n	800970a <eswifi_at_cmd_rsp+0x6a>
 8009734:	e7e1      	b.n	80096fa <eswifi_at_cmd_rsp+0x5a>
		return -EIO;
 8009736:	f06f 0004 	mvn.w	r0, #4
 800973a:	e7e0      	b.n	80096fe <eswifi_at_cmd_rsp+0x5e>
 800973c:	0801634b 	.word	0x0801634b
 8009740:	08018d9c 	.word	0x08018d9c

08009744 <eswifi_iface_init>:
{
 8009744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	eswifi_lock(eswifi);
 8009748:	4c36      	ldr	r4, [pc, #216]	; (8009824 <eswifi_iface_init+0xe0>)
{
 800974a:	b087      	sub	sp, #28
 800974c:	4606      	mov	r6, r0
	eswifi_lock(eswifi);
 800974e:	4620      	mov	r0, r4
 8009750:	f7ff ff2a 	bl	80095a8 <eswifi_lock>
	gpio_pin_set(eswifi->resetn.dev, eswifi->resetn.pin, 0);
 8009754:	7b21      	ldrb	r1, [r4, #12]
 8009756:	68a0      	ldr	r0, [r4, #8]
 8009758:	2200      	movs	r2, #0
 800975a:	f009 fd4c 	bl	80131f6 <gpio_pin_set.isra.0>
	return z_impl_k_sleep(timeout);
 800975e:	2100      	movs	r1, #0
 8009760:	2064      	movs	r0, #100	; 0x64
 8009762:	f003 fbd9 	bl	800cf18 <z_impl_k_sleep>
	gpio_pin_set(eswifi->resetn.dev, eswifi->resetn.pin, 1);
 8009766:	7b21      	ldrb	r1, [r4, #12]
 8009768:	68a0      	ldr	r0, [r4, #8]
 800976a:	2201      	movs	r2, #1
 800976c:	f009 fd43 	bl	80131f6 <gpio_pin_set.isra.0>
	gpio_pin_set(eswifi->wakeup.dev, eswifi->wakeup.pin, 1);
 8009770:	7d21      	ldrb	r1, [r4, #20]
 8009772:	6920      	ldr	r0, [r4, #16]
 8009774:	2201      	movs	r2, #1
 8009776:	f009 fd3e 	bl	80131f6 <gpio_pin_set.isra.0>
 800977a:	2100      	movs	r1, #0
 800977c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009780:	f003 fbca 	bl	800cf18 <z_impl_k_sleep>
 8009784:	6863      	ldr	r3, [r4, #4]
 8009786:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800978a:	9200      	str	r2, [sp, #0]
 800978c:	2200      	movs	r2, #0
 800978e:	685d      	ldr	r5, [r3, #4]
 8009790:	4611      	mov	r1, r2
 8009792:	f204 1375 	addw	r3, r4, #373	; 0x175
 8009796:	4620      	mov	r0, r4
 8009798:	47a8      	blx	r5
	if (eswifi_reset(eswifi) < 0) {
 800979a:	2800      	cmp	r0, #0
 800979c:	db3e      	blt.n	800981c <eswifi_iface_init+0xd8>
	char cmd[] = "Z5\r";
 800979e:	4b22      	ldr	r3, [pc, #136]	; (8009828 <eswifi_iface_init+0xe4>)
 80097a0:	9302      	str	r3, [sp, #8]
	ret = eswifi_at_cmd_rsp(eswifi, cmd, &rsp);
 80097a2:	aa03      	add	r2, sp, #12
 80097a4:	a902      	add	r1, sp, #8
 80097a6:	4620      	mov	r0, r4
 80097a8:	f7ff ff7a 	bl	80096a0 <eswifi_at_cmd_rsp>
	if (ret < 0) {
 80097ac:	1e07      	subs	r7, r0, #0
 80097ae:	db35      	blt.n	800981c <eswifi_iface_init+0xd8>
 80097b0:	f10d 0810 	add.w	r8, sp, #16
	int ret, i, byte = 0;
 80097b4:	2500      	movs	r5, #0
 80097b6:	46c1      	mov	r9, r8
	for (i = 0; i < ret && byte < 6; i++) {
 80097b8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80097bc:	4287      	cmp	r7, r0
 80097be:	dd2b      	ble.n	8009818 <eswifi_iface_init+0xd4>
 80097c0:	2d06      	cmp	r5, #6
 80097c2:	d11f      	bne.n	8009804 <eswifi_iface_init+0xc0>
	memcpy(eswifi->mac, mac, sizeof(eswifi->mac));
 80097c4:	4d19      	ldr	r5, [pc, #100]	; (800982c <eswifi_iface_init+0xe8>)
 80097c6:	9804      	ldr	r0, [sp, #16]
 80097c8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80097cc:	f8c4 016f 	str.w	r0, [r4, #367]	; 0x16f
	return net_if_set_link_addr_locked(iface, addr, len, type);
 80097d0:	4629      	mov	r1, r5
 80097d2:	80ab      	strh	r3, [r5, #4]
 80097d4:	2206      	movs	r2, #6
 80097d6:	2303      	movs	r3, #3
 80097d8:	4630      	mov	r0, r6
 80097da:	f007 f8ce 	bl	801097a <net_if_set_link_addr_locked>
	eswifi_unlock(eswifi);
 80097de:	f46f 73b7 	mvn.w	r3, #366	; 0x16e
 80097e2:	18e8      	adds	r0, r5, r3
	eswifi->iface = iface;
 80097e4:	6026      	str	r6, [r4, #0]
	eswifi_unlock(eswifi);
 80097e6:	f009 fd16 	bl	8013216 <eswifi_unlock>
	eswifi_offload_init(eswifi);
 80097ea:	f46f 72b7 	mvn.w	r2, #366	; 0x16e
 80097ee:	18a8      	adds	r0, r5, r2
 80097f0:	f000 fbfe 	bl	8009ff0 <eswifi_offload_init>
	eswifi_socket_offload_init(eswifi);
 80097f4:	f46f 71b7 	mvn.w	r1, #366	; 0x16e
 80097f8:	1868      	adds	r0, r5, r1
}
 80097fa:	b007      	add	sp, #28
 80097fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	eswifi_socket_offload_init(eswifi);
 8009800:	f001 b9c4 	b.w	800ab8c <eswifi_socket_offload_init>
		addr[byte++] = strtol(&rsp[i], NULL, 16);
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	2210      	movs	r2, #16
 8009808:	2100      	movs	r1, #0
 800980a:	4418      	add	r0, r3
 800980c:	f004 f862 	bl	800d8d4 <strtol>
 8009810:	3501      	adds	r5, #1
 8009812:	f808 0b01 	strb.w	r0, [r8], #1
	for (i = 0; i < ret && byte < 6; i++) {
 8009816:	e7cf      	b.n	80097b8 <eswifi_iface_init+0x74>
	if (byte != 6) {
 8009818:	2d06      	cmp	r5, #6
 800981a:	d0d3      	beq.n	80097c4 <eswifi_iface_init+0x80>
}
 800981c:	b007      	add	sp, #28
 800981e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009822:	bf00      	nop
 8009824:	20000d10 	.word	0x20000d10
 8009828:	000d355a 	.word	0x000d355a
 800982c:	20000e7f 	.word	0x20000e7f

08009830 <eswifi_mgmt_ap_disable>:
{
 8009830:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct eswifi_dev *eswifi = dev->data;
 8009832:	6905      	ldr	r5, [r0, #16]
	char cmd[] = "AE\r";
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <eswifi_mgmt_ap_disable+0x38>)
 8009836:	9301      	str	r3, [sp, #4]
	eswifi_lock(eswifi);
 8009838:	4628      	mov	r0, r5
 800983a:	f7ff feb5 	bl	80095a8 <eswifi_lock>
	err = eswifi_at_cmd(eswifi, cmd);
 800983e:	a901      	add	r1, sp, #4
 8009840:	4628      	mov	r0, r5
 8009842:	f009 fd44 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 8009846:	2800      	cmp	r0, #0
 8009848:	da06      	bge.n	8009858 <eswifi_mgmt_ap_disable+0x28>
		eswifi_unlock(eswifi);
 800984a:	4628      	mov	r0, r5
 800984c:	f009 fce3 	bl	8013216 <eswifi_unlock>
		return -EIO;
 8009850:	f06f 0004 	mvn.w	r0, #4
}
 8009854:	b003      	add	sp, #12
 8009856:	bd30      	pop	{r4, r5, pc}
	eswifi->role = ESWIFI_ROLE_CLIENT;
 8009858:	2400      	movs	r4, #0
	eswifi_unlock(eswifi);
 800985a:	4628      	mov	r0, r5
	eswifi->role = ESWIFI_ROLE_CLIENT;
 800985c:	f885 416e 	strb.w	r4, [r5, #366]	; 0x16e
	eswifi_unlock(eswifi);
 8009860:	f009 fcd9 	bl	8013216 <eswifi_unlock>
	return 0;
 8009864:	4620      	mov	r0, r4
 8009866:	e7f5      	b.n	8009854 <eswifi_mgmt_ap_disable+0x24>
 8009868:	000d4541 	.word	0x000d4541

0800986c <eswifi_mgmt_ap_enable>:
{
 800986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct eswifi_dev *eswifi = dev->data;
 8009870:	6905      	ldr	r5, [r0, #16]
	struct net_if_ipv4 *ipv4 = eswifi->iface->config.ip.ipv4;
 8009872:	682b      	ldr	r3, [r5, #0]
	eswifi_lock(eswifi);
 8009874:	4628      	mov	r0, r5
	struct net_if_ipv4 *ipv4 = eswifi->iface->config.ip.ipv4;
 8009876:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
 800987a:	460c      	mov	r4, r1
	eswifi_lock(eswifi);
 800987c:	f7ff fe94 	bl	80095a8 <eswifi_lock>
	if (eswifi->role == ESWIFI_ROLE_AP) {
 8009880:	f895 316e 	ldrb.w	r3, [r5, #366]	; 0x16e
 8009884:	2b01      	cmp	r3, #1
 8009886:	d07a      	beq.n	800997e <eswifi_mgmt_ap_enable+0x112>
	err = __eswifi_sta_config(eswifi, params);
 8009888:	4621      	mov	r1, r4
 800988a:	4628      	mov	r0, r5
 800988c:	f009 fc85 	bl	801319a <__eswifi_sta_config>
	if (err) {
 8009890:	4606      	mov	r6, r0
 8009892:	2800      	cmp	r0, #0
 8009894:	d176      	bne.n	8009984 <eswifi_mgmt_ap_enable+0x118>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "A1=%u\r",
 8009896:	f205 1775 	addw	r7, r5, #373	; 0x175
 800989a:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 800989e:	4a3a      	ldr	r2, [pc, #232]	; (8009988 <eswifi_mgmt_ap_enable+0x11c>)
 80098a0:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80098a4:	4638      	mov	r0, r7
 80098a6:	f004 ff67 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 80098aa:	4639      	mov	r1, r7
 80098ac:	4628      	mov	r0, r5
 80098ae:	f009 fd0e 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 80098b2:	1e04      	subs	r4, r0, #0
 80098b4:	db10      	blt.n	80098d8 <eswifi_mgmt_ap_enable+0x6c>
	if (eswifi->sta.security != ESWIFI_SEC_OPEN) {
 80098b6:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 80098ba:	b993      	cbnz	r3, 80098e2 <eswifi_mgmt_ap_enable+0x76>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "AS=0,%s\r",
 80098bc:	4a33      	ldr	r2, [pc, #204]	; (800998c <eswifi_mgmt_ap_enable+0x120>)
 80098be:	f505 7384 	add.w	r3, r5, #264	; 0x108
 80098c2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80098c6:	4638      	mov	r0, r7
 80098c8:	f004 ff56 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 80098cc:	4639      	mov	r1, r7
 80098ce:	4628      	mov	r0, r5
 80098d0:	f009 fcfd 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 80098d4:	1e04      	subs	r4, r0, #0
 80098d6:	da13      	bge.n	8009900 <eswifi_mgmt_ap_enable+0x94>
	eswifi_unlock(eswifi);
 80098d8:	4628      	mov	r0, r5
 80098da:	f009 fc9c 	bl	8013216 <eswifi_unlock>
	return err;
 80098de:	4626      	mov	r6, r4
 80098e0:	e04a      	b.n	8009978 <eswifi_mgmt_ap_enable+0x10c>
		snprintk(eswifi->buf, sizeof(eswifi->buf), "A2=%s\r",
 80098e2:	4a2b      	ldr	r2, [pc, #172]	; (8009990 <eswifi_mgmt_ap_enable+0x124>)
 80098e4:	f505 7395 	add.w	r3, r5, #298	; 0x12a
 80098e8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80098ec:	4638      	mov	r0, r7
 80098ee:	f004 ff43 	bl	800e778 <snprintk>
		err = eswifi_at_cmd(eswifi, eswifi->buf);
 80098f2:	4639      	mov	r1, r7
 80098f4:	4628      	mov	r0, r5
 80098f6:	f009 fcea 	bl	80132ce <eswifi_at_cmd>
		if (err < 0) {
 80098fa:	1e04      	subs	r4, r0, #0
 80098fc:	dade      	bge.n	80098bc <eswifi_mgmt_ap_enable+0x50>
 80098fe:	e7eb      	b.n	80098d8 <eswifi_mgmt_ap_enable+0x6c>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "AC=%u\r",
 8009900:	f895 316c 	ldrb.w	r3, [r5, #364]	; 0x16c
 8009904:	4a23      	ldr	r2, [pc, #140]	; (8009994 <eswifi_mgmt_ap_enable+0x128>)
 8009906:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800990a:	4638      	mov	r0, r7
 800990c:	f004 ff34 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 8009910:	4639      	mov	r1, r7
 8009912:	4628      	mov	r0, r5
 8009914:	f009 fcdb 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 8009918:	1e04      	subs	r4, r0, #0
 800991a:	dbdd      	blt.n	80098d8 <eswifi_mgmt_ap_enable+0x6c>
	for (i = 0; ipv4 && i < NET_IF_MAX_IPV4_ADDR; i++) {
 800991c:	f1b8 0f00 	cmp.w	r8, #0
 8009920:	d003      	beq.n	800992a <eswifi_mgmt_ap_enable+0xbe>
		if (ipv4->unicast[i].is_used) {
 8009922:	f898 3016 	ldrb.w	r3, [r8, #22]
 8009926:	079b      	lsls	r3, r3, #30
 8009928:	d402      	bmi.n	8009930 <eswifi_mgmt_ap_enable+0xc4>
		err = -EADDRNOTAVAIL;
 800992a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 800992e:	e7d3      	b.n	80098d8 <eswifi_mgmt_ap_enable+0x6c>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "Z6=%s\r",
 8009930:	f108 0104 	add.w	r1, r8, #4
 8009934:	2001      	movs	r0, #1
 8009936:	f7fb fad5 	bl	8004ee4 <net_sprint_addr>
 800993a:	4a17      	ldr	r2, [pc, #92]	; (8009998 <eswifi_mgmt_ap_enable+0x12c>)
 800993c:	4603      	mov	r3, r0
 800993e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8009942:	4638      	mov	r0, r7
 8009944:	f004 ff18 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 8009948:	4639      	mov	r1, r7
 800994a:	4628      	mov	r0, r5
 800994c:	f009 fcbf 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 8009950:	1e04      	subs	r4, r0, #0
 8009952:	dbc1      	blt.n	80098d8 <eswifi_mgmt_ap_enable+0x6c>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "AD\r");
 8009954:	4a11      	ldr	r2, [pc, #68]	; (800999c <eswifi_mgmt_ap_enable+0x130>)
 8009956:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800995a:	4638      	mov	r0, r7
 800995c:	f004 ff0c 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 8009960:	4639      	mov	r1, r7
 8009962:	4628      	mov	r0, r5
 8009964:	f009 fcb3 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 8009968:	1e04      	subs	r4, r0, #0
 800996a:	dbb5      	blt.n	80098d8 <eswifi_mgmt_ap_enable+0x6c>
	eswifi->role = ESWIFI_ROLE_AP;
 800996c:	2301      	movs	r3, #1
 800996e:	f885 316e 	strb.w	r3, [r5, #366]	; 0x16e
	eswifi_unlock(eswifi);
 8009972:	4628      	mov	r0, r5
 8009974:	f009 fc4f 	bl	8013216 <eswifi_unlock>
}
 8009978:	4630      	mov	r0, r6
 800997a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = -EALREADY;
 800997e:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8009982:	e7a9      	b.n	80098d8 <eswifi_mgmt_ap_enable+0x6c>
 8009984:	4604      	mov	r4, r0
 8009986:	e7a7      	b.n	80098d8 <eswifi_mgmt_ap_enable+0x6c>
 8009988:	08018da4 	.word	0x08018da4
 800998c:	08018dab 	.word	0x08018dab
 8009990:	08018db4 	.word	0x08018db4
 8009994:	08018dbb 	.word	0x08018dbb
 8009998:	08018dc2 	.word	0x08018dc2
 800999c:	08018dc9 	.word	0x08018dc9

080099a0 <eswifi_request_work>:
{
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (eswifi->req) {
 80099a4:	f890 5075 	ldrb.w	r5, [r0, #117]	; 0x75
 80099a8:	2d01      	cmp	r5, #1
{
 80099aa:	b091      	sub	sp, #68	; 0x44
 80099ac:	4604      	mov	r4, r0
	eswifi = CONTAINER_OF(item, struct eswifi_dev, request_work);
 80099ae:	f1a0 06f8 	sub.w	r6, r0, #248	; 0xf8
	switch (eswifi->req) {
 80099b2:	d01f      	beq.n	80099f4 <eswifi_request_work+0x54>
 80099b4:	2d02      	cmp	r5, #2
 80099b6:	f000 809c 	beq.w	8009af2 <eswifi_request_work+0x152>
 80099ba:	b9c5      	cbnz	r5, 80099ee <eswifi_request_work+0x4e>
	char cmd[] = "F0\r";
 80099bc:	4b91      	ldr	r3, [pc, #580]	; (8009c04 <eswifi_request_work+0x264>)
 80099be:	9303      	str	r3, [sp, #12]
	eswifi_lock(eswifi);
 80099c0:	4630      	mov	r0, r6
 80099c2:	f7ff fdf1 	bl	80095a8 <eswifi_lock>
	ret = eswifi_at_cmd_rsp(eswifi, cmd, &data);
 80099c6:	aa04      	add	r2, sp, #16
 80099c8:	a903      	add	r1, sp, #12
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff fe68 	bl	80096a0 <eswifi_at_cmd_rsp>
	if (ret < 0) {
 80099d0:	f1b0 0800 	subs.w	r8, r0, #0
 80099d4:	f280 8110 	bge.w	8009bf8 <eswifi_request_work+0x258>
		eswifi->scan_cb(eswifi->iface, -EIO, NULL);
 80099d8:	f854 3ce0 	ldr.w	r3, [r4, #-224]
 80099dc:	462a      	mov	r2, r5
 80099de:	f06f 0104 	mvn.w	r1, #4
	eswifi->scan_cb(eswifi->iface, 0, NULL);
 80099e2:	f854 0cf8 	ldr.w	r0, [r4, #-248]
 80099e6:	4798      	blx	r3
	eswifi_unlock(eswifi);
 80099e8:	4630      	mov	r0, r6
 80099ea:	f009 fc14 	bl	8013216 <eswifi_unlock>
}
 80099ee:	b011      	add	sp, #68	; 0x44
 80099f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char connect[] = "C0\r";
 80099f4:	4b84      	ldr	r3, [pc, #528]	; (8009c08 <eswifi_request_work+0x268>)
 80099f6:	9303      	str	r3, [sp, #12]
	eswifi_lock(eswifi);
 80099f8:	4630      	mov	r0, r6
	snprintk(eswifi->buf, sizeof(eswifi->buf), "C1=%s\r", eswifi->sta.ssid);
 80099fa:	f104 057d 	add.w	r5, r4, #125	; 0x7d
 80099fe:	f104 0810 	add.w	r8, r4, #16
	eswifi_lock(eswifi);
 8009a02:	f7ff fdd1 	bl	80095a8 <eswifi_lock>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "C1=%s\r", eswifi->sta.ssid);
 8009a06:	4a81      	ldr	r2, [pc, #516]	; (8009c0c <eswifi_request_work+0x26c>)
 8009a08:	4643      	mov	r3, r8
 8009a0a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f004 feb2 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 8009a14:	4629      	mov	r1, r5
 8009a16:	4630      	mov	r0, r6
 8009a18:	f009 fc59 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	db62      	blt.n	8009ae6 <eswifi_request_work+0x146>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "C2=%s\r", eswifi->sta.pass);
 8009a20:	4a7b      	ldr	r2, [pc, #492]	; (8009c10 <eswifi_request_work+0x270>)
 8009a22:	f104 0332 	add.w	r3, r4, #50	; 0x32
 8009a26:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f004 fea4 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 8009a30:	4629      	mov	r1, r5
 8009a32:	4630      	mov	r0, r6
 8009a34:	f009 fc4b 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	db54      	blt.n	8009ae6 <eswifi_request_work+0x146>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "C3=%u\r",
 8009a3c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8009a40:	4a74      	ldr	r2, [pc, #464]	; (8009c14 <eswifi_request_work+0x274>)
 8009a42:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8009a46:	4628      	mov	r0, r5
 8009a48:	f004 fe96 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f009 fc3d 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 8009a54:	2800      	cmp	r0, #0
 8009a56:	db46      	blt.n	8009ae6 <eswifi_request_work+0x146>
	err = eswifi_at_cmd_rsp(eswifi, connect, &rsp);
 8009a58:	aa05      	add	r2, sp, #20
 8009a5a:	a903      	add	r1, sp, #12
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7ff fe1f 	bl	80096a0 <eswifi_at_cmd_rsp>
	if (err < 0) {
 8009a62:	2800      	cmp	r0, #0
 8009a64:	db3f      	blt.n	8009ae6 <eswifi_request_work+0x146>
	err = __parse_ipv4_address(rsp, eswifi->sta.ssid,
 8009a66:	9d05      	ldr	r5, [sp, #20]
	int byte = -1;
 8009a68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	while (*str && byte < 4) {
 8009a6c:	782b      	ldrb	r3, [r5, #0]
 8009a6e:	b10b      	cbz	r3, 8009a74 <eswifi_request_work+0xd4>
 8009a70:	2f03      	cmp	r7, #3
 8009a72:	dd11      	ble.n	8009a98 <eswifi_request_work+0xf8>
	net_if_ipv4_addr_add(eswifi->iface, &addr, NET_ADDR_DHCP, 0);
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	2300      	movs	r3, #0
 8009a78:	2202      	movs	r2, #2
 8009a7a:	f854 0cf8 	ldr.w	r0, [r4, #-248]
 8009a7e:	f7fa ff51 	bl	8004924 <net_if_ipv4_addr_add>
	eswifi_unlock(eswifi);
 8009a82:	4630      	mov	r0, r6
 8009a84:	f009 fbc7 	bl	8013216 <eswifi_unlock>
	return 0;
 8009a88:	2100      	movs	r1, #0
		wifi_mgmt_raise_connect_result_event(eswifi->iface, err);
 8009a8a:	f854 0cf8 	ldr.w	r0, [r4, #-248]
}
 8009a8e:	b011      	add	sp, #68	; 0x44
 8009a90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		wifi_mgmt_raise_connect_result_event(eswifi->iface, err);
 8009a94:	f7fa bb1a 	b.w	80040cc <wifi_mgmt_raise_connect_result_event>
		if (byte == -1) {
 8009a98:	1c7b      	adds	r3, r7, #1
 8009a9a:	d112      	bne.n	8009ac2 <eswifi_request_work+0x122>
			if (!strncmp(str, ssid, strlen(ssid))) {
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	f7f6 fd3e 	bl	800051e <strlen>
 8009aa2:	4641      	mov	r1, r8
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f00a fee6 	bl	8014878 <strncmp>
 8009aac:	4681      	mov	r9, r0
 8009aae:	b920      	cbnz	r0, 8009aba <eswifi_request_work+0x11a>
				str += strlen(ssid);
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	f7f6 fd34 	bl	800051e <strlen>
				byte = 0;
 8009ab6:	464f      	mov	r7, r9
				str += strlen(ssid);
 8009ab8:	4405      	add	r5, r0
			str++;
 8009aba:	3501      	adds	r5, #1
			continue;
 8009abc:	463a      	mov	r2, r7
 8009abe:	4617      	mov	r7, r2
 8009ac0:	e7d4      	b.n	8009a6c <eswifi_request_work+0xcc>
		ip[byte++] = atoi(str);
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f00a fe5e 	bl	8014784 <atoi>
 8009ac8:	ab10      	add	r3, sp, #64	; 0x40
 8009aca:	1c7a      	adds	r2, r7, #1
 8009acc:	441f      	add	r7, r3
 8009ace:	462b      	mov	r3, r5
 8009ad0:	f807 0c30 	strb.w	r0, [r7, #-48]
		while (*str && (*str++ != '.')) {
 8009ad4:	461d      	mov	r5, r3
 8009ad6:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009ada:	2900      	cmp	r1, #0
 8009adc:	d0ef      	beq.n	8009abe <eswifi_request_work+0x11e>
 8009ade:	292e      	cmp	r1, #46	; 0x2e
 8009ae0:	461d      	mov	r5, r3
 8009ae2:	d1f7      	bne.n	8009ad4 <eswifi_request_work+0x134>
 8009ae4:	e7eb      	b.n	8009abe <eswifi_request_work+0x11e>
	eswifi_unlock(eswifi);
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f009 fb95 	bl	8013216 <eswifi_unlock>
	return -EIO;
 8009aec:	f06f 0104 	mvn.w	r1, #4
 8009af0:	e7cb      	b.n	8009a8a <eswifi_request_work+0xea>
	char disconnect[] = "CD\r";
 8009af2:	4b49      	ldr	r3, [pc, #292]	; (8009c18 <eswifi_request_work+0x278>)
 8009af4:	9305      	str	r3, [sp, #20]
	eswifi_lock(eswifi);
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7ff fd56 	bl	80095a8 <eswifi_lock>
	err = eswifi_at_cmd(eswifi, disconnect);
 8009afc:	a905      	add	r1, sp, #20
 8009afe:	4630      	mov	r0, r6
 8009b00:	f009 fbe5 	bl	80132ce <eswifi_at_cmd>
		err = -EIO;
 8009b04:	1e05      	subs	r5, r0, #0
	eswifi_unlock(eswifi);
 8009b06:	4630      	mov	r0, r6
		err = -EIO;
 8009b08:	bfb8      	it	lt
 8009b0a:	f06f 0504 	mvnlt.w	r5, #4
	eswifi_unlock(eswifi);
 8009b0e:	f009 fb82 	bl	8013216 <eswifi_unlock>
		wifi_mgmt_raise_disconnect_result_event(eswifi->iface, err);
 8009b12:	f854 0cf8 	ldr.w	r0, [r4, #-248]
 8009b16:	4629      	mov	r1, r5
}
 8009b18:	b011      	add	sp, #68	; 0x44
 8009b1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		wifi_mgmt_raise_disconnect_result_event(eswifi->iface, err);
 8009b1e:	f7fa bae3 	b.w	80040e8 <wifi_mgmt_raise_disconnect_result_event>
		if (data[i] == '#') {
 8009b22:	9a04      	ldr	r2, [sp, #16]
 8009b24:	1953      	adds	r3, r2, r5
 8009b26:	5d52      	ldrb	r2, [r2, r5]
 8009b28:	2a23      	cmp	r2, #35	; 0x23
 8009b2a:	d11b      	bne.n	8009b64 <eswifi_request_work+0x1c4>
			struct wifi_scan_result res = {0};
 8009b2c:	222b      	movs	r2, #43	; 0x2b
 8009b2e:	2100      	movs	r1, #0
 8009b30:	a805      	add	r0, sp, #20
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	f00a fe75 	bl	8014822 <memset>
	while (*str) {
 8009b38:	9b01      	ldr	r3, [sp, #4]
	int field = 0;
 8009b3a:	f04f 0b00 	mov.w	fp, #0
	while (*str) {
 8009b3e:	781a      	ldrb	r2, [r3, #0]
 8009b40:	b9c2      	cbnz	r2, 8009b74 <eswifi_request_work+0x1d4>
			eswifi->scan_cb(eswifi->iface, 0, &res);
 8009b42:	f854 3ce0 	ldr.w	r3, [r4, #-224]
 8009b46:	f854 0cf8 	ldr.w	r0, [r4, #-248]
 8009b4a:	aa05      	add	r2, sp, #20
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	4798      	blx	r3
	z_impl_k_yield();
 8009b50:	f003 f95a 	bl	800ce08 <z_impl_k_yield>
			while (data[i] && data[i] != '\n') {
 8009b54:	9904      	ldr	r1, [sp, #16]
 8009b56:	5d4b      	ldrb	r3, [r1, r5]
 8009b58:	462a      	mov	r2, r5
				i++;
 8009b5a:	3501      	adds	r5, #1
			while (data[i] && data[i] != '\n') {
 8009b5c:	b10b      	cbz	r3, 8009b62 <eswifi_request_work+0x1c2>
 8009b5e:	2b0a      	cmp	r3, #10
 8009b60:	d1f9      	bne.n	8009b56 <eswifi_request_work+0x1b6>
 8009b62:	4615      	mov	r5, r2
	for (i = 0; i < ret; i++) {
 8009b64:	3501      	adds	r5, #1
 8009b66:	45a8      	cmp	r8, r5
 8009b68:	dcdb      	bgt.n	8009b22 <eswifi_request_work+0x182>
	eswifi->scan_cb(eswifi->iface, 0, NULL);
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f854 3ce0 	ldr.w	r3, [r4, #-224]
 8009b70:	4611      	mov	r1, r2
 8009b72:	e736      	b.n	80099e2 <eswifi_request_work+0x42>
		if (*str != ',') {
 8009b74:	2a2c      	cmp	r2, #44	; 0x2c
			str++;
 8009b76:	f103 0701 	add.w	r7, r3, #1
		if (*str != ',') {
 8009b7a:	d114      	bne.n	8009ba6 <eswifi_request_work+0x206>
		if (!*++str) {
 8009b7c:	785b      	ldrb	r3, [r3, #1]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0df      	beq.n	8009b42 <eswifi_request_work+0x1a2>
		switch (++field) {
 8009b82:	f10b 0b01 	add.w	fp, fp, #1
 8009b86:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009b8a:	2a07      	cmp	r2, #7
 8009b8c:	d80b      	bhi.n	8009ba6 <eswifi_request_work+0x206>
 8009b8e:	e8df f002 	tbb	[pc, r2]
 8009b92:	0a04      	.short	0x0a04
 8009b94:	210a0a1b 	.word	0x210a0a1b
 8009b98:	2d0a      	.short	0x2d0a
	if (*str != '"') {
 8009b9a:	2b22      	cmp	r3, #34	; 0x22
 8009b9c:	d005      	beq.n	8009baa <eswifi_request_work+0x20a>
		return 0;
 8009b9e:	2300      	movs	r3, #0
			res->ssid_length = __parse_ssid(str, res->ssid);
 8009ba0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			str += res->ssid_length;
 8009ba4:	441f      	add	r7, r3
		return 0;
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	e7c9      	b.n	8009b3e <eswifi_request_work+0x19e>
	while (*str && (*str != '"') && i < WIFI_SSID_MAX_LEN) {
 8009baa:	4639      	mov	r1, r7
 8009bac:	a805      	add	r0, sp, #20
	int i = 0;
 8009bae:	2300      	movs	r3, #0
	while (*str && (*str != '"') && i < WIFI_SSID_MAX_LEN) {
 8009bb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009bb4:	2a00      	cmp	r2, #0
 8009bb6:	d0f2      	beq.n	8009b9e <eswifi_request_work+0x1fe>
 8009bb8:	2a22      	cmp	r2, #34	; 0x22
 8009bba:	d0f1      	beq.n	8009ba0 <eswifi_request_work+0x200>
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d0ee      	beq.n	8009b9e <eswifi_request_work+0x1fe>
		ssid[i++] = *str++;
 8009bc0:	f800 2b01 	strb.w	r2, [r0], #1
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	e7f3      	b.n	8009bb0 <eswifi_request_work+0x210>
			res->rssi = atoi(str);
 8009bc8:	4638      	mov	r0, r7
 8009bca:	f00a fddb 	bl	8014784 <atoi>
 8009bce:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
			break;
 8009bd2:	e7e8      	b.n	8009ba6 <eswifi_request_work+0x206>
			if (!strncmp(str, "Open", 4)) {
 8009bd4:	2204      	movs	r2, #4
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f00a fe4d 	bl	8014878 <strncmp>
				res->security = WIFI_SECURITY_TYPE_NONE;
 8009bde:	2800      	cmp	r0, #0
			if (!strncmp(str, "Open", 4)) {
 8009be0:	4603      	mov	r3, r0
				res->security = WIFI_SECURITY_TYPE_NONE;
 8009be2:	bf18      	it	ne
 8009be4:	4653      	movne	r3, sl
 8009be6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 8009bea:	e7dc      	b.n	8009ba6 <eswifi_request_work+0x206>
			res->channel = atoi(str);
 8009bec:	4638      	mov	r0, r7
 8009bee:	f00a fdc9 	bl	8014784 <atoi>
 8009bf2:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
			break;
 8009bf6:	e7d6      	b.n	8009ba6 <eswifi_request_work+0x206>
			if (!strncmp(str, "Open", 4)) {
 8009bf8:	f8df 9020 	ldr.w	r9, [pc, #32]	; 8009c1c <eswifi_request_work+0x27c>
				res->security = WIFI_SECURITY_TYPE_PSK;
 8009bfc:	f04f 0a01 	mov.w	sl, #1
 8009c00:	e7b1      	b.n	8009b66 <eswifi_request_work+0x1c6>
 8009c02:	bf00      	nop
 8009c04:	000d3046 	.word	0x000d3046
 8009c08:	000d3043 	.word	0x000d3043
 8009c0c:	08018dcd 	.word	0x08018dcd
 8009c10:	08018dd4 	.word	0x08018dd4
 8009c14:	08018ddb 	.word	0x08018ddb
 8009c18:	000d4443 	.word	0x000d4443
 8009c1c:	08018de2 	.word	0x08018de2

08009c20 <eswifi_by_iface_idx>:
}
 8009c20:	4800      	ldr	r0, [pc, #0]	; (8009c24 <eswifi_by_iface_idx+0x4>)
 8009c22:	4770      	bx	lr
 8009c24:	20000d10 	.word	0x20000d10

08009c28 <eswifi_lock>:
{
 8009c28:	b570      	push	{r4, r5, r6, lr}
	if (atomic_get(&eswifi->mutex_owner) != (atomic_t)(uintptr_t)_current) {
 8009c2a:	4e14      	ldr	r6, [pc, #80]	; (8009c7c <eswifi_lock+0x54>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8009c2c:	f3bf 8f5b 	dmb	ish
 8009c30:	f8d0 37cc 	ldr.w	r3, [r0, #1996]	; 0x7cc
 8009c34:	f3bf 8f5b 	dmb	ish
 8009c38:	68b2      	ldr	r2, [r6, #8]
 8009c3a:	429a      	cmp	r2, r3
{
 8009c3c:	4604      	mov	r4, r0
	if (atomic_get(&eswifi->mutex_owner) != (atomic_t)(uintptr_t)_current) {
 8009c3e:	f200 75cc 	addw	r5, r0, #1996	; 0x7cc
 8009c42:	d016      	beq.n	8009c72 <eswifi_lock+0x4a>
	return z_impl_k_mutex_lock(mutex, timeout);
 8009c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c4c:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8009c50:	f002 fbb6 	bl	800c3c0 <z_impl_k_mutex_lock>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8009c54:	68b3      	ldr	r3, [r6, #8]
 8009c56:	f3bf 8f5b 	dmb	ish
 8009c5a:	e855 2f00 	ldrex	r2, [r5]
 8009c5e:	e845 3100 	strex	r1, r3, [r5]
 8009c62:	2900      	cmp	r1, #0
 8009c64:	d1f9      	bne.n	8009c5a <eswifi_lock+0x32>
 8009c66:	f3bf 8f5b 	dmb	ish
		eswifi->mutex_depth = 1;
 8009c6a:	2301      	movs	r3, #1
		eswifi->mutex_depth++;
 8009c6c:	f8c4 37d0 	str.w	r3, [r4, #2000]	; 0x7d0
}
 8009c70:	bd70      	pop	{r4, r5, r6, pc}
		eswifi->mutex_depth++;
 8009c72:	f8d0 37d0 	ldr.w	r3, [r0, #2000]	; 0x7d0
 8009c76:	3301      	adds	r3, #1
 8009c78:	e7f8      	b.n	8009c6c <eswifi_lock+0x44>
 8009c7a:	bf00      	nop
 8009c7c:	20002524 	.word	0x20002524

08009c80 <eswifi_off_connect_work>:

	return err;
}

static void eswifi_off_connect_work(struct k_work *work)
{
 8009c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}

static inline
struct eswifi_dev *eswifi_socket_to_dev(struct eswifi_off_socket *socket)
{
	return CONTAINER_OF(socket - socket->index, struct eswifi_dev, socket);
 8009c84:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
 8009c88:	4b1a      	ldr	r3, [pc, #104]	; (8009cf4 <eswifi_off_connect_work+0x74>)
 8009c8a:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
	struct net_context *context;
	struct eswifi_dev *eswifi;
	void *user_data;
	int err;

	socket = CONTAINER_OF(work, struct eswifi_off_socket, connect_work);
 8009c8e:	f1a0 092c 	sub.w	r9, r0, #44	; 0x2c
 8009c92:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8009c96:	444d      	add	r5, r9
{
 8009c98:	4604      	mov	r4, r0
	eswifi = eswifi_socket_to_dev(socket);

	eswifi_lock(eswifi);
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7ff ffc4 	bl	8009c28 <eswifi_lock>

	cb = socket->conn_cb;
	context = socket->context;
	user_data = socket->conn_data;

	err = __eswifi_off_start_client(eswifi, socket);
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	4628      	mov	r0, r5
	cb = socket->conn_cb;
 8009ca4:	f854 6c20 	ldr.w	r6, [r4, #-32]
	context = socket->context;
 8009ca8:	f854 7c28 	ldr.w	r7, [r4, #-40]
	user_data = socket->conn_data;
 8009cac:	f854 8c10 	ldr.w	r8, [r4, #-16]
	err = __eswifi_off_start_client(eswifi, socket);
 8009cb0:	f000 fafa 	bl	800a2a8 <__eswifi_off_start_client>
	if (!err) {
 8009cb4:	4681      	mov	r9, r0
 8009cb6:	b9b8      	cbnz	r0, 8009ce8 <eswifi_off_connect_work+0x68>
		socket->state = ESWIFI_SOCKET_STATE_CONNECTED;
		net_context_set_state(socket->context, NET_CONTEXT_CONNECTED);
 8009cb8:	f854 2c28 	ldr.w	r2, [r4, #-40]
		socket->state = ESWIFI_SOCKET_STATE_CONNECTED;
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	f804 3c2a 	strb.w	r3, [r4, #-42]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 8009cc2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8009cc6:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 8009cca:	f043 0304 	orr.w	r3, r3, #4
 8009cce:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	} else {
		socket->state = ESWIFI_SOCKET_STATE_NONE;
	}

	eswifi_unlock(eswifi);
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f009 fb00 	bl	80132d8 <eswifi_unlock>

	if (cb) {
 8009cd8:	b156      	cbz	r6, 8009cf0 <eswifi_off_connect_work+0x70>
		cb(context, err, user_data);
 8009cda:	4642      	mov	r2, r8
 8009cdc:	4649      	mov	r1, r9
 8009cde:	4638      	mov	r0, r7
 8009ce0:	4633      	mov	r3, r6
	}
}
 8009ce2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		cb(context, err, user_data);
 8009ce6:	4718      	bx	r3
		socket->state = ESWIFI_SOCKET_STATE_NONE;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	f804 3c2a 	strb.w	r3, [r4, #-42]
 8009cee:	e7f0      	b.n	8009cd2 <eswifi_off_connect_work+0x52>
}
 8009cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf4:	fffff828 	.word	0xfffff828

08009cf8 <eswifi_off_listen>:
{
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct eswifi_off_socket *socket = context->offload_context;
 8009cfa:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 8009cfe:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
{
 8009d02:	460e      	mov	r6, r1
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 8009d04:	f7ff ff8c 	bl	8009c20 <eswifi_by_iface_idx>
 8009d08:	4605      	mov	r5, r0
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P0=%d\r", idx);
 8009d0a:	f205 1475 	addw	r4, r5, #373	; 0x175
	eswifi_lock(eswifi);
 8009d0e:	f7ff ff8b 	bl	8009c28 <eswifi_lock>
 8009d12:	783b      	ldrb	r3, [r7, #0]
 8009d14:	4a10      	ldr	r2, [pc, #64]	; (8009d58 <eswifi_off_listen+0x60>)
 8009d16:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f004 fd2c 	bl	800e778 <snprintk>
	return eswifi_at_cmd(eswifi, eswifi->buf);
 8009d20:	4621      	mov	r1, r4
 8009d22:	4628      	mov	r0, r5
 8009d24:	f009 fad3 	bl	80132ce <eswifi_at_cmd>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P8=%d\r", backlog);
 8009d28:	4a0c      	ldr	r2, [pc, #48]	; (8009d5c <eswifi_off_listen+0x64>)
 8009d2a:	4633      	mov	r3, r6
 8009d2c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8009d30:	4620      	mov	r0, r4
 8009d32:	f004 fd21 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 8009d36:	4621      	mov	r1, r4
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f009 fac8 	bl	80132ce <eswifi_at_cmd>
	socket->is_server = true;
 8009d3e:	2301      	movs	r3, #1
		err = -EIO;
 8009d40:	1e04      	subs	r4, r0, #0
 8009d42:	bfb8      	it	lt
 8009d44:	f06f 0404 	mvnlt.w	r4, #4
	eswifi_unlock(eswifi);
 8009d48:	4628      	mov	r0, r5
	socket->is_server = true;
 8009d4a:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
	eswifi_unlock(eswifi);
 8009d4e:	f009 fac3 	bl	80132d8 <eswifi_unlock>
}
 8009d52:	4620      	mov	r0, r4
 8009d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d56:	bf00      	nop
 8009d58:	08018def 	.word	0x08018def
 8009d5c:	08018df6 	.word	0x08018df6

08009d60 <eswifi_off_get>:

static int eswifi_off_get(sa_family_t family,
			  enum net_sock_type type,
			  enum net_ip_protocol ip_proto,
			  struct net_context **context)
{
 8009d60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d64:	461f      	mov	r7, r3
	struct eswifi_dev *eswifi = eswifi_by_iface_idx((*context)->iface);
 8009d66:	681b      	ldr	r3, [r3, #0]
{
 8009d68:	4605      	mov	r5, r0
	struct eswifi_dev *eswifi = eswifi_by_iface_idx((*context)->iface);
 8009d6a:	f893 0088 	ldrb.w	r0, [r3, #136]	; 0x88
{
 8009d6e:	460e      	mov	r6, r1
 8009d70:	4690      	mov	r8, r2
	struct eswifi_dev *eswifi = eswifi_by_iface_idx((*context)->iface);
 8009d72:	f7ff ff55 	bl	8009c20 <eswifi_by_iface_idx>
 8009d76:	4604      	mov	r4, r0
	struct eswifi_off_socket *socket = NULL;
	int idx;

	LOG_DBG("");

	eswifi_lock(eswifi);
 8009d78:	f7ff ff56 	bl	8009c28 <eswifi_lock>

	idx = __eswifi_socket_new(eswifi, family, type, ip_proto, *context);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	4632      	mov	r2, r6
 8009d82:	4643      	mov	r3, r8
 8009d84:	4629      	mov	r1, r5
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 fb0e 	bl	800a3a8 <__eswifi_socket_new>
	if (idx < 0) {
 8009d8c:	1e06      	subs	r6, r0, #0
 8009d8e:	db2b      	blt.n	8009de8 <eswifi_off_get+0x88>
		goto unlock;
	}

	socket = &eswifi->socket[idx];
 8009d90:	25e0      	movs	r5, #224	; 0xe0
 8009d92:	4375      	muls	r5, r6
	(*context)->offload_context = socket;
 8009d94:	683a      	ldr	r2, [r7, #0]

	LOG_DBG("Socket index %d", socket->index);

	k_work_init(&socket->connect_work, eswifi_off_connect_work);
 8009d96:	4918      	ldr	r1, [pc, #96]	; (8009df8 <eswifi_off_get+0x98>)
	socket = &eswifi->socket[idx];
 8009d98:	f505 63fb 	add.w	r3, r5, #2008	; 0x7d8
 8009d9c:	4423      	add	r3, r4
	k_work_init(&socket->connect_work, eswifi_off_connect_work);
 8009d9e:	f605 0004 	addw	r0, r5, #2052	; 0x804
	(*context)->offload_context = socket;
 8009da2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	k_work_init(&socket->connect_work, eswifi_off_connect_work);
 8009da6:	4420      	add	r0, r4
 8009da8:	f00a f9d2 	bl	8014150 <k_work_init>
	k_work_init(&socket->send_work, eswifi_off_send_work);
 8009dac:	f605 0014 	addw	r0, r5, #2068	; 0x814
 8009db0:	4912      	ldr	r1, [pc, #72]	; (8009dfc <eswifi_off_get+0x9c>)
 8009db2:	4420      	add	r0, r4
 8009db4:	f00a f9cc 	bl	8014150 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8009db8:	2201      	movs	r2, #1
	k_sem_init(&socket->read_sem, 1, 1);
 8009dba:	f505 6006 	add.w	r0, r5, #2144	; 0x860
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4420      	add	r0, r4
 8009dc2:	f00a f945 	bl	8014050 <z_impl_k_sem_init>
 8009dc6:	2201      	movs	r2, #1
	k_sem_init(&socket->accept_sem, 1, 1);
 8009dc8:	f605 0078 	addw	r0, r5, #2168	; 0x878
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4420      	add	r0, r4
 8009dd0:	f00a f93e 	bl	8014050 <z_impl_k_sem_init>

	k_work_reschedule_for_queue(&eswifi->work_q, &socket->read_work,
 8009dd4:	f605 0128 	addw	r1, r5, #2088	; 0x828
 8009dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4421      	add	r1, r4
 8009de0:	f104 0020 	add.w	r0, r4, #32
 8009de4:	f002 fd96 	bl	800c914 <k_work_reschedule_for_queue>
				    K_MSEC(500));

unlock:
	eswifi_unlock(eswifi);
 8009de8:	4620      	mov	r0, r4
 8009dea:	f009 fa75 	bl	80132d8 <eswifi_unlock>
	return idx;
}
 8009dee:	4630      	mov	r0, r6
 8009df0:	b002      	add	sp, #8
 8009df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df6:	bf00      	nop
 8009df8:	08009c81 	.word	0x08009c81
 8009dfc:	08009ea9 	.word	0x08009ea9

08009e00 <__eswifi_off_send_pkt>:
{
 8009e00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct net_pkt *pkt = socket->tx_pkt;
 8009e04:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
{
 8009e08:	4605      	mov	r5, r0
	if (!pkt) {
 8009e0a:	f1b9 0f00 	cmp.w	r9, #0
 8009e0e:	d03e      	beq.n	8009e8e <__eswifi_off_send_pkt+0x8e>
	bytes = net_pkt_get_len(pkt);
 8009e10:	f8d9 3008 	ldr.w	r3, [r9, #8]
	size_t bytes = 0;
 8009e14:	f04f 0800 	mov.w	r8, #0
	while (buf) {
 8009e18:	bbab      	cbnz	r3, 8009e86 <__eswifi_off_send_pkt+0x86>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P0=%d\r", idx);
 8009e1a:	f205 1775 	addw	r7, r5, #373	; 0x175
 8009e1e:	780b      	ldrb	r3, [r1, #0]
 8009e20:	4a1f      	ldr	r2, [pc, #124]	; (8009ea0 <__eswifi_off_send_pkt+0xa0>)
 8009e22:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8009e26:	4638      	mov	r0, r7
 8009e28:	f004 fca6 	bl	800e778 <snprintk>
	return eswifi_at_cmd(eswifi, eswifi->buf);
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f009 fa4d 	bl	80132ce <eswifi_at_cmd>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "S3=%u\r", bytes);
 8009e34:	4a1b      	ldr	r2, [pc, #108]	; (8009ea4 <__eswifi_off_send_pkt+0xa4>)
 8009e36:	4643      	mov	r3, r8
 8009e38:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f004 fc9b 	bl	800e778 <snprintk>
	offset = strlen(eswifi->buf);
 8009e42:	4638      	mov	r0, r7
 8009e44:	f7f6 fb6b 	bl	800051e <strlen>
	if (net_pkt_read(pkt, &eswifi->buf[offset], bytes)) {
 8009e48:	f200 1175 	addw	r1, r0, #373	; 0x175
	offset = strlen(eswifi->buf);
 8009e4c:	4606      	mov	r6, r0
	if (net_pkt_read(pkt, &eswifi->buf[offset], bytes)) {
 8009e4e:	4642      	mov	r2, r8
 8009e50:	4429      	add	r1, r5
 8009e52:	4648      	mov	r0, r9
 8009e54:	f007 feb9 	bl	8011bca <net_pkt_read>
 8009e58:	4604      	mov	r4, r0
 8009e5a:	b9d8      	cbnz	r0, 8009e94 <__eswifi_off_send_pkt+0x94>
	return eswifi->bus->request(eswifi, cmd, clen, rsp, rlen);
 8009e5c:	686b      	ldr	r3, [r5, #4]
 8009e5e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8009e62:	9100      	str	r1, [sp, #0]
	offset += bytes;
 8009e64:	eb06 0208 	add.w	r2, r6, r8
 8009e68:	3201      	adds	r2, #1
 8009e6a:	685e      	ldr	r6, [r3, #4]
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	463b      	mov	r3, r7
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b0      	blx	r6
	if (err < 0) {
 8009e74:	2800      	cmp	r0, #0
 8009e76:	db10      	blt.n	8009e9a <__eswifi_off_send_pkt+0x9a>
	net_pkt_unref(pkt);
 8009e78:	4648      	mov	r0, r9
 8009e7a:	f007 fdbb 	bl	80119f4 <net_pkt_unref>
}
 8009e7e:	4620      	mov	r0, r4
 8009e80:	b003      	add	sp, #12
 8009e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes += buf->len;
 8009e86:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 8009e88:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 8009e8a:	4490      	add	r8, r2
		buf = buf->frags;
 8009e8c:	e7c4      	b.n	8009e18 <__eswifi_off_send_pkt+0x18>
		return -EINVAL;
 8009e8e:	f06f 0415 	mvn.w	r4, #21
 8009e92:	e7f4      	b.n	8009e7e <__eswifi_off_send_pkt+0x7e>
		return -ENOBUFS;
 8009e94:	f06f 0468 	mvn.w	r4, #104	; 0x68
 8009e98:	e7f1      	b.n	8009e7e <__eswifi_off_send_pkt+0x7e>
		return -EIO;
 8009e9a:	f06f 0404 	mvn.w	r4, #4
 8009e9e:	e7ee      	b.n	8009e7e <__eswifi_off_send_pkt+0x7e>
 8009ea0:	08018def 	.word	0x08018def
 8009ea4:	08018dfd 	.word	0x08018dfd

08009ea8 <eswifi_off_send_work>:
{
 8009ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return CONTAINER_OF(socket - socket->index, struct eswifi_dev, socket);
 8009eac:	f810 5c3c 	ldrb.w	r5, [r0, #-60]
 8009eb0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8009eb4:	4d12      	ldr	r5, [pc, #72]	; (8009f00 <eswifi_off_send_work+0x58>)
	socket = CONTAINER_OF(work, struct eswifi_off_socket, send_work);
 8009eb6:	f1a0 063c 	sub.w	r6, r0, #60	; 0x3c
 8009eba:	eba5 1543 	sub.w	r5, r5, r3, lsl #5
 8009ebe:	4435      	add	r5, r6
{
 8009ec0:	4604      	mov	r4, r0
	eswifi_lock(eswifi);
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f7ff feb0 	bl	8009c28 <eswifi_lock>
	err = __eswifi_off_send_pkt(eswifi, socket);
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4628      	mov	r0, r5
	cb = socket->send_cb;
 8009ecc:	f854 7c2c 	ldr.w	r7, [r4, #-44]
	user_data = socket->send_data;
 8009ed0:	f854 9c1c 	ldr.w	r9, [r4, #-28]
	context = socket->context;
 8009ed4:	f854 8c38 	ldr.w	r8, [r4, #-56]
	err = __eswifi_off_send_pkt(eswifi, socket);
 8009ed8:	f7ff ff92 	bl	8009e00 <__eswifi_off_send_pkt>
	socket->tx_pkt = NULL;
 8009edc:	2300      	movs	r3, #0
	err = __eswifi_off_send_pkt(eswifi, socket);
 8009ede:	4606      	mov	r6, r0
	socket->tx_pkt = NULL;
 8009ee0:	f844 3c14 	str.w	r3, [r4, #-20]
	eswifi_unlock(eswifi);
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f009 f9f7 	bl	80132d8 <eswifi_unlock>
	if (cb) {
 8009eea:	b137      	cbz	r7, 8009efa <eswifi_off_send_work+0x52>
		cb(context, err, user_data);
 8009eec:	464a      	mov	r2, r9
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	463b      	mov	r3, r7
}
 8009ef4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		cb(context, err, user_data);
 8009ef8:	4718      	bx	r3
}
 8009efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efe:	bf00      	nop
 8009f00:	fffff828 	.word	0xfffff828

08009f04 <eswifi_offload_async_msg>:

void eswifi_offload_async_msg(struct eswifi_dev *eswifi, char *msg, size_t len)
{
 8009f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f06:	460c      	mov	r4, r1
 8009f08:	b085      	sub	sp, #20
	static const char msg_tcp_accept[] = "[TCP SVR] Accepted ";

	if (!strncmp(msg, msg_tcp_accept, sizeof(msg_tcp_accept) - 1)) {
 8009f0a:	4938      	ldr	r1, [pc, #224]	; (8009fec <eswifi_offload_async_msg+0xe8>)
{
 8009f0c:	4605      	mov	r5, r0
	if (!strncmp(msg, msg_tcp_accept, sizeof(msg_tcp_accept) - 1)) {
 8009f0e:	2213      	movs	r2, #19
 8009f10:	4620      	mov	r0, r4
 8009f12:	f00a fcb1 	bl	8014878 <strncmp>
 8009f16:	4606      	mov	r6, r0
 8009f18:	bb68      	cbnz	r0, 8009f76 <eswifi_offload_async_msg+0x72>
		char *str;
		int i = 0;

		/* extract client ip/port e.g. 192.168.1.1:8080 */
		/* TODO: use net_ipaddr_parse */
		str = msg + sizeof(msg_tcp_accept) - 1;
 8009f1a:	3413      	adds	r4, #19
		int i = 0;
 8009f1c:	4607      	mov	r7, r0
		while (*str) {
 8009f1e:	7823      	ldrb	r3, [r4, #0]
 8009f20:	b1c3      	cbz	r3, 8009f54 <eswifi_offload_async_msg+0x50>
			if (i < 4) {
 8009f22:	2f03      	cmp	r7, #3
 8009f24:	dc10      	bgt.n	8009f48 <eswifi_offload_async_msg+0x44>
				ip[i++] = atoi(str);
 8009f26:	4620      	mov	r0, r4
 8009f28:	f00a fc2c 	bl	8014784 <atoi>
 8009f2c:	ab04      	add	r3, sp, #16
 8009f2e:	443b      	add	r3, r7
 8009f30:	3701      	adds	r7, #1
 8009f32:	f803 0c04 	strb.w	r0, [r3, #-4]
			} else if (i < 5) {
				port = atoi(str);
				break;
			}

			while (*str && (*str != '.') && (*str != ':')) {
 8009f36:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0ef      	beq.n	8009f1e <eswifi_offload_async_msg+0x1a>
 8009f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f40:	d0ed      	beq.n	8009f1e <eswifi_offload_async_msg+0x1a>
 8009f42:	2b3a      	cmp	r3, #58	; 0x3a
 8009f44:	d1f7      	bne.n	8009f36 <eswifi_offload_async_msg+0x32>
 8009f46:	e7ea      	b.n	8009f1e <eswifi_offload_async_msg+0x1a>
			} else if (i < 5) {
 8009f48:	2f04      	cmp	r7, #4
 8009f4a:	d1f4      	bne.n	8009f36 <eswifi_offload_async_msg+0x32>
				port = atoi(str);
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f00a fc19 	bl	8014784 <atoi>
 8009f52:	b283      	uxth	r3, r0
			}

			str++;
		}

		for (i = 0; i < ESWIFI_OFFLOAD_MAX_SOCKETS; i++) {
 8009f54:	462a      	mov	r2, r5
			struct eswifi_off_socket *s = &eswifi->socket[i];
			if (s->context && s->port == port &&
 8009f56:	f8d2 17dc 	ldr.w	r1, [r2, #2012]	; 0x7dc
 8009f5a:	b139      	cbz	r1, 8009f6c <eswifi_offload_async_msg+0x68>
 8009f5c:	f8b2 1890 	ldrh.w	r1, [r2, #2192]	; 0x890
 8009f60:	4299      	cmp	r1, r3
 8009f62:	d103      	bne.n	8009f6c <eswifi_offload_async_msg+0x68>
 8009f64:	f892 17da 	ldrb.w	r1, [r2, #2010]	; 0x7da
 8009f68:	2903      	cmp	r1, #3
 8009f6a:	d006      	beq.n	8009f7a <eswifi_offload_async_msg+0x76>
		for (i = 0; i < ESWIFI_OFFLOAD_MAX_SOCKETS; i++) {
 8009f6c:	3601      	adds	r6, #1
 8009f6e:	2e04      	cmp	r6, #4
 8009f70:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8009f74:	d1ef      	bne.n	8009f56 <eswifi_offload_async_msg+0x52>
		}

		k_sem_give(&socket->accept_sem);
		k_yield();
	}
}
 8009f76:	b005      	add	sp, #20
 8009f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f7a:	20e0      	movs	r0, #224	; 0xe0
 8009f7c:	4346      	muls	r6, r0
			struct eswifi_off_socket *s = &eswifi->socket[i];
 8009f7e:	f506 62fb 	add.w	r2, r6, #2008	; 0x7d8
 8009f82:	442a      	add	r2, r5
		struct sockaddr_in *peer = net_sin(&socket->peer_addr);
 8009f84:	9803      	ldr	r0, [sp, #12]
 8009f86:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
		peer->sin_port = htons(port);
 8009f8a:	ba5b      	rev16	r3, r3
		socket->state = ESWIFI_SOCKET_STATE_CONNECTED;
 8009f8c:	19a8      	adds	r0, r5, r6
		peer->sin_port = htons(port);
 8009f8e:	f8a2 3082 	strh.w	r3, [r2, #130]	; 0x82
		socket->state = ESWIFI_SOCKET_STATE_CONNECTED;
 8009f92:	2302      	movs	r3, #2
 8009f94:	f880 37da 	strb.w	r3, [r0, #2010]	; 0x7da
		socket->usage++;
 8009f98:	f8d0 3894 	ldr.w	r3, [r0, #2196]	; 0x894
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	f8c0 3894 	str.w	r3, [r0, #2196]	; 0x894
		socket->context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 8009fa2:	f8d0 37dc 	ldr.w	r3, [r0, #2012]	; 0x7dc
 8009fa6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
		struct sockaddr_in *peer = net_sin(&socket->peer_addr);
 8009faa:	f606 0458 	addw	r4, r6, #2136	; 0x858
		socket->context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 8009fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fb2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8009fb6:	592a      	ldr	r2, [r5, r4]
 8009fb8:	625a      	str	r2, [r3, #36]	; 0x24
		struct sockaddr_in *peer = net_sin(&socket->peer_addr);
 8009fba:	1929      	adds	r1, r5, r4
 8009fbc:	684a      	ldr	r2, [r1, #4]
 8009fbe:	629a      	str	r2, [r3, #40]	; 0x28
		if (socket->accept_cb) {
 8009fc0:	f8d0 47ec 	ldr.w	r4, [r0, #2028]	; 0x7ec
 8009fc4:	b13c      	cbz	r4, 8009fd6 <eswifi_offload_async_msg+0xd2>
			socket->accept_cb(socket->context,
 8009fc6:	f8d0 37fc 	ldr.w	r3, [r0, #2044]	; 0x7fc
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	f8d0 07dc 	ldr.w	r0, [r0, #2012]	; 0x7dc
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	2208      	movs	r2, #8
 8009fd4:	47a0      	blx	r4
		k_sem_give(&socket->accept_sem);
 8009fd6:	f606 0678 	addw	r6, r6, #2168	; 0x878
	z_impl_k_sem_give(sem);
 8009fda:	19a8      	adds	r0, r5, r6
 8009fdc:	f002 fae0 	bl	800c5a0 <z_impl_k_sem_give>
}
 8009fe0:	b005      	add	sp, #20
 8009fe2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_impl_k_yield();
 8009fe6:	f002 bf0f 	b.w	800ce08 <z_impl_k_yield>
 8009fea:	bf00      	nop
 8009fec:	08018e10 	.word	0x08018e10

08009ff0 <eswifi_offload_init>:
	return err;
}

int eswifi_offload_init(struct eswifi_dev *eswifi)
{
	eswifi->iface->if_dev->offload = &eswifi_offload;
 8009ff0:	6803      	ldr	r3, [r0, #0]
{
 8009ff2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	eswifi->iface->if_dev->offload = &eswifi_offload;
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a14      	ldr	r2, [pc, #80]	; (800a048 <eswifi_offload_init+0x58>)
 8009ff8:	619a      	str	r2, [r3, #24]
	char cmd[] = "C4=1\r";
 8009ffa:	4b14      	ldr	r3, [pc, #80]	; (800a04c <eswifi_offload_init+0x5c>)
{
 8009ffc:	4604      	mov	r4, r0
	char cmd[] = "C4=1\r";
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	9000      	str	r0, [sp, #0]
 800a002:	889b      	ldrh	r3, [r3, #4]
 800a004:	f8ad 3004 	strh.w	r3, [sp, #4]
	eswifi_lock(eswifi);
 800a008:	4620      	mov	r0, r4
 800a00a:	f7ff fe0d 	bl	8009c28 <eswifi_lock>
	err = eswifi_at_cmd(eswifi, cmd);
 800a00e:	4669      	mov	r1, sp
 800a010:	4620      	mov	r0, r4
 800a012:	f009 f95c 	bl	80132ce <eswifi_at_cmd>
	eswifi_unlock(eswifi);
 800a016:	4620      	mov	r0, r4
 800a018:	f009 f95e 	bl	80132d8 <eswifi_unlock>
	char cmd[] = "PR=0\r";
 800a01c:	4b0c      	ldr	r3, [pc, #48]	; (800a050 <eswifi_offload_init+0x60>)
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	9000      	str	r0, [sp, #0]
 800a022:	889b      	ldrh	r3, [r3, #4]
 800a024:	f8ad 3004 	strh.w	r3, [sp, #4]
	eswifi_lock(eswifi);
 800a028:	4620      	mov	r0, r4
 800a02a:	f7ff fdfd 	bl	8009c28 <eswifi_lock>
	err = eswifi_at_cmd(eswifi, cmd);
 800a02e:	4669      	mov	r1, sp
 800a030:	4620      	mov	r0, r4
 800a032:	f009 f94c 	bl	80132ce <eswifi_at_cmd>
 800a036:	4605      	mov	r5, r0
	eswifi_unlock(eswifi);
 800a038:	4620      	mov	r0, r4
 800a03a:	f009 f94d 	bl	80132d8 <eswifi_unlock>
		LOG_ERR("Unable to disable bypass mode");
		return err;
	}

	return 0;
}
 800a03e:	ea05 70e5 	and.w	r0, r5, r5, asr #31
 800a042:	b003      	add	sp, #12
 800a044:	bd30      	pop	{r4, r5, pc}
 800a046:	bf00      	nop
 800a048:	20000250 	.word	0x20000250
 800a04c:	08018e04 	.word	0x08018e04
 800a050:	08018e0a 	.word	0x08018e0a

0800a054 <__select_socket>:
{
 800a054:	b538      	push	{r3, r4, r5, lr}
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P0=%d\r", idx);
 800a056:	f200 1575 	addw	r5, r0, #373	; 0x175
{
 800a05a:	4604      	mov	r4, r0
 800a05c:	460b      	mov	r3, r1
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P0=%d\r", idx);
 800a05e:	4628      	mov	r0, r5
 800a060:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800a064:	4a04      	ldr	r2, [pc, #16]	; (800a078 <__select_socket+0x24>)
 800a066:	f004 fb87 	bl	800e778 <snprintk>
	return eswifi_at_cmd(eswifi, eswifi->buf);
 800a06a:	4629      	mov	r1, r5
 800a06c:	4620      	mov	r0, r4
}
 800a06e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return eswifi_at_cmd(eswifi, eswifi->buf);
 800a072:	f009 b92c 	b.w	80132ce <eswifi_at_cmd>
 800a076:	bf00      	nop
 800a078:	08018def 	.word	0x08018def

0800a07c <__stop_socket.isra.0>:
#include <errno.h>

#include "eswifi.h"
#include <net/net_pkt.h>

static int __stop_socket(struct eswifi_dev *eswifi,
 800a07c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
			 struct eswifi_off_socket *socket)
{
	char cmd_srv[] = "P5=0\r";
 800a07e:	4a0f      	ldr	r2, [pc, #60]	; (800a0bc <__stop_socket.isra.0+0x40>)
static int __stop_socket(struct eswifi_dev *eswifi,
 800a080:	4603      	mov	r3, r0
	char cmd_srv[] = "P5=0\r";
 800a082:	6810      	ldr	r0, [r2, #0]
 800a084:	8892      	ldrh	r2, [r2, #4]
 800a086:	f8ad 2004 	strh.w	r2, [sp, #4]
	char cmd_cli[] = "P6=0\r";
 800a08a:	4a0d      	ldr	r2, [pc, #52]	; (800a0c0 <__stop_socket.isra.0+0x44>)
	char cmd_srv[] = "P5=0\r";
 800a08c:	9000      	str	r0, [sp, #0]
	char cmd_cli[] = "P6=0\r";
 800a08e:	6810      	ldr	r0, [r2, #0]
 800a090:	8892      	ldrh	r2, [r2, #4]
 800a092:	f8ad 200c 	strh.w	r2, [sp, #12]

	LOG_DBG("Stopping socket %d", socket->index);
	if (socket->state != ESWIFI_SOCKET_STATE_CONNECTED) {
 800a096:	788a      	ldrb	r2, [r1, #2]
	char cmd_cli[] = "P6=0\r";
 800a098:	9002      	str	r0, [sp, #8]
	if (socket->state != ESWIFI_SOCKET_STATE_CONNECTED) {
 800a09a:	2a02      	cmp	r2, #2
 800a09c:	d10b      	bne.n	800a0b6 <__stop_socket.isra.0+0x3a>
		return 0;
	}

	socket->state = ESWIFI_SOCKET_STATE_NONE;
	return eswifi_at_cmd(eswifi, socket->is_server ? cmd_srv : cmd_cli);
 800a09e:	f891 00ba 	ldrb.w	r0, [r1, #186]	; 0xba
	socket->state = ESWIFI_SOCKET_STATE_NONE;
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	708a      	strb	r2, [r1, #2]
	return eswifi_at_cmd(eswifi, socket->is_server ? cmd_srv : cmd_cli);
 800a0a6:	4669      	mov	r1, sp
 800a0a8:	aa02      	add	r2, sp, #8
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	bf08      	it	eq
 800a0ae:	4611      	moveq	r1, r2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f009 f90c 	bl	80132ce <eswifi_at_cmd>
}
 800a0b6:	b005      	add	sp, #20
 800a0b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0bc:	08018e24 	.word	0x08018e24
 800a0c0:	08018e2a 	.word	0x08018e2a

0800a0c4 <eswifi_off_read_work>:

	return 0;
}

static void eswifi_off_read_work(struct k_work *work)
{
 800a0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return CONTAINER_OF(socket - socket->index, struct eswifi_dev, socket);
 800a0c8:	f810 7c50 	ldrb.w	r7, [r0, #-80]
 800a0cc:	4b5c      	ldr	r3, [pc, #368]	; (800a240 <eswifi_off_read_work+0x17c>)
	if (atomic_get(&eswifi->mutex_owner) != (atomic_t)(uintptr_t)_current) {
 800a0ce:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a244 <eswifi_off_read_work+0x180>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800a0d2:	f3bf 8f5b 	dmb	ish
	return CONTAINER_OF(socket - socket->index, struct eswifi_dev, socket);
 800a0d6:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 800a0da:	eba3 1747 	sub.w	r7, r3, r7, lsl #5
	char *data;
	struct k_work_delayable *dwork = k_work_delayable_from_work(work);

	LOG_DBG("");

	socket = CONTAINER_OF(dwork, struct eswifi_off_socket, read_work);
 800a0de:	f1a0 0850 	sub.w	r8, r0, #80	; 0x50
 800a0e2:	eb08 0507 	add.w	r5, r8, r7
{
 800a0e6:	b08b      	sub	sp, #44	; 0x2c
 800a0e8:	f8d5 37cc 	ldr.w	r3, [r5, #1996]	; 0x7cc
 800a0ec:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&eswifi->mutex_owner) != (atomic_t)(uintptr_t)_current) {
 800a0f0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	f205 76cc 	addw	r6, r5, #1996	; 0x7cc
 800a0fc:	d029      	beq.n	800a152 <eswifi_off_read_work+0x8e>
	return z_impl_k_mutex_lock(mutex, timeout);
 800a0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a106:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 800a10a:	f002 f959 	bl	800c3c0 <z_impl_k_mutex_lock>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800a10e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a112:	f3bf 8f5b 	dmb	ish
 800a116:	e856 2f00 	ldrex	r2, [r6]
 800a11a:	e846 3100 	strex	r1, r3, [r6]
 800a11e:	2900      	cmp	r1, #0
 800a120:	d1f9      	bne.n	800a116 <eswifi_off_read_work+0x52>
 800a122:	f3bf 8f5b 	dmb	ish
		eswifi->mutex_depth = 1;
 800a126:	2301      	movs	r3, #1
		eswifi->mutex_depth++;
 800a128:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
	eswifi = eswifi_socket_to_dev(socket);

	eswifi_lock(eswifi);

	if ((socket->type == ESWIFI_TRANSPORT_TCP ||
 800a12c:	f814 3c4f 	ldrb.w	r3, [r4, #-79]
 800a130:	b10b      	cbz	r3, 800a136 <eswifi_off_read_work+0x72>
 800a132:	2b03      	cmp	r3, #3
 800a134:	d111      	bne.n	800a15a <eswifi_off_read_work+0x96>
	     socket->type == ESWIFI_TRANSPORT_TCP_SSL) &&
 800a136:	f814 3c4e 	ldrb.w	r3, [r4, #-78]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d00d      	beq.n	800a15a <eswifi_off_read_work+0x96>
	int next_timeout_ms = 100;
 800a13e:	2664      	movs	r6, #100	; 0x64
 800a140:	220a      	movs	r2, #10

	k_sem_give(&socket->read_sem);
	next_timeout_ms = 0;

done:
	err = k_work_reschedule_for_queue(&eswifi->work_q, &socket->read_work,
 800a142:	fb86 2302 	smull	r2, r3, r6, r2
 800a146:	4621      	mov	r1, r4
 800a148:	f105 0020 	add.w	r0, r5, #32
 800a14c:	f002 fbe2 	bl	800c914 <k_work_reschedule_for_queue>
 800a150:	e06a      	b.n	800a228 <eswifi_off_read_work+0x164>
 800a152:	f8d5 37d0 	ldr.w	r3, [r5, #2000]	; 0x7d0
 800a156:	3301      	adds	r3, #1
 800a158:	e7e6      	b.n	800a128 <eswifi_off_read_work+0x64>
	__select_socket(eswifi, socket->index);
 800a15a:	f814 1c50 	ldrb.w	r1, [r4, #-80]
 800a15e:	4628      	mov	r0, r5
 800a160:	f7ff ff78 	bl	800a054 <__select_socket>
	char size[] = "R1=9999\r";
 800a164:	4a38      	ldr	r2, [pc, #224]	; (800a248 <eswifi_off_read_work+0x184>)
	char cmd[] = "R0\r";
 800a166:	4b39      	ldr	r3, [pc, #228]	; (800a24c <eswifi_off_read_work+0x188>)
	char size[] = "R1=9999\r";
 800a168:	6810      	ldr	r0, [r2, #0]
 800a16a:	6851      	ldr	r1, [r2, #4]
	char cmd[] = "R0\r";
 800a16c:	9303      	str	r3, [sp, #12]
	char size[] = "R1=9999\r";
 800a16e:	ab04      	add	r3, sp, #16
 800a170:	c303      	stmia	r3!, {r0, r1}
 800a172:	7a12      	ldrb	r2, [r2, #8]
 800a174:	701a      	strb	r2, [r3, #0]
	char timeout[] = "R2=30000\r";
 800a176:	4a36      	ldr	r2, [pc, #216]	; (800a250 <eswifi_off_read_work+0x18c>)
 800a178:	6810      	ldr	r0, [r2, #0]
 800a17a:	6851      	ldr	r1, [r2, #4]
 800a17c:	8912      	ldrh	r2, [r2, #8]
 800a17e:	ab07      	add	r3, sp, #28
 800a180:	c303      	stmia	r3!, {r0, r1}
	snprintk(size, sizeof(size), "R1=%u\r", len);
 800a182:	2109      	movs	r1, #9
	char timeout[] = "R2=30000\r";
 800a184:	801a      	strh	r2, [r3, #0]
	snprintk(size, sizeof(size), "R1=%u\r", len);
 800a186:	a804      	add	r0, sp, #16
 800a188:	4a32      	ldr	r2, [pc, #200]	; (800a254 <eswifi_off_read_work+0x190>)
 800a18a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800a18e:	f004 faf3 	bl	800e778 <snprintk>
	ret = eswifi_at_cmd(eswifi, size);
 800a192:	a904      	add	r1, sp, #16
 800a194:	4628      	mov	r0, r5
 800a196:	f009 f89a 	bl	80132ce <eswifi_at_cmd>
	if (ret < 0) {
 800a19a:	2800      	cmp	r0, #0
 800a19c:	db12      	blt.n	800a1c4 <eswifi_off_read_work+0x100>
	snprintk(timeout, sizeof(timeout), "R2=%u\r", 30); /* 30 ms */
 800a19e:	4a2e      	ldr	r2, [pc, #184]	; (800a258 <eswifi_off_read_work+0x194>)
 800a1a0:	231e      	movs	r3, #30
 800a1a2:	210a      	movs	r1, #10
 800a1a4:	a807      	add	r0, sp, #28
 800a1a6:	f004 fae7 	bl	800e778 <snprintk>
	ret = eswifi_at_cmd(eswifi, timeout);
 800a1aa:	a907      	add	r1, sp, #28
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	f009 f88e 	bl	80132ce <eswifi_at_cmd>
	if (ret < 0) {
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	db06      	blt.n	800a1c4 <eswifi_off_read_work+0x100>
	return eswifi_at_cmd_rsp(eswifi, cmd, data);
 800a1b6:	aa02      	add	r2, sp, #8
 800a1b8:	a903      	add	r1, sp, #12
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f7ff fa70 	bl	80096a0 <eswifi_at_cmd_rsp>
	if (len < 0) {
 800a1c0:	1e06      	subs	r6, r0, #0
 800a1c2:	da09      	bge.n	800a1d8 <eswifi_off_read_work+0x114>
		__stop_socket(eswifi, socket);
 800a1c4:	4641      	mov	r1, r8
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f7ff ff58 	bl	800a07c <__stop_socket.isra.0>
		if (socket->recv_cb) {
 800a1cc:	f854 3c48 	ldr.w	r3, [r4, #-72]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0b4      	beq.n	800a13e <eswifi_off_read_work+0x7a>
	struct net_pkt *pkt = NULL;
 800a1d4:	2700      	movs	r7, #0
 800a1d6:	e019      	b.n	800a20c <eswifi_off_read_work+0x148>
	if (!len || !socket->recv_cb) {
 800a1d8:	d0b1      	beq.n	800a13e <eswifi_off_read_work+0x7a>
 800a1da:	f854 3c48 	ldr.w	r3, [r4, #-72]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0ad      	beq.n	800a13e <eswifi_off_read_work+0x7a>
					   AF_UNSPEC, 0, K_NO_WAIT);
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2300      	movs	r3, #0
	pkt = net_pkt_rx_alloc_with_buffer(eswifi->iface, len,
 800a1e6:	e9cd 2300 	strd	r2, r3, [sp]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f858 0007 	ldr.w	r0, [r8, r7]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4631      	mov	r1, r6
 800a1f4:	f7fb fa94 	bl	8005720 <net_pkt_rx_alloc_with_buffer>
	if (!pkt) {
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d09f      	beq.n	800a13e <eswifi_off_read_work+0x7a>
	if (net_pkt_write(pkt, data, len) < 0) {
 800a1fe:	9902      	ldr	r1, [sp, #8]
 800a200:	4632      	mov	r2, r6
 800a202:	f007 fe50 	bl	8011ea6 <net_pkt_write>
	net_pkt_cursor_init(pkt);
 800a206:	4638      	mov	r0, r7
 800a208:	f007 fc64 	bl	8011ad4 <net_pkt_cursor_init>
	socket->recv_cb(socket->context, pkt,
 800a20c:	f854 3c38 	ldr.w	r3, [r4, #-56]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	2600      	movs	r6, #0
 800a214:	4633      	mov	r3, r6
 800a216:	4639      	mov	r1, r7
 800a218:	9600      	str	r6, [sp, #0]
 800a21a:	e954 0713 	ldrd	r0, r7, [r4, #-76]	; 0x4c
 800a21e:	4632      	mov	r2, r6
 800a220:	47b8      	blx	r7
	if (!socket->context) {
 800a222:	f854 3c4c 	ldr.w	r3, [r4, #-76]
 800a226:	b92b      	cbnz	r3, 800a234 <eswifi_off_read_work+0x170>
					  K_MSEC(next_timeout_ms));
	if (err < 0) {
		LOG_ERR("Rescheduling socket read error");
	}

	eswifi_unlock(eswifi);
 800a228:	4628      	mov	r0, r5
 800a22a:	f009 f9f5 	bl	8013618 <eswifi_unlock>
}
 800a22e:	b00b      	add	sp, #44	; 0x2c
 800a230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_sem_give(sem);
 800a234:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800a238:	f002 f9b2 	bl	800c5a0 <z_impl_k_sem_give>
}
 800a23c:	e780      	b.n	800a140 <eswifi_off_read_work+0x7c>
 800a23e:	bf00      	nop
 800a240:	fffff828 	.word	0xfffff828
 800a244:	20002524 	.word	0x20002524
 800a248:	08018e3e 	.word	0x08018e3e
 800a24c:	000d3052 	.word	0x000d3052
 800a250:	08018e47 	.word	0x08018e47
 800a254:	08018e30 	.word	0x08018e30
 800a258:	08018e37 	.word	0x08018e37

0800a25c <__eswifi_bind>:
	if (addr->sa_family != AF_INET) {
 800a25c:	8813      	ldrh	r3, [r2, #0]
 800a25e:	2b01      	cmp	r3, #1
{
 800a260:	b570      	push	{r4, r5, r6, lr}
 800a262:	4604      	mov	r4, r0
 800a264:	460d      	mov	r5, r1
 800a266:	4616      	mov	r6, r2
	if (addr->sa_family != AF_INET) {
 800a268:	d119      	bne.n	800a29e <__eswifi_bind+0x42>
	__select_socket(eswifi, socket->index);
 800a26a:	7809      	ldrb	r1, [r1, #0]
 800a26c:	f7ff fef2 	bl	800a054 <__select_socket>
	return (struct sockaddr_in *)addr;
 800a270:	8873      	ldrh	r3, [r6, #2]
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P2=%d\r", socket->port);
 800a272:	4a0c      	ldr	r2, [pc, #48]	; (800a2a4 <__eswifi_bind+0x48>)
 800a274:	ba5b      	rev16	r3, r3
	socket->port = sys_be16_to_cpu(net_sin(addr)->sin_port);
 800a276:	f8a5 30b8 	strh.w	r3, [r5, #184]	; 0xb8
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P2=%d\r", socket->port);
 800a27a:	f204 1575 	addw	r5, r4, #373	; 0x175
 800a27e:	b29b      	uxth	r3, r3
 800a280:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800a284:	4628      	mov	r0, r5
 800a286:	f004 fa77 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 800a28a:	4629      	mov	r1, r5
 800a28c:	4620      	mov	r0, r4
 800a28e:	f009 f81e 	bl	80132ce <eswifi_at_cmd>
		return -EIO;
 800a292:	2800      	cmp	r0, #0
 800a294:	bfac      	ite	ge
 800a296:	2000      	movge	r0, #0
 800a298:	f06f 0004 	mvnlt.w	r0, #4
}
 800a29c:	bd70      	pop	{r4, r5, r6, pc}
		return -EPFNOSUPPORT;
 800a29e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 800a2a2:	e7fb      	b.n	800a29c <__eswifi_bind+0x40>
 800a2a4:	08018e51 	.word	0x08018e51

0800a2a8 <__eswifi_off_start_client>:

int __eswifi_off_start_client(struct eswifi_dev *eswifi,
			      struct eswifi_off_socket *socket)
{
 800a2a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a2aa:	4606      	mov	r6, r0
	LOG_DBG("");

	__select_socket(eswifi, socket->index);

	/* Stop any running client */
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P6=0\r");
 800a2ac:	f206 1575 	addw	r5, r6, #373	; 0x175
{
 800a2b0:	460c      	mov	r4, r1
	__select_socket(eswifi, socket->index);
 800a2b2:	7809      	ldrb	r1, [r1, #0]
 800a2b4:	f7ff fece 	bl	800a054 <__select_socket>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P6=0\r");
 800a2b8:	4a26      	ldr	r2, [pc, #152]	; (800a354 <__eswifi_off_start_client+0xac>)
 800a2ba:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f004 fa5a 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f009 f801 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	da03      	bge.n	800a2d8 <__eswifi_off_start_client+0x30>
		LOG_ERR("Unable to stop running client");
		return -EIO;
 800a2d0:	f06f 0004 	mvn.w	r0, #4
		return -EIO;
	}
	net_context_set_state(socket->context, NET_CONTEXT_CONNECTED);

	return 0;
}
 800a2d4:	b004      	add	sp, #16
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P3=%u.%u.%u.%u\r",
 800a2d8:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
 800a2dc:	9302      	str	r3, [sp, #8]
 800a2de:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
 800a2e8:	4a1b      	ldr	r2, [pc, #108]	; (800a358 <__eswifi_off_start_client+0xb0>)
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800a2f0:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f004 fa3f 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f008 ffe6 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 800a302:	2800      	cmp	r0, #0
 800a304:	dbe4      	blt.n	800a2d0 <__eswifi_off_start_client+0x28>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P4=%d\r",
 800a306:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 800a30a:	4a14      	ldr	r2, [pc, #80]	; (800a35c <__eswifi_off_start_client+0xb4>)
 800a30c:	ba5b      	rev16	r3, r3
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800a314:	4628      	mov	r0, r5
 800a316:	f004 fa2f 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 800a31a:	4629      	mov	r1, r5
 800a31c:	4630      	mov	r0, r6
 800a31e:	f008 ffd6 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 800a322:	2800      	cmp	r0, #0
 800a324:	dbd4      	blt.n	800a2d0 <__eswifi_off_start_client+0x28>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P6=1\r");
 800a326:	4a0e      	ldr	r2, [pc, #56]	; (800a360 <__eswifi_off_start_client+0xb8>)
 800a328:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800a32c:	4628      	mov	r0, r5
 800a32e:	f004 fa23 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 800a332:	4629      	mov	r1, r5
 800a334:	4630      	mov	r0, r6
 800a336:	f008 ffca 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 800a33a:	2800      	cmp	r0, #0
 800a33c:	dbc8      	blt.n	800a2d0 <__eswifi_off_start_client+0x28>
	net_context_set_state(socket->context, NET_CONTEXT_CONNECTED);
 800a33e:	6862      	ldr	r2, [r4, #4]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 800a340:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 800a344:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 800a348:	f043 0304 	orr.w	r3, r3, #4
 800a34c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	return 0;
 800a350:	2000      	movs	r0, #0
 800a352:	e7bf      	b.n	800a2d4 <__eswifi_off_start_client+0x2c>
 800a354:	08018e2a 	.word	0x08018e2a
 800a358:	08018e58 	.word	0x08018e58
 800a35c:	08018e68 	.word	0x08018e68
 800a360:	08018e6f 	.word	0x08018e6f

0800a364 <__eswifi_accept>:

int __eswifi_accept(struct eswifi_dev *eswifi, struct eswifi_off_socket *socket)
{
 800a364:	b573      	push	{r0, r1, r4, r5, r6, lr}
	char cmd[] = "P5=1\r";
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <__eswifi_accept+0x40>)

	if (socket->state != ESWIFI_SOCKET_STATE_NONE) {
 800a368:	788c      	ldrb	r4, [r1, #2]
{
 800a36a:	4606      	mov	r6, r0
	char cmd[] = "P5=1\r";
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	889b      	ldrh	r3, [r3, #4]
 800a370:	9000      	str	r0, [sp, #0]
{
 800a372:	460d      	mov	r5, r1
	char cmd[] = "P5=1\r";
 800a374:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (socket->state != ESWIFI_SOCKET_STATE_NONE) {
 800a378:	b974      	cbnz	r4, 800a398 <__eswifi_accept+0x34>
		/* we can only handle one connection at a time */
		return -EBUSY;
	}

	__select_socket(eswifi, socket->index);
 800a37a:	7809      	ldrb	r1, [r1, #0]
 800a37c:	4630      	mov	r0, r6
 800a37e:	f7ff fe69 	bl	800a054 <__select_socket>

	/* Start TCP Server */
	if (eswifi_at_cmd(eswifi, cmd) < 0) {
 800a382:	4669      	mov	r1, sp
 800a384:	4630      	mov	r0, r6
 800a386:	f008 ffa2 	bl	80132ce <eswifi_at_cmd>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	db07      	blt.n	800a39e <__eswifi_accept+0x3a>
		LOG_ERR("Unable to start TCP server");
		return -EIO;
	}

	LOG_DBG("TCP Server started");
	socket->state = ESWIFI_SOCKET_STATE_ACCEPTING;
 800a38e:	2303      	movs	r3, #3
 800a390:	70ab      	strb	r3, [r5, #2]

	return 0;
 800a392:	4620      	mov	r0, r4
}
 800a394:	b002      	add	sp, #8
 800a396:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 800a398:	f06f 000f 	mvn.w	r0, #15
 800a39c:	e7fa      	b.n	800a394 <__eswifi_accept+0x30>
		return -EIO;
 800a39e:	f06f 0004 	mvn.w	r0, #4
 800a3a2:	e7f7      	b.n	800a394 <__eswifi_accept+0x30>
 800a3a4:	08018e75 	.word	0x08018e75

0800a3a8 <__eswifi_socket_new>:
	struct eswifi_off_socket *socket = NULL;
	int err, i;

	LOG_DBG("");

	if (family != AF_INET) {
 800a3a8:	2901      	cmp	r1, #1
{
 800a3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ac:	4605      	mov	r5, r0
	if (family != AF_INET) {
 800a3ae:	d002      	beq.n	800a3b6 <__eswifi_socket_new+0xe>
		LOG_ERR("Only AF_INET is supported!");
		return -EPFNOSUPPORT;
 800a3b0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
	k_work_init_delayable(&socket->read_work, eswifi_off_read_work);
	socket->usage = 1;
	LOG_DBG("Socket index %d", socket->index);

	return socket->index;
}
 800a3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ESWIFI_OFFLOAD_MAX_SOCKETS; i++) {
 800a3b6:	2400      	movs	r4, #0
 800a3b8:	22e0      	movs	r2, #224	; 0xe0
		if (!eswifi->socket[i].context) {
 800a3ba:	f200 71dc 	addw	r1, r0, #2012	; 0x7dc
 800a3be:	fb02 f604 	mul.w	r6, r2, r4
 800a3c2:	5988      	ldr	r0, [r1, r6]
 800a3c4:	b990      	cbnz	r0, 800a3ec <__eswifi_socket_new+0x44>
			socket->index = i;
 800a3c6:	19aa      	adds	r2, r5, r6
			socket->context = context;
 800a3c8:	9f06      	ldr	r7, [sp, #24]
 800a3ca:	f8c2 77dc 	str.w	r7, [r2, #2012]	; 0x7dc
			socket->index = i;
 800a3ce:	b2e1      	uxtb	r1, r4
	} else if (proto == IPPROTO_TCP) {
 800a3d0:	2b06      	cmp	r3, #6
			socket->index = i;
 800a3d2:	f882 17d8 	strb.w	r1, [r2, #2008]	; 0x7d8
	} else if (proto == IPPROTO_TCP) {
 800a3d6:	d10f      	bne.n	800a3f8 <__eswifi_socket_new+0x50>
		socket->type = ESWIFI_TRANSPORT_TCP;
 800a3d8:	f882 07d9 	strb.w	r0, [r2, #2009]	; 0x7d9
	err = __select_socket(eswifi, socket->index);
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f7ff fe39 	bl	800a054 <__select_socket>
	if (err < 0) {
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	da0e      	bge.n	800a404 <__eswifi_socket_new+0x5c>
		return -EIO;
 800a3e6:	f06f 0004 	mvn.w	r0, #4
 800a3ea:	e7e3      	b.n	800a3b4 <__eswifi_socket_new+0xc>
	for (i = 0; i < ESWIFI_OFFLOAD_MAX_SOCKETS; i++) {
 800a3ec:	3401      	adds	r4, #1
 800a3ee:	2c04      	cmp	r4, #4
 800a3f0:	d1e5      	bne.n	800a3be <__eswifi_socket_new+0x16>
		return -ENOMEM;
 800a3f2:	f06f 000b 	mvn.w	r0, #11
 800a3f6:	e7dd      	b.n	800a3b4 <__eswifi_socket_new+0xc>
	} else if (proto == IPPROTO_UDP) {
 800a3f8:	2b11      	cmp	r3, #17
 800a3fa:	d1d9      	bne.n	800a3b0 <__eswifi_socket_new+0x8>
		socket->type = ESWIFI_TRANSPORT_UDP;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f882 37d9 	strb.w	r3, [r2, #2009]	; 0x7d9
 800a402:	e7eb      	b.n	800a3dc <__eswifi_socket_new+0x34>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P1=%d\r", socket->type);
 800a404:	23e0      	movs	r3, #224	; 0xe0
 800a406:	fb03 5404 	mla	r4, r3, r4, r5
 800a40a:	f205 1775 	addw	r7, r5, #373	; 0x175
 800a40e:	f894 37d9 	ldrb.w	r3, [r4, #2009]	; 0x7d9
 800a412:	4a0c      	ldr	r2, [pc, #48]	; (800a444 <__eswifi_socket_new+0x9c>)
 800a414:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800a418:	4638      	mov	r0, r7
 800a41a:	f004 f9ad 	bl	800e778 <snprintk>
	err = eswifi_at_cmd(eswifi, eswifi->buf);
 800a41e:	4639      	mov	r1, r7
 800a420:	4628      	mov	r0, r5
 800a422:	f008 ff54 	bl	80132ce <eswifi_at_cmd>
	if (err < 0) {
 800a426:	2800      	cmp	r0, #0
 800a428:	dbdd      	blt.n	800a3e6 <__eswifi_socket_new+0x3e>
	k_work_init_delayable(&socket->read_work, eswifi_off_read_work);
 800a42a:	f606 0028 	addw	r0, r6, #2088	; 0x828
 800a42e:	4428      	add	r0, r5
 800a430:	4905      	ldr	r1, [pc, #20]	; (800a448 <__eswifi_socket_new+0xa0>)
 800a432:	f009 fec3 	bl	80141bc <k_work_init_delayable>
	socket->usage = 1;
 800a436:	2301      	movs	r3, #1
	return socket->index;
 800a438:	f894 07d8 	ldrb.w	r0, [r4, #2008]	; 0x7d8
	socket->usage = 1;
 800a43c:	f8c4 3894 	str.w	r3, [r4, #2196]	; 0x894
	return socket->index;
 800a440:	e7b8      	b.n	800a3b4 <__eswifi_socket_new+0xc>
 800a442:	bf00      	nop
 800a444:	08018e7b 	.word	0x08018e7b
 800a448:	0800a0c5 	.word	0x0800a0c5

0800a44c <eswifi_spi_init>:
		eswifi_spi_read_msg(eswifi);
	}
}

int eswifi_spi_init(struct eswifi_dev *eswifi)
{
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	4606      	mov	r6, r0
 800a450:	b088      	sub	sp, #32
 800a452:	4817      	ldr	r0, [pc, #92]	; (800a4b0 <eswifi_spi_init+0x64>)
	struct eswifi_spi_data *spi = &eswifi_spi0; /* Static instance */

	/* SPI DATA READY PIN */
	spi->dr.dev = device_get_binding(
 800a454:	4d17      	ldr	r5, [pc, #92]	; (800a4b4 <eswifi_spi_init+0x68>)
 800a456:	f001 fcf5 	bl	800be44 <z_impl_device_get_binding>
 800a45a:	61a8      	str	r0, [r5, #24]
			DT_INST_GPIO_LABEL(0, data_gpios));
	if (!spi->dr.dev) {
 800a45c:	b320      	cbz	r0, 800a4a8 <eswifi_spi_init+0x5c>
		LOG_ERR("Failed to initialize GPIO driver: %s",
			    DT_INST_GPIO_LABEL(0, data_gpios));
		return -ENODEV;
	}
	spi->dr.pin = DT_INST_GPIO_PIN(0, data_gpios);
 800a45e:	2101      	movs	r1, #1
 800a460:	61e9      	str	r1, [r5, #28]
	struct gpio_driver_data *data =
 800a462:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
 800a464:	6884      	ldr	r4, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800a466:	6813      	ldr	r3, [r2, #0]
 800a468:	f023 0302 	bic.w	r3, r3, #2
 800a46c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a474:	4798      	blx	r3
	/*spi->bus = (struct spi_dt_spec) SPI_DT_SPEC_INST_GET(0,
							     SPI_OP_MODE_MASTER | SPI_TRANSFER_MSB |
							     SPI_WORD_SET(16) | SPI_HOLD_ON_CS |
							     SPI_LOCK_ON, 1000U); */
							     
	eswifi->bus_data = spi;
 800a476:	f8c6 57d4 	str.w	r5, [r6, #2004]	; 0x7d4
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800a47a:	2200      	movs	r2, #0
 800a47c:	2300      	movs	r3, #0
 800a47e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a482:	2400      	movs	r4, #0
 800a484:	f06f 030d 	mvn.w	r3, #13
 800a488:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800a48c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800a490:	4b09      	ldr	r3, [pc, #36]	; (800a4b8 <eswifi_spi_init+0x6c>)
 800a492:	490a      	ldr	r1, [pc, #40]	; (800a4bc <eswifi_spi_init+0x70>)
 800a494:	9600      	str	r6, [sp, #0]
 800a496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a49a:	f105 0020 	add.w	r0, r5, #32
 800a49e:	f001 ff17 	bl	800c2d0 <z_impl_k_thread_create>
			ESWIFI_SPI_THREAD_STACK_SIZE,
			(k_thread_entry_t)eswifi_spi_poll_thread, eswifi, NULL,
			NULL, K_PRIO_COOP(CONFIG_WIFI_ESWIFI_THREAD_PRIO), 0,
			K_NO_WAIT);

	return 0;
 800a4a2:	4620      	mov	r0, r4
}
 800a4a4:	b008      	add	sp, #32
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 800a4a8:	f06f 0012 	mvn.w	r0, #18
 800a4ac:	e7fa      	b.n	800a4a4 <eswifi_spi_init+0x58>
 800a4ae:	bf00      	nop
 800a4b0:	08018d72 	.word	0x08018d72
 800a4b4:	20000000 	.word	0x20000000
 800a4b8:	0800a4c1 	.word	0x0800a4c1
 800a4bc:	200005a0 	.word	0x200005a0

0800a4c0 <eswifi_spi_poll_thread>:
{
 800a4c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char startstr[] = "[SOMA]";
 800a4c4:	4e29      	ldr	r6, [pc, #164]	; (800a56c <eswifi_spi_poll_thread+0xac>)
	char cmd[] = "MR\r";
 800a4c6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800a570 <eswifi_spi_poll_thread+0xb0>
	if (atomic_get(&eswifi->mutex_owner) != (atomic_t)(uintptr_t)_current) {
 800a4ca:	4f2a      	ldr	r7, [pc, #168]	; (800a574 <eswifi_spi_poll_thread+0xb4>)
{
 800a4cc:	4604      	mov	r4, r0
	return z_impl_k_sleep(timeout);
 800a4ce:	f242 7010 	movw	r0, #10000	; 0x2710
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	f002 fd20 	bl	800cf18 <z_impl_k_sleep>
	const char startstr[] = "[SOMA]";
 800a4d8:	88b2      	ldrh	r2, [r6, #4]
 800a4da:	6830      	ldr	r0, [r6, #0]
 800a4dc:	79b3      	ldrb	r3, [r6, #6]
 800a4de:	f8ad 200c 	strh.w	r2, [sp, #12]
 800a4e2:	9002      	str	r0, [sp, #8]
 800a4e4:	f88d 300e 	strb.w	r3, [sp, #14]
	char cmd[] = "MR\r";
 800a4e8:	f8cd 8000 	str.w	r8, [sp]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800a4ec:	f3bf 8f5b 	dmb	ish
 800a4f0:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
 800a4f4:	f3bf 8f5b 	dmb	ish
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	f204 75cc 	addw	r5, r4, #1996	; 0x7cc
 800a500:	d020      	beq.n	800a544 <eswifi_spi_poll_thread+0x84>
	return z_impl_k_mutex_lock(mutex, timeout);
 800a502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a50a:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800a50e:	f001 ff57 	bl	800c3c0 <z_impl_k_mutex_lock>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f3bf 8f5b 	dmb	ish
 800a518:	e855 2f00 	ldrex	r2, [r5]
 800a51c:	e845 3100 	strex	r1, r3, [r5]
 800a520:	2900      	cmp	r1, #0
 800a522:	d1f9      	bne.n	800a518 <eswifi_spi_poll_thread+0x58>
 800a524:	f3bf 8f5b 	dmb	ish
		eswifi->mutex_depth = 1;
 800a528:	2301      	movs	r3, #1
		eswifi->mutex_depth++;
 800a52a:	f8c4 37d0 	str.w	r3, [r4, #2000]	; 0x7d0
	ret = eswifi_at_cmd_rsp(eswifi, cmd, &rsp);
 800a52e:	aa01      	add	r2, sp, #4
 800a530:	4669      	mov	r1, sp
 800a532:	4620      	mov	r0, r4
 800a534:	f7ff f8b4 	bl	80096a0 <eswifi_at_cmd_rsp>
	if (ret < 0) {
 800a538:	1e05      	subs	r5, r0, #0
 800a53a:	da07      	bge.n	800a54c <eswifi_spi_poll_thread+0x8c>
	eswifi_unlock(eswifi);
 800a53c:	4620      	mov	r0, r4
 800a53e:	f009 f8cb 	bl	80136d8 <eswifi_unlock>
	while (1) {
 800a542:	e7c4      	b.n	800a4ce <eswifi_spi_poll_thread+0xe>
 800a544:	f8d4 37d0 	ldr.w	r3, [r4, #2000]	; 0x7d0
 800a548:	3301      	adds	r3, #1
 800a54a:	e7ee      	b.n	800a52a <eswifi_spi_poll_thread+0x6a>
	if (strncmp(rsp, startstr, sizeof(endstr) - 1)) {
 800a54c:	9801      	ldr	r0, [sp, #4]
 800a54e:	2206      	movs	r2, #6
 800a550:	a902      	add	r1, sp, #8
 800a552:	f00a f991 	bl	8014878 <strncmp>
 800a556:	2800      	cmp	r0, #0
 800a558:	d1f0      	bne.n	800a53c <eswifi_spi_poll_thread+0x7c>
	if (msg_len > 0) {
 800a55a:	f1b5 020c 	subs.w	r2, r5, #12
 800a55e:	d0ed      	beq.n	800a53c <eswifi_spi_poll_thread+0x7c>
		eswifi_async_msg(eswifi, rsp + sizeof(endstr) - 1, msg_len);
 800a560:	9901      	ldr	r1, [sp, #4]
 800a562:	4620      	mov	r0, r4
 800a564:	3106      	adds	r1, #6
 800a566:	f008 feb5 	bl	80132d4 <eswifi_async_msg>
 800a56a:	e7e7      	b.n	800a53c <eswifi_spi_poll_thread+0x7c>
 800a56c:	08018e82 	.word	0x08018e82
 800a570:	000d524d 	.word	0x000d524d
 800a574:	20002524 	.word	0x20002524

0800a578 <eswifi_get_bus>:
};

struct eswifi_bus_ops *eswifi_get_bus(void)
{
	return &eswifi_bus_ops_spi;
}
 800a578:	4800      	ldr	r0, [pc, #0]	; (800a57c <eswifi_get_bus+0x4>)
 800a57a:	4770      	bx	lr
 800a57c:	20000280 	.word	0x20000280

0800a580 <eswifi_lock>:
{
 800a580:	b570      	push	{r4, r5, r6, lr}
	if (atomic_get(&eswifi->mutex_owner) != (atomic_t)(uintptr_t)_current) {
 800a582:	4e14      	ldr	r6, [pc, #80]	; (800a5d4 <eswifi_lock+0x54>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800a584:	f3bf 8f5b 	dmb	ish
 800a588:	f8d0 37cc 	ldr.w	r3, [r0, #1996]	; 0x7cc
 800a58c:	f3bf 8f5b 	dmb	ish
 800a590:	68b2      	ldr	r2, [r6, #8]
 800a592:	429a      	cmp	r2, r3
{
 800a594:	4604      	mov	r4, r0
	if (atomic_get(&eswifi->mutex_owner) != (atomic_t)(uintptr_t)_current) {
 800a596:	f200 75cc 	addw	r5, r0, #1996	; 0x7cc
 800a59a:	d016      	beq.n	800a5ca <eswifi_lock+0x4a>
 800a59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5a4:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 800a5a8:	f001 ff0a 	bl	800c3c0 <z_impl_k_mutex_lock>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800a5ac:	68b3      	ldr	r3, [r6, #8]
 800a5ae:	f3bf 8f5b 	dmb	ish
 800a5b2:	e855 2f00 	ldrex	r2, [r5]
 800a5b6:	e845 3100 	strex	r1, r3, [r5]
 800a5ba:	2900      	cmp	r1, #0
 800a5bc:	d1f9      	bne.n	800a5b2 <eswifi_lock+0x32>
 800a5be:	f3bf 8f5b 	dmb	ish
		eswifi->mutex_depth = 1;
 800a5c2:	2301      	movs	r3, #1
		eswifi->mutex_depth++;
 800a5c4:	f8c4 37d0 	str.w	r3, [r4, #2000]	; 0x7d0
}
 800a5c8:	bd70      	pop	{r4, r5, r6, pc}
		eswifi->mutex_depth++;
 800a5ca:	f8d0 37d0 	ldr.w	r3, [r0, #2000]	; 0x7d0
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	e7f8      	b.n	800a5c4 <eswifi_lock+0x44>
 800a5d2:	bf00      	nop
 800a5d4:	20002524 	.word	0x20002524

0800a5d8 <eswifi_socket_accept>:
	return ret;
}

static int eswifi_socket_accept(void *obj, struct sockaddr *addr,
				socklen_t *addrlen)
{
 800a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5da:	4605      	mov	r5, r0
 800a5dc:	460e      	mov	r6, r1
 800a5de:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
 800a5e0:	f7f6 f984 	bl	80008ec <z_reserve_fd>
	int sock;

	if (fd < 0) {
 800a5e4:	1e04      	subs	r4, r0, #0
 800a5e6:	db04      	blt.n	800a5f2 <eswifi_socket_accept+0x1a>
	int sock = OBJ_TO_SD(obj);
 800a5e8:	3d01      	subs	r5, #1
	if ((addrlen == NULL) || (addr == NULL) ||
 800a5ea:	b92f      	cbnz	r7, 800a5f8 <eswifi_socket_accept+0x20>
		return -1;
	}

	sock = __eswifi_socket_accept(obj, addr, addrlen);
	if (sock < 0) {
		z_free_fd(fd);
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f7f6 f9d1 	bl	8000994 <z_free_fd>
		return -1;
 800a5f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a5f6:	e01a      	b.n	800a62e <eswifi_socket_accept+0x56>
	if ((addrlen == NULL) || (addr == NULL) ||
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	d0f7      	beq.n	800a5ec <eswifi_socket_accept+0x14>
 800a5fc:	2d03      	cmp	r5, #3
 800a5fe:	dcf5      	bgt.n	800a5ec <eswifi_socket_accept+0x14>
	eswifi_lock(eswifi);
 800a600:	4e0c      	ldr	r6, [pc, #48]	; (800a634 <eswifi_socket_accept+0x5c>)
 800a602:	6830      	ldr	r0, [r6, #0]
 800a604:	f7ff ffbc 	bl	800a580 <eswifi_lock>
	socket = &eswifi->socket[sock];
 800a608:	6830      	ldr	r0, [r6, #0]
 800a60a:	21e0      	movs	r1, #224	; 0xe0
 800a60c:	fb01 0105 	mla	r1, r1, r5, r0
	ret = __eswifi_accept(eswifi, socket);
 800a610:	f501 61fb 	add.w	r1, r1, #2008	; 0x7d8
 800a614:	f7ff fea6 	bl	800a364 <__eswifi_accept>
 800a618:	4605      	mov	r5, r0
	eswifi_unlock(eswifi);
 800a61a:	6830      	ldr	r0, [r6, #0]
 800a61c:	f009 f8f4 	bl	8013808 <eswifi_unlock>
	if (sock < 0) {
 800a620:	2d00      	cmp	r5, #0
 800a622:	dbe3      	blt.n	800a5ec <eswifi_socket_accept+0x14>
		return -1;
	}

	z_finalize_fd(fd, SD_TO_OBJ(sock),
 800a624:	4a04      	ldr	r2, [pc, #16]	; (800a638 <eswifi_socket_accept+0x60>)
 800a626:	1c69      	adds	r1, r5, #1
 800a628:	4620      	mov	r0, r4
 800a62a:	f7f6 f99b 	bl	8000964 <z_finalize_fd>
		      (const struct fd_op_vtable *)
					&eswifi_socket_fd_op_vtable);

	return fd;
}
 800a62e:	4620      	mov	r0, r4
 800a630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a632:	bf00      	nop
 800a634:	20002510 	.word	0x20002510
 800a638:	08015fec 	.word	0x08015fec

0800a63c <eswifi_socket_connect>:
{
 800a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a640:	460d      	mov	r5, r1
	int sock = OBJ_TO_SD(obj);
 800a642:	1e44      	subs	r4, r0, #1
	if ((addrlen == 0) || (addr == NULL) ||
 800a644:	b38a      	cbz	r2, 800a6aa <eswifi_socket_connect+0x6e>
 800a646:	b381      	cbz	r1, 800a6aa <eswifi_socket_connect+0x6e>
 800a648:	2c03      	cmp	r4, #3
 800a64a:	dc2e      	bgt.n	800a6aa <eswifi_socket_connect+0x6e>
	if (addr->sa_family != AF_INET) {
 800a64c:	f8b1 8000 	ldrh.w	r8, [r1]
 800a650:	f1b8 0f01 	cmp.w	r8, #1
 800a654:	d12c      	bne.n	800a6b0 <eswifi_socket_connect+0x74>
	eswifi_lock(eswifi);
 800a656:	4f18      	ldr	r7, [pc, #96]	; (800a6b8 <eswifi_socket_connect+0x7c>)
 800a658:	6838      	ldr	r0, [r7, #0]
 800a65a:	f7ff ff91 	bl	800a580 <eswifi_lock>
	socket = &eswifi->socket[sock];
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	20e0      	movs	r0, #224	; 0xe0
 800a662:	4344      	muls	r4, r0
 800a664:	f504 6cfb 	add.w	ip, r4, #2008	; 0x7d8
	if (socket->state != ESWIFI_SOCKET_STATE_NONE) {
 800a668:	441c      	add	r4, r3
	socket = &eswifi->socket[sock];
 800a66a:	449c      	add	ip, r3
	if (socket->state != ESWIFI_SOCKET_STATE_NONE) {
 800a66c:	f894 67da 	ldrb.w	r6, [r4, #2010]	; 0x7da
 800a670:	b13e      	cbz	r6, 800a682 <eswifi_socket_connect+0x46>
		eswifi_unlock(eswifi);
 800a672:	4618      	mov	r0, r3
 800a674:	f009 f8c8 	bl	8013808 <eswifi_unlock>
		return -EBUSY;
 800a678:	f06f 050f 	mvn.w	r5, #15
}
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	socket->peer_addr = *addr;
 800a682:	6828      	ldr	r0, [r5, #0]
 800a684:	6869      	ldr	r1, [r5, #4]
 800a686:	f604 0258 	addw	r2, r4, #2136	; 0x858
 800a68a:	c203      	stmia	r2!, {r0, r1}
	socket->state = ESWIFI_SOCKET_STATE_CONNECTING;
 800a68c:	f884 87da 	strb.w	r8, [r4, #2010]	; 0x7da
	ret = __eswifi_off_start_client(eswifi, socket);
 800a690:	4661      	mov	r1, ip
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff fe08 	bl	800a2a8 <__eswifi_off_start_client>
		socket->state = ESWIFI_SOCKET_STATE_CONNECTED;
 800a698:	1e05      	subs	r5, r0, #0
 800a69a:	bf08      	it	eq
 800a69c:	2602      	moveq	r6, #2
	eswifi_unlock(eswifi);
 800a69e:	6838      	ldr	r0, [r7, #0]
 800a6a0:	f884 67da 	strb.w	r6, [r4, #2010]	; 0x7da
 800a6a4:	f009 f8b0 	bl	8013808 <eswifi_unlock>
	return ret;
 800a6a8:	e7e8      	b.n	800a67c <eswifi_socket_connect+0x40>
		return -EINVAL;
 800a6aa:	f06f 0515 	mvn.w	r5, #21
 800a6ae:	e7e5      	b.n	800a67c <eswifi_socket_connect+0x40>
		return -EPFNOSUPPORT;
 800a6b0:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800a6b4:	e7e2      	b.n	800a67c <eswifi_socket_connect+0x40>
 800a6b6:	bf00      	nop
 800a6b8:	20002510 	.word	0x20002510

0800a6bc <eswifi_socket_bind>:
	return 1;
}

static int eswifi_socket_bind(void *obj, const struct sockaddr *addr,
			      socklen_t addrlen)
{
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	460d      	mov	r5, r1
	int sock = OBJ_TO_SD(obj);
 800a6c0:	1e44      	subs	r4, r0, #1
	struct eswifi_off_socket *socket;
	int ret;

	if ((addrlen == 0) || (addr == NULL) ||
 800a6c2:	4616      	mov	r6, r2
 800a6c4:	b1b2      	cbz	r2, 800a6f4 <eswifi_socket_bind+0x38>
 800a6c6:	b1a9      	cbz	r1, 800a6f4 <eswifi_socket_bind+0x38>
 800a6c8:	2c03      	cmp	r4, #3
 800a6ca:	dc13      	bgt.n	800a6f4 <eswifi_socket_bind+0x38>
	    (sock >= ESWIFI_OFFLOAD_MAX_SOCKETS)) {
		return -EINVAL;
	}

	eswifi_lock(eswifi);
 800a6cc:	4f0b      	ldr	r7, [pc, #44]	; (800a6fc <eswifi_socket_bind+0x40>)
 800a6ce:	6838      	ldr	r0, [r7, #0]
 800a6d0:	f7ff ff56 	bl	800a580 <eswifi_lock>
	socket = &eswifi->socket[sock];
 800a6d4:	6838      	ldr	r0, [r7, #0]
 800a6d6:	21e0      	movs	r1, #224	; 0xe0
 800a6d8:	fb01 0104 	mla	r1, r1, r4, r0
	ret = __eswifi_bind(eswifi, socket, addr, addrlen);
 800a6dc:	4633      	mov	r3, r6
 800a6de:	462a      	mov	r2, r5
 800a6e0:	f501 61fb 	add.w	r1, r1, #2008	; 0x7d8
 800a6e4:	f7ff fdba 	bl	800a25c <__eswifi_bind>
 800a6e8:	4604      	mov	r4, r0
	eswifi_unlock(eswifi);
 800a6ea:	6838      	ldr	r0, [r7, #0]
 800a6ec:	f009 f88c 	bl	8013808 <eswifi_unlock>

	return ret;
}
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 800a6f4:	f06f 0415 	mvn.w	r4, #21
 800a6f8:	e7fa      	b.n	800a6f0 <eswifi_socket_bind+0x34>
 800a6fa:	bf00      	nop
 800a6fc:	20002510 	.word	0x20002510

0800a700 <eswifi_socket_ioctl>:
	return fd;
}

static int eswifi_socket_ioctl(void *obj, unsigned int request, va_list args)
{
	switch (request) {
 800a700:	f240 1303 	movw	r3, #259	; 0x103
 800a704:	4299      	cmp	r1, r3
{
 800a706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (request) {
 800a70a:	d04c      	beq.n	800a7a6 <eswifi_socket_ioctl+0xa6>
 800a70c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800a710:	d005      	beq.n	800a71e <eswifi_socket_ioctl+0x1e>
 800a712:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800a716:	d105      	bne.n	800a724 <eswifi_socket_ioctl+0x24>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
 800a718:	f06f 0411 	mvn.w	r4, #17
 800a71c:	e040      	b.n	800a7a0 <eswifi_socket_ioctl+0xa0>
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
 800a71e:	6854      	ldr	r4, [r2, #4]
	if (nfds != 1) {
 800a720:	2c01      	cmp	r4, #1
 800a722:	d003      	beq.n	800a72c <eswifi_socket_ioctl+0x2c>

		return eswifi_socket_poll(fds, nfds, timeout);
	}

	default:
		errno = EINVAL;
 800a724:	f005 ff15 	bl	8010552 <__errno>
 800a728:	2316      	movs	r3, #22
 800a72a:	e011      	b.n	800a750 <eswifi_socket_ioctl+0x50>
		fds = va_arg(args, struct zsock_pollfd *);
 800a72c:	6816      	ldr	r6, [r2, #0]
		timeout = va_arg(args, int);
 800a72e:	6897      	ldr	r7, [r2, #8]
	obj = z_get_fd_obj(fds[0].fd,
 800a730:	491e      	ldr	r1, [pc, #120]	; (800a7ac <eswifi_socket_ioctl+0xac>)
 800a732:	6830      	ldr	r0, [r6, #0]
 800a734:	2200      	movs	r2, #0
 800a736:	f7f6 f8a7 	bl	8000888 <z_get_fd_obj>
	if (obj != NULL) {
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d0f2      	beq.n	800a724 <eswifi_socket_ioctl+0x24>
		sock = OBJ_TO_SD(obj);
 800a73e:	1e45      	subs	r5, r0, #1
	if (sock >= ESWIFI_OFFLOAD_MAX_SOCKETS) {
 800a740:	2d03      	cmp	r5, #3
 800a742:	dcef      	bgt.n	800a724 <eswifi_socket_ioctl+0x24>
	if (!(fds[0].events & ZSOCK_POLLIN)) {
 800a744:	88b3      	ldrh	r3, [r6, #4]
 800a746:	07db      	lsls	r3, r3, #31
 800a748:	d406      	bmi.n	800a758 <eswifi_socket_ioctl+0x58>
		errno = ENOTSUP;
 800a74a:	f005 ff02 	bl	8010552 <__errno>
 800a74e:	2386      	movs	r3, #134	; 0x86
		errno = EINVAL;
 800a750:	6003      	str	r3, [r0, #0]
 800a752:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a756:	e023      	b.n	800a7a0 <eswifi_socket_ioctl+0xa0>
	eswifi_lock(eswifi);
 800a758:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800a7b0 <eswifi_socket_ioctl+0xb0>
 800a75c:	f8d8 0000 	ldr.w	r0, [r8]
 800a760:	f7ff ff0e 	bl	800a580 <eswifi_lock>
	socket = &eswifi->socket[sock];
 800a764:	f8d8 8000 	ldr.w	r8, [r8]
	eswifi_unlock(eswifi);
 800a768:	4640      	mov	r0, r8
 800a76a:	f009 f84d 	bl	8013808 <eswifi_unlock>
	if (socket->state != ESWIFI_SOCKET_STATE_CONNECTED) {
 800a76e:	20e0      	movs	r0, #224	; 0xe0
 800a770:	4345      	muls	r5, r0
 800a772:	eb08 0305 	add.w	r3, r8, r5
 800a776:	f893 37da 	ldrb.w	r3, [r3, #2010]	; 0x7da
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d1d2      	bne.n	800a724 <eswifi_socket_ioctl+0x24>
	ret = k_sem_take(&socket->read_sem, K_MSEC(msecs));
 800a77e:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 800a782:	220a      	movs	r2, #10
 800a784:	fb83 2302 	smull	r2, r3, r3, r2
 800a788:	f505 6506 	add.w	r5, r5, #2144	; 0x860
	return z_impl_k_sem_take(sem, timeout);
 800a78c:	eb08 0005 	add.w	r0, r8, r5
 800a790:	f001 ff2c 	bl	800c5ec <z_impl_k_sem_take>
	if (ret) {
 800a794:	b118      	cbz	r0, 800a79e <eswifi_socket_ioctl+0x9e>
		errno = ETIMEDOUT;
 800a796:	f005 fedc 	bl	8010552 <__errno>
 800a79a:	2374      	movs	r3, #116	; 0x74
 800a79c:	e7d8      	b.n	800a750 <eswifi_socket_ioctl+0x50>
	fds[0].revents = ZSOCK_POLLIN;
 800a79e:	80f4      	strh	r4, [r6, #6]
		return -1;
	}
}
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (request) {
 800a7a6:	f06f 045e 	mvn.w	r4, #94	; 0x5e
 800a7aa:	e7f9      	b.n	800a7a0 <eswifi_socket_ioctl+0xa0>
 800a7ac:	08015fec 	.word	0x08015fec
 800a7b0:	20002510 	.word	0x20002510

0800a7b4 <eswifi_socket_close>:
{
 800a7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int sock = OBJ_TO_SD(obj);
 800a7b8:	1e47      	subs	r7, r0, #1
	if (sock >= ESWIFI_OFFLOAD_MAX_SOCKETS) {
 800a7ba:	2f03      	cmp	r7, #3
 800a7bc:	dc33      	bgt.n	800a826 <eswifi_socket_close+0x72>
	eswifi_lock(eswifi);
 800a7be:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800a82c <eswifi_socket_close+0x78>
 800a7c2:	24e0      	movs	r4, #224	; 0xe0
 800a7c4:	f8d8 0000 	ldr.w	r0, [r8]
 800a7c8:	f7ff feda 	bl	800a580 <eswifi_lock>
	socket = &eswifi->socket[sock];
 800a7cc:	437c      	muls	r4, r7
 800a7ce:	f8d8 5000 	ldr.w	r5, [r8]
 800a7d2:	f504 69fb 	add.w	r9, r4, #2008	; 0x7d8
 800a7d6:	44a9      	add	r9, r5
	ret = __eswifi_socket_free(eswifi, socket);
 800a7d8:	4649      	mov	r1, r9
 800a7da:	4628      	mov	r0, r5
 800a7dc:	f008 ff36 	bl	801364c <__eswifi_socket_free>
	if (ret) {
 800a7e0:	4606      	mov	r6, r0
 800a7e2:	b9c8      	cbnz	r0, 800a818 <eswifi_socket_close+0x64>
		pkt = k_fifo_get(&socket->fifo, K_NO_WAIT);
 800a7e4:	f604 0498 	addw	r4, r4, #2200	; 0x898
 800a7e8:	442c      	add	r4, r5
	return z_impl_k_queue_get(queue, timeout);
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f001 fea2 	bl	800c538 <z_impl_k_queue_get>
 800a7f4:	4601      	mov	r1, r0
		if (!pkt) {
 800a7f6:	b110      	cbz	r0, 800a7fe <eswifi_socket_close+0x4a>
		net_pkt_unref(pkt);
 800a7f8:	f007 f8fc 	bl	80119f4 <net_pkt_unref>
		pkt = k_fifo_get(&socket->fifo, K_NO_WAIT);
 800a7fc:	e7f5      	b.n	800a7ea <eswifi_socket_close+0x36>
	if (--socket->usage <= 0) {
 800a7fe:	22e0      	movs	r2, #224	; 0xe0
 800a800:	fb02 5507 	mla	r5, r2, r7, r5
 800a804:	f8d5 3894 	ldr.w	r3, [r5, #2196]	; 0x894
 800a808:	3b01      	subs	r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f8c5 3894 	str.w	r3, [r5, #2196]	; 0x894
 800a810:	dc02      	bgt.n	800a818 <eswifi_socket_close+0x64>
__ssp_bos_icheck3(memset, void *, int)
 800a812:	4648      	mov	r0, r9
 800a814:	f00a f805 	bl	8014822 <memset>
	eswifi_unlock(eswifi);
 800a818:	f8d8 0000 	ldr.w	r0, [r8]
 800a81c:	f008 fff4 	bl	8013808 <eswifi_unlock>
}
 800a820:	4630      	mov	r0, r6
 800a822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
 800a826:	f06f 0615 	mvn.w	r6, #21
 800a82a:	e7f9      	b.n	800a820 <eswifi_socket_close+0x6c>
 800a82c:	20002510 	.word	0x20002510

0800a830 <__process_received>:
{
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	9e05      	ldr	r6, [sp, #20]
	if (!pkt) {
 800a834:	460c      	mov	r4, r1
 800a836:	b169      	cbz	r1, 800a854 <__process_received+0x24>
	eswifi_lock(eswifi);
 800a838:	4d07      	ldr	r5, [pc, #28]	; (800a858 <__process_received+0x28>)
 800a83a:	6828      	ldr	r0, [r5, #0]
 800a83c:	f7ff fea0 	bl	800a580 <eswifi_lock>
	k_fifo_put(&socket->fifo, pkt);
 800a840:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
 800a844:	4621      	mov	r1, r4
 800a846:	f009 fbe6 	bl	8014016 <k_queue_append>
	eswifi_unlock(eswifi);
 800a84a:	6828      	ldr	r0, [r5, #0]
}
 800a84c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	eswifi_unlock(eswifi);
 800a850:	f008 bfda 	b.w	8013808 <eswifi_unlock>
}
 800a854:	bd70      	pop	{r4, r5, r6, pc}
 800a856:	bf00      	nop
 800a858:	20002510 	.word	0x20002510

0800a85c <eswifi_socket_create>:
{
 800a85c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a860:	4604      	mov	r4, r0
 800a862:	460e      	mov	r6, r1
 800a864:	4690      	mov	r8, r2
	int fd = z_reserve_fd();
 800a866:	f7f6 f841 	bl	80008ec <z_reserve_fd>
	if (fd < 0) {
 800a86a:	1e05      	subs	r5, r0, #0
 800a86c:	db3d      	blt.n	800a8ea <eswifi_socket_create+0x8e>
	eswifi_lock(eswifi);
 800a86e:	4f25      	ldr	r7, [pc, #148]	; (800a904 <eswifi_socket_create+0xa8>)
 800a870:	6838      	ldr	r0, [r7, #0]
 800a872:	f7ff fe85 	bl	800a580 <eswifi_lock>
	idx = __eswifi_socket_new(eswifi, family, type, proto, ESWIFI_INIT_CONTEXT);
 800a876:	f245 03ce 	movw	r3, #20686	; 0x50ce
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	4632      	mov	r2, r6
 800a87e:	6838      	ldr	r0, [r7, #0]
 800a880:	4643      	mov	r3, r8
 800a882:	4621      	mov	r1, r4
 800a884:	f7ff fd90 	bl	800a3a8 <__eswifi_socket_new>
	if (idx < 0) {
 800a888:	1e06      	subs	r6, r0, #0
 800a88a:	db26      	blt.n	800a8da <eswifi_socket_create+0x7e>
	socket = &eswifi->socket[idx];
 800a88c:	24e0      	movs	r4, #224	; 0xe0
 800a88e:	f8d7 8000 	ldr.w	r8, [r7]
 800a892:	4374      	muls	r4, r6
 800a894:	f504 69fb 	add.w	r9, r4, #2008	; 0x7d8
 800a898:	44c1      	add	r9, r8
	k_fifo_init(&socket->fifo);
 800a89a:	f604 0098 	addw	r0, r4, #2200	; 0x898
	z_impl_k_queue_init(queue);
 800a89e:	4440      	add	r0, r8
 800a8a0:	f009 fb8c 	bl	8013fbc <z_impl_k_queue_init>
	k_sem_init(&socket->read_sem, 0, 200);
 800a8a4:	f504 6006 	add.w	r0, r4, #2144	; 0x860
	return z_impl_k_sem_init(sem, initial_count, limit);
 800a8a8:	22c8      	movs	r2, #200	; 0xc8
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4440      	add	r0, r8
 800a8ae:	f009 fbcf 	bl	8014050 <z_impl_k_sem_init>
	socket->prev_pkt_rem = NULL;
 800a8b2:	eb08 0304 	add.w	r3, r8, r4
 800a8b6:	2200      	movs	r2, #0
	k_work_reschedule_for_queue(&eswifi->work_q, &socket->read_work,
 800a8b8:	6838      	ldr	r0, [r7, #0]
	socket->prev_pkt_rem = NULL;
 800a8ba:	f8c3 28b0 	str.w	r2, [r3, #2224]	; 0x8b0
	k_work_reschedule_for_queue(&eswifi->work_q, &socket->read_work,
 800a8be:	f604 0128 	addw	r1, r4, #2088	; 0x828
	socket->recv_cb = __process_received;
 800a8c2:	4a11      	ldr	r2, [pc, #68]	; (800a908 <eswifi_socket_create+0xac>)
 800a8c4:	f8c3 27e0 	str.w	r2, [r3, #2016]	; 0x7e0
	socket->recv_data = socket;
 800a8c8:	f8c3 97f0 	str.w	r9, [r3, #2032]	; 0x7f0
	k_work_reschedule_for_queue(&eswifi->work_q, &socket->read_work,
 800a8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4441      	add	r1, r8
 800a8d4:	3020      	adds	r0, #32
 800a8d6:	f002 f81d 	bl	800c914 <k_work_reschedule_for_queue>
	eswifi_unlock(eswifi);
 800a8da:	6838      	ldr	r0, [r7, #0]
 800a8dc:	f008 ff94 	bl	8013808 <eswifi_unlock>
	if (sock < 0) {
 800a8e0:	2e00      	cmp	r6, #0
 800a8e2:	da05      	bge.n	800a8f0 <eswifi_socket_create+0x94>
		z_free_fd(fd);
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f7f6 f855 	bl	8000994 <z_free_fd>
		return -1;
 800a8ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a8ee:	e004      	b.n	800a8fa <eswifi_socket_create+0x9e>
	z_finalize_fd(fd, SD_TO_OBJ(sock),
 800a8f0:	4a06      	ldr	r2, [pc, #24]	; (800a90c <eswifi_socket_create+0xb0>)
 800a8f2:	1c71      	adds	r1, r6, #1
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f7f6 f835 	bl	8000964 <z_finalize_fd>
}
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	b003      	add	sp, #12
 800a8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a902:	bf00      	nop
 800a904:	20002510 	.word	0x20002510
 800a908:	0800a831 	.word	0x0800a831
 800a90c:	08015fec 	.word	0x08015fec

0800a910 <eswifi_off_getaddrinfo>:
#endif

static int eswifi_off_getaddrinfo(const char *node, const char *service,
				  const struct zsock_addrinfo *hints,
				  struct zsock_addrinfo **res)
{
 800a910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a914:	460c      	mov	r4, r1
 800a916:	4617      	mov	r7, r2
 800a918:	4698      	mov	r8, r3
	struct zsock_addrinfo *ai;
	unsigned long port = 0;
	char *rsp;
	int err;

	if (!node) {
 800a91a:	4605      	mov	r5, r0
 800a91c:	b928      	cbnz	r0, 800a92a <eswifi_off_getaddrinfo+0x1a>
		return DNS_EAI_NONAME;
 800a91e:	f06f 0401 	mvn.w	r4, #1
	err = 0;

done_unlock:
	eswifi_unlock(eswifi);
	return err;
}
 800a922:	4620      	mov	r0, r4
 800a924:	b003      	add	sp, #12
 800a926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (service) {
 800a92a:	b151      	cbz	r1, 800a942 <eswifi_off_getaddrinfo+0x32>
		port = strtol(service, NULL, 10);
 800a92c:	220a      	movs	r2, #10
 800a92e:	4620      	mov	r0, r4
 800a930:	2100      	movs	r1, #0
 800a932:	f002 ffcf 	bl	800d8d4 <strtol>
		if (port < 1 || port > USHRT_MAX) {
 800a936:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a93a:	1e42      	subs	r2, r0, #1
 800a93c:	429a      	cmp	r2, r3
		port = strtol(service, NULL, 10);
 800a93e:	4604      	mov	r4, r0
		if (port < 1 || port > USHRT_MAX) {
 800a940:	d864      	bhi.n	800aa0c <eswifi_off_getaddrinfo+0xfc>
	if (!res) {
 800a942:	f1b8 0f00 	cmp.w	r8, #0
 800a946:	d0ea      	beq.n	800a91e <eswifi_off_getaddrinfo+0xe>
	if (hints && hints->ai_family != AF_INET) {
 800a948:	b117      	cbz	r7, 800a950 <eswifi_off_getaddrinfo+0x40>
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d160      	bne.n	800aa12 <eswifi_off_getaddrinfo+0x102>
	eswifi_lock(eswifi);
 800a950:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800aa18 <eswifi_off_getaddrinfo+0x108>
 800a954:	f8d9 0000 	ldr.w	r0, [r9]
 800a958:	f7ff fe12 	bl	800a580 <eswifi_lock>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "D0=%s\r", node);
 800a95c:	f8d9 0000 	ldr.w	r0, [r9]
 800a960:	4a2e      	ldr	r2, [pc, #184]	; (800aa1c <eswifi_off_getaddrinfo+0x10c>)
 800a962:	462b      	mov	r3, r5
 800a964:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800a968:	f200 1075 	addw	r0, r0, #373	; 0x175
 800a96c:	f003 ff04 	bl	800e778 <snprintk>
	err = eswifi_at_cmd_rsp(eswifi, eswifi->buf, &rsp);
 800a970:	f8d9 0000 	ldr.w	r0, [r9]
 800a974:	aa01      	add	r2, sp, #4
 800a976:	f200 1175 	addw	r1, r0, #373	; 0x175
 800a97a:	f7fe fe91 	bl	80096a0 <eswifi_at_cmd_rsp>
	if (err < 0) {
 800a97e:	2800      	cmp	r0, #0
 800a980:	db31      	blt.n	800a9e6 <eswifi_off_getaddrinfo+0xd6>
	*res = calloc(1, sizeof(struct zsock_addrinfo));
 800a982:	2140      	movs	r1, #64	; 0x40
 800a984:	2001      	movs	r0, #1
 800a986:	f002 fdfd 	bl	800d584 <calloc>
 800a98a:	4605      	mov	r5, r0
 800a98c:	f8c8 0000 	str.w	r0, [r8]
	if (!ai) {
 800a990:	b148      	cbz	r0, 800a9a6 <eswifi_off_getaddrinfo+0x96>
	ai_addr = calloc(1, sizeof(*ai_addr));
 800a992:	2108      	movs	r1, #8
 800a994:	2001      	movs	r0, #1
 800a996:	f002 fdf5 	bl	800d584 <calloc>
	if (!ai_addr) {
 800a99a:	4606      	mov	r6, r0
 800a99c:	b930      	cbnz	r0, 800a9ac <eswifi_off_getaddrinfo+0x9c>
		free(*res);
 800a99e:	f8d8 0000 	ldr.w	r0, [r8]
 800a9a2:	f002 fe13 	bl	800d5cc <free>
		err = DNS_EAI_MEMORY;
 800a9a6:	f06f 0409 	mvn.w	r4, #9
 800a9aa:	e02a      	b.n	800aa02 <eswifi_off_getaddrinfo+0xf2>
	ai->ai_family = AF_INET;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	60ab      	str	r3, [r5, #8]
	ai->ai_socktype = hints ? hints->ai_socktype : SOCK_STREAM;
 800a9b0:	b9e7      	cbnz	r7, 800a9ec <eswifi_off_getaddrinfo+0xdc>
 800a9b2:	60eb      	str	r3, [r5, #12]
	ai->ai_protocol = ai->ai_socktype == SOCK_STREAM ? IPPROTO_TCP : IPPROTO_UDP;
 800a9b4:	2306      	movs	r3, #6
	ai_addr->sin_port = htons(port);
 800a9b6:	0220      	lsls	r0, r4, #8
 800a9b8:	ea40 2414 	orr.w	r4, r0, r4, lsr #8
 800a9bc:	8074      	strh	r4, [r6, #2]
	if (!net_ipaddr_parse(rsp, strlen(rsp), (struct sockaddr *)ai_addr)) {
 800a9be:	9c01      	ldr	r4, [sp, #4]
	ai->ai_protocol = ai->ai_socktype == SOCK_STREAM ? IPPROTO_TCP : IPPROTO_UDP;
 800a9c0:	612b      	str	r3, [r5, #16]
	ai_addr->sin_family = ai->ai_family;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	8033      	strh	r3, [r6, #0]
	if (!net_ipaddr_parse(rsp, strlen(rsp), (struct sockaddr *)ai_addr)) {
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f7f5 fda9 	bl	800051e <strlen>
 800a9cc:	4632      	mov	r2, r6
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f006 fa9d 	bl	8010f10 <net_ipaddr_parse>
 800a9d6:	b980      	cbnz	r0, 800a9fa <eswifi_off_getaddrinfo+0xea>
		free(ai_addr);
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f002 fdf7 	bl	800d5cc <free>
		free(*res);
 800a9de:	f8d8 0000 	ldr.w	r0, [r8]
 800a9e2:	f002 fdf3 	bl	800d5cc <free>
		err = DNS_EAI_FAIL;
 800a9e6:	f06f 0403 	mvn.w	r4, #3
 800a9ea:	e00a      	b.n	800aa02 <eswifi_off_getaddrinfo+0xf2>
	ai->ai_socktype = hints ? hints->ai_socktype : SOCK_STREAM;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	60eb      	str	r3, [r5, #12]
	ai->ai_protocol = ai->ai_socktype == SOCK_STREAM ? IPPROTO_TCP : IPPROTO_UDP;
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	bf0c      	ite	eq
 800a9f4:	2306      	moveq	r3, #6
 800a9f6:	2311      	movne	r3, #17
 800a9f8:	e7dd      	b.n	800a9b6 <eswifi_off_getaddrinfo+0xa6>
	ai->ai_addrlen = sizeof(*ai_addr);
 800a9fa:	2308      	movs	r3, #8
	ai->ai_addr = (struct sockaddr *)ai_addr;
 800a9fc:	e9c5 3605 	strd	r3, r6, [r5, #20]
	err = 0;
 800aa00:	2400      	movs	r4, #0
	eswifi_unlock(eswifi);
 800aa02:	f8d9 0000 	ldr.w	r0, [r9]
 800aa06:	f008 feff 	bl	8013808 <eswifi_unlock>
	return err;
 800aa0a:	e78a      	b.n	800a922 <eswifi_off_getaddrinfo+0x12>
			return DNS_EAI_SERVICE;
 800aa0c:	f06f 0407 	mvn.w	r4, #7
 800aa10:	e787      	b.n	800a922 <eswifi_off_getaddrinfo+0x12>
		return DNS_EAI_FAIL;
 800aa12:	f06f 0403 	mvn.w	r4, #3
 800aa16:	e784      	b.n	800a922 <eswifi_off_getaddrinfo+0x12>
 800aa18:	20002510 	.word	0x20002510
 800aa1c:	08018e89 	.word	0x08018e89

0800aa20 <eswifi_socket_recv.constprop.0>:
static ssize_t eswifi_socket_recv(void *obj, void *buf, size_t max_len,
 800aa20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa24:	460f      	mov	r7, r1
	int sock = OBJ_TO_SD(obj);
 800aa26:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
	if ((max_len == 0) || (buf == NULL) ||
 800aa2a:	4614      	mov	r4, r2
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	d04a      	beq.n	800aac6 <eswifi_socket_recv.constprop.0+0xa6>
 800aa30:	2900      	cmp	r1, #0
 800aa32:	d048      	beq.n	800aac6 <eswifi_socket_recv.constprop.0+0xa6>
 800aa34:	f1b9 0f03 	cmp.w	r9, #3
 800aa38:	dc45      	bgt.n	800aac6 <eswifi_socket_recv.constprop.0+0xa6>
	eswifi_lock(eswifi);
 800aa3a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800aacc <eswifi_socket_recv.constprop.0+0xac>
 800aa3e:	f8d8 0000 	ldr.w	r0, [r8]
 800aa42:	f7ff fd9d 	bl	800a580 <eswifi_lock>
	socket = &eswifi->socket[sock];
 800aa46:	f8d8 6000 	ldr.w	r6, [r8]
	if (socket->prev_pkt_rem) {
 800aa4a:	20e0      	movs	r0, #224	; 0xe0
 800aa4c:	fb00 f009 	mul.w	r0, r0, r9
 800aa50:	1833      	adds	r3, r6, r0
 800aa52:	f8d3 58b0 	ldr.w	r5, [r3, #2224]	; 0x8b0
 800aa56:	b9cd      	cbnz	r5, 800aa8c <eswifi_socket_recv.constprop.0+0x6c>
	pkt = k_fifo_get(&socket->fifo, K_NO_WAIT);
 800aa58:	f600 0098 	addw	r0, r0, #2200	; 0x898
	return z_impl_k_queue_get(queue, timeout);
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4430      	add	r0, r6
 800aa62:	f001 fd69 	bl	800c538 <z_impl_k_queue_get>
	if (!pkt) {
 800aa66:	4605      	mov	r5, r0
 800aa68:	b980      	cbnz	r0, 800aa8c <eswifi_socket_recv.constprop.0+0x6c>
		errno = EAGAIN;
 800aa6a:	f005 fd72 	bl	8010552 <__errno>
 800aa6e:	230b      	movs	r3, #11
 800aa70:	6003      	str	r3, [r0, #0]
	int len = 0, ret = 0;
 800aa72:	462f      	mov	r7, r5
		len = -EAGAIN;
 800aa74:	f06f 040a 	mvn.w	r4, #10
	eswifi_unlock(eswifi);
 800aa78:	f8d8 0000 	ldr.w	r0, [r8]
 800aa7c:	f008 fec4 	bl	8013808 <eswifi_unlock>
		len = 0;
 800aa80:	2f00      	cmp	r7, #0
 800aa82:	bf18      	it	ne
 800aa84:	2400      	movne	r4, #0
}
 800aa86:	4620      	mov	r0, r4
 800aa88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	len = net_pkt_remaining_data(pkt);
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f007 f906 	bl	8011c9e <net_pkt_remaining_data>
	if (len > max_len) {
 800aa92:	4284      	cmp	r4, r0
	len = net_pkt_remaining_data(pkt);
 800aa94:	bf28      	it	cs
 800aa96:	4604      	movcs	r4, r0
 800aa98:	f04f 00e0 	mov.w	r0, #224	; 0xe0
 800aa9c:	fb00 6609 	mla	r6, r0, r9, r6
		socket->prev_pkt_rem = NULL;
 800aaa0:	bf2c      	ite	cs
 800aaa2:	2300      	movcs	r3, #0
		socket->prev_pkt_rem = pkt;
 800aaa4:	462b      	movcc	r3, r5
 800aaa6:	f8c6 38b0 	str.w	r3, [r6, #2224]	; 0x8b0
	ret = net_pkt_read(pkt, buf, len);
 800aaaa:	4639      	mov	r1, r7
 800aaac:	4622      	mov	r2, r4
 800aaae:	4628      	mov	r0, r5
 800aab0:	f007 f88b 	bl	8011bca <net_pkt_read>
	if (!socket->prev_pkt_rem) {
 800aab4:	f8d6 38b0 	ldr.w	r3, [r6, #2224]	; 0x8b0
	ret = net_pkt_read(pkt, buf, len);
 800aab8:	4607      	mov	r7, r0
	if (!socket->prev_pkt_rem) {
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1dc      	bne.n	800aa78 <eswifi_socket_recv.constprop.0+0x58>
		net_pkt_unref(pkt);
 800aabe:	4628      	mov	r0, r5
 800aac0:	f006 ff98 	bl	80119f4 <net_pkt_unref>
 800aac4:	e7d8      	b.n	800aa78 <eswifi_socket_recv.constprop.0+0x58>
		return -EINVAL;
 800aac6:	f06f 0415 	mvn.w	r4, #21
 800aaca:	e7dc      	b.n	800aa86 <eswifi_socket_recv.constprop.0+0x66>
 800aacc:	20002510 	.word	0x20002510

0800aad0 <eswifi_socket_send.constprop.0>:
static ssize_t eswifi_socket_send(void *obj, const void *buf, size_t len,
 800aad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aad4:	4614      	mov	r4, r2
	int sock = OBJ_TO_SD(obj);
 800aad6:	1e46      	subs	r6, r0, #1
	if (!buf) {
 800aad8:	4688      	mov	r8, r1
 800aada:	2900      	cmp	r1, #0
 800aadc:	d04d      	beq.n	800ab7a <eswifi_socket_send.constprop.0+0xaa>
	eswifi_lock(eswifi);
 800aade:	4d28      	ldr	r5, [pc, #160]	; (800ab80 <eswifi_socket_send.constprop.0+0xb0>)
 800aae0:	6828      	ldr	r0, [r5, #0]
 800aae2:	f7ff fd4d 	bl	800a580 <eswifi_lock>
	socket = &eswifi->socket[sock];
 800aae6:	682f      	ldr	r7, [r5, #0]
	if (socket->state != ESWIFI_SOCKET_STATE_CONNECTED) {
 800aae8:	20e0      	movs	r0, #224	; 0xe0
 800aaea:	fb00 7006 	mla	r0, r0, r6, r7
 800aaee:	f890 37da 	ldrb.w	r3, [r0, #2010]	; 0x7da
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d008      	beq.n	800ab08 <eswifi_socket_send.constprop.0+0x38>
		eswifi_unlock(eswifi);
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f008 fe86 	bl	8013808 <eswifi_unlock>
		return -ENOTCONN;
 800aafc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
}
 800ab00:	4620      	mov	r0, r4
 800ab02:	b002      	add	sp, #8
 800ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	snprintk(eswifi->buf, sizeof(eswifi->buf), "P0=%d\r", idx);
 800ab08:	f207 1675 	addw	r6, r7, #373	; 0x175
 800ab0c:	f890 37d8 	ldrb.w	r3, [r0, #2008]	; 0x7d8
 800ab10:	4a1c      	ldr	r2, [pc, #112]	; (800ab84 <eswifi_socket_send.constprop.0+0xb4>)
 800ab12:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800ab16:	4630      	mov	r0, r6
 800ab18:	f003 fe2e 	bl	800e778 <snprintk>
	return eswifi_at_cmd(eswifi, eswifi->buf);
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4638      	mov	r0, r7
 800ab20:	f008 fbd5 	bl	80132ce <eswifi_at_cmd>
	snprintk(eswifi->buf, sizeof(eswifi->buf), "S3=%u\r", len);
 800ab24:	6828      	ldr	r0, [r5, #0]
 800ab26:	4a18      	ldr	r2, [pc, #96]	; (800ab88 <eswifi_socket_send.constprop.0+0xb8>)
 800ab28:	4623      	mov	r3, r4
 800ab2a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800ab2e:	f200 1075 	addw	r0, r0, #373	; 0x175
 800ab32:	f003 fe21 	bl	800e778 <snprintk>
	offset = strlen(eswifi->buf);
 800ab36:	6828      	ldr	r0, [r5, #0]
 800ab38:	f200 1075 	addw	r0, r0, #373	; 0x175
 800ab3c:	f7f5 fcef 	bl	800051e <strlen>
	memcpy(&eswifi->buf[offset], buf, len);
 800ab40:	682f      	ldr	r7, [r5, #0]
	offset = strlen(eswifi->buf);
 800ab42:	4606      	mov	r6, r0
	memcpy(&eswifi->buf[offset], buf, len);
 800ab44:	f200 1075 	addw	r0, r0, #373	; 0x175
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800ab48:	4622      	mov	r2, r4
 800ab4a:	4641      	mov	r1, r8
 800ab4c:	4438      	add	r0, r7
 800ab4e:	f009 fe2d 	bl	80147ac <memcpy>
	return eswifi->bus->request(eswifi, cmd, clen, rsp, rlen);
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	f44f 60c8 	mov.w	r0, #1600	; 0x640
	offset += len;
 800ab58:	19a2      	adds	r2, r4, r6
 800ab5a:	9000      	str	r0, [sp, #0]
	ret = eswifi_request(eswifi, eswifi->buf, offset + 1, eswifi->buf,
 800ab5c:	f207 1375 	addw	r3, r7, #373	; 0x175
 800ab60:	684e      	ldr	r6, [r1, #4]
 800ab62:	3201      	adds	r2, #1
 800ab64:	4619      	mov	r1, r3
 800ab66:	4638      	mov	r0, r7
 800ab68:	47b0      	blx	r6
		ret = len;
 800ab6a:	2800      	cmp	r0, #0
	eswifi_unlock(eswifi);
 800ab6c:	6828      	ldr	r0, [r5, #0]
		ret = len;
 800ab6e:	bfb8      	it	lt
 800ab70:	f06f 0404 	mvnlt.w	r4, #4
	eswifi_unlock(eswifi);
 800ab74:	f008 fe48 	bl	8013808 <eswifi_unlock>
	return ret;
 800ab78:	e7c2      	b.n	800ab00 <eswifi_socket_send.constprop.0+0x30>
		return -EINVAL;
 800ab7a:	f06f 0415 	mvn.w	r4, #21
 800ab7e:	e7bf      	b.n	800ab00 <eswifi_socket_send.constprop.0+0x30>
 800ab80:	20002510 	.word	0x20002510
 800ab84:	08018def 	.word	0x08018def
 800ab88:	08018dfd 	.word	0x08018dfd

0800ab8c <eswifi_socket_offload_init>:
	.getaddrinfo = eswifi_off_getaddrinfo,
	.freeaddrinfo = eswifi_off_freeaddrinfo,
};

int eswifi_socket_offload_init(struct eswifi_dev *leswifi)
{
 800ab8c:	b508      	push	{r3, lr}
	eswifi = leswifi;
 800ab8e:	4b03      	ldr	r3, [pc, #12]	; (800ab9c <eswifi_socket_offload_init+0x10>)
 800ab90:	6018      	str	r0, [r3, #0]

	socket_offload_dns_register(&eswifi_dns_ops);
 800ab92:	4803      	ldr	r0, [pc, #12]	; (800aba0 <eswifi_socket_offload_init+0x14>)
 800ab94:	f7f8 fdd6 	bl	8003744 <socket_offload_dns_register>

	return 0;
}
 800ab98:	2000      	movs	r0, #0
 800ab9a:	bd08      	pop	{r3, pc}
 800ab9c:	20002510 	.word	0x20002510
 800aba0:	08015fe4 	.word	0x08015fe4

0800aba4 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800aba4:	6843      	ldr	r3, [r0, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800aba8:	689a      	ldr	r2, [r3, #8]
 800abaa:	f042 0201 	orr.w	r2, r2, #1
 800abae:	609a      	str	r2, [r3, #8]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800abb0:	4a0d      	ldr	r2, [pc, #52]	; (800abe8 <uart_stm32_irq_err_enable+0x44>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d00f      	beq.n	800abd6 <uart_stm32_irq_err_enable+0x32>
 800abb6:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800abba:	4293      	cmp	r3, r2
 800abbc:	d00b      	beq.n	800abd6 <uart_stm32_irq_err_enable+0x32>
 800abbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d007      	beq.n	800abd6 <uart_stm32_irq_err_enable+0x32>
 800abc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abca:	4293      	cmp	r3, r2
 800abcc:	d003      	beq.n	800abd6 <uart_stm32_irq_err_enable+0x32>
 800abce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d103      	bne.n	800abde <uart_stm32_irq_err_enable+0x3a>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abdc:	605a      	str	r2, [r3, #4]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abe4:	601a      	str	r2, [r3, #0]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 800abe6:	4770      	bx	lr
 800abe8:	40013800 	.word	0x40013800

0800abec <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800abec:	6843      	ldr	r3, [r0, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800abf0:	689a      	ldr	r2, [r3, #8]
 800abf2:	f022 0201 	bic.w	r2, r2, #1
 800abf6:	609a      	str	r2, [r3, #8]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800abf8:	4a0d      	ldr	r2, [pc, #52]	; (800ac30 <uart_stm32_irq_err_disable+0x44>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00f      	beq.n	800ac1e <uart_stm32_irq_err_disable+0x32>
 800abfe:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d00b      	beq.n	800ac1e <uart_stm32_irq_err_disable+0x32>
 800ac06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d007      	beq.n	800ac1e <uart_stm32_irq_err_disable+0x32>
 800ac0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d003      	beq.n	800ac1e <uart_stm32_irq_err_disable+0x32>
 800ac16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d103      	bne.n	800ac26 <uart_stm32_irq_err_disable+0x3a>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800ac1e:	685a      	ldr	r2, [r3, #4]
 800ac20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac2c:	601a      	str	r2, [r3, #0]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 800ac2e:	4770      	bx	lr
 800ac30:	40013800 	.word	0x40013800

0800ac34 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800ac34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uart_stm32_config *config = dev->config;
 800ac38:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800ac3a:	f8d0 8010 	ldr.w	r8, [r0, #16]
	data->clock = clk;
 800ac3e:	4d36      	ldr	r5, [pc, #216]	; (800ad18 <uart_stm32_init+0xe4>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800ac40:	46b9      	mov	r9, r7
{
 800ac42:	4606      	mov	r6, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800ac44:	f859 4b0c 	ldr.w	r4, [r9], #12
	data->clock = clk;
 800ac48:	f8c8 5004 	str.w	r5, [r8, #4]
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f009 f835 	bl	8013cbc <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800ac52:	b920      	cbnz	r0, 800ac5e <uart_stm32_init+0x2a>

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
 800ac54:	f06f 0004 	mvn.w	r0, #4
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800ac58:	b003      	add	sp, #12
 800ac5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return api->on(dev, sys);
 800ac5e:	68ab      	ldr	r3, [r5, #8]
 800ac60:	4628      	mov	r0, r5
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4649      	mov	r1, r9
 800ac66:	4798      	blx	r3
	if (clock_control_on(data->clock,
 800ac68:	4605      	mov	r5, r0
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d1f2      	bne.n	800ac54 <uart_stm32_init+0x20>
	ret = pinctrl_lookup_state(config, id, &state);
 800ac6e:	4601      	mov	r1, r0
 800ac70:	aa01      	add	r2, sp, #4
 800ac72:	6a38      	ldr	r0, [r7, #32]
 800ac74:	f008 ff5a 	bl	8013b2c <pinctrl_lookup_state>
	if (ret < 0) {
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	dbed      	blt.n	800ac58 <uart_stm32_init+0x24>
	return pinctrl_apply_state_direct(config, state);
 800ac7c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800ac7e:	462a      	mov	r2, r5
 800ac80:	7919      	ldrb	r1, [r3, #4]
 800ac82:	6818      	ldr	r0, [r3, #0]
 800ac84:	f000 fb86 	bl	800b394 <pinctrl_configure_pins>
	if (err < 0) {
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	dbe5      	blt.n	800ac58 <uart_stm32_init+0x24>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	f023 0301 	bic.w	r3, r3, #1
 800ac92:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	f043 030c 	orr.w	r3, r3, #12
 800ac9a:	6023      	str	r3, [r4, #0]
	if (config->parity == 2) {
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d030      	beq.n	800ad04 <uart_stm32_init+0xd0>
	} else if (config->parity == 1) {
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d033      	beq.n	800ad0e <uart_stm32_init+0xda>
		ll_parity = LL_USART_PARITY_NONE;
 800aca6:	4628      	mov	r0, r5
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800acb2:	4305      	orrs	r5, r0
 800acb4:	431d      	orrs	r5, r3
 800acb6:	6025      	str	r5, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800acbe:	6063      	str	r3, [r4, #4]
	if (config->hw_flow_control) {
 800acc0:	7d3b      	ldrb	r3, [r7, #20]
 800acc2:	b12b      	cbz	r3, 800acd0 <uart_stm32_init+0x9c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800acc4:	6873      	ldr	r3, [r6, #4]
 800acc6:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800acc8:	6893      	ldr	r3, [r2, #8]
 800acca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800acce:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800acd0:	f8d8 1000 	ldr.w	r1, [r8]
 800acd4:	4630      	mov	r0, r6
 800acd6:	f008 fe09 	bl	80138ec <uart_stm32_set_baudrate>
	if (config->single_wire) {
 800acda:	7f3b      	ldrb	r3, [r7, #28]
 800acdc:	b11b      	cbz	r3, 800ace6 <uart_stm32_init+0xb2>
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800acde:	68a3      	ldr	r3, [r4, #8]
 800ace0:	f043 0308 	orr.w	r3, r3, #8
 800ace4:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	f043 0301 	orr.w	r3, r3, #1
 800acec:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800acee:	69e3      	ldr	r3, [r4, #28]
 800acf0:	029a      	lsls	r2, r3, #10
 800acf2:	d5fc      	bpl.n	800acee <uart_stm32_init+0xba>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800acf4:	69e3      	ldr	r3, [r4, #28]
 800acf6:	025b      	lsls	r3, r3, #9
 800acf8:	d5fc      	bpl.n	800acf4 <uart_stm32_init+0xc0>
	config->uconf.irq_config_func(dev);
 800acfa:	4630      	mov	r0, r6
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	4798      	blx	r3
	return 0;
 800ad00:	2000      	movs	r0, #0
 800ad02:	e7a9      	b.n	800ac58 <uart_stm32_init+0x24>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800ad04:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800ad08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ad0c:	e7cc      	b.n	800aca8 <uart_stm32_init+0x74>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800ad0e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800ad12:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800ad16:	e7c7      	b.n	800aca8 <uart_stm32_init+0x74>
 800ad18:	08014d98 	.word	0x08014d98

0800ad1c <uart_stm32_configure>:
{
 800ad1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800ad20:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800ad22:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800ad24:	681c      	ldr	r4, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800ad26:	790b      	ldrb	r3, [r1, #4]
	switch (parity) {
 800ad28:	2b01      	cmp	r3, #1
{
 800ad2a:	460d      	mov	r5, r1
	switch (parity) {
 800ad2c:	d01c      	beq.n	800ad68 <uart_stm32_configure+0x4c>
		return LL_USART_PARITY_NONE;
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	bf0c      	ite	eq
 800ad32:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800ad36:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800ad38:	f895 9005 	ldrb.w	r9, [r5, #5]
	switch (sb) {
 800ad3c:	f1b9 0f02 	cmp.w	r9, #2
 800ad40:	bf9c      	itt	ls
 800ad42:	4a49      	ldrls	r2, [pc, #292]	; (800ae68 <uart_stm32_configure+0x14c>)
 800ad44:	f832 e019 	ldrhls.w	lr, [r2, r9, lsl #1]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800ad48:	79aa      	ldrb	r2, [r5, #6]
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800ad4a:	bf88      	it	hi
 800ad4c:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
	switch (db) {
 800ad50:	2a02      	cmp	r2, #2
 800ad52:	d00c      	beq.n	800ad6e <uart_stm32_configure+0x52>
 800ad54:	2a04      	cmp	r2, #4
 800ad56:	f000 8081 	beq.w	800ae5c <uart_stm32_configure+0x140>
			return LL_USART_DATAWIDTH_8B;
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	bf14      	ite	ne
 800ad5e:	f44f 5c80 	movne.w	ip, #4096	; 0x1000
 800ad62:	f04f 0c00 	moveq.w	ip, #0
 800ad66:	e008      	b.n	800ad7a <uart_stm32_configure+0x5e>
	switch (parity) {
 800ad68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ad6c:	e7e4      	b.n	800ad38 <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bf0c      	ite	eq
 800ad72:	f04f 5c80 	moveq.w	ip, #268435456	; 0x10000000
 800ad76:	f04f 0c00 	movne.w	ip, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800ad7a:	f895 8007 	ldrb.w	r8, [r5, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800ad7e:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800ad82:	f1b8 0f01 	cmp.w	r8, #1
 800ad86:	bf14      	ite	ne
 800ad88:	2700      	movne	r7, #0
 800ad8a:	f44f 7740 	moveq.w	r7, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800ad8e:	f1ba 0f01 	cmp.w	sl, #1
 800ad92:	d966      	bls.n	800ae62 <uart_stm32_configure+0x146>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800ad94:	b10b      	cbz	r3, 800ad9a <uart_stm32_configure+0x7e>
 800ad96:	2a04      	cmp	r2, #4
 800ad98:	d063      	beq.n	800ae62 <uart_stm32_configure+0x146>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800ad9a:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 800ad9e:	d060      	beq.n	800ae62 <uart_stm32_configure+0x146>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800ada0:	2a01      	cmp	r2, #1
 800ada2:	d95e      	bls.n	800ae62 <uart_stm32_configure+0x146>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 800ada4:	2a04      	cmp	r2, #4
 800ada6:	d05c      	beq.n	800ae62 <uart_stm32_configure+0x146>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800ada8:	f1b8 0f00 	cmp.w	r8, #0
 800adac:	d019      	beq.n	800ade2 <uart_stm32_configure+0xc6>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800adae:	4b2f      	ldr	r3, [pc, #188]	; (800ae6c <uart_stm32_configure+0x150>)
 800adb0:	429c      	cmp	r4, r3
 800adb2:	d013      	beq.n	800addc <uart_stm32_configure+0xc0>
 800adb4:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800adb8:	429c      	cmp	r4, r3
 800adba:	d00f      	beq.n	800addc <uart_stm32_configure+0xc0>
 800adbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adc0:	429c      	cmp	r4, r3
 800adc2:	d00b      	beq.n	800addc <uart_stm32_configure+0xc0>
 800adc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adc8:	429c      	cmp	r4, r3
 800adca:	d007      	beq.n	800addc <uart_stm32_configure+0xc0>
 800adcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800add0:	429c      	cmp	r4, r3
 800add2:	d003      	beq.n	800addc <uart_stm32_configure+0xc0>
 800add4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800add8:	429c      	cmp	r4, r3
 800adda:	d142      	bne.n	800ae62 <uart_stm32_configure+0x146>
 800addc:	f1b8 0f01 	cmp.w	r8, #1
 800ade0:	d13f      	bne.n	800ae62 <uart_stm32_configure+0x146>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 800adf0:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800adf2:	bf1f      	itttt	ne
 800adf4:	6823      	ldrne	r3, [r4, #0]
 800adf6:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800adfa:	430b      	orrne	r3, r1
 800adfc:	6023      	strne	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800adfe:	6863      	ldr	r3, [r4, #4]
 800ae00:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800ae04:	459e      	cmp	lr, r3
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800ae06:	bf1f      	itttt	ne
 800ae08:	6861      	ldrne	r1, [r4, #4]
 800ae0a:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 800ae0e:	ea41 010e 	orrne.w	r1, r1, lr
 800ae12:	6061      	strne	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800ae14:	6823      	ldr	r3, [r4, #0]
	if (cfg->baudrate != data->baud_rate) {
 800ae16:	6829      	ldr	r1, [r5, #0]
 800ae18:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 800ae1c:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800ae1e:	bf1f      	itttt	ne
 800ae20:	6822      	ldrne	r2, [r4, #0]
 800ae22:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 800ae26:	ea42 020c 	orrne.w	r2, r2, ip
 800ae2a:	6022      	strne	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800ae32:	429f      	cmp	r7, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800ae34:	bf1f      	itttt	ne
 800ae36:	68a3      	ldrne	r3, [r4, #8]
 800ae38:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 800ae3c:	433b      	orrne	r3, r7
 800ae3e:	60a3      	strne	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 800ae40:	6833      	ldr	r3, [r6, #0]
 800ae42:	4299      	cmp	r1, r3
 800ae44:	d003      	beq.n	800ae4e <uart_stm32_configure+0x132>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800ae46:	f008 fd51 	bl	80138ec <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	f043 0301 	orr.w	r3, r3, #1
 800ae54:	6023      	str	r3, [r4, #0]
	return 0;
 800ae56:	2000      	movs	r0, #0
};
 800ae58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 800ae5c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800ae60:	e78b      	b.n	800ad7a <uart_stm32_configure+0x5e>
		return -ENOTSUP;
 800ae62:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800ae66:	e7f7      	b.n	800ae58 <uart_stm32_configure+0x13c>
 800ae68:	080161b0 	.word	0x080161b0
 800ae6c:	40013800 	.word	0x40013800

0800ae70 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 800ae70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae72:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
 800ae74:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
 800ae76:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
 800ae78:	f04f 0010 	mov.w	r0, #16
 800ae7c:	f3ef 8e11 	mrs	lr, BASEPRI
 800ae80:	f380 8812 	msr	BASEPRI_MAX, r0
 800ae84:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 800ae88:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 800ae8a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
 800ae8e:	1ba4      	subs	r4, r4, r6
 800ae90:	403c      	ands	r4, r7
	if (available < len) {
 800ae92:	42a2      	cmp	r2, r4
		len = available;
 800ae94:	bf88      	it	hi
 800ae96:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 800ae98:	18b0      	adds	r0, r6, r2
 800ae9a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
 800ae9c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
 800ae9e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
 800aea0:	f38e 8811 	msr	BASEPRI, lr
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
 800aeaa:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
 800aeac:	4290      	cmp	r0, r2
 800aeae:	d11c      	bne.n	800aeea <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
 800aeb0:	4566      	cmp	r6, ip
 800aeb2:	d10d      	bne.n	800aed0 <rng_pool_get+0x60>
	__asm__ volatile(
 800aeb4:	f04f 0510 	mov.w	r5, #16
 800aeb8:	f3ef 8011 	mrs	r0, BASEPRI
 800aebc:	f385 8812 	msr	BASEPRI_MAX, r5
 800aec0:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
 800aec4:	781d      	ldrb	r5, [r3, #0]
 800aec6:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
 800aec8:	f380 8811 	msr	BASEPRI, r0
 800aecc:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
 800aed0:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
 800aed2:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
 800aed4:	b290      	uxth	r0, r2
	available = available - len;
 800aed6:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d305      	bcc.n	800aee8 <rng_pool_get+0x78>
		LL_RNG_EnableIT(entropy_stm32_rng_data.rng);
 800aedc:	4b07      	ldr	r3, [pc, #28]	; (800aefc <rng_pool_get+0x8c>)
 800aede:	681a      	ldr	r2, [r3, #0]
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_EnableIT(RNG_TypeDef *RNGx)
{
  SET_BIT(RNGx->CR, RNG_CR_IE);
 800aee0:	6813      	ldr	r3, [r2, #0]
 800aee2:	f043 0308 	orr.w	r3, r3, #8
 800aee6:	6013      	str	r3, [r2, #0]
	}

	return len;
}
 800aee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
 800aeea:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
 800aeee:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
 800aef0:	f89e e005 	ldrb.w	lr, [lr, #5]
 800aef4:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
 800aef8:	403d      	ands	r5, r7
 800aefa:	e7d7      	b.n	800aeac <rng_pool_get+0x3c>
 800aefc:	200002a8 	.word	0x200002a8

0800af00 <entropy_stm32_rng_get_entropy>:
}

static int entropy_stm32_rng_get_entropy(const struct device *dev,
					 uint8_t *buf,
					 uint16_t len)
{
 800af00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
 800af04:	4f13      	ldr	r7, [pc, #76]	; (800af54 <entropy_stm32_rng_get_entropy+0x54>)
 800af06:	460d      	mov	r5, r1
 800af08:	4614      	mov	r4, r2

	while (len) {
		uint16_t bytes;

		k_sem_take(&entropy_stm32_rng_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get(
 800af0a:	f107 0845 	add.w	r8, r7, #69	; 0x45
 800af0e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
 800af12:	b914      	cbnz	r4, 800af1a <entropy_stm32_rng_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
 800af14:	4620      	mov	r0, r4
 800af16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af22:	4638      	mov	r0, r7
 800af24:	f001 fb62 	bl	800c5ec <z_impl_k_sem_take>
		bytes = rng_pool_get(
 800af28:	4622      	mov	r2, r4
 800af2a:	4629      	mov	r1, r5
 800af2c:	4640      	mov	r0, r8
 800af2e:	f7ff ff9f 	bl	800ae70 <rng_pool_get>
 800af32:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
 800af34:	4638      	mov	r0, r7
 800af36:	f001 fb33 	bl	800c5a0 <z_impl_k_sem_give>
		if (bytes == 0U) {
 800af3a:	b93e      	cbnz	r6, 800af4c <entropy_stm32_rng_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
 800af3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af44:	4648      	mov	r0, r9
 800af46:	f001 fb51 	bl	800c5ec <z_impl_k_sem_take>
			continue;
 800af4a:	e7e2      	b.n	800af12 <entropy_stm32_rng_get_entropy+0x12>
		len -= bytes;
 800af4c:	1ba4      	subs	r4, r4, r6
 800af4e:	b2a4      	uxth	r4, r4
		buf += bytes;
 800af50:	4435      	add	r5, r6
 800af52:	e7de      	b.n	800af12 <entropy_stm32_rng_get_entropy+0x12>
 800af54:	200002b0 	.word	0x200002b0

0800af58 <entropy_stm32_rng_init>:
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 800af58:	4b33      	ldr	r3, [pc, #204]	; (800b028 <entropy_stm32_rng_init+0xd0>)
 800af5a:	68da      	ldr	r2, [r3, #12]
 800af5c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800af60:	f042 0201 	orr.w	r2, r2, #1

	return cnt;
}

static int entropy_stm32_rng_init(const struct device *dev)
{
 800af64:	b570      	push	{r4, r5, r6, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 800af66:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 800af68:	6845      	ldr	r5, [r0, #4]
 800af6a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 800af6c:	691a      	ldr	r2, [r3, #16]
 800af6e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800af72:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800af76:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800af7a:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800af82:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 800af84:	691a      	ldr	r2, [r3, #16]
 800af86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800af8a:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	0112      	lsls	r2, r2, #4
 800af90:	d5fc      	bpl.n	800af8c <entropy_stm32_rng_init+0x34>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 800af92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	z_stm32_hsem_unlock(CFG_HW_CLK48_CONFIG_SEMID);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

#endif /* CONFIG_SOC_SERIES_STM32L4X */

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 800af96:	4e25      	ldr	r6, [pc, #148]	; (800b02c <entropy_stm32_rng_init+0xd4>)
 800af98:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800af9c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800afa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800afa4:	6066      	str	r6, [r4, #4]
 800afa6:	4630      	mov	r0, r6
 800afa8:	f008 fe88 	bl	8013cbc <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800afac:	b120      	cbz	r0, 800afb8 <entropy_stm32_rng_init+0x60>
	return api->on(dev, sys);
 800afae:	68b3      	ldr	r3, [r6, #8]
 800afb0:	4629      	mov	r1, r5
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4630      	mov	r0, r6
 800afb6:	4798      	blx	r3
#endif
	/* Write RNG HTCR configuration */
	LL_RNG_SetHealthConfig(dev_data->rng, DT_INST_PROP(0, health_test_config));
#endif

	LL_RNG_EnableIT(dev_data->rng);
 800afb8:	4620      	mov	r0, r4
 800afba:	f850 3b08 	ldr.w	r3, [r0], #8
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	f042 0208 	orr.w	r2, r2, #8
 800afc4:	601a      	str	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	f042 0204 	orr.w	r2, r2, #4
 800afcc:	601a      	str	r2, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
 800afce:	2201      	movs	r2, #1
 800afd0:	4611      	mov	r1, r2
 800afd2:	f009 f83d 	bl	8014050 <z_impl_k_sem_init>
 800afd6:	2201      	movs	r2, #1
 800afd8:	2100      	movs	r1, #0
 800afda:	f104 0020 	add.w	r0, r4, #32
 800afde:	f009 f837 	bl	8014050 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
 800afe2:	2307      	movs	r3, #7
 800afe4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	rngp->threshold	  = threshold;
 800afe8:	2304      	movs	r3, #4
 800afea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
	rngp->mask	  = size - 1;
 800afee:	230f      	movs	r3, #15
	rngp->first_alloc = 0U;
 800aff0:	2500      	movs	r5, #0
	rngp->mask	  = size - 1;
 800aff2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	rngp->threshold	  = threshold;
 800aff6:	230c      	movs	r3, #12
 800aff8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 800affc:	462a      	mov	r2, r5
 800affe:	4629      	mov	r1, r5
	rngp->first_alloc = 0U;
 800b000:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
	rngp->first_read  = 0U;
 800b004:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
	rngp->last	  = 0U;
 800b008:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
	rngp->first_alloc = 0U;
 800b00c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	rngp->first_read  = 0U;
 800b010:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
	rngp->last	  = 0U;
 800b014:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 800b018:	2050      	movs	r0, #80	; 0x50
 800b01a:	f7f8 fbdf 	bl	80037dc <z_arm_irq_priority_set>
	irq_enable(IRQN);
 800b01e:	2050      	movs	r0, #80	; 0x50
 800b020:	f7f8 fbaa 	bl	8003778 <arch_irq_enable>

	return 0;
}
 800b024:	4628      	mov	r0, r5
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	40021000 	.word	0x40021000
 800b02c:	08014d98 	.word	0x08014d98

0800b030 <random_byte_get>:
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 800b030:	4b17      	ldr	r3, [pc, #92]	; (800b090 <random_byte_get+0x60>)
 800b032:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
 800b034:	f04f 0210 	mov.w	r2, #16
 800b038:	f3ef 8111 	mrs	r1, BASEPRI
 800b03c:	f382 8812 	msr	BASEPRI_MAX, r2
 800b040:	f3bf 8f6f 	isb	sy
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	0652      	lsls	r2, r2, #25
 800b048:	d405      	bmi.n	800b056 <random_byte_get+0x26>
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800b04a:	685a      	ldr	r2, [r3, #4]
	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
 800b04c:	07d0      	lsls	r0, r2, #31
 800b04e:	d413      	bmi.n	800b078 <random_byte_get+0x48>
	int retval = -EAGAIN;
 800b050:	f06f 000a 	mvn.w	r0, #10
 800b054:	e00b      	b.n	800b06e <random_byte_get+0x3e>
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 800b056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b05a:	605a      	str	r2, [r3, #4]
 800b05c:	220c      	movs	r2, #12
	for (int i = 0; i < 12; ++i) {
 800b05e:	3a01      	subs	r2, #1
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 800b060:	6898      	ldr	r0, [r3, #8]
 800b062:	d1fc      	bne.n	800b05e <random_byte_get+0x2e>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800b064:	685a      	ldr	r2, [r3, #4]
 800b066:	0652      	lsls	r2, r2, #25
 800b068:	d5ef      	bpl.n	800b04a <random_byte_get+0x1a>
		retval = -EIO;
 800b06a:	f06f 0004 	mvn.w	r0, #4
	__asm__ volatile(
 800b06e:	f381 8811 	msr	BASEPRI, r1
 800b072:	f3bf 8f6f 	isb	sy
}
 800b076:	4770      	bx	lr
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	0790      	lsls	r0, r2, #30
 800b07c:	d4f5      	bmi.n	800b06a <random_byte_get+0x3a>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800b07e:	685a      	ldr	r2, [r3, #4]
 800b080:	0652      	lsls	r2, r2, #25
 800b082:	d4f2      	bmi.n	800b06a <random_byte_get+0x3a>
  return (uint32_t)(READ_REG(RNGx->DR));
 800b084:	6898      	ldr	r0, [r3, #8]
		if (retval == 0) {
 800b086:	2800      	cmp	r0, #0
 800b088:	d0e2      	beq.n	800b050 <random_byte_get+0x20>
		retval &= 0xFF;
 800b08a:	b2c0      	uxtb	r0, r0
 800b08c:	e7ef      	b.n	800b06e <random_byte_get+0x3e>
 800b08e:	bf00      	nop
 800b090:	200002a8 	.word	0x200002a8

0800b094 <entropy_stm32_rng_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 800b094:	07d8      	lsls	r0, r3, #31
{
 800b096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b09a:	460f      	mov	r7, r1
 800b09c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 800b09e:	d404      	bmi.n	800b0aa <entropy_stm32_rng_get_entropy_isr+0x16>
		return rng_pool_get(
 800b0a0:	481e      	ldr	r0, [pc, #120]	; (800b11c <entropy_stm32_rng_get_entropy_isr+0x88>)
 800b0a2:	f7ff fee5 	bl	800ae70 <rng_pool_get>
}
 800b0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
 800b0aa:	b37a      	cbz	r2, 800b10c <entropy_stm32_rng_get_entropy_isr+0x78>
	__asm__ volatile(
 800b0ac:	f04f 0310 	mov.w	r3, #16
 800b0b0:	f3ef 8511 	mrs	r5, BASEPRI
 800b0b4:	f383 8812 	msr	BASEPRI_MAX, r3
 800b0b8:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 800b0bc:	2050      	movs	r0, #80	; 0x50
 800b0be:	f7f8 fb7f 	bl	80037c0 <arch_irq_is_enabled>
 800b0c2:	4606      	mov	r6, r0
		irq_disable(IRQN);
 800b0c4:	2050      	movs	r0, #80	; 0x50
 800b0c6:	f7f8 fb67 	bl	8003798 <arch_irq_disable>
	__asm__ volatile(
 800b0ca:	f385 8811 	msr	BASEPRI, r5
 800b0ce:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0d2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800b120 <entropy_stm32_rng_get_entropy_isr+0x8c>
			while (LL_RNG_IsActiveFlag_DRDY(
 800b0d6:	f8df a04c 	ldr.w	sl, [pc, #76]	; 800b124 <entropy_stm32_rng_get_entropy_isr+0x90>
 800b0da:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800b0de:	f8c8 9188 	str.w	r9, [r8, #392]	; 0x188
 800b0e2:	4625      	mov	r5, r4
 800b0e4:	f8da 3000 	ldr.w	r3, [sl]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	07db      	lsls	r3, r3, #31
 800b0ec:	d510      	bpl.n	800b110 <entropy_stm32_rng_get_entropy_isr+0x7c>
			byte = random_byte_get();
 800b0ee:	f7ff ff9f 	bl	800b030 <random_byte_get>
			if (byte < 0) {
 800b0f2:	1e03      	subs	r3, r0, #0
 800b0f4:	f8c8 9188 	str.w	r9, [r8, #392]	; 0x188
 800b0f8:	dbf4      	blt.n	800b0e4 <entropy_stm32_rng_get_entropy_isr+0x50>
			buf[--len] = byte;
 800b0fa:	3d01      	subs	r5, #1
 800b0fc:	b2ad      	uxth	r5, r5
 800b0fe:	557b      	strb	r3, [r7, r5]
		} while (len);
 800b100:	2d00      	cmp	r5, #0
 800b102:	d1ef      	bne.n	800b0e4 <entropy_stm32_rng_get_entropy_isr+0x50>
		if (irq_enabled) {
 800b104:	b116      	cbz	r6, 800b10c <entropy_stm32_rng_get_entropy_isr+0x78>
			irq_enable(IRQN);
 800b106:	2050      	movs	r0, #80	; 0x50
 800b108:	f7f8 fb36 	bl	8003778 <arch_irq_enable>
	return cnt;
 800b10c:	4620      	mov	r0, r4
 800b10e:	e7ca      	b.n	800b0a6 <entropy_stm32_rng_get_entropy_isr+0x12>
  __ASM volatile ("dsb 0xF":::"memory");
 800b110:	f3bf 8f4f 	dsb	sy
				__WFE();
 800b114:	bf20      	wfe
				__SEV();
 800b116:	bf40      	sev
				__WFE();
 800b118:	bf20      	wfe
 800b11a:	e7e3      	b.n	800b0e4 <entropy_stm32_rng_get_entropy_isr+0x50>
 800b11c:	200002e0 	.word	0x200002e0
 800b120:	e000e100 	.word	0xe000e100
 800b124:	200002a8 	.word	0x200002a8

0800b128 <stm32_rng_isr>:
{
 800b128:	b510      	push	{r4, lr}
	byte = random_byte_get();
 800b12a:	f7ff ff81 	bl	800b030 <random_byte_get>
	if (byte < 0) {
 800b12e:	2800      	cmp	r0, #0
 800b130:	db22      	blt.n	800b178 <stm32_rng_isr+0x50>
	uint8_t last  = rngp->last;
 800b132:	4b18      	ldr	r3, [pc, #96]	; (800b194 <stm32_rng_isr+0x6c>)
 800b134:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	if (((last - first) & mask) == mask) {
 800b138:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
	uint8_t mask  = rngp->mask;
 800b13c:	f893 403b 	ldrb.w	r4, [r3, #59]	; 0x3b
	if (((last - first) & mask) == mask) {
 800b140:	1a51      	subs	r1, r2, r1
 800b142:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 800b146:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
 800b148:	d10f      	bne.n	800b16a <stm32_rng_isr+0x42>
	uint8_t last  = rngp->last;
 800b14a:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
	if (((last - first) & mask) == mask) {
 800b14e:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
	uint8_t mask  = rngp->mask;
 800b152:	f893 4050 	ldrb.w	r4, [r3, #80]	; 0x50
	if (((last - first) & mask) == mask) {
 800b156:	1a51      	subs	r1, r2, r1
 800b158:	ea34 0101 	bics.w	r1, r4, r1
 800b15c:	d10d      	bne.n	800b17a <stm32_rng_isr+0x52>
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
 800b15e:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(RNGx->CR, RNG_CR_IE);
 800b160:	6813      	ldr	r3, [r2, #0]
 800b162:	f023 0308 	bic.w	r3, r3, #8
 800b166:	6013      	str	r3, [r2, #0]
}
 800b168:	e00e      	b.n	800b188 <stm32_rng_isr+0x60>
	rngp->buffer[last] = byte;
 800b16a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
 800b16c:	3201      	adds	r2, #1
 800b16e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
 800b170:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
	rngp->last = (last + 1) & mask;
 800b174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b178:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
 800b17a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
 800b17c:	3201      	adds	r2, #1
 800b17e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
 800b180:	f881 0052 	strb.w	r0, [r1, #82]	; 0x52
	rngp->last = (last + 1) & mask;
 800b184:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	z_impl_k_sem_give(sem);
 800b188:	4803      	ldr	r0, [pc, #12]	; (800b198 <stm32_rng_isr+0x70>)
}
 800b18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b18e:	f001 ba07 	b.w	800c5a0 <z_impl_k_sem_give>
 800b192:	bf00      	nop
 800b194:	200002a8 	.word	0x200002a8
 800b198:	200002c8 	.word	0x200002c8

0800b19c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800b19c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800b1a0:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800b1a2:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800b1a4:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800b1a6:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800b1a8:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <elapsed+0x34>)
 800b1aa:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800b1ae:	4909      	ldr	r1, [pc, #36]	; (800b1d4 <elapsed+0x38>)
 800b1b0:	d101      	bne.n	800b1b6 <elapsed+0x1a>
	    || (val1 < val2)) {
 800b1b2:	4282      	cmp	r2, r0
 800b1b4:	d206      	bcs.n	800b1c4 <elapsed+0x28>
		overflow_cyc += last_load;
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	680c      	ldr	r4, [r1, #0]
 800b1ba:	4422      	add	r2, r4
 800b1bc:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800b1be:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800b1c2:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	680a      	ldr	r2, [r1, #0]
 800b1c8:	4413      	add	r3, r2
}
 800b1ca:	1a18      	subs	r0, r3, r0
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20002520 	.word	0x20002520
 800b1d4:	2000251c 	.word	0x2000251c

0800b1d8 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1d8:	4b09      	ldr	r3, [pc, #36]	; (800b200 <sys_clock_driver_init+0x28>)
 800b1da:	2210      	movs	r2, #16
 800b1dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800b1e0:	4b08      	ldr	r3, [pc, #32]	; (800b204 <sys_clock_driver_init+0x2c>)
 800b1e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800b1e6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800b1e8:	4b07      	ldr	r3, [pc, #28]	; (800b208 <sys_clock_driver_init+0x30>)
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800b1ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b1f2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800b1f4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800b1f6:	691a      	ldr	r2, [r3, #16]
 800b1f8:	f042 0207 	orr.w	r2, r2, #7
 800b1fc:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800b1fe:	4770      	bx	lr
 800b200:	e000ed00 	.word	0xe000ed00
 800b204:	2000251c 	.word	0x2000251c
 800b208:	20002520 	.word	0x20002520

0800b20c <sys_clock_isr>:
{
 800b20c:	b508      	push	{r3, lr}
	elapsed();
 800b20e:	f7ff ffc5 	bl	800b19c <elapsed>
	cycle_count += overflow_cyc;
 800b212:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <sys_clock_isr+0x38>)
 800b214:	4a0c      	ldr	r2, [pc, #48]	; (800b248 <sys_clock_isr+0x3c>)
 800b216:	6818      	ldr	r0, [r3, #0]
 800b218:	6811      	ldr	r1, [r2, #0]
 800b21a:	4408      	add	r0, r1
 800b21c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800b222:	4a0a      	ldr	r2, [pc, #40]	; (800b24c <sys_clock_isr+0x40>)
 800b224:	6813      	ldr	r3, [r2, #0]
 800b226:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800b22a:	1ac0      	subs	r0, r0, r3
 800b22c:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 800b230:	fb01 3300 	mla	r3, r1, r0, r3
 800b234:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800b236:	f002 f84f 	bl	800d2d8 <sys_clock_announce>
}
 800b23a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800b23e:	f7f8 bbc3 	b.w	80039c8 <z_arm_exc_exit>
 800b242:	bf00      	nop
 800b244:	20002520 	.word	0x20002520
 800b248:	20002518 	.word	0x20002518
 800b24c:	20002514 	.word	0x20002514

0800b250 <sys_clock_set_timeout>:
{
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	4c31      	ldr	r4, [pc, #196]	; (800b318 <sys_clock_set_timeout+0xc8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800b254:	b159      	cbz	r1, 800b26e <sys_clock_set_timeout+0x1e>
 800b256:	1c42      	adds	r2, r0, #1
 800b258:	d109      	bne.n	800b26e <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800b25a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800b25e:	6913      	ldr	r3, [r2, #16]
 800b260:	f023 0301 	bic.w	r3, r3, #1
 800b264:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800b266:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800b26a:	6023      	str	r3, [r4, #0]
}
 800b26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800b26e:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 800b270:	6825      	ldr	r5, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800b272:	d022      	beq.n	800b2ba <sys_clock_set_timeout+0x6a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800b274:	2801      	cmp	r0, #1
 800b276:	dd23      	ble.n	800b2c0 <sys_clock_set_timeout+0x70>
 800b278:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 800b27c:	dc22      	bgt.n	800b2c4 <sys_clock_set_timeout+0x74>
 800b27e:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 800b280:	f04f 0310 	mov.w	r3, #16
 800b284:	f3ef 8611 	mrs	r6, BASEPRI
 800b288:	f383 8812 	msr	BASEPRI_MAX, r3
 800b28c:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800b290:	f7ff ff84 	bl	800b19c <elapsed>
	cycle_count += pending;
 800b294:	4921      	ldr	r1, [pc, #132]	; (800b31c <sys_clock_set_timeout+0xcc>)
	val1 = SysTick->VAL;
 800b296:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 800b29a:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 800b29c:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 800b2a0:	680b      	ldr	r3, [r1, #0]
 800b2a2:	4418      	add	r0, r3
	overflow_cyc = 0U;
 800b2a4:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <sys_clock_set_timeout+0xd0>)
	cycle_count += pending;
 800b2a6:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 800b2a8:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800b2aa:	4b1e      	ldr	r3, [pc, #120]	; (800b324 <sys_clock_set_timeout+0xd4>)
 800b2ac:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800b2ae:	1a83      	subs	r3, r0, r2
 800b2b0:	d50b      	bpl.n	800b2ca <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 800b2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	e01a      	b.n	800b2f0 <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800b2ba:	f44f 6003 	mov.w	r0, #2096	; 0x830
 800b2be:	e7de      	b.n	800b27e <sys_clock_set_timeout+0x2e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800b2c0:	2700      	movs	r7, #0
 800b2c2:	e7dd      	b.n	800b280 <sys_clock_set_timeout+0x30>
 800b2c4:	f44f 6703 	mov.w	r7, #2096	; 0x830
 800b2c8:	e7da      	b.n	800b280 <sys_clock_set_timeout+0x30>
		delay = ticks * CYC_PER_TICK;
 800b2ca:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
		delay += unannounced;
 800b2ce:	fb0e 3307 	mla	r3, lr, r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800b2d2:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
		delay -= unannounced;
 800b2d6:	1a12      	subs	r2, r2, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800b2d8:	331f      	adds	r3, #31
 800b2da:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 800b2de:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 800b2e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e6:	d9e4      	bls.n	800b2b2 <sys_clock_set_timeout+0x62>
		if (delay > MAX_CYCLES) {
 800b2e8:	4a0f      	ldr	r2, [pc, #60]	; (800b328 <sys_clock_set_timeout+0xd8>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d9e3      	bls.n	800b2b6 <sys_clock_set_timeout+0x66>
			last_load = MAX_CYCLES;
 800b2ee:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 800b2f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 800b2f4:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 800b2f6:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 800b2f8:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 800b2fa:	bf38      	it	cc
 800b2fc:	44ac      	addcc	ip, r5
	SysTick->LOAD = last_load - 1;
 800b2fe:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 800b300:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 800b304:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 800b306:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 800b308:	2400      	movs	r4, #0
 800b30a:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 800b30c:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 800b30e:	f386 8811 	msr	BASEPRI, r6
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	e7a9      	b.n	800b26c <sys_clock_set_timeout+0x1c>
 800b318:	2000251c 	.word	0x2000251c
 800b31c:	20002518 	.word	0x20002518
 800b320:	20002520 	.word	0x20002520
 800b324:	20002514 	.word	0x20002514
 800b328:	00ffdc00 	.word	0x00ffdc00

0800b32c <sys_clock_elapsed>:
{
 800b32c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b32e:	f04f 0310 	mov.w	r3, #16
 800b332:	f3ef 8411 	mrs	r4, BASEPRI
 800b336:	f383 8812 	msr	BASEPRI_MAX, r3
 800b33a:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800b33e:	f7ff ff2d 	bl	800b19c <elapsed>
 800b342:	4b07      	ldr	r3, [pc, #28]	; (800b360 <sys_clock_elapsed+0x34>)
 800b344:	4a07      	ldr	r2, [pc, #28]	; (800b364 <sys_clock_elapsed+0x38>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6812      	ldr	r2, [r2, #0]
 800b34a:	1a9b      	subs	r3, r3, r2
 800b34c:	4403      	add	r3, r0
	__asm__ volatile(
 800b34e:	f384 8811 	msr	BASEPRI, r4
 800b352:	f3bf 8f6f 	isb	sy
}
 800b356:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800b35a:	fbb3 f0f0 	udiv	r0, r3, r0
 800b35e:	bd10      	pop	{r4, pc}
 800b360:	20002518 	.word	0x20002518
 800b364:	20002514 	.word	0x20002514

0800b368 <sys_clock_cycle_get_32>:
{
 800b368:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b36a:	f04f 0310 	mov.w	r3, #16
 800b36e:	f3ef 8411 	mrs	r4, BASEPRI
 800b372:	f383 8812 	msr	BASEPRI_MAX, r3
 800b376:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800b37a:	f7ff ff0f 	bl	800b19c <elapsed>
 800b37e:	4b04      	ldr	r3, [pc, #16]	; (800b390 <sys_clock_cycle_get_32+0x28>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4418      	add	r0, r3
	__asm__ volatile(
 800b384:	f384 8811 	msr	BASEPRI, r4
 800b388:	f3bf 8f6f 	isb	sy
}
 800b38c:	bd10      	pop	{r4, pc}
 800b38e:	bf00      	nop
 800b390:	20002518 	.word	0x20002518

0800b394 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800b394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 800b398:	4f1c      	ldr	r7, [pc, #112]	; (800b40c <pinctrl_configure_pins+0x78>)
 800b39a:	4604      	mov	r4, r0
 800b39c:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t func = 0;
 800b3a0:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800b3a2:	42b4      	cmp	r4, r6
 800b3a4:	d101      	bne.n	800b3aa <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	e014      	b.n	800b3d4 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 800b3aa:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800b3ac:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800b3ae:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800b3b2:	d411      	bmi.n	800b3d8 <pinctrl_configure_pins+0x44>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800b3b4:	6865      	ldr	r5, [r4, #4]
 800b3b6:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800b3ba:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800b3be:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800b3c2:	280a      	cmp	r0, #10
 800b3c4:	d81e      	bhi.n	800b404 <pinctrl_configure_pins+0x70>
	port_device = gpio_ports[STM32_PORT(pin)];
 800b3c6:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800b3ca:	f1b8 0f00 	cmp.w	r8, #0
 800b3ce:	d108      	bne.n	800b3e2 <pinctrl_configure_pins+0x4e>
		return -ENODEV;
 800b3d0:	f06f 0012 	mvn.w	r0, #18
}
 800b3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			func = STM32_MODER_ANALOG_MODE;
 800b3d8:	f1b9 0f10 	cmp.w	r9, #16
 800b3dc:	bf08      	it	eq
 800b3de:	2530      	moveq	r5, #48	; 0x30
 800b3e0:	e7eb      	b.n	800b3ba <pinctrl_configure_pins+0x26>
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	f008 fc6a 	bl	8013cbc <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d0f1      	beq.n	800b3d0 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 800b3ec:	464b      	mov	r3, r9
 800b3ee:	462a      	mov	r2, r5
 800b3f0:	f00a 010f 	and.w	r1, sl, #15
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	f007 fd13 	bl	8012e20 <gpio_stm32_configure>
		if (ret < 0) {
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	f104 0408 	add.w	r4, r4, #8
 800b400:	dacf      	bge.n	800b3a2 <pinctrl_configure_pins+0xe>
 800b402:	e7e7      	b.n	800b3d4 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 800b404:	f06f 0015 	mvn.w	r0, #21
 800b408:	e7e4      	b.n	800b3d4 <pinctrl_configure_pins+0x40>
 800b40a:	bf00      	nop
 800b40c:	08016108 	.word	0x08016108

0800b410 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800b410:	4b08      	ldr	r3, [pc, #32]	; (800b434 <UTILS_PLL_IsBusy+0x24>)
 800b412:	6819      	ldr	r1, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800b414:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLSAI2RDY    LL_RCC_PLLSAI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI2_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 800b416:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800b418:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800b41c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800b420:	430a      	orrs	r2, r1
 800b422:	bf14      	ite	ne
 800b424:	2001      	movne	r0, #1
 800b426:	2000      	moveq	r0, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 800b428:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 800b42c:	bf18      	it	ne
 800b42e:	2001      	movne	r0, #1
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	40021000 	.word	0x40021000

0800b438 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800b438:	4b1e      	ldr	r3, [pc, #120]	; (800b4b4 <LL_SetFlashLatency+0x7c>)
 800b43a:	1e42      	subs	r2, r0, #1
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d833      	bhi.n	800b4a8 <LL_SetFlashLatency+0x70>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800b440:	4b1d      	ldr	r3, [pc, #116]	; (800b4b8 <LL_SetFlashLatency+0x80>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800b448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b44c:	d10f      	bne.n	800b46e <LL_SetFlashLatency+0x36>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800b44e:	4b1b      	ldr	r3, [pc, #108]	; (800b4bc <LL_SetFlashLatency+0x84>)
 800b450:	4298      	cmp	r0, r3
 800b452:	d81a      	bhi.n	800b48a <LL_SetFlashLatency+0x52>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800b454:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <LL_SetFlashLatency+0x88>)
 800b456:	4298      	cmp	r0, r3
 800b458:	d828      	bhi.n	800b4ac <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800b45a:	4b1a      	ldr	r3, [pc, #104]	; (800b4c4 <LL_SetFlashLatency+0x8c>)
 800b45c:	4298      	cmp	r0, r3
 800b45e:	d827      	bhi.n	800b4b0 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800b460:	4b19      	ldr	r3, [pc, #100]	; (800b4c8 <LL_SetFlashLatency+0x90>)
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800b462:	4298      	cmp	r0, r3
 800b464:	bf94      	ite	ls
 800b466:	2300      	movls	r3, #0
 800b468:	2301      	movhi	r3, #1
  ErrorStatus status = SUCCESS;
 800b46a:	2000      	movs	r0, #0
 800b46c:	e011      	b.n	800b492 <LL_SetFlashLatency+0x5a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800b46e:	4b17      	ldr	r3, [pc, #92]	; (800b4cc <LL_SetFlashLatency+0x94>)
 800b470:	4298      	cmp	r0, r3
 800b472:	d80c      	bhi.n	800b48e <LL_SetFlashLatency+0x56>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 800b474:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 800b478:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800b47c:	4298      	cmp	r0, r3
 800b47e:	d815      	bhi.n	800b4ac <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800b480:	4b13      	ldr	r3, [pc, #76]	; (800b4d0 <LL_SetFlashLatency+0x98>)
 800b482:	4298      	cmp	r0, r3
 800b484:	d814      	bhi.n	800b4b0 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800b486:	4b13      	ldr	r3, [pc, #76]	; (800b4d4 <LL_SetFlashLatency+0x9c>)
 800b488:	e7eb      	b.n	800b462 <LL_SetFlashLatency+0x2a>
        latency = LL_FLASH_LATENCY_4;
 800b48a:	2304      	movs	r3, #4
 800b48c:	e7ed      	b.n	800b46a <LL_SetFlashLatency+0x32>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800b48e:	2300      	movs	r3, #0
        status = ERROR;
 800b490:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800b492:	4911      	ldr	r1, [pc, #68]	; (800b4d8 <LL_SetFlashLatency+0xa0>)
 800b494:	680a      	ldr	r2, [r1, #0]
 800b496:	f022 0207 	bic.w	r2, r2, #7
 800b49a:	431a      	orrs	r2, r3
 800b49c:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800b49e:	680a      	ldr	r2, [r1, #0]
 800b4a0:	f002 0207 	and.w	r2, r2, #7
    if(LL_FLASH_GetLatency() != latency)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d000      	beq.n	800b4aa <LL_SetFlashLatency+0x72>
      status = ERROR;
 800b4a8:	2001      	movs	r0, #1
}
 800b4aa:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e7dc      	b.n	800b46a <LL_SetFlashLatency+0x32>
        latency = LL_FLASH_LATENCY_2;
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	e7da      	b.n	800b46a <LL_SetFlashLatency+0x32>
 800b4b4:	04c4b3ff 	.word	0x04c4b3ff
 800b4b8:	40007000 	.word	0x40007000
 800b4bc:	03d09000 	.word	0x03d09000
 800b4c0:	02dc6c00 	.word	0x02dc6c00
 800b4c4:	01e84800 	.word	0x01e84800
 800b4c8:	00f42400 	.word	0x00f42400
 800b4cc:	018cba80 	.word	0x018cba80
 800b4d0:	00b71b00 	.word	0x00b71b00
 800b4d4:	005b8d80 	.word	0x005b8d80
 800b4d8:	40022000 	.word	0x40022000

0800b4dc <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800b4dc:	680b      	ldr	r3, [r1, #0]
 800b4de:	4a21      	ldr	r2, [pc, #132]	; (800b564 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 800b4e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 800b4e4:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800b4e6:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800b4e8:	4e1f      	ldr	r6, [pc, #124]	; (800b568 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800b4ea:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 800b4ee:	6833      	ldr	r3, [r6, #0]
 800b4f0:	42a3      	cmp	r3, r4
{
 800b4f2:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 800b4f4:	d328      	bcc.n	800b548 <UTILS_EnablePLLAndSwitchSystem+0x6c>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b4f6:	4b1d      	ldr	r3, [pc, #116]	; (800b56c <UTILS_EnablePLLAndSwitchSystem+0x90>)
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b4fe:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800b500:	68da      	ldr	r2, [r3, #12]
 800b502:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b506:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	0192      	lsls	r2, r2, #6
 800b50c:	d5fc      	bpl.n	800b508 <UTILS_EnablePLLAndSwitchSystem+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b50e:	689a      	ldr	r2, [r3, #8]
 800b510:	6829      	ldr	r1, [r5, #0]
 800b512:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b516:	430a      	orrs	r2, r1
 800b518:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b51a:	689a      	ldr	r2, [r3, #8]
 800b51c:	f042 0203 	orr.w	r2, r2, #3
 800b520:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b528:	2a0c      	cmp	r2, #12
 800b52a:	d1fa      	bne.n	800b522 <UTILS_EnablePLLAndSwitchSystem+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b52c:	689a      	ldr	r2, [r3, #8]
 800b52e:	6869      	ldr	r1, [r5, #4]
 800b530:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b534:	430a      	orrs	r2, r1
 800b536:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b538:	689a      	ldr	r2, [r3, #8]
 800b53a:	68a9      	ldr	r1, [r5, #8]
 800b53c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 800b540:	430a      	orrs	r2, r1
 800b542:	609a      	str	r2, [r3, #8]
}
 800b544:	2000      	movs	r0, #0
 800b546:	e004      	b.n	800b552 <UTILS_EnablePLLAndSwitchSystem+0x76>
    status = LL_SetFlashLatency(hclk_frequency);
 800b548:	4620      	mov	r0, r4
 800b54a:	f7ff ff75 	bl	800b438 <LL_SetFlashLatency>
  if(status == SUCCESS)
 800b54e:	2800      	cmp	r0, #0
 800b550:	d0d1      	beq.n	800b4f6 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 800b552:	6833      	ldr	r3, [r6, #0]
 800b554:	42a3      	cmp	r3, r4
 800b556:	d902      	bls.n	800b55e <UTILS_EnablePLLAndSwitchSystem+0x82>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 800b558:	4620      	mov	r0, r4
 800b55a:	f7ff ff6d 	bl	800b438 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 800b55e:	b900      	cbnz	r0, 800b562 <UTILS_EnablePLLAndSwitchSystem+0x86>
  SystemCoreClock = HCLKFrequency;
 800b560:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	08018e9e 	.word	0x08018e9e
 800b568:	20000304 	.word	0x20000304
 800b56c:	40021000 	.word	0x40021000

0800b570 <LL_PLL_ConfigSystemClock_HSI>:
{
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	4604      	mov	r4, r0
 800b574:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 800b576:	f7ff ff4b 	bl	800b410 <UTILS_PLL_IsBusy>
 800b57a:	bb00      	cbnz	r0, 800b5be <LL_PLL_ConfigSystemClock_HSI+0x4e>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800b57c:	4621      	mov	r1, r4
 800b57e:	4811      	ldr	r0, [pc, #68]	; (800b5c4 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 800b580:	f008 faec 	bl	8013b5c <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800b584:	4a10      	ldr	r2, [pc, #64]	; (800b5c8 <LL_PLL_ConfigSystemClock_HSI+0x58>)
 800b586:	6813      	ldr	r3, [r2, #0]
 800b588:	0559      	lsls	r1, r3, #21
 800b58a:	d406      	bmi.n	800b59a <LL_PLL_ConfigSystemClock_HSI+0x2a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b58c:	6813      	ldr	r3, [r2, #0]
 800b58e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b592:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800b594:	6813      	ldr	r3, [r2, #0]
 800b596:	055b      	lsls	r3, r3, #21
 800b598:	d5fc      	bpl.n	800b594 <LL_PLL_ConfigSystemClock_HSI+0x24>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800b59a:	68d6      	ldr	r6, [r2, #12]
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 800b59e:	6861      	ldr	r1, [r4, #4]
 800b5a0:	4033      	ands	r3, r6
 800b5a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b5a6:	6821      	ldr	r1, [r4, #0]
 800b5a8:	430b      	orrs	r3, r1
 800b5aa:	68a1      	ldr	r1, [r4, #8]
 800b5ac:	430b      	orrs	r3, r1
 800b5ae:	f043 0302 	orr.w	r3, r3, #2
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	60d3      	str	r3, [r2, #12]
}
 800b5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800b5ba:	f7ff bf8f 	b.w	800b4dc <UTILS_EnablePLLAndSwitchSystem>
}
 800b5be:	2001      	movs	r0, #1
 800b5c0:	bd70      	pop	{r4, r5, r6, pc}
 800b5c2:	bf00      	nop
 800b5c4:	00f42400 	.word	0x00f42400
 800b5c8:	40021000 	.word	0x40021000
 800b5cc:	f9ff808c 	.word	0xf9ff808c

0800b5d0 <mbedtls_internal_md5_process>:
}

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	b09f      	sub	sp, #124	; 0x7c
    {
        uint32_t X[16], A, B, C, D;
    } local;

    GET_UINT32_LE( local.X[ 0], data,  0 );
    GET_UINT32_LE( local.X[ 1], data,  4 );
 800b5d6:	684b      	ldr	r3, [r1, #4]
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_LE( local.X[ 2], data,  8 );
 800b5dc:	688b      	ldr	r3, [r1, #8]
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_LE( local.X[ 3], data, 12 );
    GET_UINT32_LE( local.X[ 4], data, 16 );
 800b5e2:	690b      	ldr	r3, [r1, #16]
 800b5e4:	9302      	str	r3, [sp, #8]
 800b5e6:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_LE( local.X[ 5], data, 20 );
    GET_UINT32_LE( local.X[ 6], data, 24 );
 800b5e8:	698b      	ldr	r3, [r1, #24]
 800b5ea:	9303      	str	r3, [sp, #12]
 800b5ec:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_LE( local.X[ 7], data, 28 );
    GET_UINT32_LE( local.X[ 8], data, 32 );
 800b5ee:	6a0b      	ldr	r3, [r1, #32]
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	9312      	str	r3, [sp, #72]	; 0x48
    GET_UINT32_LE( local.X[ 9], data, 36 );
 800b5f4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b5f6:	9305      	str	r3, [sp, #20]
 800b5f8:	9313      	str	r3, [sp, #76]	; 0x4c
    GET_UINT32_LE( local.X[10], data, 40 );
 800b5fa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    GET_UINT32_LE( local.X[ 0], data,  0 );
 800b5fc:	f8d1 9000 	ldr.w	r9, [r1]
    GET_UINT32_LE( local.X[ 3], data, 12 );
 800b600:	68ce      	ldr	r6, [r1, #12]
    GET_UINT32_LE( local.X[ 5], data, 20 );
 800b602:	f8d1 c014 	ldr.w	ip, [r1, #20]
    GET_UINT32_LE( local.X[ 7], data, 28 );
 800b606:	f8d1 801c 	ldr.w	r8, [r1, #28]
    GET_UINT32_LE( local.X[10], data, 40 );
 800b60a:	9306      	str	r3, [sp, #24]
 800b60c:	9314      	str	r3, [sp, #80]	; 0x50
    GET_UINT32_LE( local.X[11], data, 44 );
 800b60e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    GET_UINT32_LE( local.X[ 0], data,  0 );
 800b610:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    GET_UINT32_LE( local.X[ 3], data, 12 );
 800b614:	960d      	str	r6, [sp, #52]	; 0x34
    GET_UINT32_LE( local.X[ 5], data, 20 );
 800b616:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    GET_UINT32_LE( local.X[ 7], data, 28 );
 800b61a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    GET_UINT32_LE( local.X[11], data, 44 );
 800b61e:	9307      	str	r3, [sp, #28]
 800b620:	9315      	str	r3, [sp, #84]	; 0x54
    GET_UINT32_LE( local.X[12], data, 48 );
    GET_UINT32_LE( local.X[13], data, 52 );
 800b622:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b624:	9308      	str	r3, [sp, #32]
 800b626:	9317      	str	r3, [sp, #92]	; 0x5c
    GET_UINT32_LE( local.X[14], data, 56 );
    GET_UINT32_LE( local.X[15], data, 60 );
 800b628:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800b62a:	9309      	str	r3, [sp, #36]	; 0x24
 800b62c:	9319      	str	r3, [sp, #100]	; 0x64
    local.C = ctx->state[2];
    local.D = ctx->state[3];

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
 800b62e:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 800b632:	ea83 0b02 	eor.w	fp, r3, r2
 800b636:	68c3      	ldr	r3, [r0, #12]
    GET_UINT32_LE( local.X[14], data, 56 );
 800b638:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
    GET_UINT32_LE( local.X[12], data, 48 );
 800b63c:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 800b63e:	6901      	ldr	r1, [r0, #16]
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 800b640:	9c02      	ldr	r4, [sp, #8]
    GET_UINT32_LE( local.X[12], data, 48 );
 800b642:	9716      	str	r7, [sp, #88]	; 0x58
    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
 800b644:	ea0b 0b03 	and.w	fp, fp, r3
 800b648:	ea8b 0b02 	eor.w	fp, fp, r2
 800b64c:	4be8      	ldr	r3, [pc, #928]	; (800b9f0 <mbedtls_internal_md5_process+0x420>)
 800b64e:	6882      	ldr	r2, [r0, #8]
    GET_UINT32_LE( local.X[14], data, 56 );
 800b650:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
 800b654:	4413      	add	r3, r2
 800b656:	444b      	add	r3, r9
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
 800b658:	6902      	ldr	r2, [r0, #16]
    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
 800b65a:	449b      	add	fp, r3
 800b65c:	68c3      	ldr	r3, [r0, #12]
 800b65e:	eb03 6b7b 	add.w	fp, r3, fp, ror #25
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
 800b662:	ea83 0a02 	eor.w	sl, r3, r2
 800b666:	ea0a 0a0b 	and.w	sl, sl, fp
 800b66a:	ea8a 0a02 	eor.w	sl, sl, r2
 800b66e:	4be1      	ldr	r3, [pc, #900]	; (800b9f4 <mbedtls_internal_md5_process+0x424>)
 800b670:	6942      	ldr	r2, [r0, #20]
 800b672:	4413      	add	r3, r2
 800b674:	9a00      	ldr	r2, [sp, #0]
 800b676:	4413      	add	r3, r2
 800b678:	449a      	add	sl, r3
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 800b67a:	68c3      	ldr	r3, [r0, #12]
 800b67c:	68c2      	ldr	r2, [r0, #12]
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
 800b67e:	eb0b 5a3a 	add.w	sl, fp, sl, ror #20
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 800b682:	ea83 030b 	eor.w	r3, r3, fp
 800b686:	ea03 030a 	and.w	r3, r3, sl
 800b68a:	4053      	eors	r3, r2
 800b68c:	4ada      	ldr	r2, [pc, #872]	; (800b9f8 <mbedtls_internal_md5_process+0x428>)
 800b68e:	440a      	add	r2, r1
 800b690:	9901      	ldr	r1, [sp, #4]
 800b692:	440a      	add	r2, r1
 800b694:	4413      	add	r3, r2
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
 800b696:	68c1      	ldr	r1, [r0, #12]
 800b698:	4ad8      	ldr	r2, [pc, #864]	; (800b9fc <mbedtls_internal_md5_process+0x42c>)
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 800b69a:	eb0a 33f3 	add.w	r3, sl, r3, ror #15
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
 800b69e:	ea8b 050a 	eor.w	r5, fp, sl
 800b6a2:	401d      	ands	r5, r3
 800b6a4:	440a      	add	r2, r1
 800b6a6:	4432      	add	r2, r6
 800b6a8:	ea85 050b 	eor.w	r5, r5, fp
 800b6ac:	4415      	add	r5, r2
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 800b6ae:	4ad4      	ldr	r2, [pc, #848]	; (800ba00 <mbedtls_internal_md5_process+0x430>)
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
 800b6b0:	eb03 25b5 	add.w	r5, r3, r5, ror #10
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 800b6b4:	ea8a 0103 	eor.w	r1, sl, r3
 800b6b8:	4422      	add	r2, r4
 800b6ba:	4029      	ands	r1, r5
 800b6bc:	4493      	add	fp, r2
 800b6be:	ea81 010a 	eor.w	r1, r1, sl
 800b6c2:	4459      	add	r1, fp
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
 800b6c4:	4ccf      	ldr	r4, [pc, #828]	; (800ba04 <mbedtls_internal_md5_process+0x434>)
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 800b6c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 800b6ca:	eb05 6171 	add.w	r1, r5, r1, ror #25
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
 800b6ce:	ea83 0205 	eor.w	r2, r3, r5
 800b6d2:	4464      	add	r4, ip
 800b6d4:	400a      	ands	r2, r1
 800b6d6:	44a2      	add	sl, r4
 800b6d8:	405a      	eors	r2, r3
 800b6da:	4452      	add	r2, sl
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 800b6dc:	f8df a328 	ldr.w	sl, [pc, #808]	; 800ba08 <mbedtls_internal_md5_process+0x438>
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
 800b6e0:	eb01 5232 	add.w	r2, r1, r2, ror #20
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 800b6e4:	ea85 0401 	eor.w	r4, r5, r1
 800b6e8:	44da      	add	sl, fp
 800b6ea:	4014      	ands	r4, r2
 800b6ec:	4453      	add	r3, sl
 800b6ee:	406c      	eors	r4, r5
 800b6f0:	441c      	add	r4, r3
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 800b6f2:	f8df a318 	ldr.w	sl, [pc, #792]	; 800ba0c <mbedtls_internal_md5_process+0x43c>
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 800b6f6:	eb02 34f4 	add.w	r4, r2, r4, ror #15
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 800b6fa:	ea81 0302 	eor.w	r3, r1, r2
 800b6fe:	44c2      	add	sl, r8
 800b700:	4023      	ands	r3, r4
 800b702:	4455      	add	r5, sl
 800b704:	404b      	eors	r3, r1
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 800b706:	f8dd a010 	ldr.w	sl, [sp, #16]
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 800b70a:	442b      	add	r3, r5
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 800b70c:	4dc0      	ldr	r5, [pc, #768]	; (800ba10 <mbedtls_internal_md5_process+0x440>)
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 800b70e:	eb04 23b3 	add.w	r3, r4, r3, ror #10
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 800b712:	ea82 0b04 	eor.w	fp, r2, r4
 800b716:	4455      	add	r5, sl
 800b718:	ea0b 0b03 	and.w	fp, fp, r3
 800b71c:	4429      	add	r1, r5
 800b71e:	ea8b 0b02 	eor.w	fp, fp, r2
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 800b722:	9d05      	ldr	r5, [sp, #20]
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 800b724:	448b      	add	fp, r1
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 800b726:	49bb      	ldr	r1, [pc, #748]	; (800ba14 <mbedtls_internal_md5_process+0x444>)
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 800b728:	eb03 6b7b 	add.w	fp, r3, fp, ror #25
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 800b72c:	ea84 0a03 	eor.w	sl, r4, r3
 800b730:	4429      	add	r1, r5
 800b732:	ea0a 0a0b 	and.w	sl, sl, fp
 800b736:	440a      	add	r2, r1
 800b738:	ea8a 0a04 	eor.w	sl, sl, r4
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 800b73c:	9906      	ldr	r1, [sp, #24]
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 800b73e:	4492      	add	sl, r2
 800b740:	eb0b 5a3a 	add.w	sl, fp, sl, ror #20
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 800b744:	ea83 020b 	eor.w	r2, r3, fp
 800b748:	f5a1 4124 	sub.w	r1, r1, #41984	; 0xa400
 800b74c:	ea02 020a 	and.w	r2, r2, sl
 800b750:	394f      	subs	r1, #79	; 0x4f
 800b752:	440c      	add	r4, r1
 800b754:	405a      	eors	r2, r3
 800b756:	4422      	add	r2, r4
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 800b758:	49af      	ldr	r1, [pc, #700]	; (800ba18 <mbedtls_internal_md5_process+0x448>)
 800b75a:	9c07      	ldr	r4, [sp, #28]
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 800b75c:	eb0a 32f2 	add.w	r2, sl, r2, ror #15
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 800b760:	ea8b 050a 	eor.w	r5, fp, sl
 800b764:	4421      	add	r1, r4
 800b766:	4015      	ands	r5, r2
 800b768:	440b      	add	r3, r1
 800b76a:	ea85 050b 	eor.w	r5, r5, fp
 800b76e:	441d      	add	r5, r3
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
 800b770:	4baa      	ldr	r3, [pc, #680]	; (800ba1c <mbedtls_internal_md5_process+0x44c>)
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 800b772:	4cab      	ldr	r4, [pc, #684]	; (800ba20 <mbedtls_internal_md5_process+0x450>)
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 800b774:	eb02 25b5 	add.w	r5, r2, r5, ror #10
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
 800b778:	ea8a 0102 	eor.w	r1, sl, r2
 800b77c:	443b      	add	r3, r7
 800b77e:	4029      	ands	r1, r5
 800b780:	449b      	add	fp, r3
 800b782:	ea81 010a 	eor.w	r1, r1, sl
 800b786:	4459      	add	r1, fp
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 800b788:	f8dd b020 	ldr.w	fp, [sp, #32]
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
 800b78c:	eb05 6171 	add.w	r1, r5, r1, ror #25
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 800b790:	ea82 0305 	eor.w	r3, r2, r5
 800b794:	445c      	add	r4, fp
 800b796:	400b      	ands	r3, r1
 800b798:	44a2      	add	sl, r4
 800b79a:	4053      	eors	r3, r2
 800b79c:	4453      	add	r3, sl
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
 800b79e:	f8df a284 	ldr.w	sl, [pc, #644]	; 800ba24 <mbedtls_internal_md5_process+0x454>
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
 800b7a2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 800b7a6:	eb01 5333 	add.w	r3, r1, r3, ror #20
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
 800b7aa:	ea85 0401 	eor.w	r4, r5, r1
 800b7ae:	44f2      	add	sl, lr
 800b7b0:	401c      	ands	r4, r3
 800b7b2:	4452      	add	r2, sl
 800b7b4:	406c      	eors	r4, r5
 800b7b6:	4414      	add	r4, r2
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
 800b7b8:	f8df a26c 	ldr.w	sl, [pc, #620]	; 800ba28 <mbedtls_internal_md5_process+0x458>
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
 800b7bc:	eb03 34f4 	add.w	r4, r3, r4, ror #15
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
 800b7c0:	ea81 0203 	eor.w	r2, r1, r3
 800b7c4:	44da      	add	sl, fp
 800b7c6:	4022      	ands	r2, r4
 800b7c8:	4455      	add	r5, sl
 800b7ca:	404a      	eors	r2, r1
 800b7cc:	442a      	add	r2, r5
 800b7ce:	eb04 22b2 	add.w	r2, r4, r2, ror #10

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562 );
 800b7d2:	f8dd a000 	ldr.w	sl, [sp]
 800b7d6:	4d95      	ldr	r5, [pc, #596]	; (800ba2c <mbedtls_internal_md5_process+0x45c>)
 800b7d8:	ea84 0b02 	eor.w	fp, r4, r2
 800b7dc:	4455      	add	r5, sl
 800b7de:	ea0b 0b03 	and.w	fp, fp, r3
 800b7e2:	4429      	add	r1, r5
 800b7e4:	ea8b 0b04 	eor.w	fp, fp, r4
 800b7e8:	448b      	add	fp, r1
    P( local.D, local.A, local.B, local.C,  6,  9, 0xC040B340 );
 800b7ea:	9d03      	ldr	r5, [sp, #12]
 800b7ec:	4990      	ldr	r1, [pc, #576]	; (800ba30 <mbedtls_internal_md5_process+0x460>)
    P( local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562 );
 800b7ee:	eb02 6bfb 	add.w	fp, r2, fp, ror #27
    P( local.D, local.A, local.B, local.C,  6,  9, 0xC040B340 );
 800b7f2:	ea82 0a0b 	eor.w	sl, r2, fp
 800b7f6:	ea0a 0a04 	and.w	sl, sl, r4
 800b7fa:	4429      	add	r1, r5
 800b7fc:	4419      	add	r1, r3
 800b7fe:	ea8a 0a02 	eor.w	sl, sl, r2
 800b802:	448a      	add	sl, r1
 800b804:	eb0b 5afa 	add.w	sl, fp, sl, ror #23
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
 800b808:	9d07      	ldr	r5, [sp, #28]
 800b80a:	498a      	ldr	r1, [pc, #552]	; (800ba34 <mbedtls_internal_md5_process+0x464>)
 800b80c:	ea8b 030a 	eor.w	r3, fp, sl
 800b810:	4429      	add	r1, r5
 800b812:	4013      	ands	r3, r2
 800b814:	440c      	add	r4, r1
 800b816:	ea83 030b 	eor.w	r3, r3, fp
 800b81a:	4423      	add	r3, r4
 800b81c:	eb0a 43b3 	add.w	r3, sl, r3, ror #18
    P( local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA );
 800b820:	4985      	ldr	r1, [pc, #532]	; (800ba38 <mbedtls_internal_md5_process+0x468>)
    P( local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D );
    P( local.D, local.A, local.B, local.C, 10,  9, 0x02441453 );
 800b822:	4c86      	ldr	r4, [pc, #536]	; (800ba3c <mbedtls_internal_md5_process+0x46c>)
    P( local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA );
 800b824:	ea8a 0503 	eor.w	r5, sl, r3
 800b828:	4449      	add	r1, r9
 800b82a:	ea05 050b 	and.w	r5, r5, fp
 800b82e:	440a      	add	r2, r1
 800b830:	ea85 050a 	eor.w	r5, r5, sl
 800b834:	4415      	add	r5, r2
 800b836:	eb03 3535 	add.w	r5, r3, r5, ror #12
    P( local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D );
 800b83a:	4981      	ldr	r1, [pc, #516]	; (800ba40 <mbedtls_internal_md5_process+0x470>)
 800b83c:	ea83 0205 	eor.w	r2, r3, r5
 800b840:	4461      	add	r1, ip
 800b842:	ea02 020a 	and.w	r2, r2, sl
 800b846:	448b      	add	fp, r1
 800b848:	405a      	eors	r2, r3
 800b84a:	445a      	add	r2, fp
 800b84c:	eb05 62f2 	add.w	r2, r5, r2, ror #27
    P( local.D, local.A, local.B, local.C, 10,  9, 0x02441453 );
 800b850:	f8dd b018 	ldr.w	fp, [sp, #24]
 800b854:	ea85 0102 	eor.w	r1, r5, r2
 800b858:	445c      	add	r4, fp
 800b85a:	4019      	ands	r1, r3
 800b85c:	44a2      	add	sl, r4
 800b85e:	4069      	eors	r1, r5
 800b860:	4451      	add	r1, sl
 800b862:	eb02 51f1 	add.w	r1, r2, r1, ror #23
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
 800b866:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800b86a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 800ba44 <mbedtls_internal_md5_process+0x474>
 800b86e:	ea82 0401 	eor.w	r4, r2, r1
 800b872:	44da      	add	sl, fp
 800b874:	402c      	ands	r4, r5
 800b876:	4453      	add	r3, sl
 800b878:	4054      	eors	r4, r2
 800b87a:	441c      	add	r4, r3
 800b87c:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8 );
 800b880:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b884:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800ba48 <mbedtls_internal_md5_process+0x478>
 800b888:	ea81 0304 	eor.w	r3, r1, r4
 800b88c:	44da      	add	sl, fp
 800b88e:	4013      	ands	r3, r2
 800b890:	4455      	add	r5, sl
 800b892:	404b      	eors	r3, r1
 800b894:	442b      	add	r3, r5
 800b896:	eb04 3333 	add.w	r3, r4, r3, ror #12
    P( local.A, local.B, local.C, local.D,  9,  5, 0x21E1CDE6 );
 800b89a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b89e:	4d6b      	ldr	r5, [pc, #428]	; (800ba4c <mbedtls_internal_md5_process+0x47c>)
 800b8a0:	ea84 0b03 	eor.w	fp, r4, r3
 800b8a4:	4455      	add	r5, sl
 800b8a6:	ea0b 0b01 	and.w	fp, fp, r1
 800b8aa:	442a      	add	r2, r5
 800b8ac:	ea8b 0b04 	eor.w	fp, fp, r4
 800b8b0:	4493      	add	fp, r2
 800b8b2:	eb03 6bfb 	add.w	fp, r3, fp, ror #27
    P( local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6 );
 800b8b6:	4a66      	ldr	r2, [pc, #408]	; (800ba50 <mbedtls_internal_md5_process+0x480>)
 800b8b8:	ea83 0a0b 	eor.w	sl, r3, fp
 800b8bc:	4472      	add	r2, lr
 800b8be:	ea0a 0a04 	and.w	sl, sl, r4
 800b8c2:	4411      	add	r1, r2
 800b8c4:	ea8a 0a03 	eor.w	sl, sl, r3
 800b8c8:	448a      	add	sl, r1
 800b8ca:	eb0b 5afa 	add.w	sl, fp, sl, ror #23
    P( local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87 );
 800b8ce:	4a61      	ldr	r2, [pc, #388]	; (800ba54 <mbedtls_internal_md5_process+0x484>)
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 800b8d0:	4961      	ldr	r1, [pc, #388]	; (800ba58 <mbedtls_internal_md5_process+0x488>)
    P( local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87 );
 800b8d2:	ea8b 050a 	eor.w	r5, fp, sl
 800b8d6:	4432      	add	r2, r6
 800b8d8:	401d      	ands	r5, r3
 800b8da:	4414      	add	r4, r2
 800b8dc:	ea85 050b 	eor.w	r5, r5, fp
 800b8e0:	4425      	add	r5, r4
 800b8e2:	eb0a 45b5 	add.w	r5, sl, r5, ror #18
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 800b8e6:	9c04      	ldr	r4, [sp, #16]
 800b8e8:	ea8a 0205 	eor.w	r2, sl, r5
 800b8ec:	4421      	add	r1, r4
 800b8ee:	ea02 020b 	and.w	r2, r2, fp
 800b8f2:	440b      	add	r3, r1
 800b8f4:	ea82 020a 	eor.w	r2, r2, sl
 800b8f8:	441a      	add	r2, r3
 800b8fa:	eb05 3232 	add.w	r2, r5, r2, ror #12
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
 800b8fe:	9c08      	ldr	r4, [sp, #32]
 800b900:	4956      	ldr	r1, [pc, #344]	; (800ba5c <mbedtls_internal_md5_process+0x48c>)
 800b902:	ea85 0302 	eor.w	r3, r5, r2
 800b906:	ea03 030a 	and.w	r3, r3, sl
 800b90a:	4421      	add	r1, r4
 800b90c:	4459      	add	r1, fp
 800b90e:	406b      	eors	r3, r5
 800b910:	440b      	add	r3, r1
 800b912:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
 800b916:	f8dd b004 	ldr.w	fp, [sp, #4]
 800b91a:	4c51      	ldr	r4, [pc, #324]	; (800ba60 <mbedtls_internal_md5_process+0x490>)
 800b91c:	ea82 0103 	eor.w	r1, r2, r3
 800b920:	4029      	ands	r1, r5
 800b922:	445c      	add	r4, fp
 800b924:	4454      	add	r4, sl
 800b926:	4051      	eors	r1, r2
 800b928:	4421      	add	r1, r4
 800b92a:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( local.C, local.D, local.A, local.B,  7, 14, 0x676F02D9 );
 800b92e:	f8df a134 	ldr.w	sl, [pc, #308]	; 800ba64 <mbedtls_internal_md5_process+0x494>
 800b932:	ea83 0401 	eor.w	r4, r3, r1
 800b936:	44c2      	add	sl, r8
 800b938:	4014      	ands	r4, r2
 800b93a:	4455      	add	r5, sl
 800b93c:	405c      	eors	r4, r3
 800b93e:	442c      	add	r4, r5
 800b940:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
 800b944:	f8df a120 	ldr.w	sl, [pc, #288]	; 800ba68 <mbedtls_internal_md5_process+0x498>
 800b948:	ea81 0b04 	eor.w	fp, r1, r4
 800b94c:	ea03 050b 	and.w	r5, r3, fp
 800b950:	44ba      	add	sl, r7
 800b952:	404d      	eors	r5, r1
 800b954:	4452      	add	r2, sl
 800b956:	442a      	add	r2, r5

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
 800b958:	f5ac 25b8 	sub.w	r5, ip, #376832	; 0x5c000
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
 800b95c:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
 800b960:	f2a5 65be 	subw	r5, r5, #1726	; 0x6be
 800b964:	ea8b 0b02 	eor.w	fp, fp, r2
 800b968:	442b      	add	r3, r5
 800b96a:	445b      	add	r3, fp
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 800b96c:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800ba6c <mbedtls_internal_md5_process+0x49c>
 800b970:	f8dd b010 	ldr.w	fp, [sp, #16]
    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
 800b974:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 800b978:	ea84 0502 	eor.w	r5, r4, r2
 800b97c:	44da      	add	sl, fp
 800b97e:	405d      	eors	r5, r3
 800b980:	4451      	add	r1, sl
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 800b982:	f8dd b01c 	ldr.w	fp, [sp, #28]
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 800b986:	4429      	add	r1, r5
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 800b988:	4d39      	ldr	r5, [pc, #228]	; (800ba70 <mbedtls_internal_md5_process+0x4a0>)
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 800b98a:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 800b98e:	ea82 0a03 	eor.w	sl, r2, r3
 800b992:	445d      	add	r5, fp
 800b994:	ea8a 0a01 	eor.w	sl, sl, r1
 800b998:	442c      	add	r4, r5
 800b99a:	4454      	add	r4, sl
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
 800b99c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ba74 <mbedtls_internal_md5_process+0x4a4>
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 800b9a0:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
 800b9a4:	44f2      	add	sl, lr
 800b9a6:	ea83 0501 	eor.w	r5, r3, r1
 800b9aa:	4452      	add	r2, sl
 800b9ac:	4065      	eors	r5, r4
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 800b9ae:	f8dd a000 	ldr.w	sl, [sp]
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
 800b9b2:	4415      	add	r5, r2
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 800b9b4:	4a30      	ldr	r2, [pc, #192]	; (800ba78 <mbedtls_internal_md5_process+0x4a8>)
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
 800b9b6:	eb04 2575 	add.w	r5, r4, r5, ror #9
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 800b9ba:	ea81 0b04 	eor.w	fp, r1, r4
 800b9be:	4452      	add	r2, sl
 800b9c0:	4413      	add	r3, r2
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
 800b9c2:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b9c6:	4a2d      	ldr	r2, [pc, #180]	; (800ba7c <mbedtls_internal_md5_process+0x4ac>)
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 800b9c8:	ea8b 0b05 	eor.w	fp, fp, r5
 800b9cc:	449b      	add	fp, r3
 800b9ce:	eb05 7b3b 	add.w	fp, r5, fp, ror #28
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
 800b9d2:	ea84 0305 	eor.w	r3, r4, r5
 800b9d6:	4452      	add	r2, sl
 800b9d8:	ea83 030b 	eor.w	r3, r3, fp
 800b9dc:	4411      	add	r1, r2
 800b9de:	4419      	add	r1, r3
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
 800b9e0:	4b27      	ldr	r3, [pc, #156]	; (800ba80 <mbedtls_internal_md5_process+0x4b0>)
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
 800b9e2:	eb0b 5171 	add.w	r1, fp, r1, ror #21
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
 800b9e6:	ea85 0a0b 	eor.w	sl, r5, fp
 800b9ea:	4443      	add	r3, r8
 800b9ec:	441c      	add	r4, r3
 800b9ee:	e049      	b.n	800ba84 <mbedtls_internal_md5_process+0x4b4>
 800b9f0:	d76aa478 	.word	0xd76aa478
 800b9f4:	e8c7b756 	.word	0xe8c7b756
 800b9f8:	242070db 	.word	0x242070db
 800b9fc:	c1bdceee 	.word	0xc1bdceee
 800ba00:	f57c0faf 	.word	0xf57c0faf
 800ba04:	4787c62a 	.word	0x4787c62a
 800ba08:	a8304613 	.word	0xa8304613
 800ba0c:	fd469501 	.word	0xfd469501
 800ba10:	698098d8 	.word	0x698098d8
 800ba14:	8b44f7af 	.word	0x8b44f7af
 800ba18:	895cd7be 	.word	0x895cd7be
 800ba1c:	6b901122 	.word	0x6b901122
 800ba20:	fd987193 	.word	0xfd987193
 800ba24:	a679438e 	.word	0xa679438e
 800ba28:	49b40821 	.word	0x49b40821
 800ba2c:	f61e2562 	.word	0xf61e2562
 800ba30:	c040b340 	.word	0xc040b340
 800ba34:	265e5a51 	.word	0x265e5a51
 800ba38:	e9b6c7aa 	.word	0xe9b6c7aa
 800ba3c:	02441453 	.word	0x02441453
 800ba40:	d62f105d 	.word	0xd62f105d
 800ba44:	d8a1e681 	.word	0xd8a1e681
 800ba48:	e7d3fbc8 	.word	0xe7d3fbc8
 800ba4c:	21e1cde6 	.word	0x21e1cde6
 800ba50:	c33707d6 	.word	0xc33707d6
 800ba54:	f4d50d87 	.word	0xf4d50d87
 800ba58:	455a14ed 	.word	0x455a14ed
 800ba5c:	a9e3e905 	.word	0xa9e3e905
 800ba60:	fcefa3f8 	.word	0xfcefa3f8
 800ba64:	676f02d9 	.word	0x676f02d9
 800ba68:	8d2a4c8a 	.word	0x8d2a4c8a
 800ba6c:	8771f681 	.word	0x8771f681
 800ba70:	6d9d6122 	.word	0x6d9d6122
 800ba74:	fde5380c 	.word	0xfde5380c
 800ba78:	a4beea44 	.word	0xa4beea44
 800ba7c:	4bdecfa9 	.word	0x4bdecfa9
 800ba80:	f6bb4b60 	.word	0xf6bb4b60
 800ba84:	ea8a 0a01 	eor.w	sl, sl, r1
 800ba88:	44a2      	add	sl, r4
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
 800ba8a:	4b8c      	ldr	r3, [pc, #560]	; (800bcbc <mbedtls_internal_md5_process+0x6ec>)
 800ba8c:	9c06      	ldr	r4, [sp, #24]
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
 800ba8e:	eb01 4a3a 	add.w	sl, r1, sl, ror #16
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
 800ba92:	ea8b 0201 	eor.w	r2, fp, r1
 800ba96:	4423      	add	r3, r4
 800ba98:	442b      	add	r3, r5
 800ba9a:	ea82 020a 	eor.w	r2, r2, sl
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
 800ba9e:	9d08      	ldr	r5, [sp, #32]
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
 800baa0:	441a      	add	r2, r3
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
 800baa2:	4b87      	ldr	r3, [pc, #540]	; (800bcc0 <mbedtls_internal_md5_process+0x6f0>)
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
 800baa4:	eb0a 2272 	add.w	r2, sl, r2, ror #9
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
 800baa8:	ea81 040a 	eor.w	r4, r1, sl
 800baac:	442b      	add	r3, r5
 800baae:	4054      	eors	r4, r2
 800bab0:	449b      	add	fp, r3
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
 800bab2:	4b84      	ldr	r3, [pc, #528]	; (800bcc4 <mbedtls_internal_md5_process+0x6f4>)
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
 800bab4:	44a3      	add	fp, r4
 800bab6:	eb02 7b3b 	add.w	fp, r2, fp, ror #28
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
 800baba:	ea8a 0502 	eor.w	r5, sl, r2
 800babe:	444b      	add	r3, r9
 800bac0:	4419      	add	r1, r3
 800bac2:	ea85 050b 	eor.w	r5, r5, fp
 800bac6:	440d      	add	r5, r1
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
 800bac8:	497f      	ldr	r1, [pc, #508]	; (800bcc8 <mbedtls_internal_md5_process+0x6f8>)
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 800baca:	9c03      	ldr	r4, [sp, #12]
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
 800bacc:	eb0b 5575 	add.w	r5, fp, r5, ror #21
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
 800bad0:	ea82 030b 	eor.w	r3, r2, fp
 800bad4:	4431      	add	r1, r6
 800bad6:	4451      	add	r1, sl
 800bad8:	406b      	eors	r3, r5
 800bada:	440b      	add	r3, r1
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 800badc:	497b      	ldr	r1, [pc, #492]	; (800bccc <mbedtls_internal_md5_process+0x6fc>)
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
 800bade:	eb05 4333 	add.w	r3, r5, r3, ror #16
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 800bae2:	ea8b 0a05 	eor.w	sl, fp, r5
 800bae6:	4421      	add	r1, r4
 800bae8:	440a      	add	r2, r1
 800baea:	ea8a 0a03 	eor.w	sl, sl, r3
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
 800baee:	9905      	ldr	r1, [sp, #20]
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 800baf0:	4492      	add	sl, r2
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
 800baf2:	4a77      	ldr	r2, [pc, #476]	; (800bcd0 <mbedtls_internal_md5_process+0x700>)
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 800baf4:	eb03 2a7a 	add.w	sl, r3, sl, ror #9
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
 800baf8:	ea85 0403 	eor.w	r4, r5, r3
 800bafc:	440a      	add	r2, r1
 800bafe:	4493      	add	fp, r2
 800bb00:	ea84 040a 	eor.w	r4, r4, sl
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
 800bb04:	4a73      	ldr	r2, [pc, #460]	; (800bcd4 <mbedtls_internal_md5_process+0x704>)
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
 800bb06:	445c      	add	r4, fp
 800bb08:	eb0a 7434 	add.w	r4, sl, r4, ror #28
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
 800bb0c:	ea83 010a 	eor.w	r1, r3, sl
 800bb10:	443a      	add	r2, r7
 800bb12:	442a      	add	r2, r5
 800bb14:	4061      	eors	r1, r4
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 800bb16:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
 800bb1a:	4411      	add	r1, r2
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 800bb1c:	4a6e      	ldr	r2, [pc, #440]	; (800bcd8 <mbedtls_internal_md5_process+0x708>)
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
 800bb1e:	eb04 5171 	add.w	r1, r4, r1, ror #21
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 800bb22:	ea8a 0504 	eor.w	r5, sl, r4
 800bb26:	445a      	add	r2, fp
 800bb28:	4413      	add	r3, r2
 800bb2a:	404d      	eors	r5, r1
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 800bb2c:	f8dd b004 	ldr.w	fp, [sp, #4]
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 800bb30:	441d      	add	r5, r3
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 800bb32:	4b6a      	ldr	r3, [pc, #424]	; (800bcdc <mbedtls_internal_md5_process+0x70c>)
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 800bb34:	eb01 4535 	add.w	r5, r1, r5, ror #16
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 800bb38:	ea84 0201 	eor.w	r2, r4, r1
 800bb3c:	445b      	add	r3, fp
 800bb3e:	4453      	add	r3, sl
 800bb40:	406a      	eors	r2, r5
 800bb42:	441a      	add	r2, r3

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 800bb44:	f8df a198 	ldr.w	sl, [pc, #408]	; 800bce0 <mbedtls_internal_md5_process+0x710>
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 800bb48:	eb05 2272 	add.w	r2, r5, r2, ror #9
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 800bb4c:	ea62 0301 	orn	r3, r2, r1
 800bb50:	44ca      	add	sl, r9
 800bb52:	44a2      	add	sl, r4
 800bb54:	406b      	eors	r3, r5
 800bb56:	4453      	add	r3, sl
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
 800bb58:	4c62      	ldr	r4, [pc, #392]	; (800bce4 <mbedtls_internal_md5_process+0x714>)
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 800bb5a:	eb02 63b3 	add.w	r3, r2, r3, ror #26
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
 800bb5e:	ea63 0905 	orn	r9, r3, r5
 800bb62:	4444      	add	r4, r8
 800bb64:	440c      	add	r4, r1
 800bb66:	ea89 0902 	eor.w	r9, r9, r2
 800bb6a:	44a1      	add	r9, r4
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
 800bb6c:	495e      	ldr	r1, [pc, #376]	; (800bce8 <mbedtls_internal_md5_process+0x718>)
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
 800bb6e:	eb03 59b9 	add.w	r9, r3, r9, ror #22
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
 800bb72:	ea69 0802 	orn	r8, r9, r2
 800bb76:	4471      	add	r1, lr
 800bb78:	4429      	add	r1, r5
 800bb7a:	ea88 0803 	eor.w	r8, r8, r3
 800bb7e:	4488      	add	r8, r1
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
 800bb80:	495a      	ldr	r1, [pc, #360]	; (800bcec <mbedtls_internal_md5_process+0x71c>)
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
 800bb82:	eb09 4878 	add.w	r8, r9, r8, ror #17
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
 800bb86:	ea68 0403 	orn	r4, r8, r3
 800bb8a:	4461      	add	r1, ip
 800bb8c:	4411      	add	r1, r2
 800bb8e:	ea84 0409 	eor.w	r4, r4, r9
 800bb92:	440c      	add	r4, r1
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
 800bb94:	4a56      	ldr	r2, [pc, #344]	; (800bcf0 <mbedtls_internal_md5_process+0x720>)
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 800bb96:	9900      	ldr	r1, [sp, #0]
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
 800bb98:	eb08 24f4 	add.w	r4, r8, r4, ror #11
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
 800bb9c:	ea64 0509 	orn	r5, r4, r9
 800bba0:	443a      	add	r2, r7
 800bba2:	4413      	add	r3, r2
 800bba4:	ea85 0508 	eor.w	r5, r5, r8
 800bba8:	441d      	add	r5, r3
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
 800bbaa:	4b52      	ldr	r3, [pc, #328]	; (800bcf4 <mbedtls_internal_md5_process+0x724>)
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
 800bbac:	9a06      	ldr	r2, [sp, #24]
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
 800bbae:	eb04 65b5 	add.w	r5, r4, r5, ror #26
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
 800bbb2:	ea65 0708 	orn	r7, r5, r8
 800bbb6:	4433      	add	r3, r6
 800bbb8:	4499      	add	r9, r3
 800bbba:	4067      	eors	r7, r4
 800bbbc:	444f      	add	r7, r9
 800bbbe:	eb05 57b7 	add.w	r7, r5, r7, ror #22
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
 800bbc2:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800bbc6:	ea67 0304 	orn	r3, r7, r4
 800bbca:	f6a2 3283 	subw	r2, r2, #2947	; 0xb83
 800bbce:	4490      	add	r8, r2
 800bbd0:	406b      	eors	r3, r5
 800bbd2:	4443      	add	r3, r8
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 800bbd4:	4a48      	ldr	r2, [pc, #288]	; (800bcf8 <mbedtls_internal_md5_process+0x728>)
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
 800bbd6:	eb07 4373 	add.w	r3, r7, r3, ror #17
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 800bbda:	ea63 0605 	orn	r6, r3, r5
 800bbde:	440a      	add	r2, r1
 800bbe0:	4414      	add	r4, r2
 800bbe2:	407e      	eors	r6, r7
 800bbe4:	4426      	add	r6, r4
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
 800bbe6:	4a45      	ldr	r2, [pc, #276]	; (800bcfc <mbedtls_internal_md5_process+0x72c>)
 800bbe8:	9c04      	ldr	r4, [sp, #16]
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 800bbea:	eb03 26f6 	add.w	r6, r3, r6, ror #11
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
 800bbee:	ea66 0107 	orn	r1, r6, r7
 800bbf2:	4422      	add	r2, r4
 800bbf4:	4415      	add	r5, r2
 800bbf6:	4059      	eors	r1, r3
 800bbf8:	4429      	add	r1, r5
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
 800bbfa:	4a41      	ldr	r2, [pc, #260]	; (800bd00 <mbedtls_internal_md5_process+0x730>)
 800bbfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
 800bbfe:	eb06 61b1 	add.w	r1, r6, r1, ror #26
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
 800bc02:	ea61 0403 	orn	r4, r1, r3
 800bc06:	442a      	add	r2, r5
 800bc08:	4417      	add	r7, r2
 800bc0a:	4074      	eors	r4, r6
 800bc0c:	443c      	add	r4, r7
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
 800bc0e:	4a3d      	ldr	r2, [pc, #244]	; (800bd04 <mbedtls_internal_md5_process+0x734>)
 800bc10:	9f03      	ldr	r7, [sp, #12]
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
 800bc12:	eb01 54b4 	add.w	r4, r1, r4, ror #22
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
 800bc16:	ea64 0506 	orn	r5, r4, r6
 800bc1a:	443a      	add	r2, r7
 800bc1c:	4413      	add	r3, r2
 800bc1e:	404d      	eors	r5, r1
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 800bc20:	9a08      	ldr	r2, [sp, #32]
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
 800bc22:	441d      	add	r5, r3
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 800bc24:	4b38      	ldr	r3, [pc, #224]	; (800bd08 <mbedtls_internal_md5_process+0x738>)
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
 800bc26:	eb04 4575 	add.w	r5, r4, r5, ror #17
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 800bc2a:	ea65 0701 	orn	r7, r5, r1
 800bc2e:	4413      	add	r3, r2
 800bc30:	441e      	add	r6, r3
 800bc32:	4067      	eors	r7, r4
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 800bc34:	9a02      	ldr	r2, [sp, #8]
 800bc36:	4b35      	ldr	r3, [pc, #212]	; (800bd0c <mbedtls_internal_md5_process+0x73c>)
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 800bc38:	4437      	add	r7, r6
 800bc3a:	eb05 27f7 	add.w	r7, r5, r7, ror #11
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 800bc3e:	ea67 0c04 	orn	ip, r7, r4
 800bc42:	4413      	add	r3, r2
 800bc44:	ea8c 0c05 	eor.w	ip, ip, r5
 800bc48:	4419      	add	r1, r3
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 800bc4a:	9e07      	ldr	r6, [sp, #28]
 800bc4c:	4a30      	ldr	r2, [pc, #192]	; (800bd10 <mbedtls_internal_md5_process+0x740>)
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 800bc4e:	4461      	add	r1, ip
 800bc50:	eb07 61b1 	add.w	r1, r7, r1, ror #26
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 800bc54:	ea61 0305 	orn	r3, r1, r5
 800bc58:	4432      	add	r2, r6
 800bc5a:	407b      	eors	r3, r7
 800bc5c:	4414      	add	r4, r2
 800bc5e:	441c      	add	r4, r3
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 800bc60:	4b2c      	ldr	r3, [pc, #176]	; (800bd14 <mbedtls_internal_md5_process+0x744>)
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 800bc62:	911a      	str	r1, [sp, #104]	; 0x68
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 800bc64:	eb01 54b4 	add.w	r4, r1, r4, ror #22
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 800bc68:	ea64 0607 	orn	r6, r4, r7
 800bc6c:	445b      	add	r3, fp
 800bc6e:	404e      	eors	r6, r1
 800bc70:	441d      	add	r5, r3
 800bc72:	4435      	add	r5, r6
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
 800bc74:	4b28      	ldr	r3, [pc, #160]	; (800bd18 <mbedtls_internal_md5_process+0x748>)
 800bc76:	9e05      	ldr	r6, [sp, #20]
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 800bc78:	941d      	str	r4, [sp, #116]	; 0x74
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 800bc7a:	eb04 4575 	add.w	r5, r4, r5, ror #17
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
 800bc7e:	ea65 0201 	orn	r2, r5, r1
 800bc82:	4433      	add	r3, r6
 800bc84:	4062      	eors	r2, r4
 800bc86:	441f      	add	r7, r3
 800bc88:	4417      	add	r7, r2
 800bc8a:	eb05 27f7 	add.w	r7, r5, r7, ror #11
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 800bc8e:	951c      	str	r5, [sp, #112]	; 0x70
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
 800bc90:	971b      	str	r7, [sp, #108]	; 0x6c

#undef F

    ctx->state[0] += local.A;
 800bc92:	6883      	ldr	r3, [r0, #8]
 800bc94:	4419      	add	r1, r3
    ctx->state[1] += local.B;
 800bc96:	68c3      	ldr	r3, [r0, #12]
    ctx->state[0] += local.A;
 800bc98:	6081      	str	r1, [r0, #8]
    ctx->state[1] += local.B;
 800bc9a:	441f      	add	r7, r3
    ctx->state[2] += local.C;
 800bc9c:	6903      	ldr	r3, [r0, #16]
    ctx->state[1] += local.B;
 800bc9e:	60c7      	str	r7, [r0, #12]
    ctx->state[2] += local.C;
 800bca0:	441d      	add	r5, r3
    ctx->state[3] += local.D;
 800bca2:	6943      	ldr	r3, [r0, #20]
    ctx->state[2] += local.C;
 800bca4:	6105      	str	r5, [r0, #16]
    ctx->state[3] += local.D;
 800bca6:	441c      	add	r4, r3
 800bca8:	6144      	str	r4, [r0, #20]

    /* Zeroise variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
 800bcaa:	2150      	movs	r1, #80	; 0x50
 800bcac:	a80a      	add	r0, sp, #40	; 0x28
 800bcae:	f000 f863 	bl	800bd78 <mbedtls_platform_zeroize>

    return( 0 );
}
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	b01f      	add	sp, #124	; 0x7c
 800bcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcba:	bf00      	nop
 800bcbc:	bebfbc70 	.word	0xbebfbc70
 800bcc0:	289b7ec6 	.word	0x289b7ec6
 800bcc4:	eaa127fa 	.word	0xeaa127fa
 800bcc8:	d4ef3085 	.word	0xd4ef3085
 800bccc:	04881d05 	.word	0x04881d05
 800bcd0:	d9d4d039 	.word	0xd9d4d039
 800bcd4:	e6db99e5 	.word	0xe6db99e5
 800bcd8:	1fa27cf8 	.word	0x1fa27cf8
 800bcdc:	c4ac5665 	.word	0xc4ac5665
 800bce0:	f4292244 	.word	0xf4292244
 800bce4:	432aff97 	.word	0x432aff97
 800bce8:	ab9423a7 	.word	0xab9423a7
 800bcec:	fc93a039 	.word	0xfc93a039
 800bcf0:	655b59c3 	.word	0x655b59c3
 800bcf4:	8f0ccc92 	.word	0x8f0ccc92
 800bcf8:	85845dd1 	.word	0x85845dd1
 800bcfc:	6fa87e4f 	.word	0x6fa87e4f
 800bd00:	fe2ce6e0 	.word	0xfe2ce6e0
 800bd04:	a3014314 	.word	0xa3014314
 800bd08:	4e0811a1 	.word	0x4e0811a1
 800bd0c:	f7537e82 	.word	0xf7537e82
 800bd10:	bd3af235 	.word	0xbd3af235
 800bd14:	2ad7d2bb 	.word	0x2ad7d2bb
 800bd18:	eb86d391 	.word	0xeb86d391

0800bd1c <mbedtls_md5>:
 * output = MD5( input buffer )
 */
int mbedtls_md5( const unsigned char *input,
                     size_t ilen,
                     unsigned char output[16] )
{
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	b096      	sub	sp, #88	; 0x58
 800bd20:	4604      	mov	r4, r0
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    mbedtls_md5_context ctx;

    mbedtls_md5_init( &ctx );
 800bd22:	4668      	mov	r0, sp
{
 800bd24:	460e      	mov	r6, r1
 800bd26:	4615      	mov	r5, r2
    mbedtls_md5_init( &ctx );
 800bd28:	f007 ff2a 	bl	8013b80 <mbedtls_md5_init>
    ctx->total[0] = 0;
 800bd2c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 800bd2e:	e9cd 3300 	strd	r3, r3, [sp]
    ctx->state[0] = 0x67452301;
 800bd32:	4b10      	ldr	r3, [pc, #64]	; (800bd74 <mbedtls_md5+0x58>)
 800bd34:	9302      	str	r3, [sp, #8]
    ctx->state[1] = 0xEFCDAB89;
 800bd36:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800bd3a:	9303      	str	r3, [sp, #12]
    ctx->state[2] = 0x98BADCFE;
 800bd3c:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 800bd40:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 800bd44:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 800bd48:	9304      	str	r3, [sp, #16]

    if( ( ret = mbedtls_md5_starts( &ctx ) ) != 0 )
        goto exit;

    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
 800bd4a:	4621      	mov	r1, r4
    ctx->state[3] = 0x10325476;
 800bd4c:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
 800bd50:	4632      	mov	r2, r6
 800bd52:	4668      	mov	r0, sp
    ctx->state[3] = 0x10325476;
 800bd54:	9305      	str	r3, [sp, #20]
    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
 800bd56:	f007 ff1c 	bl	8013b92 <mbedtls_md5_update>
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	b920      	cbnz	r0, 800bd68 <mbedtls_md5+0x4c>
        goto exit;

    if( ( ret = mbedtls_md5_finish( &ctx, output ) ) != 0 )
 800bd5e:	4629      	mov	r1, r5
 800bd60:	4668      	mov	r0, sp
 800bd62:	f007 ff53 	bl	8013c0c <mbedtls_md5_finish>
 800bd66:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_md5_free( &ctx );
 800bd68:	4668      	mov	r0, sp
 800bd6a:	f007 ff0d 	bl	8013b88 <mbedtls_md5_free>

    return( ret );
}
 800bd6e:	4620      	mov	r0, r4
 800bd70:	b016      	add	sp, #88	; 0x58
 800bd72:	bd70      	pop	{r4, r5, r6, pc}
 800bd74:	67452301 	.word	0x67452301

0800bd78 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 800bd78:	460a      	mov	r2, r1
 800bd7a:	b119      	cbz	r1, 800bd84 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
 800bd7c:	4b02      	ldr	r3, [pc, #8]	; (800bd88 <mbedtls_platform_zeroize+0x10>)
 800bd7e:	2100      	movs	r1, #0
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4718      	bx	r3
}
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	20000308 	.word	0x20000308

0800bd8c <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
 800bd8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
 800bd90:	f8df a048 	ldr.w	sl, [pc, #72]	; 800bddc <device_visitor+0x50>
 800bd94:	4d12      	ldr	r5, [pc, #72]	; (800bde0 <device_visitor+0x54>)
 800bd96:	469b      	mov	fp, r3
 800bd98:	eba5 050a 	sub.w	r5, r5, sl
 800bd9c:	4b11      	ldr	r3, [pc, #68]	; (800bde4 <device_visitor+0x58>)
 800bd9e:	10ed      	asrs	r5, r5, #3
 800bda0:	4680      	mov	r8, r0
 800bda2:	460f      	mov	r7, r1
 800bda4:	4691      	mov	r9, r2
 800bda6:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
 800bda8:	2600      	movs	r6, #0
 800bdaa:	42be      	cmp	r6, r7
 800bdac:	d102      	bne.n	800bdb4 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
 800bdae:	4630      	mov	r0, r6
}
 800bdb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
 800bdb4:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
 800bdb8:	2c00      	cmp	r4, #0
 800bdba:	dd0d      	ble.n	800bdd8 <device_visitor+0x4c>
 800bdbc:	42a5      	cmp	r5, r4
 800bdbe:	d30b      	bcc.n	800bdd8 <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
 800bdc0:	3c01      	subs	r4, #1
 800bdc2:	b224      	sxth	r4, r4
 800bdc4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800bdc8:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
 800bdcc:	4659      	mov	r1, fp
 800bdce:	47c8      	blx	r9
		if (rc < 0) {
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	dbed      	blt.n	800bdb0 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
 800bdd4:	3601      	adds	r6, #1
 800bdd6:	e7e8      	b.n	800bdaa <device_visitor+0x1e>
	const struct device *dev = NULL;
 800bdd8:	2000      	movs	r0, #0
 800bdda:	e7f7      	b.n	800bdcc <device_visitor+0x40>
 800bddc:	08014d98 	.word	0x08014d98
 800bde0:	08014f18 	.word	0x08014f18
 800bde4:	aaaaaaab 	.word	0xaaaaaaab

0800bde8 <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800bde8:	4b0e      	ldr	r3, [pc, #56]	; (800be24 <z_sys_init_run_level+0x3c>)
{
 800bdea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800bdec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800bdf0:	3001      	adds	r0, #1
 800bdf2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800bdf6:	42a6      	cmp	r6, r4
 800bdf8:	d800      	bhi.n	800bdfc <z_sys_init_run_level+0x14>
}
 800bdfa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 800bdfc:	e9d4 3500 	ldrd	r3, r5, [r4]
 800be00:	4628      	mov	r0, r5
 800be02:	4798      	blx	r3
		if (dev != NULL) {
 800be04:	b165      	cbz	r5, 800be20 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 800be06:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 800be08:	b130      	cbz	r0, 800be18 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 800be0a:	2800      	cmp	r0, #0
 800be0c:	bfb8      	it	lt
 800be0e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 800be10:	28ff      	cmp	r0, #255	; 0xff
 800be12:	bfa8      	it	ge
 800be14:	20ff      	movge	r0, #255	; 0xff
 800be16:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 800be18:	785a      	ldrb	r2, [r3, #1]
 800be1a:	f042 0201 	orr.w	r2, r2, #1
 800be1e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800be20:	3408      	adds	r4, #8
 800be22:	e7e8      	b.n	800bdf6 <z_sys_init_run_level+0xe>
 800be24:	08016134 	.word	0x08016134

0800be28 <z_device_get_all_static>:
	*devices = __device_start;
 800be28:	4a03      	ldr	r2, [pc, #12]	; (800be38 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
 800be2a:	4b04      	ldr	r3, [pc, #16]	; (800be3c <z_device_get_all_static+0x14>)
	*devices = __device_start;
 800be2c:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
 800be2e:	1a9b      	subs	r3, r3, r2
}
 800be30:	4803      	ldr	r0, [pc, #12]	; (800be40 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
 800be32:	10db      	asrs	r3, r3, #3
}
 800be34:	4358      	muls	r0, r3
 800be36:	4770      	bx	lr
 800be38:	08014d98 	.word	0x08014d98
 800be3c:	08014f18 	.word	0x08014f18
 800be40:	aaaaaaab 	.word	0xaaaaaaab

0800be44 <z_impl_device_get_binding>:
{
 800be44:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
 800be46:	4605      	mov	r5, r0
 800be48:	b910      	cbnz	r0, 800be50 <z_impl_device_get_binding+0xc>
		return NULL;
 800be4a:	2400      	movs	r4, #0
}
 800be4c:	4620      	mov	r0, r4
 800be4e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 800be50:	7803      	ldrb	r3, [r0, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d0f9      	beq.n	800be4a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 800be56:	4c0e      	ldr	r4, [pc, #56]	; (800be90 <z_impl_device_get_binding+0x4c>)
 800be58:	4e0e      	ldr	r6, [pc, #56]	; (800be94 <z_impl_device_get_binding+0x50>)
 800be5a:	42b4      	cmp	r4, r6
 800be5c:	d108      	bne.n	800be70 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 800be5e:	4c0c      	ldr	r4, [pc, #48]	; (800be90 <z_impl_device_get_binding+0x4c>)
 800be60:	42b4      	cmp	r4, r6
 800be62:	d0f2      	beq.n	800be4a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800be64:	4620      	mov	r0, r4
 800be66:	f007 ff29 	bl	8013cbc <z_device_is_ready>
 800be6a:	b950      	cbnz	r0, 800be82 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 800be6c:	3418      	adds	r4, #24
 800be6e:	e7f7      	b.n	800be60 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800be70:	4620      	mov	r0, r4
 800be72:	f007 ff23 	bl	8013cbc <z_device_is_ready>
 800be76:	b110      	cbz	r0, 800be7e <z_impl_device_get_binding+0x3a>
 800be78:	6823      	ldr	r3, [r4, #0]
 800be7a:	42ab      	cmp	r3, r5
 800be7c:	d0e6      	beq.n	800be4c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 800be7e:	3418      	adds	r4, #24
 800be80:	e7eb      	b.n	800be5a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800be82:	6821      	ldr	r1, [r4, #0]
 800be84:	4628      	mov	r0, r5
 800be86:	f7f4 fb40 	bl	800050a <strcmp>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d1ee      	bne.n	800be6c <z_impl_device_get_binding+0x28>
 800be8e:	e7dd      	b.n	800be4c <z_impl_device_get_binding+0x8>
 800be90:	08014d98 	.word	0x08014d98
 800be94:	08014f18 	.word	0x08014f18

0800be98 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 800be98:	4b01      	ldr	r3, [pc, #4]	; (800bea0 <z_impl_z_errno+0x8>)
 800be9a:	6898      	ldr	r0, [r3, #8]
}
 800be9c:	3098      	adds	r0, #152	; 0x98
 800be9e:	4770      	bx	lr
 800bea0:	20002524 	.word	0x20002524

0800bea4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	b088      	sub	sp, #32
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
 800bea8:	ae06      	add	r6, sp, #24
{
 800beaa:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
 800beac:	4603      	mov	r3, r0
 800beae:	4a13      	ldr	r2, [pc, #76]	; (800befc <init_idle_thread+0x58>)
	struct k_thread *thread = &z_idle_threads[i];
 800beb0:	4d13      	ldr	r5, [pc, #76]	; (800bf00 <init_idle_thread+0x5c>)
	snprintk(tname, 8, "idle %02d", i);
 800beb2:	2108      	movs	r1, #8
 800beb4:	4630      	mov	r0, r6
 800beb6:	f002 fc5f 	bl	800e778 <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
 800beba:	23b8      	movs	r3, #184	; 0xb8
 800bebc:	fb03 5504 	mla	r5, r3, r4, r5
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 800bec0:	2201      	movs	r2, #1
 800bec2:	230f      	movs	r3, #15
 800bec4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800bec8:	2300      	movs	r3, #0
 800beca:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800bece:	4b0d      	ldr	r3, [pc, #52]	; (800bf04 <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
 800bed0:	490d      	ldr	r1, [pc, #52]	; (800bf08 <init_idle_thread+0x64>)
 800bed2:	9605      	str	r6, [sp, #20]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800bed4:	2218      	movs	r2, #24
 800bed6:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
 800beda:	f44f 70b0 	mov.w	r0, #352	; 0x160
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	fb00 1104 	mla	r1, r0, r4, r1
 800bee4:	4b09      	ldr	r3, [pc, #36]	; (800bf0c <init_idle_thread+0x68>)
 800bee6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800beea:	4628      	mov	r0, r5
 800beec:	f000 f98a 	bl	800c204 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800bef0:	7b6b      	ldrb	r3, [r5, #13]
 800bef2:	f023 0304 	bic.w	r3, r3, #4
 800bef6:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 800bef8:	b008      	add	sp, #32
 800befa:	bd70      	pop	{r4, r5, r6, pc}
 800befc:	08018eae 	.word	0x08018eae
 800bf00:	20001868 	.word	0x20001868
 800bf04:	20002524 	.word	0x20002524
 800bf08:	20004520 	.word	0x20004520
 800bf0c:	08013ea5 	.word	0x08013ea5

0800bf10 <bg_thread_main>:
{
 800bf10:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800bf12:	4b0a      	ldr	r3, [pc, #40]	; (800bf3c <bg_thread_main+0x2c>)
 800bf14:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800bf16:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 800bf18:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800bf1a:	f7ff ff65 	bl	800bde8 <z_sys_init_run_level>
	boot_banner();
 800bf1e:	f001 fb0b 	bl	800d538 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800bf22:	2003      	movs	r0, #3
 800bf24:	f7ff ff60 	bl	800bde8 <z_sys_init_run_level>
	z_init_static_threads();
 800bf28:	f000 f9fe 	bl	800c328 <z_init_static_threads>
	main();
 800bf2c:	f7f4 fb82 	bl	8000634 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800bf30:	4a03      	ldr	r2, [pc, #12]	; (800bf40 <bg_thread_main+0x30>)
 800bf32:	7b13      	ldrb	r3, [r2, #12]
 800bf34:	f023 0301 	bic.w	r3, r3, #1
 800bf38:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800bf3a:	bd08      	pop	{r3, pc}
 800bf3c:	200026ad 	.word	0x200026ad
 800bf40:	20001920 	.word	0x20001920

0800bf44 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800bf44:	4802      	ldr	r0, [pc, #8]	; (800bf50 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
 800bf46:	4a03      	ldr	r2, [pc, #12]	; (800bf54 <z_bss_zero+0x10>)
 800bf48:	2100      	movs	r1, #0
 800bf4a:	1a12      	subs	r2, r2, r0
 800bf4c:	f008 bc69 	b.w	8014822 <memset>
 800bf50:	200005a0 	.word	0x200005a0
 800bf54:	200026b0 	.word	0x200026b0

0800bf58 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800bf58:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800bf5a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800c01c <z_cstart+0xc4>
 800bf5e:	b0b4      	sub	sp, #208	; 0xd0
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800bf60:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800bf64:	4d2e      	ldr	r5, [pc, #184]	; (800c020 <z_cstart+0xc8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 800bf66:	4e2f      	ldr	r6, [pc, #188]	; (800c024 <z_cstart+0xcc>)
 800bf68:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800bf6a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800c028 <z_cstart+0xd0>
 800bf6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf72:	2400      	movs	r4, #0
 800bf74:	616b      	str	r3, [r5, #20]
 800bf76:	23f0      	movs	r3, #240	; 0xf0
 800bf78:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800bf7c:	77ec      	strb	r4, [r5, #31]
 800bf7e:	762c      	strb	r4, [r5, #24]
 800bf80:	766c      	strb	r4, [r5, #25]
 800bf82:	76ac      	strb	r4, [r5, #26]
 800bf84:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800bf88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf8a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800bf8e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800bf90:	f7f7 fe16 	bl	8003bc0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800bf94:	f7f7 fbdc 	bl	8003750 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800bf98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf9c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800bf9e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800bfa0:	f7f7 fef2 	bl	8003d88 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800bfa4:	f7f7 fe58 	bl	8003c58 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800bfa8:	f240 1301 	movw	r3, #257	; 0x101
 800bfac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800bfb0:	ab06      	add	r3, sp, #24
 800bfb2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 800bfb4:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
 800bfb8:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800bfba:	f007 fe7e 	bl	8013cba <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f7ff ff12 	bl	800bde8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800bfc4:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 800bfc6:	4d19      	ldr	r5, [pc, #100]	; (800c02c <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800bfc8:	f7ff ff0e 	bl	800bde8 <z_sys_init_run_level>
	z_sched_init();
 800bfcc:	f000 ff10 	bl	800cdf0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800bfd0:	4b17      	ldr	r3, [pc, #92]	; (800c030 <z_cstart+0xd8>)
 800bfd2:	9305      	str	r3, [sp, #20]
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	4917      	ldr	r1, [pc, #92]	; (800c034 <z_cstart+0xdc>)
 800bfd8:	9400      	str	r4, [sp, #0]
 800bfda:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800bfde:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bfe2:	464b      	mov	r3, r9
 800bfe4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800bfe8:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
 800bfea:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800bfec:	f000 f90a 	bl	800c204 <z_setup_new_thread>
 800bff0:	7b6a      	ldrb	r2, [r5, #13]
 800bff2:	4607      	mov	r7, r0
 800bff4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 800bff8:	4628      	mov	r0, r5
 800bffa:	736a      	strb	r2, [r5, #13]
 800bffc:	f008 f94b 	bl	8014296 <z_ready_thread>
		init_idle_thread(i);
 800c000:	4620      	mov	r0, r4
 800c002:	f7ff ff4f 	bl	800bea4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800c006:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <z_cstart+0xe0>)
 800c008:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800c00a:	464a      	mov	r2, r9
 800c00c:	4639      	mov	r1, r7
 800c00e:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
 800c010:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
 800c012:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800c016:	f7f7 fcad 	bl	8003974 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800c01a:	bf00      	nop
 800c01c:	20004ea0 	.word	0x20004ea0
 800c020:	e000ed00 	.word	0xe000ed00
 800c024:	20002524 	.word	0x20002524
 800c028:	0800bf11 	.word	0x0800bf11
 800c02c:	20001920 	.word	0x20001920
 800c030:	08018eb8 	.word	0x08018eb8
 800c034:	20004040 	.word	0x20004040
 800c038:	20001868 	.word	0x20001868

0800c03c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800c03c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800c03e:	4c06      	ldr	r4, [pc, #24]	; (800c058 <statics_init+0x1c>)
 800c040:	4d06      	ldr	r5, [pc, #24]	; (800c05c <statics_init+0x20>)
 800c042:	42ac      	cmp	r4, r5
 800c044:	d301      	bcc.n	800c04a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 800c046:	2000      	movs	r0, #0
 800c048:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800c04a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800c04e:	4620      	mov	r0, r4
 800c050:	f007 fe7d 	bl	8013d4e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800c054:	3414      	adds	r4, #20
 800c056:	e7f4      	b.n	800c042 <statics_init+0x6>
 800c058:	20000414 	.word	0x20000414
 800c05c:	20000414 	.word	0x20000414

0800c060 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800c060:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800c062:	4b0e      	ldr	r3, [pc, #56]	; (800c09c <init_mem_slab_module+0x3c>)
 800c064:	4c0e      	ldr	r4, [pc, #56]	; (800c0a0 <init_mem_slab_module+0x40>)
 800c066:	42a3      	cmp	r3, r4
 800c068:	d301      	bcc.n	800c06e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
 800c06a:	2000      	movs	r0, #0
	return rc;
}
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800c06e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 800c072:	ea41 0200 	orr.w	r2, r1, r0
 800c076:	f012 0203 	ands.w	r2, r2, #3
 800c07a:	d10b      	bne.n	800c094 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 800c07c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 800c07e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 800c080:	42aa      	cmp	r2, r5
 800c082:	d101      	bne.n	800c088 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800c084:	331c      	adds	r3, #28
 800c086:	e7ee      	b.n	800c066 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 800c088:	695e      	ldr	r6, [r3, #20]
 800c08a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 800c08c:	3201      	adds	r2, #1
		slab->free_list = p;
 800c08e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
 800c090:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 800c092:	e7f5      	b.n	800c080 <init_mem_slab_module+0x20>
	return rc;
 800c094:	f06f 0015 	mvn.w	r0, #21
 800c098:	e7e8      	b.n	800c06c <init_mem_slab_module+0xc>
 800c09a:	bf00      	nop
 800c09c:	200003c0 	.word	0x200003c0
 800c0a0:	20000414 	.word	0x20000414

0800c0a4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 800c0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0a6:	460c      	mov	r4, r1
	__asm__ volatile(
 800c0a8:	f04f 0510 	mov.w	r5, #16
 800c0ac:	f3ef 8111 	mrs	r1, BASEPRI
 800c0b0:	f385 8812 	msr	BASEPRI_MAX, r5
 800c0b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 800c0b8:	6945      	ldr	r5, [r0, #20]
 800c0ba:	b15d      	cbz	r5, 800c0d4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 800c0bc:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 800c0c2:	6983      	ldr	r3, [r0, #24]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 800c0c8:	2000      	movs	r0, #0
	__asm__ volatile(
 800c0ca:	f381 8811 	msr	BASEPRI, r1
 800c0ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 800c0d2:	e011      	b.n	800c0f8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 800c0d4:	ea52 0c03 	orrs.w	ip, r2, r3
 800c0d8:	d103      	bne.n	800c0e2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
 800c0da:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 800c0dc:	f06f 000b 	mvn.w	r0, #11
 800c0e0:	e7f3      	b.n	800c0ca <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 800c0e2:	e9cd 2300 	strd	r2, r3, [sp]
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	3008      	adds	r0, #8
 800c0ea:	f000 fdd7 	bl	800cc9c <z_pend_curr>
		if (result == 0) {
 800c0ee:	b918      	cbnz	r0, 800c0f8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 800c0f0:	4b02      	ldr	r3, [pc, #8]	; (800c0fc <k_mem_slab_alloc+0x58>)
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	6023      	str	r3, [r4, #0]
}
 800c0f8:	b003      	add	sp, #12
 800c0fa:	bd30      	pop	{r4, r5, pc}
 800c0fc:	20002524 	.word	0x20002524

0800c100 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	4605      	mov	r5, r0
 800c104:	460e      	mov	r6, r1
	__asm__ volatile(
 800c106:	f04f 0310 	mov.w	r3, #16
 800c10a:	f3ef 8711 	mrs	r7, BASEPRI
 800c10e:	f383 8812 	msr	BASEPRI_MAX, r3
 800c112:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 800c116:	4b06      	ldr	r3, [pc, #24]	; (800c130 <k_thread_foreach+0x30>)
 800c118:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c11a:	b924      	cbnz	r4, 800c126 <k_thread_foreach+0x26>
	__asm__ volatile(
 800c11c:	f387 8811 	msr	BASEPRI, r7
 800c120:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
 800c124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
 800c126:	4620      	mov	r0, r4
 800c128:	4631      	mov	r1, r6
 800c12a:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 800c12c:	6f64      	ldr	r4, [r4, #116]	; 0x74
 800c12e:	e7f4      	b.n	800c11a <k_thread_foreach+0x1a>
 800c130:	20002524 	.word	0x20002524

0800c134 <z_thread_monitor_exit>:
	__asm__ volatile(
 800c134:	f04f 0310 	mov.w	r3, #16
 800c138:	f3ef 8111 	mrs	r1, BASEPRI
 800c13c:	f383 8812 	msr	BASEPRI_MAX, r3
 800c140:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
 800c144:	4a09      	ldr	r2, [pc, #36]	; (800c16c <z_thread_monitor_exit+0x38>)
 800c146:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c148:	4283      	cmp	r3, r0
 800c14a:	d107      	bne.n	800c15c <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
 800c14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c14e:	6253      	str	r3, [r2, #36]	; 0x24
	__asm__ volatile(
 800c150:	f381 8811 	msr	BASEPRI, r1
 800c154:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
 800c158:	4770      	bx	lr
 800c15a:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d0f7      	beq.n	800c150 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
 800c160:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
 800c162:	4282      	cmp	r2, r0
 800c164:	d1f9      	bne.n	800c15a <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
 800c166:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800c168:	675a      	str	r2, [r3, #116]	; 0x74
 800c16a:	e7f1      	b.n	800c150 <z_thread_monitor_exit+0x1c>
 800c16c:	20002524 	.word	0x20002524

0800c170 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
 800c170:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
 800c172:	4604      	mov	r4, r0
 800c174:	b908      	cbnz	r0, 800c17a <z_impl_k_thread_name_set+0xa>
		thread = _current;
 800c176:	4b05      	ldr	r3, [pc, #20]	; (800c18c <z_impl_k_thread_name_set+0x1c>)
 800c178:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 800c17a:	221f      	movs	r2, #31
 800c17c:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800c180:	f008 fb8e 	bl	80148a0 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 800c184:	2000      	movs	r0, #0
 800c186:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 800c18a:	bd10      	pop	{r4, pc}
 800c18c:	20002524 	.word	0x20002524

0800c190 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
 800c190:	7b43      	ldrb	r3, [r0, #13]
 800c192:	2b10      	cmp	r3, #16
 800c194:	d80e      	bhi.n	800c1b4 <k_thread_state_str+0x24>
 800c196:	2b10      	cmp	r3, #16
 800c198:	d81c      	bhi.n	800c1d4 <k_thread_state_str+0x44>
 800c19a:	e8df f003 	tbb	[pc, r3]
 800c19e:	091d      	.short	0x091d
 800c1a0:	1b151b13 	.word	0x1b151b13
 800c1a4:	1b171b1b 	.word	0x1b171b1b
 800c1a8:	1b1b1b1b 	.word	0x1b1b1b1b
 800c1ac:	1b1b      	.short	0x1b1b
 800c1ae:	19          	.byte	0x19
 800c1af:	00          	.byte	0x00
 800c1b0:	480b      	ldr	r0, [pc, #44]	; (800c1e0 <k_thread_state_str+0x50>)
 800c1b2:	4770      	bx	lr
 800c1b4:	2b20      	cmp	r3, #32
 800c1b6:	d011      	beq.n	800c1dc <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
 800c1b8:	4a0a      	ldr	r2, [pc, #40]	; (800c1e4 <k_thread_state_str+0x54>)
 800c1ba:	480b      	ldr	r0, [pc, #44]	; (800c1e8 <k_thread_state_str+0x58>)
 800c1bc:	2b80      	cmp	r3, #128	; 0x80
 800c1be:	bf08      	it	eq
 800c1c0:	4610      	moveq	r0, r2
 800c1c2:	4770      	bx	lr
		return "pending";
 800c1c4:	4809      	ldr	r0, [pc, #36]	; (800c1ec <k_thread_state_str+0x5c>)
 800c1c6:	4770      	bx	lr
		return "prestart";
 800c1c8:	4809      	ldr	r0, [pc, #36]	; (800c1f0 <k_thread_state_str+0x60>)
 800c1ca:	4770      	bx	lr
		return "dead";
 800c1cc:	4809      	ldr	r0, [pc, #36]	; (800c1f4 <k_thread_state_str+0x64>)
 800c1ce:	4770      	bx	lr
		return "suspended";
 800c1d0:	4809      	ldr	r0, [pc, #36]	; (800c1f8 <k_thread_state_str+0x68>)
 800c1d2:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
 800c1d4:	4804      	ldr	r0, [pc, #16]	; (800c1e8 <k_thread_state_str+0x58>)
 800c1d6:	4770      	bx	lr
		return "";
 800c1d8:	4808      	ldr	r0, [pc, #32]	; (800c1fc <k_thread_state_str+0x6c>)
 800c1da:	4770      	bx	lr
		return "aborting";
 800c1dc:	4808      	ldr	r0, [pc, #32]	; (800c200 <k_thread_state_str+0x70>)
}
 800c1de:	4770      	bx	lr
 800c1e0:	08018ee5 	.word	0x08018ee5
 800c1e4:	08018ef4 	.word	0x08018ef4
 800c1e8:	08018ebd 	.word	0x08018ebd
 800c1ec:	08018ec5 	.word	0x08018ec5
 800c1f0:	08018ecd 	.word	0x08018ecd
 800c1f4:	08018ed6 	.word	0x08018ed6
 800c1f8:	08018edb 	.word	0x08018edb
 800c1fc:	080164a2 	.word	0x080164a2
 800c200:	08018eeb 	.word	0x08018eeb

0800c204 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	b085      	sub	sp, #20
 800c20a:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800c20c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 800c210:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 800c214:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c216:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800c218:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 800c21a:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800c21c:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
 800c220:	7343      	strb	r3, [r0, #13]

	thread_base->prio = priority;
 800c222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c224:	7383      	strb	r3, [r0, #14]
	thread_base->pended_on = NULL;
 800c226:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800c228:	f101 0320 	add.w	r3, r1, #32
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800c22c:	f10a 0720 	add.w	r7, sl, #32
{
 800c230:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800c232:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800c236:	460e      	mov	r6, r1
	thread_base->pended_on = NULL;
 800c238:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 800c23a:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
 800c23c:	440f      	add	r7, r1
__ssp_bos_icheck3(memset, void *, int)
 800c23e:	4652      	mov	r2, sl
 800c240:	21aa      	movs	r1, #170	; 0xaa
 800c242:	4618      	mov	r0, r3
{
 800c244:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800c248:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800c24c:	f008 fae9 	bl	8014822 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800c250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c252:	9302      	str	r3, [sp, #8]
 800c254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->stack_info.delta = delta;
 800c256:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	new_thread->stack_info.size = stack_buf_size;
 800c25a:	e9c4 0a27 	strd	r0, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800c25e:	e9cd b300 	strd	fp, r3, [sp]
 800c262:	463a      	mov	r2, r7
 800c264:	4643      	mov	r3, r8
 800c266:	4631      	mov	r1, r6
 800c268:	4620      	mov	r0, r4
 800c26a:	f7f7 fb4f 	bl	800390c <arch_new_thread>
	new_thread->entry.parameter2 = p2;
 800c26e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c270:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
 800c272:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
 800c274:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
 800c276:	e9c4 8b19 	strd	r8, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
 800c27a:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
 800c27c:	f04f 0210 	mov.w	r2, #16
 800c280:	f3ef 8311 	mrs	r3, BASEPRI
 800c284:	f382 8812 	msr	BASEPRI_MAX, r2
 800c288:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
 800c28c:	4e0f      	ldr	r6, [pc, #60]	; (800c2cc <z_setup_new_thread+0xc8>)
 800c28e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c290:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
 800c292:	6274      	str	r4, [r6, #36]	; 0x24
	__asm__ volatile(
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
 800c29c:	f1b9 0f00 	cmp.w	r9, #0
 800c2a0:	d011      	beq.n	800c2c6 <z_setup_new_thread+0xc2>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 800c2a2:	221f      	movs	r2, #31
 800c2a4:	4649      	mov	r1, r9
 800c2a6:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800c2aa:	f008 faf9 	bl	80148a0 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 800c2ae:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
 800c2b2:	68b3      	ldr	r3, [r6, #8]
 800c2b4:	b10b      	cbz	r3, 800c2ba <z_setup_new_thread+0xb6>
	new_thread->resource_pool = _current->resource_pool;
 800c2b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
 800c2ba:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 800c2be:	4638      	mov	r0, r7
 800c2c0:	b005      	add	sp, #20
 800c2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
 800c2c6:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
 800c2ca:	e7f2      	b.n	800c2b2 <z_setup_new_thread+0xae>
 800c2cc:	20002524 	.word	0x20002524

0800c2d0 <z_impl_k_thread_create>:
{
 800c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800c2d4:	2700      	movs	r7, #0
 800c2d6:	9705      	str	r7, [sp, #20]
 800c2d8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c2da:	9704      	str	r7, [sp, #16]
 800c2dc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800c2de:	9703      	str	r7, [sp, #12]
 800c2e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800c2e2:	9702      	str	r7, [sp, #8]
{
 800c2e4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800c2e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c2ea:	9701      	str	r7, [sp, #4]
 800c2ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c2ee:	9700      	str	r7, [sp, #0]
{
 800c2f0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800c2f2:	f7ff ff87 	bl	800c204 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800c2f6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800c2fa:	bf08      	it	eq
 800c2fc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800c300:	d005      	beq.n	800c30e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800c302:	ea55 0306 	orrs.w	r3, r5, r6
 800c306:	d105      	bne.n	800c314 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 fc6b 	bl	800cbe4 <z_sched_start>
}
 800c30e:	4620      	mov	r0, r4
 800c310:	b007      	add	sp, #28
 800c312:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800c314:	4903      	ldr	r1, [pc, #12]	; (800c324 <z_impl_k_thread_create+0x54>)
 800c316:	4632      	mov	r2, r6
 800c318:	462b      	mov	r3, r5
 800c31a:	f104 0018 	add.w	r0, r4, #24
 800c31e:	f000 ff61 	bl	800d1e4 <z_add_timeout>
 800c322:	e7f4      	b.n	800c30e <z_impl_k_thread_create+0x3e>
 800c324:	080142b7 	.word	0x080142b7

0800c328 <z_init_static_threads>:
{
 800c328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32a:	4c22      	ldr	r4, [pc, #136]	; (800c3b4 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 800c32c:	4d22      	ldr	r5, [pc, #136]	; (800c3b8 <z_init_static_threads+0x90>)
{
 800c32e:	b087      	sub	sp, #28
 800c330:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800c332:	42ae      	cmp	r6, r5
 800c334:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800c338:	d30b      	bcc.n	800c352 <z_init_static_threads+0x2a>
	k_sched_lock();
 800c33a:	f000 fb6f 	bl	800ca1c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800c33e:	4c1d      	ldr	r4, [pc, #116]	; (800c3b4 <z_init_static_threads+0x8c>)
 800c340:	4f1e      	ldr	r7, [pc, #120]	; (800c3bc <z_init_static_threads+0x94>)
 800c342:	260a      	movs	r6, #10
 800c344:	42ac      	cmp	r4, r5
 800c346:	d320      	bcc.n	800c38a <z_init_static_threads+0x62>
}
 800c348:	b007      	add	sp, #28
 800c34a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800c34e:	f000 bd33 	b.w	800cdb8 <k_sched_unlock>
		z_setup_new_thread(
 800c352:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c356:	9305      	str	r3, [sp, #20]
 800c358:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800c35c:	9304      	str	r3, [sp, #16]
 800c35e:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800c362:	9303      	str	r3, [sp, #12]
 800c364:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800c368:	9302      	str	r3, [sp, #8]
 800c36a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800c37a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800c37e:	f7ff ff41 	bl	800c204 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800c382:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800c386:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800c388:	e7d2      	b.n	800c330 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800c38a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c38c:	1c53      	adds	r3, r2, #1
 800c38e:	d009      	beq.n	800c3a4 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800c390:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800c394:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800c398:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 800c39c:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800c39e:	d103      	bne.n	800c3a8 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800c3a0:	f000 fc20 	bl	800cbe4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800c3a4:	3430      	adds	r4, #48	; 0x30
 800c3a6:	e7cd      	b.n	800c344 <z_init_static_threads+0x1c>
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	3018      	adds	r0, #24
 800c3ac:	f000 ff1a 	bl	800d1e4 <z_add_timeout>
 800c3b0:	e7f8      	b.n	800c3a4 <z_init_static_threads+0x7c>
 800c3b2:	bf00      	nop
 800c3b4:	200003c0 	.word	0x200003c0
 800c3b8:	200003c0 	.word	0x200003c0
 800c3bc:	080142b7 	.word	0x080142b7

0800c3c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800c3c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	4617      	mov	r7, r2
 800c3c8:	461e      	mov	r6, r3
	__asm__ volatile(
 800c3ca:	f04f 0310 	mov.w	r3, #16
 800c3ce:	f3ef 8811 	mrs	r8, BASEPRI
 800c3d2:	f383 8812 	msr	BASEPRI_MAX, r3
 800c3d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800c3da:	68c3      	ldr	r3, [r0, #12]
 800c3dc:	4a32      	ldr	r2, [pc, #200]	; (800c4a8 <z_impl_k_mutex_lock+0xe8>)
 800c3de:	b16b      	cbz	r3, 800c3fc <z_impl_k_mutex_lock+0x3c>
 800c3e0:	6880      	ldr	r0, [r0, #8]
 800c3e2:	6891      	ldr	r1, [r2, #8]
 800c3e4:	4288      	cmp	r0, r1
 800c3e6:	d019      	beq.n	800c41c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800c3e8:	ea57 0306 	orrs.w	r3, r7, r6
 800c3ec:	d118      	bne.n	800c420 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 800c3ee:	f388 8811 	msr	BASEPRI, r8
 800c3f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 800c3f6:	f06f 000f 	mvn.w	r0, #15
 800c3fa:	e00c      	b.n	800c416 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 800c3fc:	6891      	ldr	r1, [r2, #8]
 800c3fe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800c402:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 800c404:	3301      	adds	r3, #1
 800c406:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 800c408:	6893      	ldr	r3, [r2, #8]
 800c40a:	60a3      	str	r3, [r4, #8]
 800c40c:	f388 8811 	msr	BASEPRI, r8
 800c410:	f3bf 8f6f 	isb	sy
		return 0;
 800c414:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800c416:	b002      	add	sp, #8
 800c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 800c41c:	6921      	ldr	r1, [r4, #16]
 800c41e:	e7f0      	b.n	800c402 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800c420:	f991 100e 	ldrsb.w	r1, [r1, #14]
 800c424:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 800c428:	4299      	cmp	r1, r3
 800c42a:	bfa8      	it	ge
 800c42c:	4619      	movge	r1, r3
 800c42e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 800c432:	4291      	cmp	r1, r2
 800c434:	bfb8      	it	lt
 800c436:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800c438:	428b      	cmp	r3, r1
 800c43a:	dd2e      	ble.n	800c49a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 800c43c:	f007 fd3e 	bl	8013ebc <adjust_owner_prio.isra.0>
 800c440:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800c442:	e9cd 7600 	strd	r7, r6, [sp]
 800c446:	4819      	ldr	r0, [pc, #100]	; (800c4ac <z_impl_k_mutex_lock+0xec>)
 800c448:	4622      	mov	r2, r4
 800c44a:	4641      	mov	r1, r8
 800c44c:	f000 fc26 	bl	800cc9c <z_pend_curr>
	if (got_mutex == 0) {
 800c450:	2800      	cmp	r0, #0
 800c452:	d0e0      	beq.n	800c416 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 800c454:	f04f 0310 	mov.w	r3, #16
 800c458:	f3ef 8611 	mrs	r6, BASEPRI
 800c45c:	f383 8812 	msr	BASEPRI_MAX, r3
 800c460:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c468:	429c      	cmp	r4, r3
 800c46a:	d00a      	beq.n	800c482 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800c46c:	b14b      	cbz	r3, 800c482 <z_impl_k_mutex_lock+0xc2>
 800c46e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800c472:	4299      	cmp	r1, r3
 800c474:	bfa8      	it	ge
 800c476:	4619      	movge	r1, r3
 800c478:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800c47c:	4299      	cmp	r1, r3
 800c47e:	bfb8      	it	lt
 800c480:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800c482:	68a0      	ldr	r0, [r4, #8]
 800c484:	f007 fd1a 	bl	8013ebc <adjust_owner_prio.isra.0>
 800c488:	b900      	cbnz	r0, 800c48c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 800c48a:	b145      	cbz	r5, 800c49e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 800c48c:	4807      	ldr	r0, [pc, #28]	; (800c4ac <z_impl_k_mutex_lock+0xec>)
 800c48e:	4631      	mov	r1, r6
 800c490:	f000 fab2 	bl	800c9f8 <z_reschedule>
	return -EAGAIN;
 800c494:	f06f 000a 	mvn.w	r0, #10
 800c498:	e7bd      	b.n	800c416 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 800c49a:	2500      	movs	r5, #0
 800c49c:	e7d1      	b.n	800c442 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 800c49e:	f386 8811 	msr	BASEPRI, r6
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	e7f5      	b.n	800c494 <z_impl_k_mutex_lock+0xd4>
 800c4a8:	20002524 	.word	0x20002524
 800c4ac:	200026ae 	.word	0x200026ae

0800c4b0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 800c4b0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800c4b2:	6883      	ldr	r3, [r0, #8]
{
 800c4b4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d033      	beq.n	800c522 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800c4ba:	4a1d      	ldr	r2, [pc, #116]	; (800c530 <z_impl_k_mutex_unlock+0x80>)
 800c4bc:	6892      	ldr	r2, [r2, #8]
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d132      	bne.n	800c528 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800c4c2:	7bda      	ldrb	r2, [r3, #15]
 800c4c4:	3a01      	subs	r2, #1
 800c4c6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800c4c8:	68c3      	ldr	r3, [r0, #12]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d905      	bls.n	800c4da <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800c4d2:	f000 fc71 	bl	800cdb8 <k_sched_unlock>

	return 0;
 800c4d6:	2000      	movs	r0, #0
}
 800c4d8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800c4da:	f04f 0310 	mov.w	r3, #16
 800c4de:	f3ef 8511 	mrs	r5, BASEPRI
 800c4e2:	f383 8812 	msr	BASEPRI_MAX, r3
 800c4e6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800c4ea:	6901      	ldr	r1, [r0, #16]
 800c4ec:	6880      	ldr	r0, [r0, #8]
 800c4ee:	f007 fce5 	bl	8013ebc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f007 ff2b 	bl	801434e <z_unpend_first_thread>
	mutex->owner = new_owner;
 800c4f8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800c4fa:	b160      	cbz	r0, 800c516 <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
 800c4fc:	f990 200e 	ldrsb.w	r2, [r0, #14]
 800c500:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800c502:	2200      	movs	r2, #0
 800c504:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
 800c508:	f007 fec5 	bl	8014296 <z_ready_thread>
		z_reschedule(&lock, key);
 800c50c:	4809      	ldr	r0, [pc, #36]	; (800c534 <z_impl_k_mutex_unlock+0x84>)
 800c50e:	4629      	mov	r1, r5
 800c510:	f000 fa72 	bl	800c9f8 <z_reschedule>
 800c514:	e7dd      	b.n	800c4d2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800c516:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800c518:	f385 8811 	msr	BASEPRI, r5
 800c51c:	f3bf 8f6f 	isb	sy
 800c520:	e7d7      	b.n	800c4d2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800c522:	f06f 0015 	mvn.w	r0, #21
 800c526:	e7d7      	b.n	800c4d8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 800c528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c52c:	e7d4      	b.n	800c4d8 <z_impl_k_mutex_unlock+0x28>
 800c52e:	bf00      	nop
 800c530:	20002524 	.word	0x20002524
 800c534:	200026ae 	.word	0x200026ae

0800c538 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 800c538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c53a:	4611      	mov	r1, r2
	__asm__ volatile(
 800c53c:	f04f 0210 	mov.w	r2, #16
 800c540:	f3ef 8511 	mrs	r5, BASEPRI
 800c544:	f382 8812 	msr	BASEPRI_MAX, r2
 800c548:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800c54c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 800c54e:	b19c      	cbz	r4, 800c578 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800c550:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 800c552:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800c554:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 800c558:	4294      	cmp	r4, r2
	list->head = node;
 800c55a:	6003      	str	r3, [r0, #0]
	list->tail = node;
 800c55c:	bf08      	it	eq
 800c55e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 800c560:	2101      	movs	r1, #1
 800c562:	4620      	mov	r0, r4
 800c564:	f007 fd1e 	bl	8013fa4 <z_queue_node_peek>
 800c568:	4604      	mov	r4, r0
	__asm__ volatile(
 800c56a:	f385 8811 	msr	BASEPRI, r5
 800c56e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 800c572:	4620      	mov	r0, r4
 800c574:	b003      	add	sp, #12
 800c576:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800c578:	ea51 0203 	orrs.w	r2, r1, r3
 800c57c:	d0f5      	beq.n	800c56a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 800c57e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 800c582:	e9cd 1300 	strd	r1, r3, [sp]
 800c586:	4610      	mov	r0, r2
 800c588:	4629      	mov	r1, r5
 800c58a:	f000 fb87 	bl	800cc9c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 800c58e:	2800      	cmp	r0, #0
 800c590:	d1ef      	bne.n	800c572 <z_impl_k_queue_get+0x3a>
 800c592:	4b02      	ldr	r3, [pc, #8]	; (800c59c <z_impl_k_queue_get+0x64>)
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	695c      	ldr	r4, [r3, #20]
 800c598:	e7eb      	b.n	800c572 <z_impl_k_queue_get+0x3a>
 800c59a:	bf00      	nop
 800c59c:	20002524 	.word	0x20002524

0800c5a0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4604      	mov	r4, r0
	__asm__ volatile(
 800c5a4:	f04f 0310 	mov.w	r3, #16
 800c5a8:	f3ef 8511 	mrs	r5, BASEPRI
 800c5ac:	f383 8812 	msr	BASEPRI_MAX, r3
 800c5b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800c5b4:	f007 fecb 	bl	801434e <z_unpend_first_thread>

	if (thread != NULL) {
 800c5b8:	b150      	cbz	r0, 800c5d0 <z_impl_k_sem_give+0x30>
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800c5c0:	f007 fe69 	bl	8014296 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	4808      	ldr	r0, [pc, #32]	; (800c5e8 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800c5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 800c5cc:	f000 ba14 	b.w	800c9f8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800c5d0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	bf18      	it	ne
 800c5d8:	3301      	addne	r3, #1
 800c5da:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800c5dc:	2102      	movs	r1, #2
 800c5de:	f104 0010 	add.w	r0, r4, #16
 800c5e2:	f008 f8ad 	bl	8014740 <z_handle_obj_poll_events>
}
 800c5e6:	e7ed      	b.n	800c5c4 <z_impl_k_sem_give+0x24>
 800c5e8:	200026ae 	.word	0x200026ae

0800c5ec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800c5ec:	b513      	push	{r0, r1, r4, lr}
 800c5ee:	f04f 0410 	mov.w	r4, #16
 800c5f2:	f3ef 8111 	mrs	r1, BASEPRI
 800c5f6:	f384 8812 	msr	BASEPRI_MAX, r4
 800c5fa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800c5fe:	6884      	ldr	r4, [r0, #8]
 800c600:	b144      	cbz	r4, 800c614 <z_impl_k_sem_take+0x28>
		sem->count--;
 800c602:	3c01      	subs	r4, #1
 800c604:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800c606:	f381 8811 	msr	BASEPRI, r1
 800c60a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800c60e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800c610:	b002      	add	sp, #8
 800c612:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800c614:	ea52 0403 	orrs.w	r4, r2, r3
 800c618:	d106      	bne.n	800c628 <z_impl_k_sem_take+0x3c>
 800c61a:	f381 8811 	msr	BASEPRI, r1
 800c61e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800c622:	f06f 000f 	mvn.w	r0, #15
 800c626:	e7f3      	b.n	800c610 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800c628:	e9cd 2300 	strd	r2, r3, [sp]
 800c62c:	4602      	mov	r2, r0
 800c62e:	4802      	ldr	r0, [pc, #8]	; (800c638 <z_impl_k_sem_take+0x4c>)
 800c630:	f000 fb34 	bl	800cc9c <z_pend_curr>
	return ret;
 800c634:	e7ec      	b.n	800c610 <z_impl_k_sem_take+0x24>
 800c636:	bf00      	nop
 800c638:	200026ae 	.word	0x200026ae

0800c63c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	4604      	mov	r4, r0
	__asm__ volatile(
 800c640:	f04f 0310 	mov.w	r3, #16
 800c644:	f3ef 8511 	mrs	r5, BASEPRI
 800c648:	f383 8812 	msr	BASEPRI_MAX, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
 800c654:	4620      	mov	r0, r4
 800c656:	f007 fe7a 	bl	801434e <z_unpend_first_thread>
		if (thread == NULL) {
 800c65a:	b120      	cbz	r0, 800c666 <z_impl_k_sem_reset+0x2a>
 800c65c:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 800c660:	f007 fe19 	bl	8014296 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 800c664:	e7f6      	b.n	800c654 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
 800c666:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800c668:	2102      	movs	r1, #2
 800c66a:	f104 0010 	add.w	r0, r4, #16
 800c66e:	f008 f867 	bl	8014740 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 800c672:	4629      	mov	r1, r5
 800c674:	4802      	ldr	r0, [pc, #8]	; (800c680 <z_impl_k_sem_reset+0x44>)
}
 800c676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 800c67a:	f000 b9bd 	b.w	800c9f8 <z_reschedule>
 800c67e:	bf00      	nop
 800c680:	200026ae 	.word	0x200026ae

0800c684 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 800c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
 800c688:	4e47      	ldr	r6, [pc, #284]	; (800c7a8 <work_queue_main+0x124>)
 800c68a:	b085      	sub	sp, #20
 800c68c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 800c68e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c692:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c696:	f04f 0310 	mov.w	r3, #16
 800c69a:	f3ef 8711 	mrs	r7, BASEPRI
 800c69e:	f383 8812 	msr	BASEPRI_MAX, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
 800c6aa:	b98d      	cbnz	r5, 800c6d0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 800c6ac:	2102      	movs	r1, #2
 800c6ae:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c6b2:	f007 fcdd 	bl	8014070 <flag_test_and_clear>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d135      	bne.n	800c726 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e9cd 8900 	strd	r8, r9, [sp]
 800c6c0:	9302      	str	r3, [sp, #8]
 800c6c2:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
 800c6c6:	4639      	mov	r1, r7
 800c6c8:	4838      	ldr	r0, [pc, #224]	; (800c7ac <work_queue_main+0x128>)
 800c6ca:	f000 fca9 	bl	800d020 <z_sched_wait>
			continue;
 800c6ce:	e7e2      	b.n	800c696 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800c6d0:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
 800c6d4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 800c6d6:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800c6da:	4295      	cmp	r5, r2
 800c6dc:	d101      	bne.n	800c6e2 <work_queue_main+0x5e>
	list->tail = node;
 800c6de:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
 800c6e2:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800c6e6:	f043 0302 	orr.w	r3, r3, #2
 800c6ea:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
 800c6ee:	68eb      	ldr	r3, [r5, #12]
 800c6f0:	f023 0304 	bic.w	r3, r3, #4
 800c6f4:	f043 0301 	orr.w	r3, r3, #1
 800c6f8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 800c6fa:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 800c6fc:	f387 8811 	msr	BASEPRI, r7
 800c700:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 800c704:	4628      	mov	r0, r5
 800c706:	4798      	blx	r3
	__asm__ volatile(
 800c708:	f04f 0310 	mov.w	r3, #16
 800c70c:	f3ef 8b11 	mrs	fp, BASEPRI
 800c710:	f383 8812 	msr	BASEPRI_MAX, r3
 800c714:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800c718:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800c71a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 800c71c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800c720:	d40b      	bmi.n	800c73a <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 800c722:	60ea      	str	r2, [r5, #12]
 800c724:	e00e      	b.n	800c744 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800c726:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800c72a:	2200      	movs	r2, #0
 800c72c:	2101      	movs	r1, #1
 800c72e:	4628      	mov	r0, r5
 800c730:	f007 fe35 	bl	801439e <z_sched_wake>
 800c734:	2800      	cmp	r0, #0
 800c736:	d1f8      	bne.n	800c72a <work_queue_main+0xa6>
 800c738:	e7bf      	b.n	800c6ba <work_queue_main+0x36>
	return list->head;
 800c73a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 800c73c:	f023 0303 	bic.w	r3, r3, #3
 800c740:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800c742:	b970      	cbnz	r0, 800c762 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 800c744:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800c748:	f023 0302 	bic.w	r3, r3, #2
 800c74c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
 800c750:	f38b 8811 	msr	BASEPRI, fp
 800c754:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 800c758:	05d8      	lsls	r0, r3, #23
 800c75a:	d49c      	bmi.n	800c696 <work_queue_main+0x12>
	z_impl_k_yield();
 800c75c:	f000 fb54 	bl	800ce08 <z_impl_k_yield>
}
 800c760:	e799      	b.n	800c696 <work_queue_main+0x12>
	return node->next;
 800c762:	2700      	movs	r7, #0
 800c764:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
 800c768:	463b      	mov	r3, r7
		if (wc->work == work) {
 800c76a:	6842      	ldr	r2, [r0, #4]
 800c76c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800c76e:	4601      	mov	r1, r0
		if (wc->work == work) {
 800c770:	d10c      	bne.n	800c78c <work_queue_main+0x108>
	return node->next;
 800c772:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 800c774:	b997      	cbnz	r7, 800c79c <work_queue_main+0x118>
 800c776:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 800c778:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 800c77a:	4282      	cmp	r2, r0
 800c77c:	d100      	bne.n	800c780 <work_queue_main+0xfc>
	list->tail = node;
 800c77e:	6071      	str	r1, [r6, #4]
	parent->next = child;
 800c780:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 800c784:	f7ff ff0c 	bl	800c5a0 <z_impl_k_sem_give>
}
 800c788:	4639      	mov	r1, r7
 800c78a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800c78c:	f1ba 0f00 	cmp.w	sl, #0
 800c790:	d0d8      	beq.n	800c744 <work_queue_main+0xc0>
	return node->next;
 800c792:	4650      	mov	r0, sl
 800c794:	460f      	mov	r7, r1
 800c796:	f8da a000 	ldr.w	sl, [sl]
 800c79a:	e7e6      	b.n	800c76a <work_queue_main+0xe6>
	return list->tail;
 800c79c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
 800c79e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 800c7a0:	4290      	cmp	r0, r2
	list->tail = node;
 800c7a2:	bf08      	it	eq
 800c7a4:	6077      	streq	r7, [r6, #4]
}
 800c7a6:	e7eb      	b.n	800c780 <work_queue_main+0xfc>
 800c7a8:	2000254c 	.word	0x2000254c
 800c7ac:	200026ae 	.word	0x200026ae

0800c7b0 <submit_to_queue_locked>:
{
 800c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 800c7b2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800c7b4:	079a      	lsls	r2, r3, #30
{
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800c7ba:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800c7be:	d41f      	bmi.n	800c800 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800c7c0:	075f      	lsls	r7, r3, #29
 800c7c2:	d41f      	bmi.n	800c804 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
 800c7c4:	680a      	ldr	r2, [r1, #0]
 800c7c6:	b90a      	cbnz	r2, 800c7cc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 800c7c8:	6882      	ldr	r2, [r0, #8]
 800c7ca:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800c7cc:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 800c7ce:	bf44      	itt	mi
 800c7d0:	68a3      	ldrmi	r3, [r4, #8]
 800c7d2:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 800c7d4:	6837      	ldr	r7, [r6, #0]
			ret = 2;
 800c7d6:	bf4c      	ite	mi
 800c7d8:	2502      	movmi	r5, #2
		ret = 1;
 800c7da:	2501      	movpl	r5, #1
	if (queue == NULL) {
 800c7dc:	b37f      	cbz	r7, 800c83e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800c7de:	4b1b      	ldr	r3, [pc, #108]	; (800c84c <submit_to_queue_locked+0x9c>)
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	42bb      	cmp	r3, r7
 800c7e4:	d111      	bne.n	800c80a <submit_to_queue_locked+0x5a>
 800c7e6:	f007 fb42 	bl	8013e6e <k_is_in_isr>
 800c7ea:	f080 0001 	eor.w	r0, r0, #1
 800c7ee:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 800c7f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800c7f4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800c7f6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800c7fa:	d523      	bpl.n	800c844 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
 800c7fc:	b13a      	cbz	r2, 800c80e <submit_to_queue_locked+0x5e>
 800c7fe:	b940      	cbnz	r0, 800c812 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 800c800:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 800c804:	2300      	movs	r3, #0
 800c806:	6033      	str	r3, [r6, #0]
	return ret;
 800c808:	e013      	b.n	800c832 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800c80a:	2000      	movs	r0, #0
 800c80c:	e7f0      	b.n	800c7f0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
 800c80e:	071b      	lsls	r3, r3, #28
 800c810:	d4f6      	bmi.n	800c800 <submit_to_queue_locked+0x50>
	parent->next = child;
 800c812:	2300      	movs	r3, #0
 800c814:	6023      	str	r3, [r4, #0]
	return list->tail;
 800c816:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
 800c81a:	b963      	cbnz	r3, 800c836 <submit_to_queue_locked+0x86>
	list->head = node;
 800c81c:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
 800c820:	4638      	mov	r0, r7
 800c822:	f007 fc3e 	bl	80140a2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 800c826:	68e3      	ldr	r3, [r4, #12]
 800c828:	f043 0304 	orr.w	r3, r3, #4
 800c82c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 800c82e:	6833      	ldr	r3, [r6, #0]
 800c830:	60a3      	str	r3, [r4, #8]
}
 800c832:	4628      	mov	r0, r5
 800c834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 800c836:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c838:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
 800c83c:	e7f0      	b.n	800c820 <submit_to_queue_locked+0x70>
		return -EINVAL;
 800c83e:	f06f 0515 	mvn.w	r5, #21
 800c842:	e7df      	b.n	800c804 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
 800c844:	f06f 0512 	mvn.w	r5, #18
 800c848:	e7dc      	b.n	800c804 <submit_to_queue_locked+0x54>
 800c84a:	bf00      	nop
 800c84c:	20002524 	.word	0x20002524

0800c850 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 800c850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c852:	b089      	sub	sp, #36	; 0x24
 800c854:	4604      	mov	r4, r0
	list->head = NULL;
 800c856:	2000      	movs	r0, #0
	list->tail = NULL;
 800c858:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
 800c85c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c85e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
 800c862:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
 800c866:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 800c86a:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 800c86e:	b31d      	cbz	r5, 800c8b8 <k_work_queue_start+0x68>
 800c870:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 800c872:	2800      	cmp	r0, #0
 800c874:	f240 1001 	movw	r0, #257	; 0x101
 800c878:	bf08      	it	eq
 800c87a:	2001      	moveq	r0, #1
	*flagp = flags;
 800c87c:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800c880:	2000      	movs	r0, #0
 800c882:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c886:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c88a:	e9cd 3003 	strd	r3, r0, [sp, #12]
 800c88e:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800c892:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c896:	4b09      	ldr	r3, [pc, #36]	; (800c8bc <k_work_queue_start+0x6c>)
 800c898:	9400      	str	r4, [sp, #0]
 800c89a:	4620      	mov	r0, r4
 800c89c:	f7ff fd18 	bl	800c2d0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 800c8a0:	b125      	cbz	r5, 800c8ac <k_work_queue_start+0x5c>
 800c8a2:	6829      	ldr	r1, [r5, #0]
 800c8a4:	b111      	cbz	r1, 800c8ac <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f7ff fc62 	bl	800c170 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800c8ac:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 800c8ae:	b009      	add	sp, #36	; 0x24
 800c8b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c8b4:	f007 bae3 	b.w	8013e7e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800c8b8:	2001      	movs	r0, #1
 800c8ba:	e7df      	b.n	800c87c <k_work_queue_start+0x2c>
 800c8bc:	0800c685 	.word	0x0800c685

0800c8c0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
 800c8c0:	b513      	push	{r0, r1, r4, lr}
 800c8c2:	9001      	str	r0, [sp, #4]
 800c8c4:	4608      	mov	r0, r1
	__asm__ volatile(
 800c8c6:	f04f 0110 	mov.w	r1, #16
 800c8ca:	f3ef 8411 	mrs	r4, BASEPRI
 800c8ce:	f381 8812 	msr	BASEPRI_MAX, r1
 800c8d2:	f3bf 8f6f 	isb	sy
	return *flagp;
 800c8d6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
 800c8d8:	f011 0f0e 	tst.w	r1, #14
 800c8dc:	d116      	bne.n	800c90c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800c8de:	ea53 0c02 	orrs.w	ip, r3, r2
 800c8e2:	d108      	bne.n	800c8f6 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
 800c8e4:	a901      	add	r1, sp, #4
 800c8e6:	f7ff ff63 	bl	800c7b0 <submit_to_queue_locked>
	__asm__ volatile(
 800c8ea:	f384 8811 	msr	BASEPRI, r4
 800c8ee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 800c8f2:	b002      	add	sp, #8
 800c8f4:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
 800c8f6:	f041 0108 	orr.w	r1, r1, #8
 800c8fa:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
 800c8fc:	9901      	ldr	r1, [sp, #4]
 800c8fe:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800c900:	3010      	adds	r0, #16
 800c902:	4903      	ldr	r1, [pc, #12]	; (800c910 <k_work_schedule_for_queue+0x50>)
 800c904:	f000 fc6e 	bl	800d1e4 <z_add_timeout>
	return ret;
 800c908:	2001      	movs	r0, #1
 800c90a:	e7ee      	b.n	800c8ea <k_work_schedule_for_queue+0x2a>
	int ret = 0;
 800c90c:	2000      	movs	r0, #0
 800c90e:	e7ec      	b.n	800c8ea <k_work_schedule_for_queue+0x2a>
 800c910:	08014113 	.word	0x08014113

0800c914 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
 800c914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c916:	460c      	mov	r4, r1
 800c918:	9001      	str	r0, [sp, #4]
 800c91a:	4616      	mov	r6, r2
 800c91c:	461d      	mov	r5, r3
	__asm__ volatile(
 800c91e:	f04f 0310 	mov.w	r3, #16
 800c922:	f3ef 8711 	mrs	r7, BASEPRI
 800c926:	f383 8812 	msr	BASEPRI_MAX, r3
 800c92a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
 800c92e:	4608      	mov	r0, r1
 800c930:	f007 fba9 	bl	8014086 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800c934:	ea55 0306 	orrs.w	r3, r5, r6
 800c938:	d109      	bne.n	800c94e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
 800c93a:	a901      	add	r1, sp, #4
 800c93c:	4620      	mov	r0, r4
 800c93e:	f7ff ff37 	bl	800c7b0 <submit_to_queue_locked>
	__asm__ volatile(
 800c942:	f387 8811 	msr	BASEPRI, r7
 800c946:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 800c94a:	b003      	add	sp, #12
 800c94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
 800c94e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800c950:	4906      	ldr	r1, [pc, #24]	; (800c96c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
 800c952:	f043 0308 	orr.w	r3, r3, #8
 800c956:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
 800c958:	9b01      	ldr	r3, [sp, #4]
 800c95a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800c95c:	f104 0010 	add.w	r0, r4, #16
 800c960:	4632      	mov	r2, r6
 800c962:	462b      	mov	r3, r5
 800c964:	f000 fc3e 	bl	800d1e4 <z_add_timeout>
	return ret;
 800c968:	2001      	movs	r0, #1
 800c96a:	e7ea      	b.n	800c942 <k_work_reschedule_for_queue+0x2e>
 800c96c:	08014113 	.word	0x08014113

0800c970 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800c970:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 800c972:	4801      	ldr	r0, [pc, #4]	; (800c978 <k_work_reschedule+0x8>)
 800c974:	f7ff bfce 	b.w	800c914 <k_work_reschedule_for_queue>
 800c978:	200019e0 	.word	0x200019e0

0800c97c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 800c97c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 800c97e:	4c08      	ldr	r4, [pc, #32]	; (800c9a0 <z_reset_time_slice+0x24>)
 800c980:	6823      	ldr	r3, [r4, #0]
 800c982:	b15b      	cbz	r3, 800c99c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800c984:	f7fe fcd2 	bl	800b32c <sys_clock_elapsed>
 800c988:	4603      	mov	r3, r0
 800c98a:	6820      	ldr	r0, [r4, #0]
 800c98c:	4a05      	ldr	r2, [pc, #20]	; (800c9a4 <z_reset_time_slice+0x28>)
 800c98e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 800c990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800c994:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800c996:	2100      	movs	r1, #0
 800c998:	f007 bd49 	b.w	801442e <z_set_timeout_expiry>
}
 800c99c:	bd10      	pop	{r4, pc}
 800c99e:	bf00      	nop
 800c9a0:	2000255c 	.word	0x2000255c
 800c9a4:	20002524 	.word	0x20002524

0800c9a8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 800c9a8:	b510      	push	{r4, lr}
	__asm__ volatile(
 800c9aa:	f04f 0310 	mov.w	r3, #16
 800c9ae:	f3ef 8411 	mrs	r4, BASEPRI
 800c9b2:	f383 8812 	msr	BASEPRI_MAX, r3
 800c9b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 800c9ba:	4b0c      	ldr	r3, [pc, #48]	; (800c9ec <k_sched_time_slice_set+0x44>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800c9c0:	4290      	cmp	r0, r2
			return ((uint32_t)t) * (to_hz / from_hz);
 800c9c2:	f04f 030a 	mov.w	r3, #10
 800c9c6:	4a0a      	ldr	r2, [pc, #40]	; (800c9f0 <k_sched_time_slice_set+0x48>)
 800c9c8:	fb00 f303 	mul.w	r3, r0, r3
 800c9cc:	dc09      	bgt.n	800c9e2 <k_sched_time_slice_set+0x3a>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
 800c9ce:	6013      	str	r3, [r2, #0]
		}
		slice_max_prio = prio;
 800c9d0:	4b08      	ldr	r3, [pc, #32]	; (800c9f4 <k_sched_time_slice_set+0x4c>)
 800c9d2:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 800c9d4:	f7ff ffd2 	bl	800c97c <z_reset_time_slice>
	__asm__ volatile(
 800c9d8:	f384 8811 	msr	BASEPRI, r4
 800c9dc:	f3bf 8f6f 	isb	sy
	}
}
 800c9e0:	bd10      	pop	{r4, pc}
			slice_time = MAX(2, slice_time);
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	bfb8      	it	lt
 800c9e6:	2302      	movlt	r3, #2
 800c9e8:	e7f1      	b.n	800c9ce <k_sched_time_slice_set+0x26>
 800c9ea:	bf00      	nop
 800c9ec:	20002524 	.word	0x20002524
 800c9f0:	2000255c 	.word	0x2000255c
 800c9f4:	20002558 	.word	0x20002558

0800c9f8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800c9f8:	b949      	cbnz	r1, 800ca0e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9fa:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 800c9fe:	b930      	cbnz	r0, 800ca0e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 800ca00:	4b05      	ldr	r3, [pc, #20]	; (800ca18 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 800ca02:	699a      	ldr	r2, [r3, #24]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d001      	beq.n	800ca0e <z_reschedule+0x16>
	ret = arch_swap(key);
 800ca0a:	f7f6 bf27 	b.w	800385c <arch_swap>
 800ca0e:	f381 8811 	msr	BASEPRI, r1
 800ca12:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 800ca16:	4770      	bx	lr
 800ca18:	20002524 	.word	0x20002524

0800ca1c <k_sched_lock>:
	__asm__ volatile(
 800ca1c:	f04f 0310 	mov.w	r3, #16
 800ca20:	f3ef 8111 	mrs	r1, BASEPRI
 800ca24:	f383 8812 	msr	BASEPRI_MAX, r3
 800ca28:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 800ca2c:	4b04      	ldr	r3, [pc, #16]	; (800ca40 <k_sched_lock+0x24>)
 800ca2e:	689a      	ldr	r2, [r3, #8]
 800ca30:	7bd3      	ldrb	r3, [r2, #15]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800ca36:	f381 8811 	msr	BASEPRI, r1
 800ca3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800ca3e:	4770      	bx	lr
 800ca40:	20002524 	.word	0x20002524

0800ca44 <update_cache>:
{
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 800ca48:	480c      	ldr	r0, [pc, #48]	; (800ca7c <update_cache+0x38>)
 800ca4a:	4d0d      	ldr	r5, [pc, #52]	; (800ca80 <update_cache+0x3c>)
 800ca4c:	f007 fc1d 	bl	801428a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800ca50:	4604      	mov	r4, r0
 800ca52:	b900      	cbnz	r0, 800ca56 <update_cache+0x12>
 800ca54:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 800ca56:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 800ca58:	b94a      	cbnz	r2, 800ca6e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 800ca5a:	7b5a      	ldrb	r2, [r3, #13]
 800ca5c:	06d2      	lsls	r2, r2, #27
 800ca5e:	d106      	bne.n	800ca6e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800ca60:	69a2      	ldr	r2, [r4, #24]
 800ca62:	b922      	cbnz	r2, 800ca6e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 800ca64:	89da      	ldrh	r2, [r3, #14]
 800ca66:	2a7f      	cmp	r2, #127	; 0x7f
 800ca68:	d901      	bls.n	800ca6e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 800ca6a:	61ab      	str	r3, [r5, #24]
}
 800ca6c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 800ca6e:	429c      	cmp	r4, r3
 800ca70:	d001      	beq.n	800ca76 <update_cache+0x32>
			z_reset_time_slice();
 800ca72:	f7ff ff83 	bl	800c97c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800ca76:	61ac      	str	r4, [r5, #24]
}
 800ca78:	e7f8      	b.n	800ca6c <update_cache+0x28>
 800ca7a:	bf00      	nop
 800ca7c:	20002540 	.word	0x20002540
 800ca80:	20002524 	.word	0x20002524

0800ca84 <move_thread_to_end_of_prio_q>:
{
 800ca84:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800ca86:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800ca8a:	7b43      	ldrb	r3, [r0, #13]
 800ca8c:	2a00      	cmp	r2, #0
{
 800ca8e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800ca90:	da04      	bge.n	800ca9c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800ca92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca96:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 800ca98:	f007 fbb2 	bl	8014200 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800ca9c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 800ca9e:	4a15      	ldr	r2, [pc, #84]	; (800caf4 <move_thread_to_end_of_prio_q+0x70>)
 800caa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800caa4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800caa6:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800caaa:	f102 051c 	add.w	r5, r2, #28
 800caae:	42ab      	cmp	r3, r5
 800cab0:	d01b      	beq.n	800caea <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cab2:	b1d3      	cbz	r3, 800caea <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 800cab4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 800cab8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 800cabc:	4286      	cmp	r6, r0
 800cabe:	d00f      	beq.n	800cae0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 800cac0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800cac2:	2800      	cmp	r0, #0
 800cac4:	dd0c      	ble.n	800cae0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800cac6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 800cac8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 800cacc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 800cace:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 800cad0:	6890      	ldr	r0, [r2, #8]
 800cad2:	1a43      	subs	r3, r0, r1
 800cad4:	4258      	negs	r0, r3
}
 800cad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 800cada:	4158      	adcs	r0, r3
 800cadc:	f7ff bfb2 	b.w	800ca44 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800cae0:	42a3      	cmp	r3, r4
 800cae2:	d002      	beq.n	800caea <move_thread_to_end_of_prio_q+0x66>
 800cae4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1e6      	bne.n	800cab8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 800caea:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 800caee:	6021      	str	r1, [r4, #0]
	list->tail = node;
 800caf0:	6211      	str	r1, [r2, #32]
}
 800caf2:	e7ed      	b.n	800cad0 <move_thread_to_end_of_prio_q+0x4c>
 800caf4:	20002524 	.word	0x20002524

0800caf8 <z_time_slice>:
{
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	4601      	mov	r1, r0
	__asm__ volatile(
 800cafc:	f04f 0310 	mov.w	r3, #16
 800cb00:	f3ef 8411 	mrs	r4, BASEPRI
 800cb04:	f383 8812 	msr	BASEPRI_MAX, r3
 800cb08:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800cb0c:	4b15      	ldr	r3, [pc, #84]	; (800cb64 <z_time_slice+0x6c>)
 800cb0e:	4a16      	ldr	r2, [pc, #88]	; (800cb68 <z_time_slice+0x70>)
 800cb10:	6898      	ldr	r0, [r3, #8]
 800cb12:	6815      	ldr	r5, [r2, #0]
 800cb14:	42a8      	cmp	r0, r5
 800cb16:	d106      	bne.n	800cb26 <z_time_slice+0x2e>
			z_reset_time_slice();
 800cb18:	f7ff ff30 	bl	800c97c <z_reset_time_slice>
	__asm__ volatile(
 800cb1c:	f384 8811 	msr	BASEPRI, r4
 800cb20:	f3bf 8f6f 	isb	sy
}
 800cb24:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 800cb26:	2500      	movs	r5, #0
 800cb28:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800cb2a:	4a10      	ldr	r2, [pc, #64]	; (800cb6c <z_time_slice+0x74>)
 800cb2c:	6812      	ldr	r2, [r2, #0]
 800cb2e:	b1ba      	cbz	r2, 800cb60 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 800cb30:	89c2      	ldrh	r2, [r0, #14]
 800cb32:	2a7f      	cmp	r2, #127	; 0x7f
 800cb34:	d814      	bhi.n	800cb60 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
 800cb36:	7b42      	ldrb	r2, [r0, #13]
 800cb38:	06d2      	lsls	r2, r2, #27
 800cb3a:	d111      	bne.n	800cb60 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800cb3c:	4a0c      	ldr	r2, [pc, #48]	; (800cb70 <z_time_slice+0x78>)
 800cb3e:	f990 500e 	ldrsb.w	r5, [r0, #14]
 800cb42:	6812      	ldr	r2, [r2, #0]
 800cb44:	4295      	cmp	r5, r2
 800cb46:	db0b      	blt.n	800cb60 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
 800cb48:	4a0a      	ldr	r2, [pc, #40]	; (800cb74 <z_time_slice+0x7c>)
 800cb4a:	4290      	cmp	r0, r2
 800cb4c:	d008      	beq.n	800cb60 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
 800cb4e:	691a      	ldr	r2, [r3, #16]
 800cb50:	428a      	cmp	r2, r1
 800cb52:	dc02      	bgt.n	800cb5a <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
 800cb54:	f7ff ff96 	bl	800ca84 <move_thread_to_end_of_prio_q>
 800cb58:	e7de      	b.n	800cb18 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
 800cb5a:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
 800cb5c:	611a      	str	r2, [r3, #16]
 800cb5e:	e7dd      	b.n	800cb1c <z_time_slice+0x24>
 800cb60:	2200      	movs	r2, #0
 800cb62:	e7fb      	b.n	800cb5c <z_time_slice+0x64>
 800cb64:	20002524 	.word	0x20002524
 800cb68:	20002554 	.word	0x20002554
 800cb6c:	2000255c 	.word	0x2000255c
 800cb70:	20002558 	.word	0x20002558
 800cb74:	20001868 	.word	0x20001868

0800cb78 <ready_thread>:
{
 800cb78:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800cb7a:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800cb7e:	7b43      	ldrb	r3, [r0, #13]
 800cb80:	2a00      	cmp	r2, #0
 800cb82:	db2a      	blt.n	800cbda <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800cb84:	06da      	lsls	r2, r3, #27
 800cb86:	d128      	bne.n	800cbda <ready_thread+0x62>
 800cb88:	6982      	ldr	r2, [r0, #24]
 800cb8a:	bb32      	cbnz	r2, 800cbda <ready_thread+0x62>
	return list->head == list;
 800cb8c:	4a14      	ldr	r2, [pc, #80]	; (800cbe0 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800cb8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb92:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 800cb94:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cb98:	f102 051c 	add.w	r5, r2, #28
 800cb9c:	42ab      	cmp	r3, r5
 800cb9e:	d017      	beq.n	800cbd0 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cba0:	b1b3      	cbz	r3, 800cbd0 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 800cba2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800cba6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 800cbaa:	428e      	cmp	r6, r1
 800cbac:	d00b      	beq.n	800cbc6 <ready_thread+0x4e>
		return b2 - b1;
 800cbae:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800cbb0:	2900      	cmp	r1, #0
 800cbb2:	dd08      	ble.n	800cbc6 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 800cbb4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800cbb6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800cbba:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800cbbc:	6058      	str	r0, [r3, #4]
}
 800cbbe:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f7ff bf3f 	b.w	800ca44 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800cbc6:	42a3      	cmp	r3, r4
 800cbc8:	d002      	beq.n	800cbd0 <ready_thread+0x58>
 800cbca:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1ea      	bne.n	800cba6 <ready_thread+0x2e>
	node->prev = tail;
 800cbd0:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 800cbd4:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800cbd6:	6210      	str	r0, [r2, #32]
}
 800cbd8:	e7f1      	b.n	800cbbe <ready_thread+0x46>
}
 800cbda:	bc70      	pop	{r4, r5, r6}
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	20002524 	.word	0x20002524

0800cbe4 <z_sched_start>:
{
 800cbe4:	b510      	push	{r4, lr}
	__asm__ volatile(
 800cbe6:	f04f 0210 	mov.w	r2, #16
 800cbea:	f3ef 8411 	mrs	r4, BASEPRI
 800cbee:	f382 8812 	msr	BASEPRI_MAX, r2
 800cbf2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800cbf6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 800cbf8:	0751      	lsls	r1, r2, #29
 800cbfa:	d404      	bmi.n	800cc06 <z_sched_start+0x22>
	__asm__ volatile(
 800cbfc:	f384 8811 	msr	BASEPRI, r4
 800cc00:	f3bf 8f6f 	isb	sy
}
 800cc04:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800cc06:	f022 0204 	bic.w	r2, r2, #4
 800cc0a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800cc0c:	f7ff ffb4 	bl	800cb78 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800cc10:	4621      	mov	r1, r4
 800cc12:	4802      	ldr	r0, [pc, #8]	; (800cc1c <z_sched_start+0x38>)
}
 800cc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 800cc18:	f7ff beee 	b.w	800c9f8 <z_reschedule>
 800cc1c:	200026ae 	.word	0x200026ae

0800cc20 <unready_thread>:
{
 800cc20:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800cc22:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800cc26:	7b43      	ldrb	r3, [r0, #13]
 800cc28:	2a00      	cmp	r2, #0
{
 800cc2a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800cc2c:	da04      	bge.n	800cc38 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800cc2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc32:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800cc34:	f007 fae4 	bl	8014200 <sys_dlist_remove>
	update_cache(thread == _current);
 800cc38:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <unready_thread+0x2c>)
 800cc3a:	6898      	ldr	r0, [r3, #8]
 800cc3c:	1a43      	subs	r3, r0, r1
 800cc3e:	4258      	negs	r0, r3
 800cc40:	4158      	adcs	r0, r3
}
 800cc42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800cc46:	f7ff befd 	b.w	800ca44 <update_cache>
 800cc4a:	bf00      	nop
 800cc4c:	20002524 	.word	0x20002524

0800cc50 <pend>:
{
 800cc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc54:	4606      	mov	r6, r0
 800cc56:	4615      	mov	r5, r2
 800cc58:	461c      	mov	r4, r3
	__asm__ volatile(
 800cc5a:	f04f 0310 	mov.w	r3, #16
 800cc5e:	f3ef 8711 	mrs	r7, BASEPRI
 800cc62:	f383 8812 	msr	BASEPRI_MAX, r3
 800cc66:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 800cc6a:	f007 fb46 	bl	80142fa <add_to_waitq_locked>
	__asm__ volatile(
 800cc6e:	f387 8811 	msr	BASEPRI, r7
 800cc72:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800cc76:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800cc7a:	bf08      	it	eq
 800cc7c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800cc80:	d008      	beq.n	800cc94 <pend+0x44>
 800cc82:	462a      	mov	r2, r5
 800cc84:	4623      	mov	r3, r4
 800cc86:	f106 0018 	add.w	r0, r6, #24
 800cc8a:	4903      	ldr	r1, [pc, #12]	; (800cc98 <pend+0x48>)
}
 800cc8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc90:	f000 baa8 	b.w	800d1e4 <z_add_timeout>
 800cc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc98:	080142b7 	.word	0x080142b7

0800cc9c <z_pend_curr>:
{
 800cc9c:	b510      	push	{r4, lr}
	pending_current = _current;
 800cc9e:	4b07      	ldr	r3, [pc, #28]	; (800ccbc <z_pend_curr+0x20>)
 800cca0:	6898      	ldr	r0, [r3, #8]
 800cca2:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <z_pend_curr+0x24>)
{
 800cca4:	460c      	mov	r4, r1
	pending_current = _current;
 800cca6:	6018      	str	r0, [r3, #0]
{
 800cca8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 800ccaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccae:	f7ff ffcf 	bl	800cc50 <pend>
 800ccb2:	4620      	mov	r0, r4
}
 800ccb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccb8:	f7f6 bdd0 	b.w	800385c <arch_swap>
 800ccbc:	20002524 	.word	0x20002524
 800ccc0:	20002554 	.word	0x20002554

0800ccc4 <z_set_prio>:
{
 800ccc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc6:	4604      	mov	r4, r0
	__asm__ volatile(
 800ccc8:	f04f 0310 	mov.w	r3, #16
 800cccc:	f3ef 8611 	mrs	r6, BASEPRI
 800ccd0:	f383 8812 	msr	BASEPRI_MAX, r3
 800ccd4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 800ccd8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800ccda:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 800ccdc:	b249      	sxtb	r1, r1
 800ccde:	d133      	bne.n	800cd48 <z_set_prio+0x84>
		if (need_sched) {
 800cce0:	6982      	ldr	r2, [r0, #24]
 800cce2:	bb8a      	cbnz	r2, 800cd48 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800cce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800ccea:	f007 fa89 	bl	8014200 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800ccee:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 800ccf0:	4a17      	ldr	r2, [pc, #92]	; (800cd50 <z_set_prio+0x8c>)
				thread->base.prio = prio;
 800ccf2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 800ccf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccf8:	7343      	strb	r3, [r0, #13]
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cd00:	4283      	cmp	r3, r0
 800cd02:	d01b      	beq.n	800cd3c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cd04:	b1d3      	cbz	r3, 800cd3c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 800cd06:	6a17      	ldr	r7, [r2, #32]
	int32_t b2 = thread_2->base.prio;
 800cd08:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 800cd0c:	42a9      	cmp	r1, r5
 800cd0e:	d010      	beq.n	800cd32 <z_set_prio+0x6e>
		return b2 - b1;
 800cd10:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 800cd12:	2d00      	cmp	r5, #0
 800cd14:	dd0d      	ble.n	800cd32 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 800cd16:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800cd18:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800cd1c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800cd1e:	605c      	str	r4, [r3, #4]
			update_cache(1);
 800cd20:	2001      	movs	r0, #1
 800cd22:	f7ff fe8f 	bl	800ca44 <update_cache>
 800cd26:	2001      	movs	r0, #1
	__asm__ volatile(
 800cd28:	f386 8811 	msr	BASEPRI, r6
 800cd2c:	f3bf 8f6f 	isb	sy
}
 800cd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 800cd32:	42bb      	cmp	r3, r7
 800cd34:	d002      	beq.n	800cd3c <z_set_prio+0x78>
 800cd36:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1e5      	bne.n	800cd08 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 800cd3c:	6a13      	ldr	r3, [r2, #32]
	node->prev = tail;
 800cd3e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 800cd42:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800cd44:	6214      	str	r4, [r2, #32]
}
 800cd46:	e7eb      	b.n	800cd20 <z_set_prio+0x5c>
			thread->base.prio = prio;
 800cd48:	73a1      	strb	r1, [r4, #14]
 800cd4a:	2000      	movs	r0, #0
 800cd4c:	e7ec      	b.n	800cd28 <z_set_prio+0x64>
 800cd4e:	bf00      	nop
 800cd50:	20002524 	.word	0x20002524

0800cd54 <z_impl_k_thread_suspend>:
{
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800cd58:	3018      	adds	r0, #24
 800cd5a:	f007 fb42 	bl	80143e2 <z_abort_timeout>
	__asm__ volatile(
 800cd5e:	f04f 0310 	mov.w	r3, #16
 800cd62:	f3ef 8611 	mrs	r6, BASEPRI
 800cd66:	f383 8812 	msr	BASEPRI_MAX, r3
 800cd6a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800cd6e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 800cd72:	7b63      	ldrb	r3, [r4, #13]
 800cd74:	2a00      	cmp	r2, #0
 800cd76:	da05      	bge.n	800cd84 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800cd78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd7c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f007 fa3e 	bl	8014200 <sys_dlist_remove>
		update_cache(thread == _current);
 800cd84:	4d0b      	ldr	r5, [pc, #44]	; (800cdb4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800cd86:	7b63      	ldrb	r3, [r4, #13]
 800cd88:	68a8      	ldr	r0, [r5, #8]
 800cd8a:	f043 0310 	orr.w	r3, r3, #16
 800cd8e:	7363      	strb	r3, [r4, #13]
 800cd90:	1b03      	subs	r3, r0, r4
 800cd92:	4258      	negs	r0, r3
 800cd94:	4158      	adcs	r0, r3
 800cd96:	f7ff fe55 	bl	800ca44 <update_cache>
	__asm__ volatile(
 800cd9a:	f386 8811 	msr	BASEPRI, r6
 800cd9e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800cda2:	68ab      	ldr	r3, [r5, #8]
 800cda4:	42a3      	cmp	r3, r4
 800cda6:	d103      	bne.n	800cdb0 <z_impl_k_thread_suspend+0x5c>
}
 800cda8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 800cdac:	f007 ba63 	b.w	8014276 <z_reschedule_unlocked>
}
 800cdb0:	bd70      	pop	{r4, r5, r6, pc}
 800cdb2:	bf00      	nop
 800cdb4:	20002524 	.word	0x20002524

0800cdb8 <k_sched_unlock>:
{
 800cdb8:	b510      	push	{r4, lr}
	__asm__ volatile(
 800cdba:	f04f 0310 	mov.w	r3, #16
 800cdbe:	f3ef 8411 	mrs	r4, BASEPRI
 800cdc2:	f383 8812 	msr	BASEPRI_MAX, r3
 800cdc6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800cdca:	4b08      	ldr	r3, [pc, #32]	; (800cdec <k_sched_unlock+0x34>)
 800cdcc:	689a      	ldr	r2, [r3, #8]
 800cdce:	7bd3      	ldrb	r3, [r2, #15]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f7ff fe35 	bl	800ca44 <update_cache>
	__asm__ volatile(
 800cdda:	f384 8811 	msr	BASEPRI, r4
 800cdde:	f3bf 8f6f 	isb	sy
}
 800cde2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 800cde6:	f007 ba46 	b.w	8014276 <z_reschedule_unlocked>
 800cdea:	bf00      	nop
 800cdec:	20002524 	.word	0x20002524

0800cdf0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800cdf0:	4b04      	ldr	r3, [pc, #16]	; (800ce04 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 800cdf8:	e9c3 2207 	strd	r2, r2, [r3, #28]
 800cdfc:	4608      	mov	r0, r1
 800cdfe:	f7ff bdd3 	b.w	800c9a8 <k_sched_time_slice_set>
 800ce02:	bf00      	nop
 800ce04:	20002524 	.word	0x20002524

0800ce08 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800ce0a:	f04f 0310 	mov.w	r3, #16
 800ce0e:	f3ef 8511 	mrs	r5, BASEPRI
 800ce12:	f383 8812 	msr	BASEPRI_MAX, r3
 800ce16:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 800ce1a:	491a      	ldr	r1, [pc, #104]	; (800ce84 <z_impl_k_yield+0x7c>)
 800ce1c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800ce1e:	7b43      	ldrb	r3, [r0, #13]
 800ce20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce24:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800ce26:	f007 f9eb 	bl	8014200 <sys_dlist_remove>
	}
	queue_thread(_current);
 800ce2a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800ce2c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 800ce2e:	4608      	mov	r0, r1
 800ce30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce34:	735a      	strb	r2, [r3, #13]
 800ce36:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ce3a:	4282      	cmp	r2, r0
 800ce3c:	d01c      	beq.n	800ce78 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ce3e:	b1da      	cbz	r2, 800ce78 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 800ce40:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 800ce42:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 800ce46:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 800ce4a:	42a6      	cmp	r6, r4
 800ce4c:	d00f      	beq.n	800ce6e <z_impl_k_yield+0x66>
		return b2 - b1;
 800ce4e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ce50:	2c00      	cmp	r4, #0
 800ce52:	dd0c      	ble.n	800ce6e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 800ce54:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 800ce56:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 800ce5a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 800ce5c:	6053      	str	r3, [r2, #4]
	update_cache(1);
 800ce5e:	2001      	movs	r0, #1
 800ce60:	f7ff fdf0 	bl	800ca44 <update_cache>
 800ce64:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 800ce66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce6a:	f7f6 bcf7 	b.w	800385c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 800ce6e:	42ba      	cmp	r2, r7
 800ce70:	d002      	beq.n	800ce78 <z_impl_k_yield+0x70>
 800ce72:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ce74:	2a00      	cmp	r2, #0
 800ce76:	d1e6      	bne.n	800ce46 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 800ce78:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 800ce7a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 800ce7e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800ce80:	620b      	str	r3, [r1, #32]
}
 800ce82:	e7ec      	b.n	800ce5e <z_impl_k_yield+0x56>
 800ce84:	20002524 	.word	0x20002524

0800ce88 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 800ce88:	ea50 0301 	orrs.w	r3, r0, r1
{
 800ce8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce90:	4605      	mov	r5, r0
 800ce92:	460e      	mov	r6, r1
	if (ticks == 0) {
 800ce94:	d103      	bne.n	800ce9e <z_tick_sleep+0x16>
	z_impl_k_yield();
 800ce96:	f7ff ffb7 	bl	800ce08 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	e033      	b.n	800cf06 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 800ce9e:	f06f 0401 	mvn.w	r4, #1
 800cea2:	1a24      	subs	r4, r4, r0
 800cea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cea8:	eb63 0301 	sbc.w	r3, r3, r1
 800ceac:	2c01      	cmp	r4, #1
 800ceae:	f173 0300 	sbcs.w	r3, r3, #0
 800ceb2:	da02      	bge.n	800ceba <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800ceb4:	f007 fad5 	bl	8014462 <sys_clock_tick_get_32>
 800ceb8:	1944      	adds	r4, r0, r5
 800ceba:	f04f 0310 	mov.w	r3, #16
 800cebe:	f3ef 8811 	mrs	r8, BASEPRI
 800cec2:	f383 8812 	msr	BASEPRI_MAX, r3
 800cec6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 800ceca:	4f10      	ldr	r7, [pc, #64]	; (800cf0c <z_tick_sleep+0x84>)
 800cecc:	4b10      	ldr	r3, [pc, #64]	; (800cf10 <z_tick_sleep+0x88>)
 800cece:	68b8      	ldr	r0, [r7, #8]
 800ced0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800ced2:	f7ff fea5 	bl	800cc20 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800ced6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800ced8:	490e      	ldr	r1, [pc, #56]	; (800cf14 <z_tick_sleep+0x8c>)
 800ceda:	462a      	mov	r2, r5
 800cedc:	4633      	mov	r3, r6
 800cede:	3018      	adds	r0, #24
 800cee0:	f000 f980 	bl	800d1e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	7b53      	ldrb	r3, [r2, #13]
 800cee8:	f043 0310 	orr.w	r3, r3, #16
 800ceec:	7353      	strb	r3, [r2, #13]
 800ceee:	4640      	mov	r0, r8
 800cef0:	f7f6 fcb4 	bl	800385c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800cef4:	f007 fab5 	bl	8014462 <sys_clock_tick_get_32>
 800cef8:	1a20      	subs	r0, r4, r0
 800cefa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800cefe:	2801      	cmp	r0, #1
 800cf00:	f173 0300 	sbcs.w	r3, r3, #0
 800cf04:	dbc9      	blt.n	800ce9a <z_tick_sleep+0x12>
}
 800cf06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf0a:	bf00      	nop
 800cf0c:	20002524 	.word	0x20002524
 800cf10:	20002554 	.word	0x20002554
 800cf14:	080142b7 	.word	0x080142b7

0800cf18 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800cf18:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800cf1c:	bf08      	it	eq
 800cf1e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 800cf22:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800cf24:	d106      	bne.n	800cf34 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 800cf26:	4b07      	ldr	r3, [pc, #28]	; (800cf44 <z_impl_k_sleep+0x2c>)
 800cf28:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800cf2a:	f7ff ff13 	bl	800cd54 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 800cf2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 800cf32:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 800cf34:	f7ff ffa8 	bl	800ce88 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800cf38:	220a      	movs	r2, #10
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	17c1      	asrs	r1, r0, #31
 800cf3e:	f7f3 f977 	bl	8000230 <__aeabi_uldivmod>
	return ret;
 800cf42:	e7f6      	b.n	800cf32 <z_impl_k_sleep+0x1a>
 800cf44:	20002524 	.word	0x20002524

0800cf48 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800cf48:	4b01      	ldr	r3, [pc, #4]	; (800cf50 <z_impl_z_current_get+0x8>)
 800cf4a:	6898      	ldr	r0, [r3, #8]
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	20002524 	.word	0x20002524

0800cf54 <z_impl_k_is_preempt_thread>:
 800cf54:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 800cf58:	b93b      	cbnz	r3, 800cf6a <z_impl_k_is_preempt_thread+0x16>
 800cf5a:	4b05      	ldr	r3, [pc, #20]	; (800cf70 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800cf5c:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 800cf5e:	89d8      	ldrh	r0, [r3, #14]
 800cf60:	287f      	cmp	r0, #127	; 0x7f
 800cf62:	bf8c      	ite	hi
 800cf64:	2000      	movhi	r0, #0
 800cf66:	2001      	movls	r0, #1
 800cf68:	4770      	bx	lr
 800cf6a:	2000      	movs	r0, #0
}
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	20002524 	.word	0x20002524

0800cf74 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 800cf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf78:	4604      	mov	r4, r0
 800cf7a:	f04f 0310 	mov.w	r3, #16
 800cf7e:	f3ef 8611 	mrs	r6, BASEPRI
 800cf82:	f383 8812 	msr	BASEPRI_MAX, r3
 800cf86:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800cf8a:	7b43      	ldrb	r3, [r0, #13]
 800cf8c:	071a      	lsls	r2, r3, #28
 800cf8e:	d505      	bpl.n	800cf9c <z_thread_abort+0x28>
	__asm__ volatile(
 800cf90:	f386 8811 	msr	BASEPRI, r6
 800cf94:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800cf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800cf9c:	f023 0220 	bic.w	r2, r3, #32
 800cfa0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 800cfa4:	09d2      	lsrs	r2, r2, #7
 800cfa6:	d123      	bne.n	800cff0 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800cfa8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 800cfaa:	68a3      	ldr	r3, [r4, #8]
 800cfac:	b113      	cbz	r3, 800cfb4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f007 f92e 	bl	8014210 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 800cfb4:	f104 0018 	add.w	r0, r4, #24
 800cfb8:	f007 fa13 	bl	80143e2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800cfbc:	f104 0758 	add.w	r7, r4, #88	; 0x58
 800cfc0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 800cfc4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cfc6:	42bd      	cmp	r5, r7
 800cfc8:	d000      	beq.n	800cfcc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800cfca:	b9cd      	cbnz	r5, 800d000 <z_thread_abort+0x8c>
		update_cache(1);
 800cfcc:	2001      	movs	r0, #1
 800cfce:	f7ff fd39 	bl	800ca44 <update_cache>
		z_thread_monitor_exit(thread);
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f7ff f8ae 	bl	800c134 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
 800cfd8:	4b10      	ldr	r3, [pc, #64]	; (800d01c <z_thread_abort+0xa8>)
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	42a3      	cmp	r3, r4
 800cfde:	d1d7      	bne.n	800cf90 <z_thread_abort+0x1c>
 800cfe0:	f3ef 8305 	mrs	r3, IPSR
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1d3      	bne.n	800cf90 <z_thread_abort+0x1c>
 800cfe8:	4630      	mov	r0, r6
 800cfea:	f7f6 fc37 	bl	800385c <arch_swap>
	return ret;
 800cfee:	e7cf      	b.n	800cf90 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800cff0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800cff4:	f043 0308 	orr.w	r3, r3, #8
 800cff8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800cffa:	f007 f901 	bl	8014200 <sys_dlist_remove>
}
 800cffe:	e7d4      	b.n	800cfaa <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 800d000:	4628      	mov	r0, r5
 800d002:	f007 f905 	bl	8014210 <unpend_thread_no_timeout>
 800d006:	f105 0018 	add.w	r0, r5, #24
 800d00a:	f007 f9ea 	bl	80143e2 <z_abort_timeout>
 800d00e:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
 800d012:	4628      	mov	r0, r5
 800d014:	f7ff fdb0 	bl	800cb78 <ready_thread>
 800d018:	e7d4      	b.n	800cfc4 <z_thread_abort+0x50>
 800d01a:	bf00      	nop
 800d01c:	20002524 	.word	0x20002524

0800d020 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800d020:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800d022:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 800d026:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800d028:	e9cd 6700 	strd	r6, r7, [sp]
 800d02c:	f7ff fe36 	bl	800cc9c <z_pend_curr>

	if (data != NULL) {
 800d030:	b11c      	cbz	r4, 800d03a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 800d032:	4b03      	ldr	r3, [pc, #12]	; (800d040 <z_sched_wait+0x20>)
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	695b      	ldr	r3, [r3, #20]
 800d038:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 800d03a:	b002      	add	sp, #8
 800d03c:	bdd0      	pop	{r4, r6, r7, pc}
 800d03e:	bf00      	nop
 800d040:	20002524 	.word	0x20002524

0800d044 <z_impl_k_condvar_signal>:
}
#include <syscalls/k_condvar_init_mrsh.c>
#endif

int z_impl_k_condvar_signal(struct k_condvar *condvar)
{
 800d044:	b510      	push	{r4, lr}
	__asm__ volatile(
 800d046:	f04f 0310 	mov.w	r3, #16
 800d04a:	f3ef 8411 	mrs	r4, BASEPRI
 800d04e:	f383 8812 	msr	BASEPRI_MAX, r3
 800d052:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_condvar, signal, condvar);

	struct k_thread *thread = z_unpend_first_thread(&condvar->wait_q);
 800d056:	f007 f97a 	bl	801434e <z_unpend_first_thread>

	if (thread != NULL) {
 800d05a:	b150      	cbz	r0, 800d072 <z_impl_k_condvar_signal+0x2e>
 800d05c:	2200      	movs	r2, #0
 800d05e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_condvar, signal, condvar, K_FOREVER);

		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800d062:	f007 f918 	bl	8014296 <z_ready_thread>
		z_reschedule(&lock, key);
 800d066:	4805      	ldr	r0, [pc, #20]	; (800d07c <z_impl_k_condvar_signal+0x38>)
 800d068:	4621      	mov	r1, r4
 800d06a:	f7ff fcc5 	bl	800c9f8 <z_reschedule>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_condvar, signal, condvar, 0);

	return 0;
}
 800d06e:	2000      	movs	r0, #0
 800d070:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 800d072:	f384 8811 	msr	BASEPRI, r4
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	e7f8      	b.n	800d06e <z_impl_k_condvar_signal+0x2a>
 800d07c:	200026ae 	.word	0x200026ae

0800d080 <z_impl_k_condvar_wait>:
#include <syscalls/k_condvar_broadcast_mrsh.c>
#endif

int z_impl_k_condvar_wait(struct k_condvar *condvar, struct k_mutex *mutex,
			  k_timeout_t timeout)
{
 800d080:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d084:	4605      	mov	r5, r0
 800d086:	460c      	mov	r4, r1
 800d088:	4617      	mov	r7, r2
 800d08a:	461e      	mov	r6, r3
	__asm__ volatile(
 800d08c:	f04f 0310 	mov.w	r3, #16
 800d090:	f3ef 8811 	mrs	r8, BASEPRI
 800d094:	f383 8812 	msr	BASEPRI_MAX, r3
 800d098:	f3bf 8f6f 	isb	sy
	return z_impl_k_mutex_unlock(mutex);
 800d09c:	4608      	mov	r0, r1
 800d09e:	f7ff fa07 	bl	800c4b0 <z_impl_k_mutex_unlock>
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_condvar, wait, condvar);

	key = k_spin_lock(&lock);
	k_mutex_unlock(mutex);

	ret = z_pend_curr(&lock, key, &condvar->wait_q, timeout);
 800d0a2:	462a      	mov	r2, r5
 800d0a4:	e9cd 7600 	strd	r7, r6, [sp]
 800d0a8:	4641      	mov	r1, r8
 800d0aa:	4807      	ldr	r0, [pc, #28]	; (800d0c8 <z_impl_k_condvar_wait+0x48>)
 800d0ac:	f7ff fdf6 	bl	800cc9c <z_pend_curr>
 800d0b0:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800d0b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff f980 	bl	800c3c0 <z_impl_k_mutex_lock>
	k_mutex_lock(mutex, K_FOREVER);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_condvar, wait, condvar, ret);

	return ret;
}
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	b002      	add	sp, #8
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	200026ae 	.word	0x200026ae

0800d0cc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800d0cc:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800d0ce:	4806      	ldr	r0, [pc, #24]	; (800d0e8 <z_data_copy+0x1c>)
 800d0d0:	4a06      	ldr	r2, [pc, #24]	; (800d0ec <z_data_copy+0x20>)
 800d0d2:	4907      	ldr	r1, [pc, #28]	; (800d0f0 <z_data_copy+0x24>)
 800d0d4:	1a12      	subs	r2, r2, r0
 800d0d6:	f007 fb69 	bl	80147ac <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800d0da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d0de:	4a05      	ldr	r2, [pc, #20]	; (800d0f4 <z_data_copy+0x28>)
 800d0e0:	4905      	ldr	r1, [pc, #20]	; (800d0f8 <z_data_copy+0x2c>)
 800d0e2:	4806      	ldr	r0, [pc, #24]	; (800d0fc <z_data_copy+0x30>)
 800d0e4:	f007 bb62 	b.w	80147ac <memcpy>
 800d0e8:	20000000 	.word	0x20000000
 800d0ec:	20000598 	.word	0x20000598
 800d0f0:	0801907c 	.word	0x0801907c
 800d0f4:	00000000 	.word	0x00000000
 800d0f8:	0801907c 	.word	0x0801907c
 800d0fc:	20000000 	.word	0x20000000

0800d100 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800d100:	4b03      	ldr	r3, [pc, #12]	; (800d110 <elapsed+0x10>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	b90b      	cbnz	r3, 800d10a <elapsed+0xa>
 800d106:	f7fe b911 	b.w	800b32c <sys_clock_elapsed>
}
 800d10a:	2000      	movs	r0, #0
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	20002560 	.word	0x20002560

0800d114 <next_timeout>:
	return list->head == list;
 800d114:	4b11      	ldr	r3, [pc, #68]	; (800d15c <next_timeout+0x48>)

static int32_t next_timeout(void)
{
 800d116:	b510      	push	{r4, lr}
 800d118:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d11a:	429c      	cmp	r4, r3
 800d11c:	bf08      	it	eq
 800d11e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 800d120:	f7ff ffee 	bl	800d100 <elapsed>
 800d124:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
 800d126:	b16c      	cbz	r4, 800d144 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 800d128:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800d12c:	1ac0      	subs	r0, r0, r3
 800d12e:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 800d132:	2801      	cmp	r0, #1
 800d134:	f173 0200 	sbcs.w	r2, r3, #0
 800d138:	db0d      	blt.n	800d156 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 800d13a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800d13e:	f173 0300 	sbcs.w	r3, r3, #0
 800d142:	db01      	blt.n	800d148 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
 800d144:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800d148:	4b05      	ldr	r3, [pc, #20]	; (800d160 <next_timeout+0x4c>)
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	b113      	cbz	r3, 800d154 <next_timeout+0x40>
 800d14e:	4298      	cmp	r0, r3
 800d150:	bfa8      	it	ge
 800d152:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800d154:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 800d156:	2000      	movs	r0, #0
 800d158:	e7f6      	b.n	800d148 <next_timeout+0x34>
 800d15a:	bf00      	nop
 800d15c:	2000030c 	.word	0x2000030c
 800d160:	20002524 	.word	0x20002524

0800d164 <remove_timeout>:
{
 800d164:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 800d166:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800d168:	b168      	cbz	r0, 800d186 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 800d16a:	4a0a      	ldr	r2, [pc, #40]	; (800d194 <remove_timeout+0x30>)
 800d16c:	6852      	ldr	r2, [r2, #4]
 800d16e:	4290      	cmp	r0, r2
 800d170:	d009      	beq.n	800d186 <remove_timeout+0x22>
	if (next(t) != NULL) {
 800d172:	b143      	cbz	r3, 800d186 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 800d174:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 800d178:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 800d17c:	1912      	adds	r2, r2, r4
 800d17e:	eb41 0105 	adc.w	r1, r1, r5
 800d182:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800d186:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800d188:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800d18a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d18c:	2300      	movs	r3, #0
	node->prev = NULL;
 800d18e:	e9c0 3300 	strd	r3, r3, [r0]
}
 800d192:	bd30      	pop	{r4, r5, pc}
 800d194:	2000030c 	.word	0x2000030c

0800d198 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
 800d198:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
 800d19a:	6804      	ldr	r4, [r0, #0]
 800d19c:	b1e4      	cbz	r4, 800d1d8 <timeout_rem+0x40>
	return list->head == list;
 800d19e:	4a10      	ldr	r2, [pc, #64]	; (800d1e0 <timeout_rem+0x48>)
 800d1a0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d015      	beq.n	800d1d2 <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
 800d1a6:	2400      	movs	r4, #0
 800d1a8:	6851      	ldr	r1, [r2, #4]
 800d1aa:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800d1ac:	b933      	cbnz	r3, 800d1bc <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
 800d1ae:	f7ff ffa7 	bl	800d100 <elapsed>
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	1a20      	subs	r0, r4, r0
 800d1b6:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
 800d1bc:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
 800d1c0:	18a4      	adds	r4, r4, r2
 800d1c2:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
 800d1c6:	4283      	cmp	r3, r0
 800d1c8:	d0f1      	beq.n	800d1ae <timeout_rem+0x16>
 800d1ca:	428b      	cmp	r3, r1
 800d1cc:	d0ef      	beq.n	800d1ae <timeout_rem+0x16>
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	e7ec      	b.n	800d1ac <timeout_rem+0x14>
 800d1d2:	2400      	movs	r4, #0
 800d1d4:	4625      	mov	r5, r4
 800d1d6:	e7ea      	b.n	800d1ae <timeout_rem+0x16>
		return 0;
 800d1d8:	4620      	mov	r0, r4
 800d1da:	4621      	mov	r1, r4
 800d1dc:	e7ed      	b.n	800d1ba <timeout_rem+0x22>
 800d1de:	bf00      	nop
 800d1e0:	2000030c 	.word	0x2000030c

0800d1e4 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800d1e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1e8:	bf08      	it	eq
 800d1ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800d1ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	461f      	mov	r7, r3
 800d1f4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800d1f6:	d067      	beq.n	800d2c8 <z_add_timeout+0xe4>
	to->fn = fn;
 800d1f8:	6081      	str	r1, [r0, #8]
 800d1fa:	f04f 0310 	mov.w	r3, #16
 800d1fe:	f3ef 8611 	mrs	r6, BASEPRI
 800d202:	f383 8812 	msr	BASEPRI_MAX, r3
 800d206:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800d20a:	f06f 0201 	mvn.w	r2, #1
 800d20e:	1b53      	subs	r3, r2, r5
 800d210:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d214:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800d218:	2b00      	cmp	r3, #0
 800d21a:	db1b      	blt.n	800d254 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800d21c:	4b2b      	ldr	r3, [pc, #172]	; (800d2cc <z_add_timeout+0xe8>)
 800d21e:	e9d3 1300 	ldrd	r1, r3, [r3]
 800d222:	1a52      	subs	r2, r2, r1
 800d224:	eb6c 0303 	sbc.w	r3, ip, r3
 800d228:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
 800d22a:	eb63 0307 	sbc.w	r3, r3, r7
 800d22e:	2d01      	cmp	r5, #1
 800d230:	f173 0200 	sbcs.w	r2, r3, #0
 800d234:	bfbc      	itt	lt
 800d236:	2501      	movlt	r5, #1
 800d238:	2300      	movlt	r3, #0
 800d23a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 800d23e:	4824      	ldr	r0, [pc, #144]	; (800d2d0 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 800d240:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d244:	4283      	cmp	r3, r0
 800d246:	d118      	bne.n	800d27a <z_add_timeout+0x96>
	node->prev = tail;
 800d248:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 800d24c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 800d250:	6044      	str	r4, [r0, #4]
}
 800d252:	e026      	b.n	800d2a2 <z_add_timeout+0xbe>
			to->dticks = timeout.ticks + 1 + elapsed();
 800d254:	f7ff ff54 	bl	800d100 <elapsed>
 800d258:	3501      	adds	r5, #1
 800d25a:	f147 0700 	adc.w	r7, r7, #0
 800d25e:	182d      	adds	r5, r5, r0
 800d260:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 800d264:	e9c4 5704 	strd	r5, r7, [r4, #16]
 800d268:	e7e9      	b.n	800d23e <z_add_timeout+0x5a>
			to->dticks -= t->dticks;
 800d26a:	1a52      	subs	r2, r2, r1
 800d26c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 800d270:	459c      	cmp	ip, r3
 800d272:	e9c4 2504 	strd	r2, r5, [r4, #16]
 800d276:	d0e7      	beq.n	800d248 <z_add_timeout+0x64>
 800d278:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d0e4      	beq.n	800d248 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 800d27e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 800d282:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 800d286:	428a      	cmp	r2, r1
 800d288:	eb75 0e07 	sbcs.w	lr, r5, r7
 800d28c:	daed      	bge.n	800d26a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 800d28e:	1a8a      	subs	r2, r1, r2
 800d290:	eb67 0505 	sbc.w	r5, r7, r5
 800d294:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 800d298:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800d29a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800d29e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800d2a0:	605c      	str	r4, [r3, #4]
	return list->head == list;
 800d2a2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d2a4:	4283      	cmp	r3, r0
 800d2a6:	d00b      	beq.n	800d2c0 <z_add_timeout+0xdc>
		if (to == first()) {
 800d2a8:	429c      	cmp	r4, r3
 800d2aa:	d109      	bne.n	800d2c0 <z_add_timeout+0xdc>
			int32_t next_time = next_timeout();
 800d2ac:	f7ff ff32 	bl	800d114 <next_timeout>
			if (next_time == 0 ||
 800d2b0:	b118      	cbz	r0, 800d2ba <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 800d2b2:	4b08      	ldr	r3, [pc, #32]	; (800d2d4 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	4283      	cmp	r3, r0
 800d2b8:	d002      	beq.n	800d2c0 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	f7fd ffc8 	bl	800b250 <sys_clock_set_timeout>
	__asm__ volatile(
 800d2c0:	f386 8811 	msr	BASEPRI, r6
 800d2c4:	f3bf 8f6f 	isb	sy
}
 800d2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	200019d8 	.word	0x200019d8
 800d2d0:	2000030c 	.word	0x2000030c
 800d2d4:	20002524 	.word	0x20002524

0800d2d8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800d2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2dc:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800d2de:	f7ff fc0b 	bl	800caf8 <z_time_slice>
	__asm__ volatile(
 800d2e2:	f04f 0310 	mov.w	r3, #16
 800d2e6:	f3ef 8411 	mrs	r4, BASEPRI
 800d2ea:	f383 8812 	msr	BASEPRI_MAX, r3
 800d2ee:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800d2f2:	4e24      	ldr	r6, [pc, #144]	; (800d384 <sys_clock_announce+0xac>)
	return list->head == list;
 800d2f4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800d388 <sys_clock_announce+0xb0>
 800d2f8:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800d2fa:	4d24      	ldr	r5, [pc, #144]	; (800d38c <sys_clock_announce+0xb4>)
 800d2fc:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800d300:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d302:	4540      	cmp	r0, r8
		curr_tick += dt;
 800d304:	e9d5 1e00 	ldrd	r1, lr, [r5]
 800d308:	ea4f 77e2 	mov.w	r7, r2, asr #31
 800d30c:	d00b      	beq.n	800d326 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800d30e:	b150      	cbz	r0, 800d326 <sys_clock_announce+0x4e>
 800d310:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 800d314:	429a      	cmp	r2, r3
 800d316:	eb77 090c 	sbcs.w	r9, r7, ip
 800d31a:	da16      	bge.n	800d34a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 800d31c:	1a9b      	subs	r3, r3, r2
 800d31e:	eb6c 0c07 	sbc.w	ip, ip, r7
 800d322:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 800d326:	1852      	adds	r2, r2, r1
 800d328:	eb4e 0707 	adc.w	r7, lr, r7
 800d32c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 800d330:	2500      	movs	r5, #0
 800d332:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800d334:	f7ff feee 	bl	800d114 <next_timeout>
 800d338:	4629      	mov	r1, r5
 800d33a:	f7fd ff89 	bl	800b250 <sys_clock_set_timeout>
	__asm__ volatile(
 800d33e:	f384 8811 	msr	BASEPRI, r4
 800d342:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800d346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 800d34a:	1859      	adds	r1, r3, r1
 800d34c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 800d354:	2200      	movs	r2, #0
 800d356:	2300      	movs	r3, #0
 800d358:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 800d35c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 800d360:	f7ff ff00 	bl	800d164 <remove_timeout>
 800d364:	f384 8811 	msr	BASEPRI, r4
 800d368:	f3bf 8f6f 	isb	sy
		t->fn(t);
 800d36c:	6883      	ldr	r3, [r0, #8]
 800d36e:	4798      	blx	r3
	__asm__ volatile(
 800d370:	f04f 0310 	mov.w	r3, #16
 800d374:	f3ef 8411 	mrs	r4, BASEPRI
 800d378:	f383 8812 	msr	BASEPRI_MAX, r3
 800d37c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800d380:	e7bc      	b.n	800d2fc <sys_clock_announce+0x24>
 800d382:	bf00      	nop
 800d384:	20002560 	.word	0x20002560
 800d388:	2000030c 	.word	0x2000030c
 800d38c:	200019d8 	.word	0x200019d8

0800d390 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800d390:	b510      	push	{r4, lr}
 800d392:	f04f 0310 	mov.w	r3, #16
 800d396:	f3ef 8411 	mrs	r4, BASEPRI
 800d39a:	f383 8812 	msr	BASEPRI_MAX, r3
 800d39e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 800d3a2:	f7fd ffc3 	bl	800b32c <sys_clock_elapsed>
 800d3a6:	4a05      	ldr	r2, [pc, #20]	; (800d3bc <sys_clock_tick_get+0x2c>)
 800d3a8:	e9d2 3100 	ldrd	r3, r1, [r2]
 800d3ac:	18c0      	adds	r0, r0, r3
 800d3ae:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800d3b2:	f384 8811 	msr	BASEPRI, r4
 800d3b6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800d3ba:	bd10      	pop	{r4, pc}
 800d3bc:	200019d8 	.word	0x200019d8

0800d3c0 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 800d3c0:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	b178      	cbz	r0, 800d3e6 <z_impl_k_busy_wait+0x26>
 800d3c6:	f7fd ffcf 	bl	800b368 <sys_clock_cycle_get_32>
 800d3ca:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800d3cc:	4806      	ldr	r0, [pc, #24]	; (800d3e8 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800d3ce:	4a07      	ldr	r2, [pc, #28]	; (800d3ec <z_impl_k_busy_wait+0x2c>)
 800d3d0:	fba4 0100 	umull	r0, r1, r4, r0
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	f7f2 ff2b 	bl	8000230 <__aeabi_uldivmod>
 800d3da:	4604      	mov	r4, r0
 800d3dc:	f7fd ffc4 	bl	800b368 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800d3e0:	1b43      	subs	r3, r0, r5
 800d3e2:	42a3      	cmp	r3, r4
 800d3e4:	d3fa      	bcc.n	800d3dc <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800d3e6:	bd38      	pop	{r3, r4, r5, pc}
 800d3e8:	04c4b400 	.word	0x04c4b400
 800d3ec:	000f4240 	.word	0x000f4240

0800d3f0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 800d3f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800d3f6:	4b29      	ldr	r3, [pc, #164]	; (800d49c <z_impl_k_poll+0xac>)
 800d3f8:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 800d400:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800d404:	ea52 0305 	orrs.w	r3, r2, r5
{
 800d408:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
 800d40a:	bf0c      	ite	eq
 800d40c:	2301      	moveq	r3, #1
 800d40e:	2300      	movne	r3, #0
 800d410:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
 800d414:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
 800d416:	f007 f884 	bl	8014522 <register_events>
 800d41a:	4681      	mov	r9, r0
	__asm__ volatile(
 800d41c:	f04f 0310 	mov.w	r3, #16
 800d420:	f3ef 8a11 	mrs	sl, BASEPRI
 800d424:	f383 8812 	msr	BASEPRI_MAX, r3
 800d428:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800d42c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 800d430:	b964      	cbnz	r4, 800d44c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
 800d432:	4601      	mov	r1, r0
 800d434:	4652      	mov	r2, sl
 800d436:	4640      	mov	r0, r8
 800d438:	f007 f944 	bl	80146c4 <clear_event_registrations>
	__asm__ volatile(
 800d43c:	f38a 8811 	msr	BASEPRI, sl
 800d440:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800d444:	4620      	mov	r0, r4
 800d446:	b002      	add	sp, #8
 800d448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
 800d44c:	2300      	movs	r3, #0
 800d44e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800d452:	ea56 0305 	orrs.w	r3, r6, r5
 800d456:	d106      	bne.n	800d466 <z_impl_k_poll+0x76>
 800d458:	f38a 8811 	msr	BASEPRI, sl
 800d45c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800d460:	f06f 040a 	mvn.w	r4, #10
 800d464:	e7ee      	b.n	800d444 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800d466:	e9cd 6500 	strd	r6, r5, [sp]
 800d46a:	4a0d      	ldr	r2, [pc, #52]	; (800d4a0 <z_impl_k_poll+0xb0>)
 800d46c:	480d      	ldr	r0, [pc, #52]	; (800d4a4 <z_impl_k_poll+0xb4>)
 800d46e:	4651      	mov	r1, sl
 800d470:	f7ff fc14 	bl	800cc9c <z_pend_curr>
 800d474:	4604      	mov	r4, r0
	__asm__ volatile(
 800d476:	f04f 0310 	mov.w	r3, #16
 800d47a:	f3ef 8511 	mrs	r5, BASEPRI
 800d47e:	f383 8812 	msr	BASEPRI_MAX, r3
 800d482:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
 800d486:	462a      	mov	r2, r5
 800d488:	4649      	mov	r1, r9
 800d48a:	4640      	mov	r0, r8
 800d48c:	f007 f91a 	bl	80146c4 <clear_event_registrations>
	__asm__ volatile(
 800d490:	f385 8811 	msr	BASEPRI, r5
 800d494:	f3bf 8f6f 	isb	sy
	return swap_rc;
 800d498:	e7d4      	b.n	800d444 <z_impl_k_poll+0x54>
 800d49a:	bf00      	nop
 800d49c:	20002524 	.word	0x20002524
 800d4a0:	20000314 	.word	0x20000314
 800d4a4:	200026ae 	.word	0x200026ae

0800d4a8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	4603      	mov	r3, r0
	__asm__ volatile(
 800d4ac:	f04f 0210 	mov.w	r2, #16
 800d4b0:	f3ef 8511 	mrs	r5, BASEPRI
 800d4b4:	f382 8812 	msr	BASEPRI_MAX, r2
 800d4b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800d4bc:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800d4be:	2101      	movs	r1, #1
 800d4c0:	6081      	str	r1, [r0, #8]
	return list->head == list;
 800d4c2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800d4c4:	4283      	cmp	r3, r0
 800d4c6:	d106      	bne.n	800d4d6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 800d4c8:	f385 8811 	msr	BASEPRI, r5
 800d4cc:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
 800d4d0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
 800d4d6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800d4da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800d4dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d4de:	2300      	movs	r3, #0
	node->prev = NULL;
 800d4e0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800d4e4:	f007 f894 	bl	8014610 <signal_poll_event>
	z_reschedule(&lock, key);
 800d4e8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800d4ea:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 800d4ec:	4801      	ldr	r0, [pc, #4]	; (800d4f4 <z_impl_k_poll_signal_raise+0x4c>)
 800d4ee:	f7ff fa83 	bl	800c9f8 <z_reschedule>
	return rc;
 800d4f2:	e7ee      	b.n	800d4d2 <z_impl_k_poll_signal_raise+0x2a>
 800d4f4:	200026ae 	.word	0x200026ae

0800d4f8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
 800d4f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4fa:	4606      	mov	r6, r0
 800d4fc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
 800d4fe:	f006 fcb6 	bl	8013e6e <k_is_in_isr>
 800d502:	b980      	cbnz	r0, 800d526 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
 800d504:	4b0b      	ldr	r3, [pc, #44]	; (800d534 <z_thread_aligned_alloc+0x3c>)
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
 800d50c:	b17c      	cbz	r4, 800d52e <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 800d50e:	1d2a      	adds	r2, r5, #4
 800d510:	d209      	bcs.n	800d526 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 800d512:	2000      	movs	r0, #0
 800d514:	2100      	movs	r1, #0
 800d516:	e9cd 0100 	strd	r0, r1, [sp]
 800d51a:	f046 0104 	orr.w	r1, r6, #4
 800d51e:	4620      	mov	r0, r4
 800d520:	f006 fc1d 	bl	8013d5e <k_heap_aligned_alloc>
	if (mem == NULL) {
 800d524:	b908      	cbnz	r0, 800d52a <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
 800d526:	2400      	movs	r4, #0
	}

	return ret;
 800d528:	e001      	b.n	800d52e <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
 800d52a:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
 800d52c:	1d04      	adds	r4, r0, #4
}
 800d52e:	4620      	mov	r0, r4
 800d530:	b002      	add	sp, #8
 800d532:	bd70      	pop	{r4, r5, r6, pc}
 800d534:	20002524 	.word	0x20002524

0800d538 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800d538:	4a02      	ldr	r2, [pc, #8]	; (800d544 <boot_banner+0xc>)
 800d53a:	4903      	ldr	r1, [pc, #12]	; (800d548 <boot_banner+0x10>)
 800d53c:	4803      	ldr	r0, [pc, #12]	; (800d54c <boot_banner+0x14>)
 800d53e:	f001 b90e 	b.w	800e75e <printk>
 800d542:	bf00      	nop
 800d544:	080164a2 	.word	0x080164a2
 800d548:	08018efb 	.word	0x08018efb
 800d54c:	08018f17 	.word	0x08018f17

0800d550 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800d550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800d552:	4b09      	ldr	r3, [pc, #36]	; (800d578 <k_sys_work_q_init+0x28>)
 800d554:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800d556:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 800d558:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	4907      	ldr	r1, [pc, #28]	; (800d57c <k_sys_work_q_init+0x2c>)
 800d55e:	4808      	ldr	r0, [pc, #32]	; (800d580 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 800d560:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 800d564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d56c:	f7ff f970 	bl	800c850 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800d570:	4620      	mov	r0, r4
 800d572:	b004      	add	sp, #16
 800d574:	bd10      	pop	{r4, pc}
 800d576:	bf00      	nop
 800d578:	08018f3e 	.word	0x08018f3e
 800d57c:	20004ea0 	.word	0x20004ea0
 800d580:	200019e0 	.word	0x200019e0

0800d584 <calloc>:
 800d584:	4b02      	ldr	r3, [pc, #8]	; (800d590 <calloc+0xc>)
 800d586:	460a      	mov	r2, r1
 800d588:	4601      	mov	r1, r0
 800d58a:	6818      	ldr	r0, [r3, #0]
 800d58c:	f007 b951 	b.w	8014832 <_calloc_r>
 800d590:	2000031c 	.word	0x2000031c

0800d594 <exit>:
 800d594:	b508      	push	{r3, lr}
 800d596:	4b07      	ldr	r3, [pc, #28]	; (800d5b4 <exit+0x20>)
 800d598:	4604      	mov	r4, r0
 800d59a:	b113      	cbz	r3, 800d5a2 <exit+0xe>
 800d59c:	2100      	movs	r1, #0
 800d59e:	f3af 8000 	nop.w
 800d5a2:	4b05      	ldr	r3, [pc, #20]	; (800d5b8 <exit+0x24>)
 800d5a4:	6818      	ldr	r0, [r3, #0]
 800d5a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d5a8:	b103      	cbz	r3, 800d5ac <exit+0x18>
 800d5aa:	4798      	blx	r3
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f7f6 fc4d 	bl	8003e4c <_exit>
 800d5b2:	bf00      	nop
 800d5b4:	00000000 	.word	0x00000000
 800d5b8:	0801614c 	.word	0x0801614c

0800d5bc <malloc>:
 800d5bc:	4b02      	ldr	r3, [pc, #8]	; (800d5c8 <malloc+0xc>)
 800d5be:	4601      	mov	r1, r0
 800d5c0:	6818      	ldr	r0, [r3, #0]
 800d5c2:	f000 b855 	b.w	800d670 <_malloc_r>
 800d5c6:	bf00      	nop
 800d5c8:	2000031c 	.word	0x2000031c

0800d5cc <free>:
 800d5cc:	4b02      	ldr	r3, [pc, #8]	; (800d5d8 <free+0xc>)
 800d5ce:	4601      	mov	r1, r0
 800d5d0:	6818      	ldr	r0, [r3, #0]
 800d5d2:	f000 b803 	b.w	800d5dc <_free_r>
 800d5d6:	bf00      	nop
 800d5d8:	2000031c 	.word	0x2000031c

0800d5dc <_free_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	4605      	mov	r5, r0
 800d5e0:	2900      	cmp	r1, #0
 800d5e2:	d041      	beq.n	800d668 <_free_r+0x8c>
 800d5e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5e8:	1f0c      	subs	r4, r1, #4
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	bfb8      	it	lt
 800d5ee:	18e4      	addlt	r4, r4, r3
 800d5f0:	f000 fab6 	bl	800db60 <__malloc_lock>
 800d5f4:	4a1d      	ldr	r2, [pc, #116]	; (800d66c <_free_r+0x90>)
 800d5f6:	6813      	ldr	r3, [r2, #0]
 800d5f8:	b933      	cbnz	r3, 800d608 <_free_r+0x2c>
 800d5fa:	6063      	str	r3, [r4, #4]
 800d5fc:	6014      	str	r4, [r2, #0]
 800d5fe:	4628      	mov	r0, r5
 800d600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d604:	f000 bab2 	b.w	800db6c <__malloc_unlock>
 800d608:	42a3      	cmp	r3, r4
 800d60a:	d908      	bls.n	800d61e <_free_r+0x42>
 800d60c:	6820      	ldr	r0, [r4, #0]
 800d60e:	1821      	adds	r1, r4, r0
 800d610:	428b      	cmp	r3, r1
 800d612:	bf01      	itttt	eq
 800d614:	6819      	ldreq	r1, [r3, #0]
 800d616:	685b      	ldreq	r3, [r3, #4]
 800d618:	1809      	addeq	r1, r1, r0
 800d61a:	6021      	streq	r1, [r4, #0]
 800d61c:	e7ed      	b.n	800d5fa <_free_r+0x1e>
 800d61e:	461a      	mov	r2, r3
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	b10b      	cbz	r3, 800d628 <_free_r+0x4c>
 800d624:	42a3      	cmp	r3, r4
 800d626:	d9fa      	bls.n	800d61e <_free_r+0x42>
 800d628:	6811      	ldr	r1, [r2, #0]
 800d62a:	1850      	adds	r0, r2, r1
 800d62c:	42a0      	cmp	r0, r4
 800d62e:	d10b      	bne.n	800d648 <_free_r+0x6c>
 800d630:	6820      	ldr	r0, [r4, #0]
 800d632:	4401      	add	r1, r0
 800d634:	1850      	adds	r0, r2, r1
 800d636:	4283      	cmp	r3, r0
 800d638:	6011      	str	r1, [r2, #0]
 800d63a:	d1e0      	bne.n	800d5fe <_free_r+0x22>
 800d63c:	6818      	ldr	r0, [r3, #0]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	6053      	str	r3, [r2, #4]
 800d642:	4401      	add	r1, r0
 800d644:	6011      	str	r1, [r2, #0]
 800d646:	e7da      	b.n	800d5fe <_free_r+0x22>
 800d648:	d902      	bls.n	800d650 <_free_r+0x74>
 800d64a:	230c      	movs	r3, #12
 800d64c:	602b      	str	r3, [r5, #0]
 800d64e:	e7d6      	b.n	800d5fe <_free_r+0x22>
 800d650:	6820      	ldr	r0, [r4, #0]
 800d652:	1821      	adds	r1, r4, r0
 800d654:	428b      	cmp	r3, r1
 800d656:	bf04      	itt	eq
 800d658:	6819      	ldreq	r1, [r3, #0]
 800d65a:	685b      	ldreq	r3, [r3, #4]
 800d65c:	6063      	str	r3, [r4, #4]
 800d65e:	bf04      	itt	eq
 800d660:	1809      	addeq	r1, r1, r0
 800d662:	6021      	streq	r1, [r4, #0]
 800d664:	6054      	str	r4, [r2, #4]
 800d666:	e7ca      	b.n	800d5fe <_free_r+0x22>
 800d668:	bd38      	pop	{r3, r4, r5, pc}
 800d66a:	bf00      	nop
 800d66c:	20002564 	.word	0x20002564

0800d670 <_malloc_r>:
 800d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d672:	1ccd      	adds	r5, r1, #3
 800d674:	f025 0503 	bic.w	r5, r5, #3
 800d678:	3508      	adds	r5, #8
 800d67a:	2d0c      	cmp	r5, #12
 800d67c:	bf38      	it	cc
 800d67e:	250c      	movcc	r5, #12
 800d680:	2d00      	cmp	r5, #0
 800d682:	4606      	mov	r6, r0
 800d684:	db01      	blt.n	800d68a <_malloc_r+0x1a>
 800d686:	42a9      	cmp	r1, r5
 800d688:	d903      	bls.n	800d692 <_malloc_r+0x22>
 800d68a:	230c      	movs	r3, #12
 800d68c:	6033      	str	r3, [r6, #0]
 800d68e:	2000      	movs	r0, #0
 800d690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d692:	f000 fa65 	bl	800db60 <__malloc_lock>
 800d696:	4921      	ldr	r1, [pc, #132]	; (800d71c <_malloc_r+0xac>)
 800d698:	680a      	ldr	r2, [r1, #0]
 800d69a:	4614      	mov	r4, r2
 800d69c:	b99c      	cbnz	r4, 800d6c6 <_malloc_r+0x56>
 800d69e:	4f20      	ldr	r7, [pc, #128]	; (800d720 <_malloc_r+0xb0>)
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	b923      	cbnz	r3, 800d6ae <_malloc_r+0x3e>
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	f000 f854 	bl	800d754 <_sbrk_r>
 800d6ac:	6038      	str	r0, [r7, #0]
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	f000 f84f 	bl	800d754 <_sbrk_r>
 800d6b6:	1c43      	adds	r3, r0, #1
 800d6b8:	d123      	bne.n	800d702 <_malloc_r+0x92>
 800d6ba:	230c      	movs	r3, #12
 800d6bc:	6033      	str	r3, [r6, #0]
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f000 fa54 	bl	800db6c <__malloc_unlock>
 800d6c4:	e7e3      	b.n	800d68e <_malloc_r+0x1e>
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	1b5b      	subs	r3, r3, r5
 800d6ca:	d417      	bmi.n	800d6fc <_malloc_r+0x8c>
 800d6cc:	2b0b      	cmp	r3, #11
 800d6ce:	d903      	bls.n	800d6d8 <_malloc_r+0x68>
 800d6d0:	6023      	str	r3, [r4, #0]
 800d6d2:	441c      	add	r4, r3
 800d6d4:	6025      	str	r5, [r4, #0]
 800d6d6:	e004      	b.n	800d6e2 <_malloc_r+0x72>
 800d6d8:	6863      	ldr	r3, [r4, #4]
 800d6da:	42a2      	cmp	r2, r4
 800d6dc:	bf0c      	ite	eq
 800d6de:	600b      	streq	r3, [r1, #0]
 800d6e0:	6053      	strne	r3, [r2, #4]
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f000 fa42 	bl	800db6c <__malloc_unlock>
 800d6e8:	f104 000b 	add.w	r0, r4, #11
 800d6ec:	1d23      	adds	r3, r4, #4
 800d6ee:	f020 0007 	bic.w	r0, r0, #7
 800d6f2:	1ac2      	subs	r2, r0, r3
 800d6f4:	d0cc      	beq.n	800d690 <_malloc_r+0x20>
 800d6f6:	1a1b      	subs	r3, r3, r0
 800d6f8:	50a3      	str	r3, [r4, r2]
 800d6fa:	e7c9      	b.n	800d690 <_malloc_r+0x20>
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	6864      	ldr	r4, [r4, #4]
 800d700:	e7cc      	b.n	800d69c <_malloc_r+0x2c>
 800d702:	1cc4      	adds	r4, r0, #3
 800d704:	f024 0403 	bic.w	r4, r4, #3
 800d708:	42a0      	cmp	r0, r4
 800d70a:	d0e3      	beq.n	800d6d4 <_malloc_r+0x64>
 800d70c:	1a21      	subs	r1, r4, r0
 800d70e:	4630      	mov	r0, r6
 800d710:	f000 f820 	bl	800d754 <_sbrk_r>
 800d714:	3001      	adds	r0, #1
 800d716:	d1dd      	bne.n	800d6d4 <_malloc_r+0x64>
 800d718:	e7cf      	b.n	800d6ba <_malloc_r+0x4a>
 800d71a:	bf00      	nop
 800d71c:	20002564 	.word	0x20002564
 800d720:	20002568 	.word	0x20002568

0800d724 <iprintf>:
 800d724:	b40f      	push	{r0, r1, r2, r3}
 800d726:	4b0a      	ldr	r3, [pc, #40]	; (800d750 <iprintf+0x2c>)
 800d728:	b513      	push	{r0, r1, r4, lr}
 800d72a:	681c      	ldr	r4, [r3, #0]
 800d72c:	b124      	cbz	r4, 800d738 <iprintf+0x14>
 800d72e:	69a3      	ldr	r3, [r4, #24]
 800d730:	b913      	cbnz	r3, 800d738 <iprintf+0x14>
 800d732:	4620      	mov	r0, r4
 800d734:	f000 f996 	bl	800da64 <__sinit>
 800d738:	ab05      	add	r3, sp, #20
 800d73a:	9a04      	ldr	r2, [sp, #16]
 800d73c:	68a1      	ldr	r1, [r4, #8]
 800d73e:	9301      	str	r3, [sp, #4]
 800d740:	4620      	mov	r0, r4
 800d742:	f000 fb19 	bl	800dd78 <_vfiprintf_r>
 800d746:	b002      	add	sp, #8
 800d748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d74c:	b004      	add	sp, #16
 800d74e:	4770      	bx	lr
 800d750:	2000031c 	.word	0x2000031c

0800d754 <_sbrk_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4d06      	ldr	r5, [pc, #24]	; (800d770 <_sbrk_r+0x1c>)
 800d758:	2300      	movs	r3, #0
 800d75a:	4604      	mov	r4, r0
 800d75c:	4608      	mov	r0, r1
 800d75e:	602b      	str	r3, [r5, #0]
 800d760:	f7f6 fb7c 	bl	8003e5c <_sbrk>
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	d102      	bne.n	800d76e <_sbrk_r+0x1a>
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	b103      	cbz	r3, 800d76e <_sbrk_r+0x1a>
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	bd38      	pop	{r3, r4, r5, pc}
 800d770:	2000256c 	.word	0x2000256c

0800d774 <sniprintf>:
 800d774:	b40c      	push	{r2, r3}
 800d776:	b530      	push	{r4, r5, lr}
 800d778:	4b17      	ldr	r3, [pc, #92]	; (800d7d8 <sniprintf+0x64>)
 800d77a:	1e0c      	subs	r4, r1, #0
 800d77c:	681d      	ldr	r5, [r3, #0]
 800d77e:	b09d      	sub	sp, #116	; 0x74
 800d780:	da08      	bge.n	800d794 <sniprintf+0x20>
 800d782:	238b      	movs	r3, #139	; 0x8b
 800d784:	602b      	str	r3, [r5, #0]
 800d786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d78a:	b01d      	add	sp, #116	; 0x74
 800d78c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d790:	b002      	add	sp, #8
 800d792:	4770      	bx	lr
 800d794:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d798:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d79c:	bf14      	ite	ne
 800d79e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d7a2:	4623      	moveq	r3, r4
 800d7a4:	9304      	str	r3, [sp, #16]
 800d7a6:	9307      	str	r3, [sp, #28]
 800d7a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7ac:	9002      	str	r0, [sp, #8]
 800d7ae:	9006      	str	r0, [sp, #24]
 800d7b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d7b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d7b6:	ab21      	add	r3, sp, #132	; 0x84
 800d7b8:	a902      	add	r1, sp, #8
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	f000 f9db 	bl	800db78 <_svfiprintf_r>
 800d7c2:	1c43      	adds	r3, r0, #1
 800d7c4:	bfbc      	itt	lt
 800d7c6:	238b      	movlt	r3, #139	; 0x8b
 800d7c8:	602b      	strlt	r3, [r5, #0]
 800d7ca:	2c00      	cmp	r4, #0
 800d7cc:	d0dd      	beq.n	800d78a <sniprintf+0x16>
 800d7ce:	9b02      	ldr	r3, [sp, #8]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	701a      	strb	r2, [r3, #0]
 800d7d4:	e7d9      	b.n	800d78a <sniprintf+0x16>
 800d7d6:	bf00      	nop
 800d7d8:	2000031c 	.word	0x2000031c

0800d7dc <_strtol_l.constprop.0>:
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	d001      	beq.n	800d7ea <_strtol_l.constprop.0+0xe>
 800d7e6:	2b24      	cmp	r3, #36	; 0x24
 800d7e8:	d906      	bls.n	800d7f8 <_strtol_l.constprop.0+0x1c>
 800d7ea:	f002 feb2 	bl	8010552 <__errno>
 800d7ee:	2316      	movs	r3, #22
 800d7f0:	6003      	str	r3, [r0, #0]
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f8:	4f35      	ldr	r7, [pc, #212]	; (800d8d0 <_strtol_l.constprop.0+0xf4>)
 800d7fa:	460d      	mov	r5, r1
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d802:	5de6      	ldrb	r6, [r4, r7]
 800d804:	f016 0608 	ands.w	r6, r6, #8
 800d808:	d1f8      	bne.n	800d7fc <_strtol_l.constprop.0+0x20>
 800d80a:	2c2d      	cmp	r4, #45	; 0x2d
 800d80c:	d12f      	bne.n	800d86e <_strtol_l.constprop.0+0x92>
 800d80e:	782c      	ldrb	r4, [r5, #0]
 800d810:	2601      	movs	r6, #1
 800d812:	1c85      	adds	r5, r0, #2
 800d814:	2b00      	cmp	r3, #0
 800d816:	d057      	beq.n	800d8c8 <_strtol_l.constprop.0+0xec>
 800d818:	2b10      	cmp	r3, #16
 800d81a:	d109      	bne.n	800d830 <_strtol_l.constprop.0+0x54>
 800d81c:	2c30      	cmp	r4, #48	; 0x30
 800d81e:	d107      	bne.n	800d830 <_strtol_l.constprop.0+0x54>
 800d820:	7828      	ldrb	r0, [r5, #0]
 800d822:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d826:	2858      	cmp	r0, #88	; 0x58
 800d828:	d149      	bne.n	800d8be <_strtol_l.constprop.0+0xe2>
 800d82a:	786c      	ldrb	r4, [r5, #1]
 800d82c:	2310      	movs	r3, #16
 800d82e:	3502      	adds	r5, #2
 800d830:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800d834:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800d838:	2700      	movs	r7, #0
 800d83a:	fbbe f9f3 	udiv	r9, lr, r3
 800d83e:	4638      	mov	r0, r7
 800d840:	fb03 ea19 	mls	sl, r3, r9, lr
 800d844:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d848:	f1bc 0f09 	cmp.w	ip, #9
 800d84c:	d814      	bhi.n	800d878 <_strtol_l.constprop.0+0x9c>
 800d84e:	4664      	mov	r4, ip
 800d850:	42a3      	cmp	r3, r4
 800d852:	dd22      	ble.n	800d89a <_strtol_l.constprop.0+0xbe>
 800d854:	2f00      	cmp	r7, #0
 800d856:	db1d      	blt.n	800d894 <_strtol_l.constprop.0+0xb8>
 800d858:	4581      	cmp	r9, r0
 800d85a:	d31b      	bcc.n	800d894 <_strtol_l.constprop.0+0xb8>
 800d85c:	d101      	bne.n	800d862 <_strtol_l.constprop.0+0x86>
 800d85e:	45a2      	cmp	sl, r4
 800d860:	db18      	blt.n	800d894 <_strtol_l.constprop.0+0xb8>
 800d862:	fb00 4003 	mla	r0, r0, r3, r4
 800d866:	2701      	movs	r7, #1
 800d868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d86c:	e7ea      	b.n	800d844 <_strtol_l.constprop.0+0x68>
 800d86e:	2c2b      	cmp	r4, #43	; 0x2b
 800d870:	bf04      	itt	eq
 800d872:	782c      	ldrbeq	r4, [r5, #0]
 800d874:	1c85      	addeq	r5, r0, #2
 800d876:	e7cd      	b.n	800d814 <_strtol_l.constprop.0+0x38>
 800d878:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d87c:	f1bc 0f19 	cmp.w	ip, #25
 800d880:	d801      	bhi.n	800d886 <_strtol_l.constprop.0+0xaa>
 800d882:	3c37      	subs	r4, #55	; 0x37
 800d884:	e7e4      	b.n	800d850 <_strtol_l.constprop.0+0x74>
 800d886:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d88a:	f1bc 0f19 	cmp.w	ip, #25
 800d88e:	d804      	bhi.n	800d89a <_strtol_l.constprop.0+0xbe>
 800d890:	3c57      	subs	r4, #87	; 0x57
 800d892:	e7dd      	b.n	800d850 <_strtol_l.constprop.0+0x74>
 800d894:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d898:	e7e6      	b.n	800d868 <_strtol_l.constprop.0+0x8c>
 800d89a:	2f00      	cmp	r7, #0
 800d89c:	da07      	bge.n	800d8ae <_strtol_l.constprop.0+0xd2>
 800d89e:	2322      	movs	r3, #34	; 0x22
 800d8a0:	f8c8 3000 	str.w	r3, [r8]
 800d8a4:	4670      	mov	r0, lr
 800d8a6:	2a00      	cmp	r2, #0
 800d8a8:	d0a4      	beq.n	800d7f4 <_strtol_l.constprop.0+0x18>
 800d8aa:	1e69      	subs	r1, r5, #1
 800d8ac:	e005      	b.n	800d8ba <_strtol_l.constprop.0+0xde>
 800d8ae:	b106      	cbz	r6, 800d8b2 <_strtol_l.constprop.0+0xd6>
 800d8b0:	4240      	negs	r0, r0
 800d8b2:	2a00      	cmp	r2, #0
 800d8b4:	d09e      	beq.n	800d7f4 <_strtol_l.constprop.0+0x18>
 800d8b6:	2f00      	cmp	r7, #0
 800d8b8:	d1f7      	bne.n	800d8aa <_strtol_l.constprop.0+0xce>
 800d8ba:	6011      	str	r1, [r2, #0]
 800d8bc:	e79a      	b.n	800d7f4 <_strtol_l.constprop.0+0x18>
 800d8be:	2430      	movs	r4, #48	; 0x30
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1b5      	bne.n	800d830 <_strtol_l.constprop.0+0x54>
 800d8c4:	2308      	movs	r3, #8
 800d8c6:	e7b3      	b.n	800d830 <_strtol_l.constprop.0+0x54>
 800d8c8:	2c30      	cmp	r4, #48	; 0x30
 800d8ca:	d0a9      	beq.n	800d820 <_strtol_l.constprop.0+0x44>
 800d8cc:	230a      	movs	r3, #10
 800d8ce:	e7af      	b.n	800d830 <_strtol_l.constprop.0+0x54>
 800d8d0:	08018f48 	.word	0x08018f48

0800d8d4 <strtol>:
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	4601      	mov	r1, r0
 800d8da:	4802      	ldr	r0, [pc, #8]	; (800d8e4 <strtol+0x10>)
 800d8dc:	6800      	ldr	r0, [r0, #0]
 800d8de:	f7ff bf7d 	b.w	800d7dc <_strtol_l.constprop.0>
 800d8e2:	bf00      	nop
 800d8e4:	2000031c 	.word	0x2000031c

0800d8e8 <_strtoul_l.constprop.0>:
 800d8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8ec:	4f36      	ldr	r7, [pc, #216]	; (800d9c8 <_strtoul_l.constprop.0+0xe0>)
 800d8ee:	4686      	mov	lr, r0
 800d8f0:	460d      	mov	r5, r1
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8f8:	5de6      	ldrb	r6, [r4, r7]
 800d8fa:	f016 0608 	ands.w	r6, r6, #8
 800d8fe:	d1f8      	bne.n	800d8f2 <_strtoul_l.constprop.0+0xa>
 800d900:	2c2d      	cmp	r4, #45	; 0x2d
 800d902:	d12f      	bne.n	800d964 <_strtoul_l.constprop.0+0x7c>
 800d904:	782c      	ldrb	r4, [r5, #0]
 800d906:	2601      	movs	r6, #1
 800d908:	1c85      	adds	r5, r0, #2
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d057      	beq.n	800d9be <_strtoul_l.constprop.0+0xd6>
 800d90e:	2b10      	cmp	r3, #16
 800d910:	d109      	bne.n	800d926 <_strtoul_l.constprop.0+0x3e>
 800d912:	2c30      	cmp	r4, #48	; 0x30
 800d914:	d107      	bne.n	800d926 <_strtoul_l.constprop.0+0x3e>
 800d916:	7828      	ldrb	r0, [r5, #0]
 800d918:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d91c:	2858      	cmp	r0, #88	; 0x58
 800d91e:	d149      	bne.n	800d9b4 <_strtoul_l.constprop.0+0xcc>
 800d920:	786c      	ldrb	r4, [r5, #1]
 800d922:	2310      	movs	r3, #16
 800d924:	3502      	adds	r5, #2
 800d926:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d92a:	2700      	movs	r7, #0
 800d92c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d930:	fb03 f908 	mul.w	r9, r3, r8
 800d934:	ea6f 0909 	mvn.w	r9, r9
 800d938:	4638      	mov	r0, r7
 800d93a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d93e:	f1bc 0f09 	cmp.w	ip, #9
 800d942:	d814      	bhi.n	800d96e <_strtoul_l.constprop.0+0x86>
 800d944:	4664      	mov	r4, ip
 800d946:	42a3      	cmp	r3, r4
 800d948:	dd22      	ble.n	800d990 <_strtoul_l.constprop.0+0xa8>
 800d94a:	2f00      	cmp	r7, #0
 800d94c:	db1d      	blt.n	800d98a <_strtoul_l.constprop.0+0xa2>
 800d94e:	4580      	cmp	r8, r0
 800d950:	d31b      	bcc.n	800d98a <_strtoul_l.constprop.0+0xa2>
 800d952:	d101      	bne.n	800d958 <_strtoul_l.constprop.0+0x70>
 800d954:	45a1      	cmp	r9, r4
 800d956:	db18      	blt.n	800d98a <_strtoul_l.constprop.0+0xa2>
 800d958:	fb00 4003 	mla	r0, r0, r3, r4
 800d95c:	2701      	movs	r7, #1
 800d95e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d962:	e7ea      	b.n	800d93a <_strtoul_l.constprop.0+0x52>
 800d964:	2c2b      	cmp	r4, #43	; 0x2b
 800d966:	bf04      	itt	eq
 800d968:	782c      	ldrbeq	r4, [r5, #0]
 800d96a:	1c85      	addeq	r5, r0, #2
 800d96c:	e7cd      	b.n	800d90a <_strtoul_l.constprop.0+0x22>
 800d96e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d972:	f1bc 0f19 	cmp.w	ip, #25
 800d976:	d801      	bhi.n	800d97c <_strtoul_l.constprop.0+0x94>
 800d978:	3c37      	subs	r4, #55	; 0x37
 800d97a:	e7e4      	b.n	800d946 <_strtoul_l.constprop.0+0x5e>
 800d97c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d980:	f1bc 0f19 	cmp.w	ip, #25
 800d984:	d804      	bhi.n	800d990 <_strtoul_l.constprop.0+0xa8>
 800d986:	3c57      	subs	r4, #87	; 0x57
 800d988:	e7dd      	b.n	800d946 <_strtoul_l.constprop.0+0x5e>
 800d98a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d98e:	e7e6      	b.n	800d95e <_strtoul_l.constprop.0+0x76>
 800d990:	2f00      	cmp	r7, #0
 800d992:	da07      	bge.n	800d9a4 <_strtoul_l.constprop.0+0xbc>
 800d994:	2322      	movs	r3, #34	; 0x22
 800d996:	f8ce 3000 	str.w	r3, [lr]
 800d99a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d99e:	b932      	cbnz	r2, 800d9ae <_strtoul_l.constprop.0+0xc6>
 800d9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9a4:	b106      	cbz	r6, 800d9a8 <_strtoul_l.constprop.0+0xc0>
 800d9a6:	4240      	negs	r0, r0
 800d9a8:	2a00      	cmp	r2, #0
 800d9aa:	d0f9      	beq.n	800d9a0 <_strtoul_l.constprop.0+0xb8>
 800d9ac:	b107      	cbz	r7, 800d9b0 <_strtoul_l.constprop.0+0xc8>
 800d9ae:	1e69      	subs	r1, r5, #1
 800d9b0:	6011      	str	r1, [r2, #0]
 800d9b2:	e7f5      	b.n	800d9a0 <_strtoul_l.constprop.0+0xb8>
 800d9b4:	2430      	movs	r4, #48	; 0x30
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1b5      	bne.n	800d926 <_strtoul_l.constprop.0+0x3e>
 800d9ba:	2308      	movs	r3, #8
 800d9bc:	e7b3      	b.n	800d926 <_strtoul_l.constprop.0+0x3e>
 800d9be:	2c30      	cmp	r4, #48	; 0x30
 800d9c0:	d0a9      	beq.n	800d916 <_strtoul_l.constprop.0+0x2e>
 800d9c2:	230a      	movs	r3, #10
 800d9c4:	e7af      	b.n	800d926 <_strtoul_l.constprop.0+0x3e>
 800d9c6:	bf00      	nop
 800d9c8:	08018f48 	.word	0x08018f48

0800d9cc <strtoul>:
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	460a      	mov	r2, r1
 800d9d0:	4601      	mov	r1, r0
 800d9d2:	4802      	ldr	r0, [pc, #8]	; (800d9dc <strtoul+0x10>)
 800d9d4:	6800      	ldr	r0, [r0, #0]
 800d9d6:	f7ff bf87 	b.w	800d8e8 <_strtoul_l.constprop.0>
 800d9da:	bf00      	nop
 800d9dc:	2000031c 	.word	0x2000031c

0800d9e0 <std>:
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	b510      	push	{r4, lr}
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	e9c0 3300 	strd	r3, r3, [r0]
 800d9ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9ee:	6083      	str	r3, [r0, #8]
 800d9f0:	8181      	strh	r1, [r0, #12]
 800d9f2:	6643      	str	r3, [r0, #100]	; 0x64
 800d9f4:	81c2      	strh	r2, [r0, #14]
 800d9f6:	6183      	str	r3, [r0, #24]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	2208      	movs	r2, #8
 800d9fc:	305c      	adds	r0, #92	; 0x5c
 800d9fe:	f006 ff10 	bl	8014822 <memset>
 800da02:	4b05      	ldr	r3, [pc, #20]	; (800da18 <std+0x38>)
 800da04:	6263      	str	r3, [r4, #36]	; 0x24
 800da06:	4b05      	ldr	r3, [pc, #20]	; (800da1c <std+0x3c>)
 800da08:	62a3      	str	r3, [r4, #40]	; 0x28
 800da0a:	4b05      	ldr	r3, [pc, #20]	; (800da20 <std+0x40>)
 800da0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da0e:	4b05      	ldr	r3, [pc, #20]	; (800da24 <std+0x44>)
 800da10:	6224      	str	r4, [r4, #32]
 800da12:	6323      	str	r3, [r4, #48]	; 0x30
 800da14:	bd10      	pop	{r4, pc}
 800da16:	bf00      	nop
 800da18:	08014b7b 	.word	0x08014b7b
 800da1c:	08014b9d 	.word	0x08014b9d
 800da20:	08014bd5 	.word	0x08014bd5
 800da24:	08014bf9 	.word	0x08014bf9

0800da28 <_cleanup_r>:
 800da28:	4901      	ldr	r1, [pc, #4]	; (800da30 <_cleanup_r+0x8>)
 800da2a:	f006 bf98 	b.w	801495e <_fwalk_reent>
 800da2e:	bf00      	nop
 800da30:	0800e4ed 	.word	0x0800e4ed

0800da34 <__sfp_lock_acquire>:
 800da34:	4801      	ldr	r0, [pc, #4]	; (800da3c <__sfp_lock_acquire+0x8>)
 800da36:	f002 bd84 	b.w	8010542 <__retarget_lock_acquire_recursive>
 800da3a:	bf00      	nop
 800da3c:	20000428 	.word	0x20000428

0800da40 <__sfp_lock_release>:
 800da40:	4801      	ldr	r0, [pc, #4]	; (800da48 <__sfp_lock_release+0x8>)
 800da42:	f002 bd84 	b.w	801054e <__retarget_lock_release_recursive>
 800da46:	bf00      	nop
 800da48:	20000428 	.word	0x20000428

0800da4c <__sinit_lock_acquire>:
 800da4c:	4801      	ldr	r0, [pc, #4]	; (800da54 <__sinit_lock_acquire+0x8>)
 800da4e:	f002 bd78 	b.w	8010542 <__retarget_lock_acquire_recursive>
 800da52:	bf00      	nop
 800da54:	2000043c 	.word	0x2000043c

0800da58 <__sinit_lock_release>:
 800da58:	4801      	ldr	r0, [pc, #4]	; (800da60 <__sinit_lock_release+0x8>)
 800da5a:	f002 bd78 	b.w	801054e <__retarget_lock_release_recursive>
 800da5e:	bf00      	nop
 800da60:	2000043c 	.word	0x2000043c

0800da64 <__sinit>:
 800da64:	b510      	push	{r4, lr}
 800da66:	4604      	mov	r4, r0
 800da68:	f7ff fff0 	bl	800da4c <__sinit_lock_acquire>
 800da6c:	69a3      	ldr	r3, [r4, #24]
 800da6e:	b11b      	cbz	r3, 800da78 <__sinit+0x14>
 800da70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da74:	f7ff bff0 	b.w	800da58 <__sinit_lock_release>
 800da78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da7c:	6523      	str	r3, [r4, #80]	; 0x50
 800da7e:	4b13      	ldr	r3, [pc, #76]	; (800dacc <__sinit+0x68>)
 800da80:	4a13      	ldr	r2, [pc, #76]	; (800dad0 <__sinit+0x6c>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	62a2      	str	r2, [r4, #40]	; 0x28
 800da86:	42a3      	cmp	r3, r4
 800da88:	bf04      	itt	eq
 800da8a:	2301      	moveq	r3, #1
 800da8c:	61a3      	streq	r3, [r4, #24]
 800da8e:	4620      	mov	r0, r4
 800da90:	f000 f820 	bl	800dad4 <__sfp>
 800da94:	6060      	str	r0, [r4, #4]
 800da96:	4620      	mov	r0, r4
 800da98:	f000 f81c 	bl	800dad4 <__sfp>
 800da9c:	60a0      	str	r0, [r4, #8]
 800da9e:	4620      	mov	r0, r4
 800daa0:	f000 f818 	bl	800dad4 <__sfp>
 800daa4:	2200      	movs	r2, #0
 800daa6:	60e0      	str	r0, [r4, #12]
 800daa8:	2104      	movs	r1, #4
 800daaa:	6860      	ldr	r0, [r4, #4]
 800daac:	f7ff ff98 	bl	800d9e0 <std>
 800dab0:	68a0      	ldr	r0, [r4, #8]
 800dab2:	2201      	movs	r2, #1
 800dab4:	2109      	movs	r1, #9
 800dab6:	f7ff ff93 	bl	800d9e0 <std>
 800daba:	68e0      	ldr	r0, [r4, #12]
 800dabc:	2202      	movs	r2, #2
 800dabe:	2112      	movs	r1, #18
 800dac0:	f7ff ff8e 	bl	800d9e0 <std>
 800dac4:	2301      	movs	r3, #1
 800dac6:	61a3      	str	r3, [r4, #24]
 800dac8:	e7d2      	b.n	800da70 <__sinit+0xc>
 800daca:	bf00      	nop
 800dacc:	0801614c 	.word	0x0801614c
 800dad0:	0800da29 	.word	0x0800da29

0800dad4 <__sfp>:
 800dad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad6:	4607      	mov	r7, r0
 800dad8:	f7ff ffac 	bl	800da34 <__sfp_lock_acquire>
 800dadc:	4b1e      	ldr	r3, [pc, #120]	; (800db58 <__sfp+0x84>)
 800dade:	681e      	ldr	r6, [r3, #0]
 800dae0:	69b3      	ldr	r3, [r6, #24]
 800dae2:	b913      	cbnz	r3, 800daea <__sfp+0x16>
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7ff ffbd 	bl	800da64 <__sinit>
 800daea:	3648      	adds	r6, #72	; 0x48
 800daec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800daf0:	3b01      	subs	r3, #1
 800daf2:	d503      	bpl.n	800dafc <__sfp+0x28>
 800daf4:	6833      	ldr	r3, [r6, #0]
 800daf6:	b30b      	cbz	r3, 800db3c <__sfp+0x68>
 800daf8:	6836      	ldr	r6, [r6, #0]
 800dafa:	e7f7      	b.n	800daec <__sfp+0x18>
 800dafc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800db00:	b9d5      	cbnz	r5, 800db38 <__sfp+0x64>
 800db02:	4b16      	ldr	r3, [pc, #88]	; (800db5c <__sfp+0x88>)
 800db04:	60e3      	str	r3, [r4, #12]
 800db06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800db0a:	6665      	str	r5, [r4, #100]	; 0x64
 800db0c:	f002 fd0f 	bl	801052e <__retarget_lock_init_recursive>
 800db10:	f7ff ff96 	bl	800da40 <__sfp_lock_release>
 800db14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800db18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800db1c:	6025      	str	r5, [r4, #0]
 800db1e:	61a5      	str	r5, [r4, #24]
 800db20:	2208      	movs	r2, #8
 800db22:	4629      	mov	r1, r5
 800db24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800db28:	f006 fe7b 	bl	8014822 <memset>
 800db2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db34:	4620      	mov	r0, r4
 800db36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db38:	3468      	adds	r4, #104	; 0x68
 800db3a:	e7d9      	b.n	800daf0 <__sfp+0x1c>
 800db3c:	2104      	movs	r1, #4
 800db3e:	4638      	mov	r0, r7
 800db40:	f006 fef7 	bl	8014932 <__sfmoreglue>
 800db44:	4604      	mov	r4, r0
 800db46:	6030      	str	r0, [r6, #0]
 800db48:	2800      	cmp	r0, #0
 800db4a:	d1d5      	bne.n	800daf8 <__sfp+0x24>
 800db4c:	f7ff ff78 	bl	800da40 <__sfp_lock_release>
 800db50:	230c      	movs	r3, #12
 800db52:	603b      	str	r3, [r7, #0]
 800db54:	e7ee      	b.n	800db34 <__sfp+0x60>
 800db56:	bf00      	nop
 800db58:	0801614c 	.word	0x0801614c
 800db5c:	ffff0001 	.word	0xffff0001

0800db60 <__malloc_lock>:
 800db60:	4801      	ldr	r0, [pc, #4]	; (800db68 <__malloc_lock+0x8>)
 800db62:	f002 bcee 	b.w	8010542 <__retarget_lock_acquire_recursive>
 800db66:	bf00      	nop
 800db68:	20000414 	.word	0x20000414

0800db6c <__malloc_unlock>:
 800db6c:	4801      	ldr	r0, [pc, #4]	; (800db74 <__malloc_unlock+0x8>)
 800db6e:	f002 bcee 	b.w	801054e <__retarget_lock_release_recursive>
 800db72:	bf00      	nop
 800db74:	20000414 	.word	0x20000414

0800db78 <_svfiprintf_r>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	4698      	mov	r8, r3
 800db7e:	898b      	ldrh	r3, [r1, #12]
 800db80:	061b      	lsls	r3, r3, #24
 800db82:	b09d      	sub	sp, #116	; 0x74
 800db84:	4607      	mov	r7, r0
 800db86:	460d      	mov	r5, r1
 800db88:	4614      	mov	r4, r2
 800db8a:	d50e      	bpl.n	800dbaa <_svfiprintf_r+0x32>
 800db8c:	690b      	ldr	r3, [r1, #16]
 800db8e:	b963      	cbnz	r3, 800dbaa <_svfiprintf_r+0x32>
 800db90:	2140      	movs	r1, #64	; 0x40
 800db92:	f7ff fd6d 	bl	800d670 <_malloc_r>
 800db96:	6028      	str	r0, [r5, #0]
 800db98:	6128      	str	r0, [r5, #16]
 800db9a:	b920      	cbnz	r0, 800dba6 <_svfiprintf_r+0x2e>
 800db9c:	230c      	movs	r3, #12
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dba4:	e0d1      	b.n	800dd4a <_svfiprintf_r+0x1d2>
 800dba6:	2340      	movs	r3, #64	; 0x40
 800dba8:	616b      	str	r3, [r5, #20]
 800dbaa:	2300      	movs	r3, #0
 800dbac:	9309      	str	r3, [sp, #36]	; 0x24
 800dbae:	2320      	movs	r3, #32
 800dbb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbb8:	2330      	movs	r3, #48	; 0x30
 800dbba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd64 <_svfiprintf_r+0x1ec>
 800dbbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbc2:	f04f 0901 	mov.w	r9, #1
 800dbc6:	4623      	mov	r3, r4
 800dbc8:	469a      	mov	sl, r3
 800dbca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbce:	b10a      	cbz	r2, 800dbd4 <_svfiprintf_r+0x5c>
 800dbd0:	2a25      	cmp	r2, #37	; 0x25
 800dbd2:	d1f9      	bne.n	800dbc8 <_svfiprintf_r+0x50>
 800dbd4:	ebba 0b04 	subs.w	fp, sl, r4
 800dbd8:	d00b      	beq.n	800dbf2 <_svfiprintf_r+0x7a>
 800dbda:	465b      	mov	r3, fp
 800dbdc:	4622      	mov	r2, r4
 800dbde:	4629      	mov	r1, r5
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f006 fedb 	bl	801499c <__ssputs_r>
 800dbe6:	3001      	adds	r0, #1
 800dbe8:	f000 80aa 	beq.w	800dd40 <_svfiprintf_r+0x1c8>
 800dbec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbee:	445a      	add	r2, fp
 800dbf0:	9209      	str	r2, [sp, #36]	; 0x24
 800dbf2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 80a2 	beq.w	800dd40 <_svfiprintf_r+0x1c8>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc06:	f10a 0a01 	add.w	sl, sl, #1
 800dc0a:	9304      	str	r3, [sp, #16]
 800dc0c:	9307      	str	r3, [sp, #28]
 800dc0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc12:	931a      	str	r3, [sp, #104]	; 0x68
 800dc14:	4654      	mov	r4, sl
 800dc16:	2205      	movs	r2, #5
 800dc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1c:	4851      	ldr	r0, [pc, #324]	; (800dd64 <_svfiprintf_r+0x1ec>)
 800dc1e:	f7f2 fab7 	bl	8000190 <memchr>
 800dc22:	9a04      	ldr	r2, [sp, #16]
 800dc24:	b9d8      	cbnz	r0, 800dc5e <_svfiprintf_r+0xe6>
 800dc26:	06d0      	lsls	r0, r2, #27
 800dc28:	bf44      	itt	mi
 800dc2a:	2320      	movmi	r3, #32
 800dc2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc30:	0711      	lsls	r1, r2, #28
 800dc32:	bf44      	itt	mi
 800dc34:	232b      	movmi	r3, #43	; 0x2b
 800dc36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc3a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc3e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc40:	d015      	beq.n	800dc6e <_svfiprintf_r+0xf6>
 800dc42:	9a07      	ldr	r2, [sp, #28]
 800dc44:	4654      	mov	r4, sl
 800dc46:	2000      	movs	r0, #0
 800dc48:	f04f 0c0a 	mov.w	ip, #10
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc52:	3b30      	subs	r3, #48	; 0x30
 800dc54:	2b09      	cmp	r3, #9
 800dc56:	d94e      	bls.n	800dcf6 <_svfiprintf_r+0x17e>
 800dc58:	b1b0      	cbz	r0, 800dc88 <_svfiprintf_r+0x110>
 800dc5a:	9207      	str	r2, [sp, #28]
 800dc5c:	e014      	b.n	800dc88 <_svfiprintf_r+0x110>
 800dc5e:	eba0 0308 	sub.w	r3, r0, r8
 800dc62:	fa09 f303 	lsl.w	r3, r9, r3
 800dc66:	4313      	orrs	r3, r2
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	46a2      	mov	sl, r4
 800dc6c:	e7d2      	b.n	800dc14 <_svfiprintf_r+0x9c>
 800dc6e:	9b03      	ldr	r3, [sp, #12]
 800dc70:	1d19      	adds	r1, r3, #4
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	9103      	str	r1, [sp, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	bfbb      	ittet	lt
 800dc7a:	425b      	neglt	r3, r3
 800dc7c:	f042 0202 	orrlt.w	r2, r2, #2
 800dc80:	9307      	strge	r3, [sp, #28]
 800dc82:	9307      	strlt	r3, [sp, #28]
 800dc84:	bfb8      	it	lt
 800dc86:	9204      	strlt	r2, [sp, #16]
 800dc88:	7823      	ldrb	r3, [r4, #0]
 800dc8a:	2b2e      	cmp	r3, #46	; 0x2e
 800dc8c:	d10c      	bne.n	800dca8 <_svfiprintf_r+0x130>
 800dc8e:	7863      	ldrb	r3, [r4, #1]
 800dc90:	2b2a      	cmp	r3, #42	; 0x2a
 800dc92:	d135      	bne.n	800dd00 <_svfiprintf_r+0x188>
 800dc94:	9b03      	ldr	r3, [sp, #12]
 800dc96:	1d1a      	adds	r2, r3, #4
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	9203      	str	r2, [sp, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	bfb8      	it	lt
 800dca0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dca4:	3402      	adds	r4, #2
 800dca6:	9305      	str	r3, [sp, #20]
 800dca8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800dd68 <_svfiprintf_r+0x1f0>
 800dcac:	7821      	ldrb	r1, [r4, #0]
 800dcae:	2203      	movs	r2, #3
 800dcb0:	4650      	mov	r0, sl
 800dcb2:	f7f2 fa6d 	bl	8000190 <memchr>
 800dcb6:	b140      	cbz	r0, 800dcca <_svfiprintf_r+0x152>
 800dcb8:	2340      	movs	r3, #64	; 0x40
 800dcba:	eba0 000a 	sub.w	r0, r0, sl
 800dcbe:	fa03 f000 	lsl.w	r0, r3, r0
 800dcc2:	9b04      	ldr	r3, [sp, #16]
 800dcc4:	4303      	orrs	r3, r0
 800dcc6:	3401      	adds	r4, #1
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcce:	4827      	ldr	r0, [pc, #156]	; (800dd6c <_svfiprintf_r+0x1f4>)
 800dcd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcd4:	2206      	movs	r2, #6
 800dcd6:	f7f2 fa5b 	bl	8000190 <memchr>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d038      	beq.n	800dd50 <_svfiprintf_r+0x1d8>
 800dcde:	4b24      	ldr	r3, [pc, #144]	; (800dd70 <_svfiprintf_r+0x1f8>)
 800dce0:	bb1b      	cbnz	r3, 800dd2a <_svfiprintf_r+0x1b2>
 800dce2:	9b03      	ldr	r3, [sp, #12]
 800dce4:	3307      	adds	r3, #7
 800dce6:	f023 0307 	bic.w	r3, r3, #7
 800dcea:	3308      	adds	r3, #8
 800dcec:	9303      	str	r3, [sp, #12]
 800dcee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf0:	4433      	add	r3, r6
 800dcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf4:	e767      	b.n	800dbc6 <_svfiprintf_r+0x4e>
 800dcf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	2001      	movs	r0, #1
 800dcfe:	e7a5      	b.n	800dc4c <_svfiprintf_r+0xd4>
 800dd00:	2300      	movs	r3, #0
 800dd02:	3401      	adds	r4, #1
 800dd04:	9305      	str	r3, [sp, #20]
 800dd06:	4619      	mov	r1, r3
 800dd08:	f04f 0c0a 	mov.w	ip, #10
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd12:	3a30      	subs	r2, #48	; 0x30
 800dd14:	2a09      	cmp	r2, #9
 800dd16:	d903      	bls.n	800dd20 <_svfiprintf_r+0x1a8>
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0c5      	beq.n	800dca8 <_svfiprintf_r+0x130>
 800dd1c:	9105      	str	r1, [sp, #20]
 800dd1e:	e7c3      	b.n	800dca8 <_svfiprintf_r+0x130>
 800dd20:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd24:	4604      	mov	r4, r0
 800dd26:	2301      	movs	r3, #1
 800dd28:	e7f0      	b.n	800dd0c <_svfiprintf_r+0x194>
 800dd2a:	ab03      	add	r3, sp, #12
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	462a      	mov	r2, r5
 800dd30:	4b10      	ldr	r3, [pc, #64]	; (800dd74 <_svfiprintf_r+0x1fc>)
 800dd32:	a904      	add	r1, sp, #16
 800dd34:	4638      	mov	r0, r7
 800dd36:	f3af 8000 	nop.w
 800dd3a:	1c42      	adds	r2, r0, #1
 800dd3c:	4606      	mov	r6, r0
 800dd3e:	d1d6      	bne.n	800dcee <_svfiprintf_r+0x176>
 800dd40:	89ab      	ldrh	r3, [r5, #12]
 800dd42:	065b      	lsls	r3, r3, #25
 800dd44:	f53f af2c 	bmi.w	800dba0 <_svfiprintf_r+0x28>
 800dd48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd4a:	b01d      	add	sp, #116	; 0x74
 800dd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd50:	ab03      	add	r3, sp, #12
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	462a      	mov	r2, r5
 800dd56:	4b07      	ldr	r3, [pc, #28]	; (800dd74 <_svfiprintf_r+0x1fc>)
 800dd58:	a904      	add	r1, sp, #16
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	f000 f93c 	bl	800dfd8 <_printf_i>
 800dd60:	e7eb      	b.n	800dd3a <_svfiprintf_r+0x1c2>
 800dd62:	bf00      	nop
 800dd64:	08019048 	.word	0x08019048
 800dd68:	0801904e 	.word	0x0801904e
 800dd6c:	08019052 	.word	0x08019052
 800dd70:	00000000 	.word	0x00000000
 800dd74:	0801499d 	.word	0x0801499d

0800dd78 <_vfiprintf_r>:
 800dd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7c:	460d      	mov	r5, r1
 800dd7e:	b09d      	sub	sp, #116	; 0x74
 800dd80:	4614      	mov	r4, r2
 800dd82:	4698      	mov	r8, r3
 800dd84:	4606      	mov	r6, r0
 800dd86:	b118      	cbz	r0, 800dd90 <_vfiprintf_r+0x18>
 800dd88:	6983      	ldr	r3, [r0, #24]
 800dd8a:	b90b      	cbnz	r3, 800dd90 <_vfiprintf_r+0x18>
 800dd8c:	f7ff fe6a 	bl	800da64 <__sinit>
 800dd90:	4b89      	ldr	r3, [pc, #548]	; (800dfb8 <_vfiprintf_r+0x240>)
 800dd92:	429d      	cmp	r5, r3
 800dd94:	d11b      	bne.n	800ddce <_vfiprintf_r+0x56>
 800dd96:	6875      	ldr	r5, [r6, #4]
 800dd98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd9a:	07d9      	lsls	r1, r3, #31
 800dd9c:	d405      	bmi.n	800ddaa <_vfiprintf_r+0x32>
 800dd9e:	89ab      	ldrh	r3, [r5, #12]
 800dda0:	059a      	lsls	r2, r3, #22
 800dda2:	d402      	bmi.n	800ddaa <_vfiprintf_r+0x32>
 800dda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dda6:	f002 fbcc 	bl	8010542 <__retarget_lock_acquire_recursive>
 800ddaa:	89ab      	ldrh	r3, [r5, #12]
 800ddac:	071b      	lsls	r3, r3, #28
 800ddae:	d501      	bpl.n	800ddb4 <_vfiprintf_r+0x3c>
 800ddb0:	692b      	ldr	r3, [r5, #16]
 800ddb2:	b9eb      	cbnz	r3, 800ddf0 <_vfiprintf_r+0x78>
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f000 fa98 	bl	800e2ec <__swsetup_r>
 800ddbc:	b1c0      	cbz	r0, 800ddf0 <_vfiprintf_r+0x78>
 800ddbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddc0:	07dc      	lsls	r4, r3, #31
 800ddc2:	d50e      	bpl.n	800dde2 <_vfiprintf_r+0x6a>
 800ddc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddc8:	b01d      	add	sp, #116	; 0x74
 800ddca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddce:	4b7b      	ldr	r3, [pc, #492]	; (800dfbc <_vfiprintf_r+0x244>)
 800ddd0:	429d      	cmp	r5, r3
 800ddd2:	d101      	bne.n	800ddd8 <_vfiprintf_r+0x60>
 800ddd4:	68b5      	ldr	r5, [r6, #8]
 800ddd6:	e7df      	b.n	800dd98 <_vfiprintf_r+0x20>
 800ddd8:	4b79      	ldr	r3, [pc, #484]	; (800dfc0 <_vfiprintf_r+0x248>)
 800ddda:	429d      	cmp	r5, r3
 800dddc:	bf08      	it	eq
 800ddde:	68f5      	ldreq	r5, [r6, #12]
 800dde0:	e7da      	b.n	800dd98 <_vfiprintf_r+0x20>
 800dde2:	89ab      	ldrh	r3, [r5, #12]
 800dde4:	0598      	lsls	r0, r3, #22
 800dde6:	d4ed      	bmi.n	800ddc4 <_vfiprintf_r+0x4c>
 800dde8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddea:	f002 fbb0 	bl	801054e <__retarget_lock_release_recursive>
 800ddee:	e7e9      	b.n	800ddc4 <_vfiprintf_r+0x4c>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	9309      	str	r3, [sp, #36]	; 0x24
 800ddf4:	2320      	movs	r3, #32
 800ddf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddfe:	2330      	movs	r3, #48	; 0x30
 800de00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfc4 <_vfiprintf_r+0x24c>
 800de04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de08:	f04f 0901 	mov.w	r9, #1
 800de0c:	4623      	mov	r3, r4
 800de0e:	469a      	mov	sl, r3
 800de10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de14:	b10a      	cbz	r2, 800de1a <_vfiprintf_r+0xa2>
 800de16:	2a25      	cmp	r2, #37	; 0x25
 800de18:	d1f9      	bne.n	800de0e <_vfiprintf_r+0x96>
 800de1a:	ebba 0b04 	subs.w	fp, sl, r4
 800de1e:	d00b      	beq.n	800de38 <_vfiprintf_r+0xc0>
 800de20:	465b      	mov	r3, fp
 800de22:	4622      	mov	r2, r4
 800de24:	4629      	mov	r1, r5
 800de26:	4630      	mov	r0, r6
 800de28:	f006 fe28 	bl	8014a7c <__sfputs_r>
 800de2c:	3001      	adds	r0, #1
 800de2e:	f000 80aa 	beq.w	800df86 <_vfiprintf_r+0x20e>
 800de32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de34:	445a      	add	r2, fp
 800de36:	9209      	str	r2, [sp, #36]	; 0x24
 800de38:	f89a 3000 	ldrb.w	r3, [sl]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f000 80a2 	beq.w	800df86 <_vfiprintf_r+0x20e>
 800de42:	2300      	movs	r3, #0
 800de44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de4c:	f10a 0a01 	add.w	sl, sl, #1
 800de50:	9304      	str	r3, [sp, #16]
 800de52:	9307      	str	r3, [sp, #28]
 800de54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de58:	931a      	str	r3, [sp, #104]	; 0x68
 800de5a:	4654      	mov	r4, sl
 800de5c:	2205      	movs	r2, #5
 800de5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de62:	4858      	ldr	r0, [pc, #352]	; (800dfc4 <_vfiprintf_r+0x24c>)
 800de64:	f7f2 f994 	bl	8000190 <memchr>
 800de68:	9a04      	ldr	r2, [sp, #16]
 800de6a:	b9d8      	cbnz	r0, 800dea4 <_vfiprintf_r+0x12c>
 800de6c:	06d1      	lsls	r1, r2, #27
 800de6e:	bf44      	itt	mi
 800de70:	2320      	movmi	r3, #32
 800de72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de76:	0713      	lsls	r3, r2, #28
 800de78:	bf44      	itt	mi
 800de7a:	232b      	movmi	r3, #43	; 0x2b
 800de7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de80:	f89a 3000 	ldrb.w	r3, [sl]
 800de84:	2b2a      	cmp	r3, #42	; 0x2a
 800de86:	d015      	beq.n	800deb4 <_vfiprintf_r+0x13c>
 800de88:	9a07      	ldr	r2, [sp, #28]
 800de8a:	4654      	mov	r4, sl
 800de8c:	2000      	movs	r0, #0
 800de8e:	f04f 0c0a 	mov.w	ip, #10
 800de92:	4621      	mov	r1, r4
 800de94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de98:	3b30      	subs	r3, #48	; 0x30
 800de9a:	2b09      	cmp	r3, #9
 800de9c:	d94e      	bls.n	800df3c <_vfiprintf_r+0x1c4>
 800de9e:	b1b0      	cbz	r0, 800dece <_vfiprintf_r+0x156>
 800dea0:	9207      	str	r2, [sp, #28]
 800dea2:	e014      	b.n	800dece <_vfiprintf_r+0x156>
 800dea4:	eba0 0308 	sub.w	r3, r0, r8
 800dea8:	fa09 f303 	lsl.w	r3, r9, r3
 800deac:	4313      	orrs	r3, r2
 800deae:	9304      	str	r3, [sp, #16]
 800deb0:	46a2      	mov	sl, r4
 800deb2:	e7d2      	b.n	800de5a <_vfiprintf_r+0xe2>
 800deb4:	9b03      	ldr	r3, [sp, #12]
 800deb6:	1d19      	adds	r1, r3, #4
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	9103      	str	r1, [sp, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	bfbb      	ittet	lt
 800dec0:	425b      	neglt	r3, r3
 800dec2:	f042 0202 	orrlt.w	r2, r2, #2
 800dec6:	9307      	strge	r3, [sp, #28]
 800dec8:	9307      	strlt	r3, [sp, #28]
 800deca:	bfb8      	it	lt
 800decc:	9204      	strlt	r2, [sp, #16]
 800dece:	7823      	ldrb	r3, [r4, #0]
 800ded0:	2b2e      	cmp	r3, #46	; 0x2e
 800ded2:	d10c      	bne.n	800deee <_vfiprintf_r+0x176>
 800ded4:	7863      	ldrb	r3, [r4, #1]
 800ded6:	2b2a      	cmp	r3, #42	; 0x2a
 800ded8:	d135      	bne.n	800df46 <_vfiprintf_r+0x1ce>
 800deda:	9b03      	ldr	r3, [sp, #12]
 800dedc:	1d1a      	adds	r2, r3, #4
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	9203      	str	r2, [sp, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	bfb8      	it	lt
 800dee6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800deea:	3402      	adds	r4, #2
 800deec:	9305      	str	r3, [sp, #20]
 800deee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800dfc8 <_vfiprintf_r+0x250>
 800def2:	7821      	ldrb	r1, [r4, #0]
 800def4:	2203      	movs	r2, #3
 800def6:	4650      	mov	r0, sl
 800def8:	f7f2 f94a 	bl	8000190 <memchr>
 800defc:	b140      	cbz	r0, 800df10 <_vfiprintf_r+0x198>
 800defe:	2340      	movs	r3, #64	; 0x40
 800df00:	eba0 000a 	sub.w	r0, r0, sl
 800df04:	fa03 f000 	lsl.w	r0, r3, r0
 800df08:	9b04      	ldr	r3, [sp, #16]
 800df0a:	4303      	orrs	r3, r0
 800df0c:	3401      	adds	r4, #1
 800df0e:	9304      	str	r3, [sp, #16]
 800df10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df14:	482d      	ldr	r0, [pc, #180]	; (800dfcc <_vfiprintf_r+0x254>)
 800df16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df1a:	2206      	movs	r2, #6
 800df1c:	f7f2 f938 	bl	8000190 <memchr>
 800df20:	2800      	cmp	r0, #0
 800df22:	d03f      	beq.n	800dfa4 <_vfiprintf_r+0x22c>
 800df24:	4b2a      	ldr	r3, [pc, #168]	; (800dfd0 <_vfiprintf_r+0x258>)
 800df26:	bb1b      	cbnz	r3, 800df70 <_vfiprintf_r+0x1f8>
 800df28:	9b03      	ldr	r3, [sp, #12]
 800df2a:	3307      	adds	r3, #7
 800df2c:	f023 0307 	bic.w	r3, r3, #7
 800df30:	3308      	adds	r3, #8
 800df32:	9303      	str	r3, [sp, #12]
 800df34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df36:	443b      	add	r3, r7
 800df38:	9309      	str	r3, [sp, #36]	; 0x24
 800df3a:	e767      	b.n	800de0c <_vfiprintf_r+0x94>
 800df3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800df40:	460c      	mov	r4, r1
 800df42:	2001      	movs	r0, #1
 800df44:	e7a5      	b.n	800de92 <_vfiprintf_r+0x11a>
 800df46:	2300      	movs	r3, #0
 800df48:	3401      	adds	r4, #1
 800df4a:	9305      	str	r3, [sp, #20]
 800df4c:	4619      	mov	r1, r3
 800df4e:	f04f 0c0a 	mov.w	ip, #10
 800df52:	4620      	mov	r0, r4
 800df54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df58:	3a30      	subs	r2, #48	; 0x30
 800df5a:	2a09      	cmp	r2, #9
 800df5c:	d903      	bls.n	800df66 <_vfiprintf_r+0x1ee>
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d0c5      	beq.n	800deee <_vfiprintf_r+0x176>
 800df62:	9105      	str	r1, [sp, #20]
 800df64:	e7c3      	b.n	800deee <_vfiprintf_r+0x176>
 800df66:	fb0c 2101 	mla	r1, ip, r1, r2
 800df6a:	4604      	mov	r4, r0
 800df6c:	2301      	movs	r3, #1
 800df6e:	e7f0      	b.n	800df52 <_vfiprintf_r+0x1da>
 800df70:	ab03      	add	r3, sp, #12
 800df72:	9300      	str	r3, [sp, #0]
 800df74:	462a      	mov	r2, r5
 800df76:	4b17      	ldr	r3, [pc, #92]	; (800dfd4 <_vfiprintf_r+0x25c>)
 800df78:	a904      	add	r1, sp, #16
 800df7a:	4630      	mov	r0, r6
 800df7c:	f3af 8000 	nop.w
 800df80:	4607      	mov	r7, r0
 800df82:	1c78      	adds	r0, r7, #1
 800df84:	d1d6      	bne.n	800df34 <_vfiprintf_r+0x1bc>
 800df86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df88:	07d9      	lsls	r1, r3, #31
 800df8a:	d405      	bmi.n	800df98 <_vfiprintf_r+0x220>
 800df8c:	89ab      	ldrh	r3, [r5, #12]
 800df8e:	059a      	lsls	r2, r3, #22
 800df90:	d402      	bmi.n	800df98 <_vfiprintf_r+0x220>
 800df92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df94:	f002 fadb 	bl	801054e <__retarget_lock_release_recursive>
 800df98:	89ab      	ldrh	r3, [r5, #12]
 800df9a:	065b      	lsls	r3, r3, #25
 800df9c:	f53f af12 	bmi.w	800ddc4 <_vfiprintf_r+0x4c>
 800dfa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfa2:	e711      	b.n	800ddc8 <_vfiprintf_r+0x50>
 800dfa4:	ab03      	add	r3, sp, #12
 800dfa6:	9300      	str	r3, [sp, #0]
 800dfa8:	462a      	mov	r2, r5
 800dfaa:	4b0a      	ldr	r3, [pc, #40]	; (800dfd4 <_vfiprintf_r+0x25c>)
 800dfac:	a904      	add	r1, sp, #16
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f000 f812 	bl	800dfd8 <_printf_i>
 800dfb4:	e7e4      	b.n	800df80 <_vfiprintf_r+0x208>
 800dfb6:	bf00      	nop
 800dfb8:	08016170 	.word	0x08016170
 800dfbc:	08016190 	.word	0x08016190
 800dfc0:	08016150 	.word	0x08016150
 800dfc4:	08019048 	.word	0x08019048
 800dfc8:	0801904e 	.word	0x0801904e
 800dfcc:	08019052 	.word	0x08019052
 800dfd0:	00000000 	.word	0x00000000
 800dfd4:	08014a7d 	.word	0x08014a7d

0800dfd8 <_printf_i>:
 800dfd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfdc:	7e0f      	ldrb	r7, [r1, #24]
 800dfde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dfe0:	2f78      	cmp	r7, #120	; 0x78
 800dfe2:	4691      	mov	r9, r2
 800dfe4:	4680      	mov	r8, r0
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	469a      	mov	sl, r3
 800dfea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dfee:	d807      	bhi.n	800e000 <_printf_i+0x28>
 800dff0:	2f62      	cmp	r7, #98	; 0x62
 800dff2:	d80a      	bhi.n	800e00a <_printf_i+0x32>
 800dff4:	2f00      	cmp	r7, #0
 800dff6:	f000 80d8 	beq.w	800e1aa <_printf_i+0x1d2>
 800dffa:	2f58      	cmp	r7, #88	; 0x58
 800dffc:	f000 80a3 	beq.w	800e146 <_printf_i+0x16e>
 800e000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e008:	e03a      	b.n	800e080 <_printf_i+0xa8>
 800e00a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e00e:	2b15      	cmp	r3, #21
 800e010:	d8f6      	bhi.n	800e000 <_printf_i+0x28>
 800e012:	a101      	add	r1, pc, #4	; (adr r1, 800e018 <_printf_i+0x40>)
 800e014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e018:	0800e071 	.word	0x0800e071
 800e01c:	0800e085 	.word	0x0800e085
 800e020:	0800e001 	.word	0x0800e001
 800e024:	0800e001 	.word	0x0800e001
 800e028:	0800e001 	.word	0x0800e001
 800e02c:	0800e001 	.word	0x0800e001
 800e030:	0800e085 	.word	0x0800e085
 800e034:	0800e001 	.word	0x0800e001
 800e038:	0800e001 	.word	0x0800e001
 800e03c:	0800e001 	.word	0x0800e001
 800e040:	0800e001 	.word	0x0800e001
 800e044:	0800e191 	.word	0x0800e191
 800e048:	0800e0b5 	.word	0x0800e0b5
 800e04c:	0800e173 	.word	0x0800e173
 800e050:	0800e001 	.word	0x0800e001
 800e054:	0800e001 	.word	0x0800e001
 800e058:	0800e1b3 	.word	0x0800e1b3
 800e05c:	0800e001 	.word	0x0800e001
 800e060:	0800e0b5 	.word	0x0800e0b5
 800e064:	0800e001 	.word	0x0800e001
 800e068:	0800e001 	.word	0x0800e001
 800e06c:	0800e17b 	.word	0x0800e17b
 800e070:	682b      	ldr	r3, [r5, #0]
 800e072:	1d1a      	adds	r2, r3, #4
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	602a      	str	r2, [r5, #0]
 800e078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e07c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e080:	2301      	movs	r3, #1
 800e082:	e0a3      	b.n	800e1cc <_printf_i+0x1f4>
 800e084:	6820      	ldr	r0, [r4, #0]
 800e086:	6829      	ldr	r1, [r5, #0]
 800e088:	0606      	lsls	r6, r0, #24
 800e08a:	f101 0304 	add.w	r3, r1, #4
 800e08e:	d50a      	bpl.n	800e0a6 <_printf_i+0xce>
 800e090:	680e      	ldr	r6, [r1, #0]
 800e092:	602b      	str	r3, [r5, #0]
 800e094:	2e00      	cmp	r6, #0
 800e096:	da03      	bge.n	800e0a0 <_printf_i+0xc8>
 800e098:	232d      	movs	r3, #45	; 0x2d
 800e09a:	4276      	negs	r6, r6
 800e09c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0a0:	485e      	ldr	r0, [pc, #376]	; (800e21c <_printf_i+0x244>)
 800e0a2:	230a      	movs	r3, #10
 800e0a4:	e019      	b.n	800e0da <_printf_i+0x102>
 800e0a6:	680e      	ldr	r6, [r1, #0]
 800e0a8:	602b      	str	r3, [r5, #0]
 800e0aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e0ae:	bf18      	it	ne
 800e0b0:	b236      	sxthne	r6, r6
 800e0b2:	e7ef      	b.n	800e094 <_printf_i+0xbc>
 800e0b4:	682b      	ldr	r3, [r5, #0]
 800e0b6:	6820      	ldr	r0, [r4, #0]
 800e0b8:	1d19      	adds	r1, r3, #4
 800e0ba:	6029      	str	r1, [r5, #0]
 800e0bc:	0601      	lsls	r1, r0, #24
 800e0be:	d501      	bpl.n	800e0c4 <_printf_i+0xec>
 800e0c0:	681e      	ldr	r6, [r3, #0]
 800e0c2:	e002      	b.n	800e0ca <_printf_i+0xf2>
 800e0c4:	0646      	lsls	r6, r0, #25
 800e0c6:	d5fb      	bpl.n	800e0c0 <_printf_i+0xe8>
 800e0c8:	881e      	ldrh	r6, [r3, #0]
 800e0ca:	4854      	ldr	r0, [pc, #336]	; (800e21c <_printf_i+0x244>)
 800e0cc:	2f6f      	cmp	r7, #111	; 0x6f
 800e0ce:	bf0c      	ite	eq
 800e0d0:	2308      	moveq	r3, #8
 800e0d2:	230a      	movne	r3, #10
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e0da:	6865      	ldr	r5, [r4, #4]
 800e0dc:	60a5      	str	r5, [r4, #8]
 800e0de:	2d00      	cmp	r5, #0
 800e0e0:	bfa2      	ittt	ge
 800e0e2:	6821      	ldrge	r1, [r4, #0]
 800e0e4:	f021 0104 	bicge.w	r1, r1, #4
 800e0e8:	6021      	strge	r1, [r4, #0]
 800e0ea:	b90e      	cbnz	r6, 800e0f0 <_printf_i+0x118>
 800e0ec:	2d00      	cmp	r5, #0
 800e0ee:	d04d      	beq.n	800e18c <_printf_i+0x1b4>
 800e0f0:	4615      	mov	r5, r2
 800e0f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e0f6:	fb03 6711 	mls	r7, r3, r1, r6
 800e0fa:	5dc7      	ldrb	r7, [r0, r7]
 800e0fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e100:	4637      	mov	r7, r6
 800e102:	42bb      	cmp	r3, r7
 800e104:	460e      	mov	r6, r1
 800e106:	d9f4      	bls.n	800e0f2 <_printf_i+0x11a>
 800e108:	2b08      	cmp	r3, #8
 800e10a:	d10b      	bne.n	800e124 <_printf_i+0x14c>
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	07de      	lsls	r6, r3, #31
 800e110:	d508      	bpl.n	800e124 <_printf_i+0x14c>
 800e112:	6923      	ldr	r3, [r4, #16]
 800e114:	6861      	ldr	r1, [r4, #4]
 800e116:	4299      	cmp	r1, r3
 800e118:	bfde      	ittt	le
 800e11a:	2330      	movle	r3, #48	; 0x30
 800e11c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e120:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e124:	1b52      	subs	r2, r2, r5
 800e126:	6122      	str	r2, [r4, #16]
 800e128:	f8cd a000 	str.w	sl, [sp]
 800e12c:	464b      	mov	r3, r9
 800e12e:	aa03      	add	r2, sp, #12
 800e130:	4621      	mov	r1, r4
 800e132:	4640      	mov	r0, r8
 800e134:	f006 fcb4 	bl	8014aa0 <_printf_common>
 800e138:	3001      	adds	r0, #1
 800e13a:	d14c      	bne.n	800e1d6 <_printf_i+0x1fe>
 800e13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e140:	b004      	add	sp, #16
 800e142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e146:	4835      	ldr	r0, [pc, #212]	; (800e21c <_printf_i+0x244>)
 800e148:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e14c:	6829      	ldr	r1, [r5, #0]
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	f851 6b04 	ldr.w	r6, [r1], #4
 800e154:	6029      	str	r1, [r5, #0]
 800e156:	061d      	lsls	r5, r3, #24
 800e158:	d514      	bpl.n	800e184 <_printf_i+0x1ac>
 800e15a:	07df      	lsls	r7, r3, #31
 800e15c:	bf44      	itt	mi
 800e15e:	f043 0320 	orrmi.w	r3, r3, #32
 800e162:	6023      	strmi	r3, [r4, #0]
 800e164:	b91e      	cbnz	r6, 800e16e <_printf_i+0x196>
 800e166:	6823      	ldr	r3, [r4, #0]
 800e168:	f023 0320 	bic.w	r3, r3, #32
 800e16c:	6023      	str	r3, [r4, #0]
 800e16e:	2310      	movs	r3, #16
 800e170:	e7b0      	b.n	800e0d4 <_printf_i+0xfc>
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	f043 0320 	orr.w	r3, r3, #32
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	2378      	movs	r3, #120	; 0x78
 800e17c:	4828      	ldr	r0, [pc, #160]	; (800e220 <_printf_i+0x248>)
 800e17e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e182:	e7e3      	b.n	800e14c <_printf_i+0x174>
 800e184:	0659      	lsls	r1, r3, #25
 800e186:	bf48      	it	mi
 800e188:	b2b6      	uxthmi	r6, r6
 800e18a:	e7e6      	b.n	800e15a <_printf_i+0x182>
 800e18c:	4615      	mov	r5, r2
 800e18e:	e7bb      	b.n	800e108 <_printf_i+0x130>
 800e190:	682b      	ldr	r3, [r5, #0]
 800e192:	6826      	ldr	r6, [r4, #0]
 800e194:	6961      	ldr	r1, [r4, #20]
 800e196:	1d18      	adds	r0, r3, #4
 800e198:	6028      	str	r0, [r5, #0]
 800e19a:	0635      	lsls	r5, r6, #24
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	d501      	bpl.n	800e1a4 <_printf_i+0x1cc>
 800e1a0:	6019      	str	r1, [r3, #0]
 800e1a2:	e002      	b.n	800e1aa <_printf_i+0x1d2>
 800e1a4:	0670      	lsls	r0, r6, #25
 800e1a6:	d5fb      	bpl.n	800e1a0 <_printf_i+0x1c8>
 800e1a8:	8019      	strh	r1, [r3, #0]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	6123      	str	r3, [r4, #16]
 800e1ae:	4615      	mov	r5, r2
 800e1b0:	e7ba      	b.n	800e128 <_printf_i+0x150>
 800e1b2:	682b      	ldr	r3, [r5, #0]
 800e1b4:	1d1a      	adds	r2, r3, #4
 800e1b6:	602a      	str	r2, [r5, #0]
 800e1b8:	681d      	ldr	r5, [r3, #0]
 800e1ba:	6862      	ldr	r2, [r4, #4]
 800e1bc:	2100      	movs	r1, #0
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f7f1 ffe6 	bl	8000190 <memchr>
 800e1c4:	b108      	cbz	r0, 800e1ca <_printf_i+0x1f2>
 800e1c6:	1b40      	subs	r0, r0, r5
 800e1c8:	6060      	str	r0, [r4, #4]
 800e1ca:	6863      	ldr	r3, [r4, #4]
 800e1cc:	6123      	str	r3, [r4, #16]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1d4:	e7a8      	b.n	800e128 <_printf_i+0x150>
 800e1d6:	6923      	ldr	r3, [r4, #16]
 800e1d8:	462a      	mov	r2, r5
 800e1da:	4649      	mov	r1, r9
 800e1dc:	4640      	mov	r0, r8
 800e1de:	47d0      	blx	sl
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	d0ab      	beq.n	800e13c <_printf_i+0x164>
 800e1e4:	6823      	ldr	r3, [r4, #0]
 800e1e6:	079b      	lsls	r3, r3, #30
 800e1e8:	d413      	bmi.n	800e212 <_printf_i+0x23a>
 800e1ea:	68e0      	ldr	r0, [r4, #12]
 800e1ec:	9b03      	ldr	r3, [sp, #12]
 800e1ee:	4298      	cmp	r0, r3
 800e1f0:	bfb8      	it	lt
 800e1f2:	4618      	movlt	r0, r3
 800e1f4:	e7a4      	b.n	800e140 <_printf_i+0x168>
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	4632      	mov	r2, r6
 800e1fa:	4649      	mov	r1, r9
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	47d0      	blx	sl
 800e200:	3001      	adds	r0, #1
 800e202:	d09b      	beq.n	800e13c <_printf_i+0x164>
 800e204:	3501      	adds	r5, #1
 800e206:	68e3      	ldr	r3, [r4, #12]
 800e208:	9903      	ldr	r1, [sp, #12]
 800e20a:	1a5b      	subs	r3, r3, r1
 800e20c:	42ab      	cmp	r3, r5
 800e20e:	dcf2      	bgt.n	800e1f6 <_printf_i+0x21e>
 800e210:	e7eb      	b.n	800e1ea <_printf_i+0x212>
 800e212:	2500      	movs	r5, #0
 800e214:	f104 0619 	add.w	r6, r4, #25
 800e218:	e7f5      	b.n	800e206 <_printf_i+0x22e>
 800e21a:	bf00      	nop
 800e21c:	08019059 	.word	0x08019059
 800e220:	0801906a 	.word	0x0801906a

0800e224 <__swbuf_r>:
 800e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e226:	460e      	mov	r6, r1
 800e228:	4614      	mov	r4, r2
 800e22a:	4605      	mov	r5, r0
 800e22c:	b118      	cbz	r0, 800e236 <__swbuf_r+0x12>
 800e22e:	6983      	ldr	r3, [r0, #24]
 800e230:	b90b      	cbnz	r3, 800e236 <__swbuf_r+0x12>
 800e232:	f7ff fc17 	bl	800da64 <__sinit>
 800e236:	4b21      	ldr	r3, [pc, #132]	; (800e2bc <__swbuf_r+0x98>)
 800e238:	429c      	cmp	r4, r3
 800e23a:	d12b      	bne.n	800e294 <__swbuf_r+0x70>
 800e23c:	686c      	ldr	r4, [r5, #4]
 800e23e:	69a3      	ldr	r3, [r4, #24]
 800e240:	60a3      	str	r3, [r4, #8]
 800e242:	89a3      	ldrh	r3, [r4, #12]
 800e244:	071a      	lsls	r2, r3, #28
 800e246:	d52f      	bpl.n	800e2a8 <__swbuf_r+0x84>
 800e248:	6923      	ldr	r3, [r4, #16]
 800e24a:	b36b      	cbz	r3, 800e2a8 <__swbuf_r+0x84>
 800e24c:	6923      	ldr	r3, [r4, #16]
 800e24e:	6820      	ldr	r0, [r4, #0]
 800e250:	1ac0      	subs	r0, r0, r3
 800e252:	6963      	ldr	r3, [r4, #20]
 800e254:	b2f6      	uxtb	r6, r6
 800e256:	4283      	cmp	r3, r0
 800e258:	4637      	mov	r7, r6
 800e25a:	dc04      	bgt.n	800e266 <__swbuf_r+0x42>
 800e25c:	4621      	mov	r1, r4
 800e25e:	4628      	mov	r0, r5
 800e260:	f000 f944 	bl	800e4ec <_fflush_r>
 800e264:	bb30      	cbnz	r0, 800e2b4 <__swbuf_r+0x90>
 800e266:	68a3      	ldr	r3, [r4, #8]
 800e268:	3b01      	subs	r3, #1
 800e26a:	60a3      	str	r3, [r4, #8]
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	6022      	str	r2, [r4, #0]
 800e272:	701e      	strb	r6, [r3, #0]
 800e274:	6963      	ldr	r3, [r4, #20]
 800e276:	3001      	adds	r0, #1
 800e278:	4283      	cmp	r3, r0
 800e27a:	d004      	beq.n	800e286 <__swbuf_r+0x62>
 800e27c:	89a3      	ldrh	r3, [r4, #12]
 800e27e:	07db      	lsls	r3, r3, #31
 800e280:	d506      	bpl.n	800e290 <__swbuf_r+0x6c>
 800e282:	2e0a      	cmp	r6, #10
 800e284:	d104      	bne.n	800e290 <__swbuf_r+0x6c>
 800e286:	4621      	mov	r1, r4
 800e288:	4628      	mov	r0, r5
 800e28a:	f000 f92f 	bl	800e4ec <_fflush_r>
 800e28e:	b988      	cbnz	r0, 800e2b4 <__swbuf_r+0x90>
 800e290:	4638      	mov	r0, r7
 800e292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e294:	4b0a      	ldr	r3, [pc, #40]	; (800e2c0 <__swbuf_r+0x9c>)
 800e296:	429c      	cmp	r4, r3
 800e298:	d101      	bne.n	800e29e <__swbuf_r+0x7a>
 800e29a:	68ac      	ldr	r4, [r5, #8]
 800e29c:	e7cf      	b.n	800e23e <__swbuf_r+0x1a>
 800e29e:	4b09      	ldr	r3, [pc, #36]	; (800e2c4 <__swbuf_r+0xa0>)
 800e2a0:	429c      	cmp	r4, r3
 800e2a2:	bf08      	it	eq
 800e2a4:	68ec      	ldreq	r4, [r5, #12]
 800e2a6:	e7ca      	b.n	800e23e <__swbuf_r+0x1a>
 800e2a8:	4621      	mov	r1, r4
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	f000 f81e 	bl	800e2ec <__swsetup_r>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d0cb      	beq.n	800e24c <__swbuf_r+0x28>
 800e2b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e2b8:	e7ea      	b.n	800e290 <__swbuf_r+0x6c>
 800e2ba:	bf00      	nop
 800e2bc:	08016170 	.word	0x08016170
 800e2c0:	08016190 	.word	0x08016190
 800e2c4:	08016150 	.word	0x08016150

0800e2c8 <_write_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	4d07      	ldr	r5, [pc, #28]	; (800e2e8 <_write_r+0x20>)
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	4608      	mov	r0, r1
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	602a      	str	r2, [r5, #0]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	f002 f916 	bl	8010508 <_write>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	d102      	bne.n	800e2e6 <_write_r+0x1e>
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	b103      	cbz	r3, 800e2e6 <_write_r+0x1e>
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	2000256c 	.word	0x2000256c

0800e2ec <__swsetup_r>:
 800e2ec:	4b32      	ldr	r3, [pc, #200]	; (800e3b8 <__swsetup_r+0xcc>)
 800e2ee:	b570      	push	{r4, r5, r6, lr}
 800e2f0:	681d      	ldr	r5, [r3, #0]
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	460c      	mov	r4, r1
 800e2f6:	b125      	cbz	r5, 800e302 <__swsetup_r+0x16>
 800e2f8:	69ab      	ldr	r3, [r5, #24]
 800e2fa:	b913      	cbnz	r3, 800e302 <__swsetup_r+0x16>
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	f7ff fbb1 	bl	800da64 <__sinit>
 800e302:	4b2e      	ldr	r3, [pc, #184]	; (800e3bc <__swsetup_r+0xd0>)
 800e304:	429c      	cmp	r4, r3
 800e306:	d10f      	bne.n	800e328 <__swsetup_r+0x3c>
 800e308:	686c      	ldr	r4, [r5, #4]
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e310:	0719      	lsls	r1, r3, #28
 800e312:	d42c      	bmi.n	800e36e <__swsetup_r+0x82>
 800e314:	06dd      	lsls	r5, r3, #27
 800e316:	d411      	bmi.n	800e33c <__swsetup_r+0x50>
 800e318:	2309      	movs	r3, #9
 800e31a:	6033      	str	r3, [r6, #0]
 800e31c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e320:	81a3      	strh	r3, [r4, #12]
 800e322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e326:	e03e      	b.n	800e3a6 <__swsetup_r+0xba>
 800e328:	4b25      	ldr	r3, [pc, #148]	; (800e3c0 <__swsetup_r+0xd4>)
 800e32a:	429c      	cmp	r4, r3
 800e32c:	d101      	bne.n	800e332 <__swsetup_r+0x46>
 800e32e:	68ac      	ldr	r4, [r5, #8]
 800e330:	e7eb      	b.n	800e30a <__swsetup_r+0x1e>
 800e332:	4b24      	ldr	r3, [pc, #144]	; (800e3c4 <__swsetup_r+0xd8>)
 800e334:	429c      	cmp	r4, r3
 800e336:	bf08      	it	eq
 800e338:	68ec      	ldreq	r4, [r5, #12]
 800e33a:	e7e6      	b.n	800e30a <__swsetup_r+0x1e>
 800e33c:	0758      	lsls	r0, r3, #29
 800e33e:	d512      	bpl.n	800e366 <__swsetup_r+0x7a>
 800e340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e342:	b141      	cbz	r1, 800e356 <__swsetup_r+0x6a>
 800e344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e348:	4299      	cmp	r1, r3
 800e34a:	d002      	beq.n	800e352 <__swsetup_r+0x66>
 800e34c:	4630      	mov	r0, r6
 800e34e:	f7ff f945 	bl	800d5dc <_free_r>
 800e352:	2300      	movs	r3, #0
 800e354:	6363      	str	r3, [r4, #52]	; 0x34
 800e356:	89a3      	ldrh	r3, [r4, #12]
 800e358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e35c:	81a3      	strh	r3, [r4, #12]
 800e35e:	2300      	movs	r3, #0
 800e360:	6063      	str	r3, [r4, #4]
 800e362:	6923      	ldr	r3, [r4, #16]
 800e364:	6023      	str	r3, [r4, #0]
 800e366:	89a3      	ldrh	r3, [r4, #12]
 800e368:	f043 0308 	orr.w	r3, r3, #8
 800e36c:	81a3      	strh	r3, [r4, #12]
 800e36e:	6923      	ldr	r3, [r4, #16]
 800e370:	b94b      	cbnz	r3, 800e386 <__swsetup_r+0x9a>
 800e372:	89a3      	ldrh	r3, [r4, #12]
 800e374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e37c:	d003      	beq.n	800e386 <__swsetup_r+0x9a>
 800e37e:	4621      	mov	r1, r4
 800e380:	4630      	mov	r0, r6
 800e382:	f000 f901 	bl	800e588 <__smakebuf_r>
 800e386:	89a0      	ldrh	r0, [r4, #12]
 800e388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e38c:	f010 0301 	ands.w	r3, r0, #1
 800e390:	d00a      	beq.n	800e3a8 <__swsetup_r+0xbc>
 800e392:	2300      	movs	r3, #0
 800e394:	60a3      	str	r3, [r4, #8]
 800e396:	6963      	ldr	r3, [r4, #20]
 800e398:	425b      	negs	r3, r3
 800e39a:	61a3      	str	r3, [r4, #24]
 800e39c:	6923      	ldr	r3, [r4, #16]
 800e39e:	b943      	cbnz	r3, 800e3b2 <__swsetup_r+0xc6>
 800e3a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3a4:	d1ba      	bne.n	800e31c <__swsetup_r+0x30>
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}
 800e3a8:	0781      	lsls	r1, r0, #30
 800e3aa:	bf58      	it	pl
 800e3ac:	6963      	ldrpl	r3, [r4, #20]
 800e3ae:	60a3      	str	r3, [r4, #8]
 800e3b0:	e7f4      	b.n	800e39c <__swsetup_r+0xb0>
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	e7f7      	b.n	800e3a6 <__swsetup_r+0xba>
 800e3b6:	bf00      	nop
 800e3b8:	2000031c 	.word	0x2000031c
 800e3bc:	08016170 	.word	0x08016170
 800e3c0:	08016190 	.word	0x08016190
 800e3c4:	08016150 	.word	0x08016150

0800e3c8 <_close_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4d06      	ldr	r5, [pc, #24]	; (800e3e4 <_close_r+0x1c>)
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	602b      	str	r3, [r5, #0]
 800e3d4:	f002 f89c 	bl	8010510 <_close>
 800e3d8:	1c43      	adds	r3, r0, #1
 800e3da:	d102      	bne.n	800e3e2 <_close_r+0x1a>
 800e3dc:	682b      	ldr	r3, [r5, #0]
 800e3de:	b103      	cbz	r3, 800e3e2 <_close_r+0x1a>
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	bd38      	pop	{r3, r4, r5, pc}
 800e3e4:	2000256c 	.word	0x2000256c

0800e3e8 <__sflush_r>:
 800e3e8:	898a      	ldrh	r2, [r1, #12]
 800e3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	0710      	lsls	r0, r2, #28
 800e3f0:	460c      	mov	r4, r1
 800e3f2:	d457      	bmi.n	800e4a4 <__sflush_r+0xbc>
 800e3f4:	684b      	ldr	r3, [r1, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	dc04      	bgt.n	800e404 <__sflush_r+0x1c>
 800e3fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	dc01      	bgt.n	800e404 <__sflush_r+0x1c>
 800e400:	2000      	movs	r0, #0
 800e402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e406:	2e00      	cmp	r6, #0
 800e408:	d0fa      	beq.n	800e400 <__sflush_r+0x18>
 800e40a:	2300      	movs	r3, #0
 800e40c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e410:	682f      	ldr	r7, [r5, #0]
 800e412:	602b      	str	r3, [r5, #0]
 800e414:	d032      	beq.n	800e47c <__sflush_r+0x94>
 800e416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e418:	89a3      	ldrh	r3, [r4, #12]
 800e41a:	075a      	lsls	r2, r3, #29
 800e41c:	d505      	bpl.n	800e42a <__sflush_r+0x42>
 800e41e:	6863      	ldr	r3, [r4, #4]
 800e420:	1ac0      	subs	r0, r0, r3
 800e422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e424:	b10b      	cbz	r3, 800e42a <__sflush_r+0x42>
 800e426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e428:	1ac0      	subs	r0, r0, r3
 800e42a:	2300      	movs	r3, #0
 800e42c:	4602      	mov	r2, r0
 800e42e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e430:	6a21      	ldr	r1, [r4, #32]
 800e432:	4628      	mov	r0, r5
 800e434:	47b0      	blx	r6
 800e436:	1c43      	adds	r3, r0, #1
 800e438:	89a3      	ldrh	r3, [r4, #12]
 800e43a:	d106      	bne.n	800e44a <__sflush_r+0x62>
 800e43c:	6829      	ldr	r1, [r5, #0]
 800e43e:	291d      	cmp	r1, #29
 800e440:	d82c      	bhi.n	800e49c <__sflush_r+0xb4>
 800e442:	4a29      	ldr	r2, [pc, #164]	; (800e4e8 <__sflush_r+0x100>)
 800e444:	40ca      	lsrs	r2, r1
 800e446:	07d6      	lsls	r6, r2, #31
 800e448:	d528      	bpl.n	800e49c <__sflush_r+0xb4>
 800e44a:	2200      	movs	r2, #0
 800e44c:	6062      	str	r2, [r4, #4]
 800e44e:	04d9      	lsls	r1, r3, #19
 800e450:	6922      	ldr	r2, [r4, #16]
 800e452:	6022      	str	r2, [r4, #0]
 800e454:	d504      	bpl.n	800e460 <__sflush_r+0x78>
 800e456:	1c42      	adds	r2, r0, #1
 800e458:	d101      	bne.n	800e45e <__sflush_r+0x76>
 800e45a:	682b      	ldr	r3, [r5, #0]
 800e45c:	b903      	cbnz	r3, 800e460 <__sflush_r+0x78>
 800e45e:	6560      	str	r0, [r4, #84]	; 0x54
 800e460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e462:	602f      	str	r7, [r5, #0]
 800e464:	2900      	cmp	r1, #0
 800e466:	d0cb      	beq.n	800e400 <__sflush_r+0x18>
 800e468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e46c:	4299      	cmp	r1, r3
 800e46e:	d002      	beq.n	800e476 <__sflush_r+0x8e>
 800e470:	4628      	mov	r0, r5
 800e472:	f7ff f8b3 	bl	800d5dc <_free_r>
 800e476:	2000      	movs	r0, #0
 800e478:	6360      	str	r0, [r4, #52]	; 0x34
 800e47a:	e7c2      	b.n	800e402 <__sflush_r+0x1a>
 800e47c:	6a21      	ldr	r1, [r4, #32]
 800e47e:	2301      	movs	r3, #1
 800e480:	4628      	mov	r0, r5
 800e482:	47b0      	blx	r6
 800e484:	1c41      	adds	r1, r0, #1
 800e486:	d1c7      	bne.n	800e418 <__sflush_r+0x30>
 800e488:	682b      	ldr	r3, [r5, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d0c4      	beq.n	800e418 <__sflush_r+0x30>
 800e48e:	2b1d      	cmp	r3, #29
 800e490:	d001      	beq.n	800e496 <__sflush_r+0xae>
 800e492:	2b16      	cmp	r3, #22
 800e494:	d101      	bne.n	800e49a <__sflush_r+0xb2>
 800e496:	602f      	str	r7, [r5, #0]
 800e498:	e7b2      	b.n	800e400 <__sflush_r+0x18>
 800e49a:	89a3      	ldrh	r3, [r4, #12]
 800e49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4a0:	81a3      	strh	r3, [r4, #12]
 800e4a2:	e7ae      	b.n	800e402 <__sflush_r+0x1a>
 800e4a4:	690f      	ldr	r7, [r1, #16]
 800e4a6:	2f00      	cmp	r7, #0
 800e4a8:	d0aa      	beq.n	800e400 <__sflush_r+0x18>
 800e4aa:	0793      	lsls	r3, r2, #30
 800e4ac:	680e      	ldr	r6, [r1, #0]
 800e4ae:	bf08      	it	eq
 800e4b0:	694b      	ldreq	r3, [r1, #20]
 800e4b2:	600f      	str	r7, [r1, #0]
 800e4b4:	bf18      	it	ne
 800e4b6:	2300      	movne	r3, #0
 800e4b8:	1bf6      	subs	r6, r6, r7
 800e4ba:	608b      	str	r3, [r1, #8]
 800e4bc:	2e00      	cmp	r6, #0
 800e4be:	dd9f      	ble.n	800e400 <__sflush_r+0x18>
 800e4c0:	6a21      	ldr	r1, [r4, #32]
 800e4c2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e4c6:	4633      	mov	r3, r6
 800e4c8:	463a      	mov	r2, r7
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	47e0      	blx	ip
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	dc06      	bgt.n	800e4e0 <__sflush_r+0xf8>
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4d8:	81a3      	strh	r3, [r4, #12]
 800e4da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4de:	e790      	b.n	800e402 <__sflush_r+0x1a>
 800e4e0:	4407      	add	r7, r0
 800e4e2:	1a36      	subs	r6, r6, r0
 800e4e4:	e7ea      	b.n	800e4bc <__sflush_r+0xd4>
 800e4e6:	bf00      	nop
 800e4e8:	20400001 	.word	0x20400001

0800e4ec <_fflush_r>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	690b      	ldr	r3, [r1, #16]
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	b913      	cbnz	r3, 800e4fc <_fflush_r+0x10>
 800e4f6:	2500      	movs	r5, #0
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	bd38      	pop	{r3, r4, r5, pc}
 800e4fc:	b118      	cbz	r0, 800e506 <_fflush_r+0x1a>
 800e4fe:	6983      	ldr	r3, [r0, #24]
 800e500:	b90b      	cbnz	r3, 800e506 <_fflush_r+0x1a>
 800e502:	f7ff faaf 	bl	800da64 <__sinit>
 800e506:	4b14      	ldr	r3, [pc, #80]	; (800e558 <_fflush_r+0x6c>)
 800e508:	429c      	cmp	r4, r3
 800e50a:	d11b      	bne.n	800e544 <_fflush_r+0x58>
 800e50c:	686c      	ldr	r4, [r5, #4]
 800e50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d0ef      	beq.n	800e4f6 <_fflush_r+0xa>
 800e516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e518:	07d0      	lsls	r0, r2, #31
 800e51a:	d404      	bmi.n	800e526 <_fflush_r+0x3a>
 800e51c:	0599      	lsls	r1, r3, #22
 800e51e:	d402      	bmi.n	800e526 <_fflush_r+0x3a>
 800e520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e522:	f002 f80e 	bl	8010542 <__retarget_lock_acquire_recursive>
 800e526:	4628      	mov	r0, r5
 800e528:	4621      	mov	r1, r4
 800e52a:	f7ff ff5d 	bl	800e3e8 <__sflush_r>
 800e52e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e530:	07da      	lsls	r2, r3, #31
 800e532:	4605      	mov	r5, r0
 800e534:	d4e0      	bmi.n	800e4f8 <_fflush_r+0xc>
 800e536:	89a3      	ldrh	r3, [r4, #12]
 800e538:	059b      	lsls	r3, r3, #22
 800e53a:	d4dd      	bmi.n	800e4f8 <_fflush_r+0xc>
 800e53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e53e:	f002 f806 	bl	801054e <__retarget_lock_release_recursive>
 800e542:	e7d9      	b.n	800e4f8 <_fflush_r+0xc>
 800e544:	4b05      	ldr	r3, [pc, #20]	; (800e55c <_fflush_r+0x70>)
 800e546:	429c      	cmp	r4, r3
 800e548:	d101      	bne.n	800e54e <_fflush_r+0x62>
 800e54a:	68ac      	ldr	r4, [r5, #8]
 800e54c:	e7df      	b.n	800e50e <_fflush_r+0x22>
 800e54e:	4b04      	ldr	r3, [pc, #16]	; (800e560 <_fflush_r+0x74>)
 800e550:	429c      	cmp	r4, r3
 800e552:	bf08      	it	eq
 800e554:	68ec      	ldreq	r4, [r5, #12]
 800e556:	e7da      	b.n	800e50e <_fflush_r+0x22>
 800e558:	08016170 	.word	0x08016170
 800e55c:	08016190 	.word	0x08016190
 800e560:	08016150 	.word	0x08016150

0800e564 <_lseek_r>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	4d07      	ldr	r5, [pc, #28]	; (800e584 <_lseek_r+0x20>)
 800e568:	4604      	mov	r4, r0
 800e56a:	4608      	mov	r0, r1
 800e56c:	4611      	mov	r1, r2
 800e56e:	2200      	movs	r2, #0
 800e570:	602a      	str	r2, [r5, #0]
 800e572:	461a      	mov	r2, r3
 800e574:	f001 ffcf 	bl	8010516 <_lseek>
 800e578:	1c43      	adds	r3, r0, #1
 800e57a:	d102      	bne.n	800e582 <_lseek_r+0x1e>
 800e57c:	682b      	ldr	r3, [r5, #0]
 800e57e:	b103      	cbz	r3, 800e582 <_lseek_r+0x1e>
 800e580:	6023      	str	r3, [r4, #0]
 800e582:	bd38      	pop	{r3, r4, r5, pc}
 800e584:	2000256c 	.word	0x2000256c

0800e588 <__smakebuf_r>:
 800e588:	898b      	ldrh	r3, [r1, #12]
 800e58a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e58c:	079d      	lsls	r5, r3, #30
 800e58e:	4606      	mov	r6, r0
 800e590:	460c      	mov	r4, r1
 800e592:	d507      	bpl.n	800e5a4 <__smakebuf_r+0x1c>
 800e594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e598:	6023      	str	r3, [r4, #0]
 800e59a:	6123      	str	r3, [r4, #16]
 800e59c:	2301      	movs	r3, #1
 800e59e:	6163      	str	r3, [r4, #20]
 800e5a0:	b002      	add	sp, #8
 800e5a2:	bd70      	pop	{r4, r5, r6, pc}
 800e5a4:	ab01      	add	r3, sp, #4
 800e5a6:	466a      	mov	r2, sp
 800e5a8:	f006 fb2a 	bl	8014c00 <__swhatbuf_r>
 800e5ac:	9900      	ldr	r1, [sp, #0]
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	f7ff f85d 	bl	800d670 <_malloc_r>
 800e5b6:	b948      	cbnz	r0, 800e5cc <__smakebuf_r+0x44>
 800e5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5bc:	059a      	lsls	r2, r3, #22
 800e5be:	d4ef      	bmi.n	800e5a0 <__smakebuf_r+0x18>
 800e5c0:	f023 0303 	bic.w	r3, r3, #3
 800e5c4:	f043 0302 	orr.w	r3, r3, #2
 800e5c8:	81a3      	strh	r3, [r4, #12]
 800e5ca:	e7e3      	b.n	800e594 <__smakebuf_r+0xc>
 800e5cc:	4b0d      	ldr	r3, [pc, #52]	; (800e604 <__smakebuf_r+0x7c>)
 800e5ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5d0:	89a3      	ldrh	r3, [r4, #12]
 800e5d2:	6020      	str	r0, [r4, #0]
 800e5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5d8:	81a3      	strh	r3, [r4, #12]
 800e5da:	9b00      	ldr	r3, [sp, #0]
 800e5dc:	6163      	str	r3, [r4, #20]
 800e5de:	9b01      	ldr	r3, [sp, #4]
 800e5e0:	6120      	str	r0, [r4, #16]
 800e5e2:	b15b      	cbz	r3, 800e5fc <__smakebuf_r+0x74>
 800e5e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	f000 f831 	bl	800e650 <_isatty_r>
 800e5ee:	b128      	cbz	r0, 800e5fc <__smakebuf_r+0x74>
 800e5f0:	89a3      	ldrh	r3, [r4, #12]
 800e5f2:	f023 0303 	bic.w	r3, r3, #3
 800e5f6:	f043 0301 	orr.w	r3, r3, #1
 800e5fa:	81a3      	strh	r3, [r4, #12]
 800e5fc:	89a0      	ldrh	r0, [r4, #12]
 800e5fe:	4305      	orrs	r5, r0
 800e600:	81a5      	strh	r5, [r4, #12]
 800e602:	e7cd      	b.n	800e5a0 <__smakebuf_r+0x18>
 800e604:	0800da29 	.word	0x0800da29

0800e608 <_read_r>:
 800e608:	b538      	push	{r3, r4, r5, lr}
 800e60a:	4d07      	ldr	r5, [pc, #28]	; (800e628 <_read_r+0x20>)
 800e60c:	4604      	mov	r4, r0
 800e60e:	4608      	mov	r0, r1
 800e610:	4611      	mov	r1, r2
 800e612:	2200      	movs	r2, #0
 800e614:	602a      	str	r2, [r5, #0]
 800e616:	461a      	mov	r2, r3
 800e618:	f001 ff72 	bl	8010500 <_read>
 800e61c:	1c43      	adds	r3, r0, #1
 800e61e:	d102      	bne.n	800e626 <_read_r+0x1e>
 800e620:	682b      	ldr	r3, [r5, #0]
 800e622:	b103      	cbz	r3, 800e626 <_read_r+0x1e>
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	bd38      	pop	{r3, r4, r5, pc}
 800e628:	2000256c 	.word	0x2000256c

0800e62c <_fstat_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4d07      	ldr	r5, [pc, #28]	; (800e64c <_fstat_r+0x20>)
 800e630:	2300      	movs	r3, #0
 800e632:	4604      	mov	r4, r0
 800e634:	4608      	mov	r0, r1
 800e636:	4611      	mov	r1, r2
 800e638:	602b      	str	r3, [r5, #0]
 800e63a:	f001 ff73 	bl	8010524 <_fstat>
 800e63e:	1c43      	adds	r3, r0, #1
 800e640:	d102      	bne.n	800e648 <_fstat_r+0x1c>
 800e642:	682b      	ldr	r3, [r5, #0]
 800e644:	b103      	cbz	r3, 800e648 <_fstat_r+0x1c>
 800e646:	6023      	str	r3, [r4, #0]
 800e648:	bd38      	pop	{r3, r4, r5, pc}
 800e64a:	bf00      	nop
 800e64c:	2000256c 	.word	0x2000256c

0800e650 <_isatty_r>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	4d06      	ldr	r5, [pc, #24]	; (800e66c <_isatty_r+0x1c>)
 800e654:	2300      	movs	r3, #0
 800e656:	4604      	mov	r4, r0
 800e658:	4608      	mov	r0, r1
 800e65a:	602b      	str	r3, [r5, #0]
 800e65c:	f001 ff5d 	bl	801051a <_isatty>
 800e660:	1c43      	adds	r3, r0, #1
 800e662:	d102      	bne.n	800e66a <_isatty_r+0x1a>
 800e664:	682b      	ldr	r3, [r5, #0]
 800e666:	b103      	cbz	r3, 800e66a <_isatty_r+0x1a>
 800e668:	6023      	str	r3, [r4, #0]
 800e66a:	bd38      	pop	{r3, r4, r5, pc}
 800e66c:	2000256c 	.word	0x2000256c

0800e670 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800e670:	4770      	bx	lr

0800e672 <Wifi_demo>:

void Wifi_demo(void)
{

#if AUTO_CONNECT
	Wifi_autoconnect();
 800e672:	f7f2 b897 	b.w	80007a4 <Wifi_autoconnect>

0800e676 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
 800e676:	b40c      	push	{r2, r3}
 800e678:	b507      	push	{r0, r1, r2, lr}
 800e67a:	4603      	mov	r3, r0
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
 800e67c:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
 800e67e:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
 800e680:	9201      	str	r2, [sp, #4]
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
 800e682:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
 800e684:	f240 1105 	movw	r1, #261	; 0x105
 800e688:	4798      	blx	r3
	va_end(args);

	return res;
}
 800e68a:	b003      	add	sp, #12
 800e68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e690:	b002      	add	sp, #8
 800e692:	4770      	bx	lr

0800e694 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
 800e694:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	2b09      	cmp	r3, #9
 800e69c:	d802      	bhi.n	800e6a4 <char2hex+0x10>
		*x = c - '0';
 800e69e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
 800e6a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e6a8:	2b05      	cmp	r3, #5
 800e6aa:	d802      	bhi.n	800e6b2 <char2hex+0x1e>
		*x = c - 'a' + 10;
 800e6ac:	3857      	subs	r0, #87	; 0x57
 800e6ae:	7008      	strb	r0, [r1, #0]
 800e6b0:	e7f6      	b.n	800e6a0 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
 800e6b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e6b6:	2b05      	cmp	r3, #5
 800e6b8:	d801      	bhi.n	800e6be <char2hex+0x2a>
		*x = c - 'A' + 10;
 800e6ba:	3837      	subs	r0, #55	; 0x37
 800e6bc:	e7f7      	b.n	800e6ae <char2hex+0x1a>
		return -EINVAL;
 800e6be:	f06f 0015 	mvn.w	r0, #21
}
 800e6c2:	4770      	bx	lr

0800e6c4 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
 800e6c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6c6:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
 800e6c8:	f001 0001 	and.w	r0, r1, #1
 800e6cc:	eb00 0551 	add.w	r5, r0, r1, lsr #1
 800e6d0:	429d      	cmp	r5, r3
 800e6d2:	ea4f 0651 	mov.w	r6, r1, lsr #1
 800e6d6:	d903      	bls.n	800e6e0 <hex2bin+0x1c>
		return 0;
 800e6d8:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
 800e6da:	4628      	mov	r0, r5
 800e6dc:	b003      	add	sp, #12
 800e6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
 800e6e0:	b158      	cbz	r0, 800e6fa <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
 800e6e2:	7820      	ldrb	r0, [r4, #0]
 800e6e4:	f10d 0107 	add.w	r1, sp, #7
 800e6e8:	f7ff ffd4 	bl	800e694 <char2hex>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	dbf3      	blt.n	800e6d8 <hex2bin+0x14>
		buf[0] = dec;
 800e6f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e6f4:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
 800e6f8:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
 800e6fa:	3401      	adds	r4, #1
 800e6fc:	4416      	add	r6, r2
 800e6fe:	42b2      	cmp	r2, r6
 800e700:	d0eb      	beq.n	800e6da <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
 800e702:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 800e706:	f10d 0107 	add.w	r1, sp, #7
 800e70a:	f7ff ffc3 	bl	800e694 <char2hex>
 800e70e:	2800      	cmp	r0, #0
 800e710:	dbe2      	blt.n	800e6d8 <hex2bin+0x14>
		buf[i] = dec << 4;
 800e712:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e716:	011b      	lsls	r3, r3, #4
 800e718:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
 800e71a:	f814 0b02 	ldrb.w	r0, [r4], #2
 800e71e:	f7ff ffb9 	bl	800e694 <char2hex>
 800e722:	2800      	cmp	r0, #0
 800e724:	dbd8      	blt.n	800e6d8 <hex2bin+0x14>
		buf[i] += dec;
 800e726:	7813      	ldrb	r3, [r2, #0]
 800e728:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e72c:	440b      	add	r3, r1
 800e72e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
 800e732:	e7e4      	b.n	800e6fe <hex2bin+0x3a>

0800e734 <arch_printk_char_out>:
}
 800e734:	2000      	movs	r0, #0
 800e736:	4770      	bx	lr

0800e738 <str_out>:
{
 800e738:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800e73a:	688a      	ldr	r2, [r1, #8]
 800e73c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 800e73e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800e740:	b114      	cbz	r4, 800e748 <str_out+0x10>
 800e742:	684b      	ldr	r3, [r1, #4]
 800e744:	4293      	cmp	r3, r2
 800e746:	dc01      	bgt.n	800e74c <str_out+0x14>
		ctx->count++;
 800e748:	608d      	str	r5, [r1, #8]
}
 800e74a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 800e74c:	3b01      	subs	r3, #1
 800e74e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 800e750:	bf08      	it	eq
 800e752:	2200      	moveq	r2, #0
 800e754:	608d      	str	r5, [r1, #8]
 800e756:	bf0c      	ite	eq
 800e758:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 800e75a:	54a0      	strbne	r0, [r4, r2]
 800e75c:	e7f5      	b.n	800e74a <str_out+0x12>

0800e75e <printk>:
{
 800e75e:	b40f      	push	{r0, r1, r2, r3}
 800e760:	b507      	push	{r0, r1, r2, lr}
 800e762:	a904      	add	r1, sp, #16
 800e764:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800e768:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 800e76a:	f7f2 f945 	bl	80009f8 <vprintk>
}
 800e76e:	b003      	add	sp, #12
 800e770:	f85d eb04 	ldr.w	lr, [sp], #4
 800e774:	b004      	add	sp, #16
 800e776:	4770      	bx	lr

0800e778 <snprintk>:
{
 800e778:	b40c      	push	{r2, r3}
 800e77a:	b507      	push	{r0, r1, r2, lr}
 800e77c:	ab04      	add	r3, sp, #16
 800e77e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800e782:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800e784:	f7f2 f946 	bl	8000a14 <vsnprintk>
}
 800e788:	b003      	add	sp, #12
 800e78a:	f85d eb04 	ldr.w	lr, [sp], #4
 800e78e:	b002      	add	sp, #8
 800e790:	4770      	bx	lr

0800e792 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800e792:	4604      	mov	r4, r0
 800e794:	b508      	push	{r3, lr}
 800e796:	4608      	mov	r0, r1
 800e798:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800e79a:	461a      	mov	r2, r3
 800e79c:	47a0      	blx	r4
	return z_impl_z_current_get();
 800e79e:	f7fe fbd3 	bl	800cf48 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800e7a2:	f7f5 fa47 	bl	8003c34 <z_impl_k_thread_abort>

0800e7a6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 800e7a6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e7aa:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
 800e7ac:	0840      	lsrs	r0, r0, #1
 800e7ae:	4770      	bx	lr

0800e7b0 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 800e7b4:	f7ff fff7 	bl	800e7a6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 800e7b8:	fab0 f080 	clz	r0, r0
 800e7bc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 800e7c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
 800e7c4:	00ca      	lsls	r2, r1, #3
 800e7c6:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
 800e7ca:	1d17      	adds	r7, r2, #4
{
 800e7cc:	460c      	mov	r4, r1
 800e7ce:	3206      	adds	r2, #6
 800e7d0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 800e7d2:	b956      	cbnz	r6, 800e7ea <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	fa01 f000 	lsl.w	r0, r1, r0
 800e7da:	68d9      	ldr	r1, [r3, #12]
 800e7dc:	4301      	orrs	r1, r0
 800e7de:	60d9      	str	r1, [r3, #12]
		b->next = c;
 800e7e0:	f8cc 4010 	str.w	r4, [ip, #16]
 800e7e4:	53dd      	strh	r5, [r3, r7]
 800e7e6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
 800e7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 800e7ea:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 800e7ec:	3104      	adds	r1, #4
 800e7ee:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 800e7f0:	53d8      	strh	r0, [r3, r7]
 800e7f2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e7f6:	529e      	strh	r6, [r3, r2]
 800e7f8:	80c5      	strh	r5, [r0, #6]
 800e7fa:	525d      	strh	r5, [r3, r1]
 800e7fc:	e7f4      	b.n	800e7e8 <free_list_add+0x38>

0800e7fe <free_list_remove_bidx>:
{
 800e7fe:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
 800e800:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800e804:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
 800e806:	4299      	cmp	r1, r3
 800e808:	f102 0104 	add.w	r1, r2, #4
 800e80c:	d10a      	bne.n	800e824 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
 800e80e:	2301      	movs	r3, #1
 800e810:	fa03 f202 	lsl.w	r2, r3, r2
 800e814:	68c3      	ldr	r3, [r0, #12]
 800e816:	ea23 0302 	bic.w	r3, r3, r2
 800e81a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 800e822:	bd10      	pop	{r4, pc}
 800e824:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
 800e826:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
 800e82a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800e82e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800e832:	80cb      	strh	r3, [r1, #6]
 800e834:	8082      	strh	r2, [r0, #4]
}
 800e836:	e7f4      	b.n	800e822 <free_list_remove_bidx+0x24>

0800e838 <free_list_remove>:
{
 800e838:	b508      	push	{r3, lr}
 800e83a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
 800e83c:	f7ff ffb3 	bl	800e7a6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
 800e840:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
 800e844:	f1c2 021f 	rsb	r2, r2, #31
 800e848:	4618      	mov	r0, r3
}
 800e84a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
 800e84e:	f7ff bfd6 	b.w	800e7fe <free_list_remove_bidx>

0800e852 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 800e852:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e856:	fab1 f581 	clz	r5, r1
 800e85a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 800e85e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
 800e862:	4603      	mov	r3, r0
	if (b->next) {
 800e864:	693a      	ldr	r2, [r7, #16]
{
 800e866:	460e      	mov	r6, r1
	if (b->next) {
 800e868:	b1c2      	cbz	r2, 800e89c <alloc_chunk+0x4a>
 800e86a:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
 800e86e:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
 800e870:	4618      	mov	r0, r3
 800e872:	4621      	mov	r1, r4
 800e874:	f7ff ff97 	bl	800e7a6 <chunk_size>
 800e878:	42b0      	cmp	r0, r6
 800e87a:	d306      	bcc.n	800e88a <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
 800e87c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
 800e87e:	4618      	mov	r0, r3
 800e880:	f7ff ffbd 	bl	800e7fe <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 800e884:	4620      	mov	r0, r4
 800e886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
 800e88a:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
 800e88e:	f1b8 0801 	subs.w	r8, r8, #1
 800e892:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
 800e894:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
 800e896:	d001      	beq.n	800e89c <alloc_chunk+0x4a>
 800e898:	4282      	cmp	r2, r0
 800e89a:	d1e8      	bne.n	800e86e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
 800e89c:	f1c5 0220 	rsb	r2, r5, #32
 800e8a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e8a4:	4094      	lsls	r4, r2
 800e8a6:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
 800e8a8:	4014      	ands	r4, r2
 800e8aa:	d0eb      	beq.n	800e884 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
 800e8ac:	fa94 f2a4 	rbit	r2, r4
 800e8b0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 800e8b4:	1d11      	adds	r1, r2, #4
 800e8b6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 800e8ba:	4621      	mov	r1, r4
 800e8bc:	e7df      	b.n	800e87e <alloc_chunk+0x2c>

0800e8be <merge_chunks>:
{
 800e8be:	b538      	push	{r3, r4, r5, lr}
 800e8c0:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 800e8c2:	f7ff ff70 	bl	800e7a6 <chunk_size>
{
 800e8c6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	4611      	mov	r1, r2
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff ff6a 	bl	800e7a6 <chunk_size>
		((uint16_t *)cmem)[f] = val;
 800e8d2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e8d6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800e8d8:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
 800e8da:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff ff62 	bl	800e7a6 <chunk_size>
	void *cmem = &buf[c];
 800e8e2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
 800e8e4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
 800e8e8:	bd38      	pop	{r3, r4, r5, pc}

0800e8ea <split_chunks>:
{
 800e8ea:	b538      	push	{r3, r4, r5, lr}
 800e8ec:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
 800e8ee:	f7ff ff5a 	bl	800e7a6 <chunk_size>
{
 800e8f2:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
 800e8f4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
 800e8f6:	1a51      	subs	r1, r2, r1
 800e8f8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
 800e8fc:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800e8fe:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
 800e900:	8060      	strh	r0, [r4, #2]
 800e902:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800e906:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
 800e908:	8044      	strh	r4, [r0, #2]
 800e90a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
 800e90e:	4618      	mov	r0, r3
 800e910:	4611      	mov	r1, r2
 800e912:	f7ff ff48 	bl	800e7a6 <chunk_size>
	void *cmem = &buf[c];
 800e916:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
 800e918:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
 800e91c:	bd38      	pop	{r3, r4, r5, pc}

0800e91e <free_chunk>:
{
 800e91e:	b538      	push	{r3, r4, r5, lr}
 800e920:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
 800e922:	f7ff ff40 	bl	800e7a6 <chunk_size>
 800e926:	460c      	mov	r4, r1
 800e928:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
 800e92a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800e92e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
 800e930:	07da      	lsls	r2, r3, #31
 800e932:	d40a      	bmi.n	800e94a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
 800e934:	4628      	mov	r0, r5
 800e936:	f7ff ff7f 	bl	800e838 <free_list_remove>
	return c + chunk_size(h, c);
 800e93a:	4621      	mov	r1, r4
 800e93c:	4628      	mov	r0, r5
 800e93e:	f7ff ff32 	bl	800e7a6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
 800e942:	1822      	adds	r2, r4, r0
 800e944:	4628      	mov	r0, r5
 800e946:	f7ff ffba 	bl	800e8be <merge_chunks>
		return ((uint16_t *)cmem)[f];
 800e94a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
 800e94e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
 800e950:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 800e954:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
 800e956:	07db      	lsls	r3, r3, #31
 800e958:	d40c      	bmi.n	800e974 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
 800e95a:	4628      	mov	r0, r5
 800e95c:	f7ff ff6c 	bl	800e838 <free_list_remove>
		return ((uint16_t *)cmem)[f];
 800e960:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
 800e964:	4622      	mov	r2, r4
 800e966:	1a61      	subs	r1, r4, r1
 800e968:	4628      	mov	r0, r5
 800e96a:	f7ff ffa8 	bl	800e8be <merge_chunks>
 800e96e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
 800e972:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
 800e974:	4621      	mov	r1, r4
 800e976:	4628      	mov	r0, r5
}
 800e978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
 800e97c:	f7ff bf18 	b.w	800e7b0 <free_list_add>

0800e980 <sys_heap_free>:
	if (mem == NULL) {
 800e980:	b161      	cbz	r1, 800e99c <sys_heap_free+0x1c>
 800e982:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 800e984:	3904      	subs	r1, #4
 800e986:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
 800e988:	f021 0307 	bic.w	r3, r1, #7
 800e98c:	4403      	add	r3, r0
	free_chunk(h, c);
 800e98e:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 800e990:	885a      	ldrh	r2, [r3, #2]
 800e992:	f022 0201 	bic.w	r2, r2, #1
 800e996:	805a      	strh	r2, [r3, #2]
 800e998:	f7ff bfc1 	b.w	800e91e <free_chunk>
}
 800e99c:	4770      	bx	lr

0800e99e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 800e99e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 800e9a0:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
 800e9a2:	b909      	cbnz	r1, 800e9a8 <sys_heap_alloc+0xa>
		return NULL;
 800e9a4:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
 800e9a6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
 800e9a8:	68ab      	ldr	r3, [r5, #8]
 800e9aa:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800e9ae:	d9f9      	bls.n	800e9a4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800e9b0:	310b      	adds	r1, #11
 800e9b2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	f7ff ff4b 	bl	800e852 <alloc_chunk>
	if (c == 0U) {
 800e9bc:	4606      	mov	r6, r0
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	d0f0      	beq.n	800e9a4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	f7ff feee 	bl	800e7a6 <chunk_size>
 800e9ca:	42a0      	cmp	r0, r4
 800e9cc:	d907      	bls.n	800e9de <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
 800e9ce:	1932      	adds	r2, r6, r4
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	f7ff ff8a 	bl	800e8ea <split_chunks>
		free_list_add(h, c + chunk_sz);
 800e9d6:	4611      	mov	r1, r2
 800e9d8:	4628      	mov	r0, r5
 800e9da:	f7ff fee9 	bl	800e7b0 <free_list_add>
	void *cmem = &buf[c];
 800e9de:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 800e9e2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800e9e4:	8853      	ldrh	r3, [r2, #2]
 800e9e6:	f043 0301 	orr.w	r3, r3, #1
 800e9ea:	8053      	strh	r3, [r2, #2]
 800e9ec:	3004      	adds	r0, #4
	return mem;
 800e9ee:	e7da      	b.n	800e9a6 <sys_heap_alloc+0x8>

0800e9f0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 800e9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9f4:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 800e9f6:	424a      	negs	r2, r1
 800e9f8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
 800e9fc:	ea31 0202 	bics.w	r2, r1, r2
{
 800ea00:	4603      	mov	r3, r0
	if (align != rew) {
 800ea02:	d00a      	beq.n	800ea1a <sys_heap_aligned_alloc+0x2a>
		return false;
 800ea04:	2f04      	cmp	r7, #4
 800ea06:	463a      	mov	r2, r7
 800ea08:	46b9      	mov	r9, r7
 800ea0a:	bf28      	it	cs
 800ea0c:	2204      	movcs	r2, #4
		align -= rew;
 800ea0e:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 800ea10:	b974      	cbnz	r4, 800ea30 <sys_heap_aligned_alloc+0x40>
		return NULL;
 800ea12:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
 800ea14:	4628      	mov	r0, r5
 800ea16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
 800ea1a:	2904      	cmp	r1, #4
 800ea1c:	d804      	bhi.n	800ea28 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
 800ea1e:	4621      	mov	r1, r4
}
 800ea20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 800ea24:	f7ff bfbb 	b.w	800e99e <sys_heap_alloc>
		rew = 0;
 800ea28:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
 800ea2c:	2204      	movs	r2, #4
 800ea2e:	e7ef      	b.n	800ea10 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
 800ea30:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
 800ea32:	68b3      	ldr	r3, [r6, #8]
 800ea34:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
 800ea38:	d9eb      	bls.n	800ea12 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800ea3a:	f104 010b 	add.w	r1, r4, #11
 800ea3e:	4439      	add	r1, r7
 800ea40:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 800ea42:	08c9      	lsrs	r1, r1, #3
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7ff ff04 	bl	800e852 <alloc_chunk>
	if (c0 == 0) {
 800ea4a:	4680      	mov	r8, r0
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d0e0      	beq.n	800ea12 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 800ea50:	f109 0504 	add.w	r5, r9, #4
 800ea54:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 800ea58:	1e7b      	subs	r3, r7, #1
 800ea5a:	4435      	add	r5, r6
 800ea5c:	441d      	add	r5, r3
 800ea5e:	427f      	negs	r7, r7
 800ea60:	403d      	ands	r5, r7
 800ea62:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 800ea66:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 800ea68:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 800ea6a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 800ea6c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 800ea6e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 800ea72:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
 800ea74:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 800ea78:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
 800ea7c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 800ea80:	d208      	bcs.n	800ea94 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
 800ea82:	4601      	mov	r1, r0
 800ea84:	463a      	mov	r2, r7
 800ea86:	4630      	mov	r0, r6
 800ea88:	f7ff ff2f 	bl	800e8ea <split_chunks>
		free_list_add(h, c0);
 800ea8c:	4641      	mov	r1, r8
 800ea8e:	4630      	mov	r0, r6
 800ea90:	f7ff fe8e 	bl	800e7b0 <free_list_add>
	return c + chunk_size(h, c);
 800ea94:	4639      	mov	r1, r7
 800ea96:	4630      	mov	r0, r6
 800ea98:	f7ff fe85 	bl	800e7a6 <chunk_size>
 800ea9c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 800ea9e:	4284      	cmp	r4, r0
 800eaa0:	d207      	bcs.n	800eab2 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	4622      	mov	r2, r4
 800eaa6:	f7ff ff20 	bl	800e8ea <split_chunks>
		free_list_add(h, c_end);
 800eaaa:	4621      	mov	r1, r4
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7ff fe7f 	bl	800e7b0 <free_list_add>
	void *cmem = &buf[c];
 800eab2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800eab6:	8873      	ldrh	r3, [r6, #2]
 800eab8:	f043 0301 	orr.w	r3, r3, #1
 800eabc:	8073      	strh	r3, [r6, #2]
 800eabe:	e7a9      	b.n	800ea14 <sys_heap_aligned_alloc+0x24>

0800eac0 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800eac0:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800eac2:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800eac4:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800eac6:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800eaca:	f021 0107 	bic.w	r1, r1, #7
{
 800eace:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800ead0:	1acd      	subs	r5, r1, r3
 800ead2:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 800ead4:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
 800ead6:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800eada:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
 800eade:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800eae0:	3407      	adds	r4, #7
	h->avail_buckets = 0;
 800eae2:	2600      	movs	r6, #0
 800eae4:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800eae6:	f1c0 0020 	rsb	r0, r0, #32
 800eaea:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
 800eaee:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
 800eaf0:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800eaf2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800eaf6:	4284      	cmp	r4, r0
 800eaf8:	d118      	bne.n	800eb2c <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800eafa:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800eafc:	f040 0001 	orr.w	r0, r0, #1
 800eb00:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
 800eb02:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800eb06:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800eb08:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
 800eb0a:	801e      	strh	r6, [r3, #0]
 800eb0c:	8067      	strh	r7, [r4, #2]
 800eb0e:	195c      	adds	r4, r3, r5
 800eb10:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
 800eb14:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
 800eb18:	8066      	strh	r6, [r4, #2]
 800eb1a:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800eb1c:	8850      	ldrh	r0, [r2, #2]
 800eb1e:	f040 0001 	orr.w	r0, r0, #1
 800eb22:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 800eb24:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff be42 	b.w	800e7b0 <free_list_add>
		h->buckets[i].next = 0;
 800eb2c:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
 800eb30:	e7e1      	b.n	800eaf6 <sys_heap_init+0x36>

0800eb32 <outs>:
{
 800eb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb36:	4607      	mov	r7, r0
 800eb38:	4688      	mov	r8, r1
 800eb3a:	4615      	mov	r5, r2
 800eb3c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800eb3e:	4614      	mov	r4, r2
 800eb40:	42b4      	cmp	r4, r6
 800eb42:	eba4 0005 	sub.w	r0, r4, r5
 800eb46:	d302      	bcc.n	800eb4e <outs+0x1c>
 800eb48:	b93e      	cbnz	r6, 800eb5a <outs+0x28>
 800eb4a:	7823      	ldrb	r3, [r4, #0]
 800eb4c:	b12b      	cbz	r3, 800eb5a <outs+0x28>
		int rc = out((int)*sp++, ctx);
 800eb4e:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eb52:	4641      	mov	r1, r8
 800eb54:	47b8      	blx	r7
		if (rc < 0) {
 800eb56:	2800      	cmp	r0, #0
 800eb58:	daf2      	bge.n	800eb40 <outs+0xe>
}
 800eb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb5e <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
 800eb5e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800eb62:	4770      	bx	lr

0800eb64 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 800eb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
 800eb68:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
 800eb6a:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
 800eb6e:	454c      	cmp	r4, r9
{
 800eb70:	4605      	mov	r5, r0
 800eb72:	460e      	mov	r6, r1
 800eb74:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
 800eb76:	d907      	bls.n	800eb88 <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
 800eb78:	6907      	ldr	r7, [r0, #16]
 800eb7a:	f7ff fff0 	bl	800eb5e <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
 800eb7e:	fbb0 f0f7 	udiv	r0, r0, r7
 800eb82:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
 800eb84:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800eb88:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
 800eb8a:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800eb8c:	692f      	ldr	r7, [r5, #16]
 800eb8e:	b18b      	cbz	r3, 800ebb4 <ring_buf_put_claim+0x50>
 800eb90:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
 800eb92:	443c      	add	r4, r7
 800eb94:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
 800eb98:	4540      	cmp	r0, r8
 800eb9a:	bf28      	it	cs
 800eb9c:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
 800eb9e:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
 800eba0:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
 800eba2:	42b8      	cmp	r0, r7
 800eba4:	bf28      	it	cs
 800eba6:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
 800eba8:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
 800ebaa:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
 800ebac:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
 800ebae:	60a9      	str	r1, [r5, #8]

	return allocated;
}
 800ebb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800ebb4:	fbb1 f3f7 	udiv	r3, r1, r7
 800ebb8:	fb07 1313 	mls	r3, r7, r3, r1
 800ebbc:	e7e9      	b.n	800eb92 <ring_buf_put_claim+0x2e>

0800ebbe <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
 800ebbe:	b570      	push	{r4, r5, r6, lr}
 800ebc0:	4605      	mov	r5, r0
 800ebc2:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
 800ebc4:	f7ff ffcb 	bl	800eb5e <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
 800ebc8:	686e      	ldr	r6, [r5, #4]
 800ebca:	692a      	ldr	r2, [r5, #16]
 800ebcc:	682b      	ldr	r3, [r5, #0]
 800ebce:	1931      	adds	r1, r6, r4
 800ebd0:	4413      	add	r3, r2
 800ebd2:	4299      	cmp	r1, r3
 800ebd4:	d80c      	bhi.n	800ebf0 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
 800ebd6:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
 800ebd8:	bf83      	ittte	hi
 800ebda:	fbb0 f3f2 	udivhi	r3, r0, r2
 800ebde:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800ebe2:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
 800ebe4:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
 800ebe6:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
 800ebe8:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
 800ebec:	2000      	movs	r0, #0
}
 800ebee:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 800ebf0:	f06f 0015 	mvn.w	r0, #21
 800ebf4:	e7fb      	b.n	800ebee <ring_buf_put_finish+0x30>

0800ebf6 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
 800ebf6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ebfa:	4680      	mov	r8, r0
 800ebfc:	460e      	mov	r6, r1
 800ebfe:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 800ec00:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 800ec02:	462a      	mov	r2, r5
 800ec04:	a901      	add	r1, sp, #4
 800ec06:	4640      	mov	r0, r8
 800ec08:	f7ff ffac 	bl	800eb64 <ring_buf_put_claim>
 800ec0c:	4631      	mov	r1, r6
 800ec0e:	4604      	mov	r4, r0
 800ec10:	4602      	mov	r2, r0
 800ec12:	9801      	ldr	r0, [sp, #4]
 800ec14:	f005 fdca 	bl	80147ac <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 800ec18:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
 800ec1a:	4427      	add	r7, r4
		data += partial_size;
 800ec1c:	4426      	add	r6, r4
	} while (size && partial_size);
 800ec1e:	d001      	beq.n	800ec24 <ring_buf_put+0x2e>
 800ec20:	2c00      	cmp	r4, #0
 800ec22:	d1ee      	bne.n	800ec02 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 800ec24:	4639      	mov	r1, r7
 800ec26:	4640      	mov	r0, r8
 800ec28:	f7ff ffc9 	bl	800ebbe <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	b002      	add	sp, #8
 800ec30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec34 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 800ec34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
 800ec38:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
 800ec3a:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
 800ec3c:	42b3      	cmp	r3, r6
{
 800ec3e:	4604      	mov	r4, r0
 800ec40:	460f      	mov	r7, r1
 800ec42:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
 800ec44:	d907      	bls.n	800ec56 <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
 800ec46:	6905      	ldr	r5, [r0, #16]
 800ec48:	f7ff ff89 	bl	800eb5e <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
 800ec4c:	fbb0 f1f5 	udiv	r1, r0, r5
 800ec50:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
 800ec52:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800ec56:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
 800ec58:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800ec5a:	6923      	ldr	r3, [r4, #16]
 800ec5c:	b185      	cbz	r5, 800ec80 <ring_buf_get_claim+0x4c>
 800ec5e:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
 800ec60:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
 800ec62:	4540      	cmp	r0, r8
 800ec64:	bf28      	it	cs
 800ec66:	4640      	movcs	r0, r8
 800ec68:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
 800ec6a:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
 800ec6c:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
 800ec6e:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
 800ec70:	bf28      	it	cs
 800ec72:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
 800ec74:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
 800ec76:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
 800ec78:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
 800ec7a:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
 800ec7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 800ec80:	fbb1 f5f3 	udiv	r5, r1, r3
 800ec84:	fb03 1515 	mls	r5, r3, r5, r1
 800ec88:	e7ea      	b.n	800ec60 <ring_buf_get_claim+0x2c>

0800ec8a <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
 800ec8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
 800ec8c:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
 800ec8e:	68c3      	ldr	r3, [r0, #12]
 800ec90:	42b3      	cmp	r3, r6
{
 800ec92:	4605      	mov	r5, r0
 800ec94:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
 800ec96:	d914      	bls.n	800ecc2 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
 800ec98:	6907      	ldr	r7, [r0, #16]
 800ec9a:	f7ff ff60 	bl	800eb5e <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
 800ec9e:	fbb0 f1f7 	udiv	r1, r0, r7
 800eca2:	3901      	subs	r1, #1
 800eca4:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
 800eca8:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
 800ecaa:	6829      	ldr	r1, [r5, #0]
 800ecac:	4421      	add	r1, r4
 800ecae:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
 800ecb0:	bf9f      	itttt	ls
 800ecb2:	1ac9      	subls	r1, r1, r3
 800ecb4:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
 800ecb6:	60e9      	strls	r1, [r5, #12]

	return 0;
 800ecb8:	2000      	movls	r0, #0
		return -EINVAL;
 800ecba:	bf88      	it	hi
 800ecbc:	f06f 0015 	mvnhi.w	r0, #21
}
 800ecc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e7f1      	b.n	800ecaa <ring_buf_get_finish+0x20>

0800ecc6 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
 800ecc6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ecca:	4680      	mov	r8, r0
 800eccc:	460d      	mov	r5, r1
 800ecce:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 800ecd0:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 800ecd2:	4632      	mov	r2, r6
 800ecd4:	a901      	add	r1, sp, #4
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	f7ff ffac 	bl	800ec34 <ring_buf_get_claim>
 800ecdc:	4604      	mov	r4, r0
		if (data) {
 800ecde:	b12d      	cbz	r5, 800ecec <ring_buf_get+0x26>
 800ece0:	4602      	mov	r2, r0
 800ece2:	9901      	ldr	r1, [sp, #4]
 800ece4:	4628      	mov	r0, r5
 800ece6:	f005 fd61 	bl	80147ac <memcpy>
			memcpy(data, src, partial_size);
			data += partial_size;
 800ecea:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
 800ecec:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 800ecee:	4427      	add	r7, r4
	} while (size && partial_size);
 800ecf0:	d001      	beq.n	800ecf6 <ring_buf_get+0x30>
 800ecf2:	2c00      	cmp	r4, #0
 800ecf4:	d1ed      	bne.n	800ecd2 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 800ecf6:	4639      	mov	r1, r7
 800ecf8:	4640      	mov	r0, r8
 800ecfa:	f7ff ffc6 	bl	800ec8a <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 800ecfe:	4638      	mov	r0, r7
 800ed00:	b002      	add	sp, #8
 800ed02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed06 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
 800ed06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	468a      	mov	sl, r1
 800ed0e:	4614      	mov	r4, r2
 800ed10:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
 800ed12:	4605      	mov	r5, r0
 800ed14:	b918      	cbnz	r0, 800ed1e <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
 800ed16:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
 800ed18:	b007      	add	sp, #28
 800ed1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
 800ed1e:	2900      	cmp	r1, #0
 800ed20:	d0f9      	beq.n	800ed16 <fnmatchx+0x10>
    if (recursion-- == 0)
 800ed22:	9b02      	ldr	r3, [sp, #8]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 8113 	beq.w	800ef50 <fnmatchx+0x24a>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 800ed2a:	f004 0304 	and.w	r3, r4, #4
 800ed2e:	460a      	mov	r2, r1
 800ed30:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
 800ed32:	46a9      	mov	r9, r5
 800ed34:	4621      	mov	r1, r4
 800ed36:	f819 0b01 	ldrb.w	r0, [r9], #1
 800ed3a:	f7f2 fa79 	bl	8001230 <foldcase>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	b2c0      	uxtb	r0, r0
 800ed42:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 800ed44:	7817      	ldrb	r7, [r2, #0]
 800ed46:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
 800ed48:	d025      	beq.n	800ed96 <fnmatchx+0x90>
 800ed4a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800ed4e:	d10b      	bne.n	800ed68 <fnmatchx+0x62>
 800ed50:	b1c8      	cbz	r0, 800ed86 <fnmatchx+0x80>
 800ed52:	282a      	cmp	r0, #42	; 0x2a
 800ed54:	d036      	beq.n	800edc4 <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
 800ed56:	4621      	mov	r1, r4
 800ed58:	4638      	mov	r0, r7
 800ed5a:	f7f2 fa69 	bl	8001230 <foldcase>
 800ed5e:	4286      	cmp	r6, r0
 800ed60:	f102 0201 	add.w	r2, r2, #1
 800ed64:	d01e      	beq.n	800eda4 <fnmatchx+0x9e>
 800ed66:	e7d6      	b.n	800ed16 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
 800ed68:	285b      	cmp	r0, #91	; 0x5b
 800ed6a:	d07b      	beq.n	800ee64 <fnmatchx+0x15e>
 800ed6c:	285c      	cmp	r0, #92	; 0x5c
 800ed6e:	d1f2      	bne.n	800ed56 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
 800ed70:	07e0      	lsls	r0, r4, #31
 800ed72:	d4f0      	bmi.n	800ed56 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
 800ed74:	7868      	ldrb	r0, [r5, #1]
 800ed76:	f7f2 fa5b 	bl	8001230 <foldcase>
 800ed7a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 800ed7e:	bf18      	it	ne
 800ed80:	f105 0902 	addne.w	r9, r5, #2
 800ed84:	e7e7      	b.n	800ed56 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
 800ed86:	06e3      	lsls	r3, r4, #27
 800ed88:	d501      	bpl.n	800ed8e <fnmatchx+0x88>
 800ed8a:	2f2f      	cmp	r7, #47	; 0x2f
 800ed8c:	d0c4      	beq.n	800ed18 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
 800ed8e:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
 800ed90:	bf18      	it	ne
 800ed92:	2001      	movne	r0, #1
 800ed94:	e7c0      	b.n	800ed18 <fnmatchx+0x12>
            if (*string == EOS)
 800ed96:	2f00      	cmp	r7, #0
 800ed98:	d0bd      	beq.n	800ed16 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
 800ed9a:	2f2f      	cmp	r7, #47	; 0x2f
 800ed9c:	d104      	bne.n	800eda8 <fnmatchx+0xa2>
 800ed9e:	07a6      	lsls	r6, r4, #30
 800eda0:	d4b9      	bmi.n	800ed16 <fnmatchx+0x10>
            ++string;
 800eda2:	3201      	adds	r2, #1
            break;
 800eda4:	464d      	mov	r5, r9
 800eda6:	e7c4      	b.n	800ed32 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 800eda8:	2f2e      	cmp	r7, #46	; 0x2e
 800edaa:	d1fa      	bne.n	800eda2 <fnmatchx+0x9c>
 800edac:	9b04      	ldr	r3, [sp, #16]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d0f7      	beq.n	800eda2 <fnmatchx+0x9c>
 800edb2:	4552      	cmp	r2, sl
 800edb4:	d0af      	beq.n	800ed16 <fnmatchx+0x10>
                (string == stringstart ||
 800edb6:	07a5      	lsls	r5, r4, #30
 800edb8:	d5f3      	bpl.n	800eda2 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 800edba:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800edbe:	2b2f      	cmp	r3, #47	; 0x2f
 800edc0:	d1ef      	bne.n	800eda2 <fnmatchx+0x9c>
 800edc2:	e7a8      	b.n	800ed16 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
 800edc4:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
 800edc6:	f7f2 fa33 	bl	8001230 <foldcase>
 800edca:	b2c1      	uxtb	r1, r0
            while (c == '*')
 800edcc:	292a      	cmp	r1, #42	; 0x2a
 800edce:	d018      	beq.n	800ee02 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
 800edd0:	2f2e      	cmp	r7, #46	; 0x2e
 800edd2:	d109      	bne.n	800ede8 <fnmatchx+0xe2>
 800edd4:	9b04      	ldr	r3, [sp, #16]
 800edd6:	b13b      	cbz	r3, 800ede8 <fnmatchx+0xe2>
 800edd8:	4552      	cmp	r2, sl
 800edda:	d09c      	beq.n	800ed16 <fnmatchx+0x10>
                (string == stringstart ||
 800eddc:	07a0      	lsls	r0, r4, #30
 800edde:	d503      	bpl.n	800ede8 <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
 800ede0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800ede4:	2b2f      	cmp	r3, #47	; 0x2f
 800ede6:	d096      	beq.n	800ed16 <fnmatchx+0x10>
            if (c == EOS) {
 800ede8:	b979      	cbnz	r1, 800ee0a <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
 800edea:	f014 0002 	ands.w	r0, r4, #2
 800edee:	d093      	beq.n	800ed18 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
 800edf0:	06e3      	lsls	r3, r4, #27
 800edf2:	f100 80af 	bmi.w	800ef54 <fnmatchx+0x24e>
                        strchr(string, '/') == NULL ?
 800edf6:	212f      	movs	r1, #47	; 0x2f
 800edf8:	4610      	mov	r0, r2
 800edfa:	f005 fd28 	bl	801484e <strchr>
                        0 : FNM_NOMATCH;
 800edfe:	3800      	subs	r0, #0
 800ee00:	e7c6      	b.n	800ed90 <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
 800ee02:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 800ee06:	4621      	mov	r1, r4
 800ee08:	e7dd      	b.n	800edc6 <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 800ee0a:	292f      	cmp	r1, #47	; 0x2f
 800ee0c:	d021      	beq.n	800ee52 <fnmatchx+0x14c>
    if (recursion-- == 0)
 800ee0e:	9b02      	ldr	r3, [sp, #8]
 800ee10:	4616      	mov	r6, r2
 800ee12:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
 800ee14:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
 800ee18:	f004 0a02 	and.w	sl, r4, #2
 800ee1c:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
 800ee1e:	4621      	mov	r1, r4
 800ee20:	f89b 0000 	ldrb.w	r0, [fp]
 800ee24:	f7f2 fa04 	bl	8001230 <foldcase>
 800ee28:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 800ee2c:	f106 0601 	add.w	r6, r6, #1
 800ee30:	f43f af71 	beq.w	800ed16 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
 800ee34:	463b      	mov	r3, r7
 800ee36:	4642      	mov	r2, r8
 800ee38:	4659      	mov	r1, fp
 800ee3a:	4648      	mov	r0, r9
 800ee3c:	f7ff ff63 	bl	800ed06 <fnmatchx>
 800ee40:	2801      	cmp	r0, #1
 800ee42:	f47f af69 	bne.w	800ed18 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
 800ee46:	2d2f      	cmp	r5, #47	; 0x2f
 800ee48:	d1e8      	bne.n	800ee1c <fnmatchx+0x116>
 800ee4a:	f1ba 0f00 	cmp.w	sl, #0
 800ee4e:	d0e5      	beq.n	800ee1c <fnmatchx+0x116>
 800ee50:	e761      	b.n	800ed16 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
 800ee52:	07a7      	lsls	r7, r4, #30
 800ee54:	d5db      	bpl.n	800ee0e <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
 800ee56:	4610      	mov	r0, r2
 800ee58:	f005 fcf9 	bl	801484e <strchr>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d1a0      	bne.n	800eda4 <fnmatchx+0x9e>
 800ee62:	e758      	b.n	800ed16 <fnmatchx+0x10>
            if (*string == EOS)
 800ee64:	2f00      	cmp	r7, #0
 800ee66:	f43f af56 	beq.w	800ed16 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
 800ee6a:	2f2f      	cmp	r7, #47	; 0x2f
 800ee6c:	d102      	bne.n	800ee74 <fnmatchx+0x16e>
 800ee6e:	07a6      	lsls	r6, r4, #30
 800ee70:	f53f af51 	bmi.w	800ed16 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
 800ee74:	4621      	mov	r1, r4
 800ee76:	4638      	mov	r0, r7
 800ee78:	f7f2 f9da 	bl	8001230 <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 800ee7c:	786b      	ldrb	r3, [r5, #1]
            if ((r = rangematch(pattern,
 800ee7e:	9000      	str	r0, [sp, #0]
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 800ee80:	2b21      	cmp	r3, #33	; 0x21
 800ee82:	d001      	beq.n	800ee88 <fnmatchx+0x182>
 800ee84:	2b5e      	cmp	r3, #94	; 0x5e
 800ee86:	d123      	bne.n	800eed0 <fnmatchx+0x1ca>
        ++pattern;
 800ee88:	3502      	adds	r5, #2
 800ee8a:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 800ee8c:	9301      	str	r3, [sp, #4]
    need = 1;
 800ee8e:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 800ee90:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 800ee94:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 800ee98:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
 800ee9a:	462e      	mov	r6, r5
 800ee9c:	4621      	mov	r1, r4
 800ee9e:	f816 0b01 	ldrb.w	r0, [r6], #1
 800eea2:	9305      	str	r3, [sp, #20]
 800eea4:	f7f2 f9c4 	bl	8001230 <foldcase>
 800eea8:	fa5f f880 	uxtb.w	r8, r0
 800eeac:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 800eeb0:	9b05      	ldr	r3, [sp, #20]
 800eeb2:	d110      	bne.n	800eed6 <fnmatchx+0x1d0>
 800eeb4:	bb0b      	cbnz	r3, 800eefa <fnmatchx+0x1f4>
    return ok == negate ? NULL : pattern;
 800eeb6:	9b01      	ldr	r3, [sp, #4]
 800eeb8:	455b      	cmp	r3, fp
 800eeba:	f43f af2c 	beq.w	800ed16 <fnmatchx+0x10>
            if (r == (void *)-1) {
 800eebe:	1c73      	adds	r3, r6, #1
 800eec0:	d103      	bne.n	800eeca <fnmatchx+0x1c4>
                if (*string != '[')
 800eec2:	2f5b      	cmp	r7, #91	; 0x5b
 800eec4:	f47f af27 	bne.w	800ed16 <fnmatchx+0x10>
 800eec8:	464e      	mov	r6, r9
            ++string;
 800eeca:	3201      	adds	r2, #1
            break;
 800eecc:	46b1      	mov	r9, r6
 800eece:	e769      	b.n	800eda4 <fnmatchx+0x9e>
 800eed0:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
 800eed2:	2300      	movs	r3, #0
 800eed4:	e7da      	b.n	800ee8c <fnmatchx+0x186>
        if (c == '/')
 800eed6:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
 800eeda:	d0f2      	beq.n	800eec2 <fnmatchx+0x1bc>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
 800eedc:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
 800eee0:	d107      	bne.n	800eef2 <fnmatchx+0x1ec>
 800eee2:	9b03      	ldr	r3, [sp, #12]
 800eee4:	b94b      	cbnz	r3, 800eefa <fnmatchx+0x1f4>
            c = FOLDCASE(*pattern++, flags);
 800eee6:	7868      	ldrb	r0, [r5, #1]
 800eee8:	f7f2 f9a2 	bl	8001230 <foldcase>
 800eeec:	1cae      	adds	r6, r5, #2
 800eeee:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
 800eef2:	f1b8 0f00 	cmp.w	r8, #0
 800eef6:	f43f af0e 	beq.w	800ed16 <fnmatchx+0x10>
        if (*pattern == '-' 
 800eefa:	7833      	ldrb	r3, [r6, #0]
 800eefc:	2b2d      	cmp	r3, #45	; 0x2d
 800eefe:	d120      	bne.n	800ef42 <fnmatchx+0x23c>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
 800ef00:	7870      	ldrb	r0, [r6, #1]
 800ef02:	4621      	mov	r1, r4
 800ef04:	f7f2 f994 	bl	8001230 <foldcase>
 800ef08:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800ef0c:	d019      	beq.n	800ef42 <fnmatchx+0x23c>
 800ef0e:	285d      	cmp	r0, #93	; 0x5d
 800ef10:	d017      	beq.n	800ef42 <fnmatchx+0x23c>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 800ef12:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
 800ef14:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
 800ef18:	d10a      	bne.n	800ef30 <fnmatchx+0x22a>
 800ef1a:	9b03      	ldr	r3, [sp, #12]
 800ef1c:	b943      	cbnz	r3, 800ef30 <fnmatchx+0x22a>
                c2 = FOLDCASE(*pattern++, flags);
 800ef1e:	78b0      	ldrb	r0, [r6, #2]
 800ef20:	f7f2 f986 	bl	8001230 <foldcase>
            if (c2 == EOS)
 800ef24:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
 800ef28:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
 800ef2c:	f43f aef3 	beq.w	800ed16 <fnmatchx+0x10>
            if (c <= test && test <= c2)
 800ef30:	9b00      	ldr	r3, [sp, #0]
 800ef32:	4543      	cmp	r3, r8
 800ef34:	db03      	blt.n	800ef3e <fnmatchx+0x238>
                ok = 1;
 800ef36:	4283      	cmp	r3, r0
 800ef38:	bfd8      	it	le
 800ef3a:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	e7ab      	b.n	800ee9a <fnmatchx+0x194>
        } else if (c == test)
 800ef42:	9b00      	ldr	r3, [sp, #0]
 800ef44:	4635      	mov	r5, r6
 800ef46:	4543      	cmp	r3, r8
 800ef48:	bf08      	it	eq
 800ef4a:	f04f 0b01 	moveq.w	fp, #1
 800ef4e:	e7f6      	b.n	800ef3e <fnmatchx+0x238>
        return FNM_NORES;
 800ef50:	2003      	movs	r0, #3
 800ef52:	e6e1      	b.n	800ed18 <fnmatchx+0x12>
                return 0;
 800ef54:	4608      	mov	r0, r1
 800ef56:	e6df      	b.n	800ed18 <fnmatchx+0x12>

0800ef58 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
 800ef58:	2340      	movs	r3, #64	; 0x40
 800ef5a:	f7ff bed4 	b.w	800ed06 <fnmatchx>

0800ef5e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800ef5e:	4770      	bx	lr

0800ef60 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800ef60:	2000      	movs	r0, #0
 800ef62:	4770      	bx	lr

0800ef64 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
 800ef64:	6883      	ldr	r3, [r0, #8]
 800ef66:	6a1b      	ldr	r3, [r3, #32]
 800ef68:	b103      	cbz	r3, 800ef6c <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 800ef6a:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
 800ef6c:	4770      	bx	lr

0800ef6e <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
 800ef6e:	6843      	ldr	r3, [r0, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
{
 800ef72:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
 800ef74:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
 800ef76:	4620      	mov	r0, r4
 800ef78:	f7ff fff4 	bl	800ef64 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
 800ef7c:	68a3      	ldr	r3, [r4, #8]
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	b10b      	cbz	r3, 800ef86 <uninit+0x18>
		api->irq_rx_disable(dev);
 800ef82:	4620      	mov	r0, r4
 800ef84:	4798      	blx	r3
}
 800ef86:	2000      	movs	r0, #0
 800ef88:	bd10      	pop	{r4, pc}

0800ef8a <enable>:
{
 800ef8a:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
 800ef8c:	6843      	ldr	r3, [r0, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
 800ef92:	b111      	cbz	r1, 800ef9a <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
 800ef94:	6818      	ldr	r0, [r3, #0]
 800ef96:	f7ff ffe5 	bl	800ef64 <uart_irq_tx_disable>
}
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	bd08      	pop	{r3, pc}

0800ef9e <read>:
{
 800ef9e:	b510      	push	{r4, lr}
 800efa0:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
 800efa2:	6843      	ldr	r3, [r0, #4]
 800efa4:	68d8      	ldr	r0, [r3, #12]
 800efa6:	f7ff fe8e 	bl	800ecc6 <ring_buf_get>
 800efaa:	6020      	str	r0, [r4, #0]
}
 800efac:	2000      	movs	r0, #0
 800efae:	bd10      	pop	{r4, pc}

0800efb0 <ring_buf_reset>:
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
 800efb0:	2300      	movs	r3, #0
	buf->tail = 0;
 800efb2:	e9c0 3300 	strd	r3, r3, [r0]
__ssp_bos_icheck3(memset, void *, int)
 800efb6:	6083      	str	r3, [r0, #8]
 800efb8:	60c3      	str	r3, [r0, #12]
	memset(&buf->misc, 0, sizeof(buf->misc));
}
 800efba:	4770      	bx	lr

0800efbc <write>:
{
 800efbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 800efc0:	6845      	ldr	r5, [r0, #4]
{
 800efc2:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
 800efc4:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 800efc6:	7c1b      	ldrb	r3, [r3, #16]
{
 800efc8:	460c      	mov	r4, r1
 800efca:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 800efcc:	b153      	cbz	r3, 800efe4 <write+0x28>
 800efce:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
 800efd2:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 800efd4:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
 800efd6:	d120      	bne.n	800f01a <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 800efd8:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
 800efdc:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 800efde:	2001      	movs	r0, #1
 800efe0:	4790      	blx	r2
 800efe2:	e017      	b.n	800f014 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
 800efe4:	68a8      	ldr	r0, [r5, #8]
 800efe6:	f7ff fe06 	bl	800ebf6 <ring_buf_put>
 800efea:	682b      	ldr	r3, [r5, #0]
 800efec:	6030      	str	r0, [r6, #0]
 800efee:	330c      	adds	r3, #12
 800eff0:	2101      	movs	r1, #1
 800eff2:	f3bf 8f5b 	dmb	ish
 800eff6:	e853 2f00 	ldrex	r2, [r3]
 800effa:	e843 1000 	strex	r0, r1, [r3]
 800effe:	2800      	cmp	r0, #0
 800f000:	d1f9      	bne.n	800eff6 <write+0x3a>
 800f002:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
 800f006:	b92a      	cbnz	r2, 800f014 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
 800f008:	682b      	ldr	r3, [r5, #0]
 800f00a:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
 800f00c:	6883      	ldr	r3, [r0, #8]
 800f00e:	69db      	ldr	r3, [r3, #28]
 800f010:	b103      	cbz	r3, 800f014 <write+0x58>
		api->irq_tx_enable(dev);
 800f012:	4798      	blx	r3
}
 800f014:	2000      	movs	r0, #0
 800f016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 800f01a:	6818      	ldr	r0, [r3, #0]
 800f01c:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 800f020:	6883      	ldr	r3, [r0, #8]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 800f026:	e7d4      	b.n	800efd2 <write+0x16>

0800f028 <uart_callback>:
{
 800f028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f02c:	4680      	mov	r8, r0
 800f02e:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
 800f030:	6883      	ldr	r3, [r0, #8]
 800f032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f034:	b103      	cbz	r3, 800f038 <uart_callback+0x10>
	return api->irq_update(dev);
 800f036:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
 800f038:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f03e:	bb0b      	cbnz	r3, 800f084 <uart_callback+0x5c>
 800f040:	2700      	movs	r7, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
 800f042:	68e8      	ldr	r0, [r5, #12]
 800f044:	a901      	add	r1, sp, #4
 800f046:	6902      	ldr	r2, [r0, #16]
 800f048:	f7ff fd8c 	bl	800eb64 <ring_buf_put_claim>
		if (len > 0) {
 800f04c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f050:	4606      	mov	r6, r0
 800f052:	b378      	cbz	r0, 800f0b4 <uart_callback+0x8c>
	if (api->fifo_read == NULL) {
 800f054:	699b      	ldr	r3, [r3, #24]
			rd_len = uart_fifo_read(dev, data, len);
 800f056:	9901      	ldr	r1, [sp, #4]
 800f058:	b34b      	cbz	r3, 800f0ae <uart_callback+0x86>
	return api->fifo_read(dev, rx_data, size);
 800f05a:	4602      	mov	r2, r0
 800f05c:	4640      	mov	r0, r8
 800f05e:	4798      	blx	r3
 800f060:	4604      	mov	r4, r0
				new_data = true;
 800f062:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 800f064:	68e8      	ldr	r0, [r5, #12]
 800f066:	4621      	mov	r1, r4
				new_data = true;
 800f068:	bf18      	it	ne
 800f06a:	2701      	movne	r7, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 800f06c:	f7ff fda7 	bl	800ebbe <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
 800f070:	b10c      	cbz	r4, 800f076 <uart_callback+0x4e>
 800f072:	42a6      	cmp	r6, r4
 800f074:	d0e5      	beq.n	800f042 <uart_callback+0x1a>
	if (new_data) {
 800f076:	b14f      	cbz	r7, 800f08c <uart_callback+0x64>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
 800f078:	682b      	ldr	r3, [r5, #0]
 800f07a:	2000      	movs	r0, #0
 800f07c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 800f080:	4790      	blx	r2
}
 800f082:	e003      	b.n	800f08c <uart_callback+0x64>
	return api->irq_rx_ready(dev);
 800f084:	4640      	mov	r0, r8
 800f086:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 800f088:	2800      	cmp	r0, #0
 800f08a:	d1d9      	bne.n	800f040 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
 800f08c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f092:	b9db      	cbnz	r3, 800f0cc <uart_callback+0xa4>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
 800f094:	68a8      	ldr	r0, [r5, #8]
 800f096:	a901      	add	r1, sp, #4
 800f098:	6902      	ldr	r2, [r0, #16]
 800f09a:	f7ff fdcb 	bl	800ec34 <ring_buf_get_claim>
	if (len) {
 800f09e:	4604      	mov	r4, r0
 800f0a0:	b9d8      	cbnz	r0, 800f0da <uart_callback+0xb2>
		uart_irq_tx_disable(dev);
 800f0a2:	4640      	mov	r0, r8
 800f0a4:	f7ff ff5e 	bl	800ef64 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
 800f0a8:	682b      	ldr	r3, [r5, #0]
 800f0aa:	60dc      	str	r4, [r3, #12]
 800f0ac:	e021      	b.n	800f0f2 <uart_callback+0xca>
		return -ENOSYS;
 800f0ae:	f06f 0457 	mvn.w	r4, #87	; 0x57
 800f0b2:	e7d6      	b.n	800f062 <uart_callback+0x3a>
	if (api->fifo_read == NULL) {
 800f0b4:	699b      	ldr	r3, [r3, #24]
 800f0b6:	b133      	cbz	r3, 800f0c6 <uart_callback+0x9e>
	return api->fifo_read(dev, rx_data, size);
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f10d 0103 	add.w	r1, sp, #3
 800f0be:	4640      	mov	r0, r8
 800f0c0:	4798      	blx	r3
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	e7d4      	b.n	800f070 <uart_callback+0x48>
		return -ENOSYS;
 800f0c6:	f06f 0457 	mvn.w	r4, #87	; 0x57
 800f0ca:	e7d1      	b.n	800f070 <uart_callback+0x48>
	return api->irq_tx_ready(dev);
 800f0cc:	4640      	mov	r0, r8
 800f0ce:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d1df      	bne.n	800f094 <uart_callback+0x6c>
}
 800f0d4:	b002      	add	sp, #8
 800f0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->fifo_fill == NULL) {
 800f0da:	f8d8 3008 	ldr.w	r3, [r8, #8]
		len = uart_fifo_fill(dev, data, len);
 800f0de:	9901      	ldr	r1, [sp, #4]
 800f0e0:	695b      	ldr	r3, [r3, #20]
 800f0e2:	b163      	cbz	r3, 800f0fe <uart_callback+0xd6>
	return api->fifo_fill(dev, tx_data, size);
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	4640      	mov	r0, r8
 800f0e8:	4798      	blx	r3
 800f0ea:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
 800f0ec:	68a8      	ldr	r0, [r5, #8]
 800f0ee:	f7ff fdcc 	bl	800ec8a <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 800f0f2:	682b      	ldr	r3, [r5, #0]
 800f0f4:	2001      	movs	r0, #1
 800f0f6:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 800f0fa:	4790      	blx	r2
}
 800f0fc:	e7ea      	b.n	800f0d4 <uart_callback+0xac>
		return -ENOSYS;
 800f0fe:	f06f 0157 	mvn.w	r1, #87	; 0x57
 800f102:	e7f3      	b.n	800f0ec <uart_callback+0xc4>

0800f104 <atomic_or>:
 * @param value Value to OR.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
 800f104:	4603      	mov	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
 800f106:	f3bf 8f5b 	dmb	ish
 800f10a:	e853 0f00 	ldrex	r0, [r3]
 800f10e:	ea40 0201 	orr.w	r2, r0, r1
 800f112:	e843 2c00 	strex	ip, r2, [r3]
 800f116:	f1bc 0f00 	cmp.w	ip, #0
 800f11a:	d1f6      	bne.n	800f10a <atomic_or+0x6>
 800f11c:	f3bf 8f5b 	dmb	ish
 800f120:	4770      	bx	lr

0800f122 <atomic_and>:
 * @param value Value to AND.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
 800f122:	4603      	mov	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
 800f124:	f3bf 8f5b 	dmb	ish
 800f128:	e853 0f00 	ldrex	r0, [r3]
 800f12c:	ea00 0201 	and.w	r2, r0, r1
 800f130:	e843 2c00 	strex	ip, r2, [r3]
 800f134:	f1bc 0f00 	cmp.w	ip, #0
 800f138:	d1f6      	bne.n	800f128 <atomic_and+0x6>
 800f13a:	f3bf 8f5b 	dmb	ish
 800f13e:	4770      	bx	lr

0800f140 <shell_signal_handle>:
{
 800f140:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 800f142:	6885      	ldr	r5, [r0, #8]
 800f144:	0109      	lsls	r1, r1, #4
 800f146:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
 800f14a:	4604      	mov	r4, r0
 800f14c:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
 800f14e:	440d      	add	r5, r1
		arch_syscall_invoke3(*(uintptr_t *)&sig, *(uintptr_t *)&signaled, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(sig, signaled, result);
 800f150:	aa01      	add	r2, sp, #4
 800f152:	4669      	mov	r1, sp
 800f154:	4628      	mov	r0, r5
 800f156:	f005 fb09 	bl	801476c <z_impl_k_poll_signal_check>
	if (set) {
 800f15a:	9b00      	ldr	r3, [sp, #0]
 800f15c:	b123      	cbz	r3, 800f168 <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
 800f15e:	4628      	mov	r0, r5
 800f160:	f005 fb01 	bl	8014766 <z_impl_k_poll_signal_reset>
		handler(shell);
 800f164:	4620      	mov	r0, r4
 800f166:	47b0      	blx	r6
}
 800f168:	b002      	add	sp, #8
 800f16a:	bd70      	pop	{r4, r5, r6, pc}

0800f16c <z_shell_strlen>:
{
 800f16c:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800f16e:	b110      	cbz	r0, 800f176 <z_shell_strlen+0xa>
 800f170:	f7f1 f9d5 	bl	800051e <strlen>
 800f174:	b280      	uxth	r0, r0
}
 800f176:	bd08      	pop	{r3, pc}

0800f178 <z_shell_raw_fprintf>:
{
 800f178:	b40e      	push	{r1, r2, r3}
 800f17a:	b503      	push	{r0, r1, lr}
 800f17c:	aa03      	add	r2, sp, #12
 800f17e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 800f182:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 800f184:	f7f3 fadc 	bl	8002740 <z_shell_fprintf_fmt>
}
 800f188:	b002      	add	sp, #8
 800f18a:	f85d eb04 	ldr.w	lr, [sp], #4
 800f18e:	b003      	add	sp, #12
 800f190:	4770      	bx	lr

0800f192 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 800f192:	f7fd b915 	b.w	800c3c0 <z_impl_k_mutex_lock>

0800f196 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
 800f196:	688b      	ldr	r3, [r1, #8]
 800f198:	b920      	cbnz	r0, 800f1a4 <transport_evt_handler+0xe>
 800f19a:	f503 701a 	add.w	r0, r3, #616	; 0x268
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 800f19e:	2100      	movs	r1, #0
 800f1a0:	f7fe b982 	b.w	800d4a8 <z_impl_k_poll_signal_raise>
 800f1a4:	f503 7026 	add.w	r0, r3, #664	; 0x298
 800f1a8:	e7f9      	b.n	800f19e <transport_evt_handler+0x8>

0800f1aa <kill_handler>:
{
 800f1aa:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
 800f1ac:	6883      	ldr	r3, [r0, #8]
 800f1ae:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
 800f1b2:	07db      	lsls	r3, r3, #31
{
 800f1b4:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
 800f1b6:	d41a      	bmi.n	800f1ee <kill_handler+0x44>
	err = shell->iface->api->uninit(shell->iface);
 800f1b8:	6840      	ldr	r0, [r0, #4]
 800f1ba:	6803      	ldr	r3, [r0, #0]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	4798      	blx	r3
	if (err != 0) {
 800f1c0:	4605      	mov	r5, r0
 800f1c2:	b920      	cbnz	r0, 800f1ce <kill_handler+0x24>
	z_shell_history_purge(shell->history);
 800f1c4:	68e0      	ldr	r0, [r4, #12]
 800f1c6:	f000 fbf1 	bl	800f9ac <z_shell_history_purge>
	shell->ctx->state = state;
 800f1ca:	68a3      	ldr	r3, [r4, #8]
 800f1cc:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
 800f1ce:	68a3      	ldr	r3, [r4, #8]
 800f1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d2:	b113      	cbz	r3, 800f1da <kill_handler+0x30>
		shell->ctx->uninit_cb(shell, err);
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	4798      	blx	r3
	shell->ctx->tid = NULL;
 800f1da:	68a3      	ldr	r3, [r4, #8]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
 800f1e2:	f7fd feb1 	bl	800cf48 <z_impl_z_current_get>
}
 800f1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
 800f1ea:	f7f4 bd23 	b.w	8003c34 <z_impl_k_thread_abort>
		return -EBUSY;
 800f1ee:	f06f 050f 	mvn.w	r5, #15
 800f1f2:	e7ec      	b.n	800f1ce <kill_handler+0x24>

0800f1f4 <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
 800f1f4:	f500 7019 	add.w	r0, r0, #612	; 0x264
 800f1f8:	b111      	cbz	r1, 800f200 <z_flag_history_exit_set.isra.0+0xc>
 800f1fa:	2104      	movs	r1, #4
 800f1fc:	f7ff bf82 	b.w	800f104 <atomic_or>
 800f200:	f06f 0104 	mvn.w	r1, #4
 800f204:	f7ff bf8d 	b.w	800f122 <atomic_and>

0800f208 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
 800f208:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
 800f20a:	f500 7018 	add.w	r0, r0, #608	; 0x260
 800f20e:	b129      	cbz	r1, 800f21c <z_flag_insert_mode_set.isra.0+0x14>
 800f210:	2101      	movs	r1, #1
 800f212:	f7ff ff77 	bl	800f104 <atomic_or>
}
 800f216:	f000 0001 	and.w	r0, r0, #1
 800f21a:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
 800f21c:	f06f 0101 	mvn.w	r1, #1
 800f220:	f7ff ff7f 	bl	800f122 <atomic_and>
 800f224:	e7f7      	b.n	800f216 <z_flag_insert_mode_set.isra.0+0xe>

0800f226 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 800f226:	f7fd b943 	b.w	800c4b0 <z_impl_k_mutex_unlock>

0800f22a <shell_vfprintf>:
{
 800f22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22c:	4604      	mov	r4, r0
	return shell->ctx->state;
 800f22e:	6880      	ldr	r0, [r0, #8]
{
 800f230:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
 800f232:	7903      	ldrb	r3, [r0, #4]
 800f234:	2b02      	cmp	r3, #2
{
 800f236:	460d      	mov	r5, r1
 800f238:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
 800f23a:	d007      	beq.n	800f24c <shell_vfprintf+0x22>
}
 800f23c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
 800f240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f244:	f500 7019 	add.w	r0, r0, #612	; 0x264
 800f248:	f7ff bf5c 	b.w	800f104 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
 800f24c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f254:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 800f258:	f7ff ff9b 	bl	800f192 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
 800f25c:	68a3      	ldr	r3, [r4, #8]
 800f25e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
 800f262:	0511      	lsls	r1, r2, #20
 800f264:	d404      	bmi.n	800f270 <shell_vfprintf+0x46>
 800f266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f268:	b913      	cbnz	r3, 800f270 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
 800f26a:	4620      	mov	r0, r4
 800f26c:	f000 f9e8 	bl	800f640 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
 800f270:	463b      	mov	r3, r7
 800f272:	4632      	mov	r2, r6
 800f274:	4629      	mov	r1, r5
 800f276:	4620      	mov	r0, r4
 800f278:	f000 fa43 	bl	800f702 <z_shell_vfprintf>
 800f27c:	68a3      	ldr	r3, [r4, #8]
 800f27e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
 800f282:	0512      	lsls	r2, r2, #20
 800f284:	d404      	bmi.n	800f290 <shell_vfprintf+0x66>
 800f286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f288:	b913      	cbnz	r3, 800f290 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
 800f28a:	4620      	mov	r0, r4
 800f28c:	f7f3 fd58 	bl	8002d40 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
 800f290:	6960      	ldr	r0, [r4, #20]
 800f292:	f000 f844 	bl	800f31e <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
 800f296:	68a0      	ldr	r0, [r4, #8]
}
 800f298:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
 800f29c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 800f2a0:	f7ff bfc1 	b.w	800f226 <k_mutex_unlock.isra.0>

0800f2a4 <shell_fprintf>:
{
 800f2a4:	b40c      	push	{r2, r3}
 800f2a6:	b507      	push	{r0, r1, r2, lr}
 800f2a8:	ab04      	add	r3, sp, #16
 800f2aa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 800f2ae:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
 800f2b0:	f7ff ffbb 	bl	800f22a <shell_vfprintf>
}
 800f2b4:	b003      	add	sp, #12
 800f2b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2ba:	b002      	add	sp, #8
 800f2bc:	4770      	bx	lr

0800f2be <shell_hexdump>:
{
 800f2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c2:	4607      	mov	r7, r0
 800f2c4:	460e      	mov	r6, r1
 800f2c6:	4614      	mov	r4, r2
	const uint8_t *p = data;
 800f2c8:	460d      	mov	r5, r1
	while (len) {
 800f2ca:	b90c      	cbnz	r4, 800f2d0 <shell_hexdump+0x12>
}
 800f2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
 800f2d0:	2c10      	cmp	r4, #16
 800f2d2:	46a0      	mov	r8, r4
 800f2d4:	bf28      	it	cs
 800f2d6:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(shell, p - data, p, line_len);
 800f2da:	462a      	mov	r2, r5
 800f2dc:	1ba9      	subs	r1, r5, r6
 800f2de:	4643      	mov	r3, r8
 800f2e0:	4638      	mov	r0, r7
 800f2e2:	f7f3 f9c1 	bl	8002668 <shell_hexdump_line>
		len -= line_len;
 800f2e6:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
 800f2ea:	4445      	add	r5, r8
 800f2ec:	e7ed      	b.n	800f2ca <shell_hexdump+0xc>

0800f2ee <shell_help>:
{
 800f2ee:	b510      	push	{r4, lr}
 800f2f0:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
 800f2f2:	6880      	ldr	r0, [r0, #8]
 800f2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2fc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 800f300:	f7ff ff47 	bl	800f192 <k_mutex_lock.constprop.0.isra.0>
	shell_internal_help_print(shell);
 800f304:	4620      	mov	r0, r4
 800f306:	f7f2 fb69 	bl	80019dc <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
 800f30a:	68a0      	ldr	r0, [r4, #8]
}
 800f30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
 800f310:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 800f314:	f7ff bf87 	b.w	800f226 <k_mutex_unlock.isra.0>

0800f318 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
 800f318:	6883      	ldr	r3, [r0, #8]
 800f31a:	6399      	str	r1, [r3, #56]	; 0x38
}
 800f31c:	4770      	bx	lr

0800f31e <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 800f31e:	6902      	ldr	r2, [r0, #16]
 800f320:	6883      	ldr	r3, [r0, #8]
 800f322:	6812      	ldr	r2, [r2, #0]
 800f324:	6801      	ldr	r1, [r0, #0]
{
 800f326:	b510      	push	{r4, lr}
 800f328:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 800f32a:	68c0      	ldr	r0, [r0, #12]
 800f32c:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
 800f32e:	6923      	ldr	r3, [r4, #16]
 800f330:	2200      	movs	r2, #0
 800f332:	601a      	str	r2, [r3, #0]
}
 800f334:	bd10      	pop	{r4, pc}

0800f336 <out_func>:
{
 800f336:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 800f338:	68cb      	ldr	r3, [r1, #12]
 800f33a:	7c1b      	ldrb	r3, [r3, #16]
 800f33c:	2b02      	cmp	r3, #2
{
 800f33e:	4605      	mov	r5, r0
 800f340:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 800f342:	d104      	bne.n	800f34e <out_func+0x18>
 800f344:	280a      	cmp	r0, #10
 800f346:	d102      	bne.n	800f34e <out_func+0x18>
		(void)out_func('\r', ctx);
 800f348:	200d      	movs	r0, #13
 800f34a:	f7ff fff4 	bl	800f336 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
 800f34e:	6923      	ldr	r3, [r4, #16]
 800f350:	6822      	ldr	r2, [r4, #0]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
 800f356:	6922      	ldr	r2, [r4, #16]
 800f358:	6813      	ldr	r3, [r2, #0]
 800f35a:	3301      	adds	r3, #1
 800f35c:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
 800f35e:	6862      	ldr	r2, [r4, #4]
 800f360:	4293      	cmp	r3, r2
 800f362:	d102      	bne.n	800f36a <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 800f364:	4620      	mov	r0, r4
 800f366:	f7ff ffda 	bl	800f31e <z_shell_fprintf_buffer_flush>
}
 800f36a:	2000      	movs	r0, #0
 800f36c:	bd38      	pop	{r3, r4, r5, pc}

0800f36e <z_shell_strlen>:
{
 800f36e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800f370:	b110      	cbz	r0, 800f378 <z_shell_strlen+0xa>
 800f372:	f7f1 f8d4 	bl	800051e <strlen>
 800f376:	b280      	uxth	r0, r0
}
 800f378:	bd08      	pop	{r3, pc}

0800f37a <z_column_span_with_buffer_offsets_get>:
{
 800f37a:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
 800f37c:	7b03      	ldrb	r3, [r0, #12]
 800f37e:	8940      	ldrh	r0, [r0, #10]
 800f380:	441a      	add	r2, r3
 800f382:	4419      	add	r1, r3
 800f384:	fbb2 f4f0 	udiv	r4, r2, r0
 800f388:	fbb1 f3f0 	udiv	r3, r1, r0
 800f38c:	fb00 2214 	mls	r2, r0, r4, r2
 800f390:	fb00 1013 	mls	r0, r0, r3, r1
}
 800f394:	1a10      	subs	r0, r2, r0
 800f396:	bd10      	pop	{r4, pc}

0800f398 <z_row_span_with_buffer_offsets_get>:
{
 800f398:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
 800f39a:	7b04      	ldrb	r4, [r0, #12]
 800f39c:	8943      	ldrh	r3, [r0, #10]
 800f39e:	4421      	add	r1, r4
 800f3a0:	1910      	adds	r0, r2, r4
 800f3a2:	fbb1 f1f3 	udiv	r1, r1, r3
 800f3a6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800f3aa:	1a40      	subs	r0, r0, r1
 800f3ac:	bd10      	pop	{r4, pc}

0800f3ae <z_shell_multiline_data_calc>:
{
 800f3ae:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 800f3b0:	7b05      	ldrb	r5, [r0, #12]
 800f3b2:	8943      	ldrh	r3, [r0, #10]
 800f3b4:	4429      	add	r1, r5
 800f3b6:	fbb1 f4f3 	udiv	r4, r1, r3
 800f3ba:	fb03 1114 	mls	r1, r3, r4, r1
 800f3be:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 800f3c0:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 800f3c2:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 800f3c4:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 800f3c6:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 800f3ca:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 800f3ce:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 800f3d0:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 800f3d2:	1c4c      	adds	r4, r1, #1
 800f3d4:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 800f3d6:	8042      	strh	r2, [r0, #2]
}
 800f3d8:	bd30      	pop	{r4, r5, pc}

0800f3da <z_shell_pattern_remove>:
{
 800f3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3dc:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
 800f3de:	4611      	mov	r1, r2
{
 800f3e0:	4615      	mov	r5, r2
 800f3e2:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
 800f3e4:	f005 fa8f 	bl	8014906 <strstr>
 800f3e8:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f7ff ffbf 	bl	800f36e <z_shell_strlen>
 800f3f0:	4605      	mov	r5, r0
	if (!pattern_addr) {
 800f3f2:	b1c4      	cbz	r4, 800f426 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
 800f3f4:	42a7      	cmp	r7, r4
 800f3f6:	d207      	bcs.n	800f408 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
 800f3f8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800f3fc:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
 800f3fe:	bf02      	ittt	eq
 800f400:	3501      	addeq	r5, #1
 800f402:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
 800f404:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 800f408:	4620      	mov	r0, r4
 800f40a:	f7ff ffb0 	bl	800f36e <z_shell_strlen>
	*buff_len -= pattern_len;
 800f40e:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 800f410:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
 800f412:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 800f414:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
 800f416:	8033      	strh	r3, [r6, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
 800f418:	1961      	adds	r1, r4, r5
 800f41a:	4620      	mov	r0, r4
 800f41c:	b292      	uxth	r2, r2
}
 800f41e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f422:	f005 b9e4 	b.w	80147ee <memmove>
 800f426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f428 <z_shell_find_cmd>:
{
 800f428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f42c:	460f      	mov	r7, r1
 800f42e:	b086      	sub	sp, #24
 800f430:	4616      	mov	r6, r2
	if (parent) {
 800f432:	4604      	mov	r4, r0
 800f434:	b170      	cbz	r0, 800f454 <z_shell_find_cmd+0x2c>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
 800f436:	4603      	mov	r3, r0
 800f438:	ac01      	add	r4, sp, #4
 800f43a:	f100 0510 	add.w	r5, r0, #16
 800f43e:	6818      	ldr	r0, [r3, #0]
 800f440:	6859      	ldr	r1, [r3, #4]
 800f442:	4622      	mov	r2, r4
 800f444:	c203      	stmia	r2!, {r0, r1}
 800f446:	3308      	adds	r3, #8
 800f448:	42ab      	cmp	r3, r5
 800f44a:	4614      	mov	r4, r2
 800f44c:	d1f7      	bne.n	800f43e <z_shell_find_cmd+0x16>
 800f44e:	6818      	ldr	r0, [r3, #0]
 800f450:	6010      	str	r0, [r2, #0]
		parent = &parent_cpy;
 800f452:	ac01      	add	r4, sp, #4
 800f454:	f04f 0800 	mov.w	r8, #0
	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
 800f458:	4641      	mov	r1, r8
 800f45a:	4632      	mov	r2, r6
 800f45c:	4620      	mov	r0, r4
 800f45e:	f7f3 fa4f 	bl	8002900 <z_shell_cmd_get>
 800f462:	f108 0801 	add.w	r8, r8, #1
 800f466:	4605      	mov	r5, r0
 800f468:	b128      	cbz	r0, 800f476 <z_shell_find_cmd+0x4e>
		if (strcmp(cmd_str, entry->syntax) == 0) {
 800f46a:	6829      	ldr	r1, [r5, #0]
 800f46c:	4638      	mov	r0, r7
 800f46e:	f7f1 f84c 	bl	800050a <strcmp>
 800f472:	2800      	cmp	r0, #0
 800f474:	d1f0      	bne.n	800f458 <z_shell_find_cmd+0x30>
}
 800f476:	4628      	mov	r0, r5
 800f478:	b006      	add	sp, #24
 800f47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f47e <z_shell_get_last_command>:
{
 800f47e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f482:	461c      	mov	r4, r3
 800f484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f488:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 800f48c:	2300      	movs	r3, #0
{
 800f48e:	460f      	mov	r7, r1
 800f490:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 800f492:	6023      	str	r3, [r4, #0]
	while (*match_arg < argc) {
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	42bb      	cmp	r3, r7
				continue;
 800f498:	4605      	mov	r5, r0
	while (*match_arg < argc) {
 800f49a:	d21b      	bcs.n	800f4d4 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
 800f49c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800f4a0:	f000 fb01 	bl	800faa6 <z_shell_has_wildcard>
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	4682      	mov	sl, r0
 800f4a8:	b118      	cbz	r0, 800f4b2 <z_shell_get_last_command+0x34>
				(*match_arg)++;
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	6023      	str	r3, [r4, #0]
				continue;
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	e7f0      	b.n	800f494 <z_shell_get_last_command+0x16>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
 800f4b2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f4b6:	4642      	mov	r2, r8
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	f7ff ffb5 	bl	800f428 <z_shell_find_cmd>
		if (entry) {
 800f4be:	b148      	cbz	r0, 800f4d4 <z_shell_get_last_command+0x56>
			(*match_arg)++;
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	1c5a      	adds	r2, r3, #1
 800f4c4:	6022      	str	r2, [r4, #0]
		if (only_static && (entry == dloc)) {
 800f4c6:	f1b9 0f00 	cmp.w	r9, #0
 800f4ca:	d0e3      	beq.n	800f494 <z_shell_get_last_command+0x16>
 800f4cc:	4580      	cmp	r8, r0
 800f4ce:	d1e1      	bne.n	800f494 <z_shell_get_last_command+0x16>
			(*match_arg)--;
 800f4d0:	6023      	str	r3, [r4, #0]
			return NULL;
 800f4d2:	4655      	mov	r5, sl
}
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f4da <z_shell_raw_fprintf>:
{
 800f4da:	b40e      	push	{r1, r2, r3}
 800f4dc:	b503      	push	{r0, r1, lr}
 800f4de:	aa03      	add	r2, sp, #12
 800f4e0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 800f4e4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 800f4e6:	f7f3 f92b 	bl	8002740 <z_shell_fprintf_fmt>
}
 800f4ea:	b002      	add	sp, #8
 800f4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4f0:	b003      	add	sp, #12
 800f4f2:	4770      	bx	lr

0800f4f4 <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 800f4f4:	6882      	ldr	r2, [r0, #8]
{
 800f4f6:	b538      	push	{r3, r4, r5, lr}
 800f4f8:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 800f4fa:	6810      	ldr	r0, [r2, #0]
 800f4fc:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800f4fe:	b110      	cbz	r0, 800f506 <full_line_cmd+0x12>
 800f500:	f7f1 f80d 	bl	800051e <strlen>
 800f504:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800f506:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
 800f508:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800f50a:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
 800f50c:	fbb3 f2f0 	udiv	r2, r3, r0
 800f510:	fb00 3012 	mls	r0, r0, r2, r3
}
 800f514:	fab0 f080 	clz	r0, r0
 800f518:	0940      	lsrs	r0, r0, #5
 800f51a:	bd38      	pop	{r3, r4, r5, pc}

0800f51c <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
 800f51c:	6882      	ldr	r2, [r0, #8]
{
 800f51e:	b538      	push	{r3, r4, r5, lr}
 800f520:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
 800f522:	6810      	ldr	r0, [r2, #0]
 800f524:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
 800f526:	b110      	cbz	r0, 800f52e <z_shell_cursor_in_empty_line+0x12>
 800f528:	f7f0 fff9 	bl	800051e <strlen>
 800f52c:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800f52e:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
 800f530:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
 800f532:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
 800f534:	fbb3 f2f0 	udiv	r2, r3, r0
 800f538:	fb00 3012 	mls	r0, r0, r2, r3
}
 800f53c:	fab0 f080 	clz	r0, r0
 800f540:	0940      	lsrs	r0, r0, #5
 800f542:	bd38      	pop	{r3, r4, r5, pc}

0800f544 <z_shell_op_cond_next_line>:
{
 800f544:	b510      	push	{r4, lr}
 800f546:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 800f548:	f7ff ffe8 	bl	800f51c <z_shell_cursor_in_empty_line>
 800f54c:	b120      	cbz	r0, 800f558 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
 800f54e:	6960      	ldr	r0, [r4, #20]
}
 800f550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
 800f554:	f7f3 ba76 	b.w	8002a44 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
 800f558:	4620      	mov	r0, r4
 800f55a:	f7ff ffcb 	bl	800f4f4 <full_line_cmd>
 800f55e:	2800      	cmp	r0, #0
 800f560:	d1f5      	bne.n	800f54e <z_shell_op_cond_next_line+0xa>
}
 800f562:	bd10      	pop	{r4, pc}

0800f564 <z_shell_op_cursor_position_synchronize>:
{
 800f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 800f566:	6884      	ldr	r4, [r0, #8]
{
 800f568:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 800f56a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800f56c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800f56e:	f104 0020 	add.w	r0, r4, #32
 800f572:	f7ff ff1c 	bl	800f3ae <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
 800f576:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
 800f578:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 800f57a:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
 800f57c:	f7ff ffba 	bl	800f4f4 <full_line_cmd>
 800f580:	b110      	cbz	r0, 800f588 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
 800f582:	6968      	ldr	r0, [r5, #20]
 800f584:	f7f3 fa5e 	bl	8002a44 <z_cursor_next_line_move.isra.0>
	if (last_line) {
 800f588:	42b7      	cmp	r7, r6
 800f58a:	d107      	bne.n	800f59c <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 800f58c:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
 800f58e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 800f590:	4628      	mov	r0, r5
 800f592:	1ac9      	subs	r1, r1, r3
}
 800f594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
 800f598:	f7f3 ba70 	b.w	8002a7c <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
 800f59c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800f59e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	1ac9      	subs	r1, r1, r3
 800f5a4:	f7f3 fa54 	bl	8002a50 <z_shell_op_cursor_vert_move>
 800f5a8:	e7f0      	b.n	800f58c <z_shell_op_cursor_position_synchronize+0x28>

0800f5aa <z_shell_op_cursor_move>:
{
 800f5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ac:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
 800f5ae:	6880      	ldr	r0, [r0, #8]
{
 800f5b0:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 800f5b2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 800f5b4:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800f5b6:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 800f5b8:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
 800f5ba:	f7ff fef8 	bl	800f3ae <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
 800f5be:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
 800f5c0:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
 800f5c2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800f5c4:	462a      	mov	r2, r5
 800f5c6:	3020      	adds	r0, #32
 800f5c8:	f7ff fee6 	bl	800f398 <z_row_span_with_buffer_offsets_get>
 800f5cc:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
 800f5ce:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
 800f5d0:	462a      	mov	r2, r5
 800f5d2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800f5d4:	3020      	adds	r0, #32
 800f5d6:	f7ff fed0 	bl	800f37a <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
 800f5da:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
 800f5dc:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f7f3 fa36 	bl	8002a50 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
 800f5e4:	4631      	mov	r1, r6
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f7f3 fa48 	bl	8002a7c <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
 800f5ec:	68a3      	ldr	r3, [r4, #8]
 800f5ee:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
 800f5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f5f2 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
 800f5f2:	6883      	ldr	r3, [r0, #8]
 800f5f4:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800f5f6:	4249      	negs	r1, r1
 800f5f8:	b209      	sxth	r1, r1
 800f5fa:	f7ff bfd6 	b.w	800f5aa <z_shell_op_cursor_move>

0800f5fe <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
 800f5fe:	6883      	ldr	r3, [r0, #8]
 800f600:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 800f602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f604:	1ac9      	subs	r1, r1, r3
 800f606:	b209      	sxth	r1, r1
 800f608:	f7ff bfcf 	b.w	800f5aa <z_shell_op_cursor_move>

0800f60c <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
 800f60c:	6883      	ldr	r3, [r0, #8]
 800f60e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f610:	b11b      	cbz	r3, 800f61a <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
 800f612:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f616:	f7ff bfc8 	b.w	800f5aa <z_shell_op_cursor_move>
}
 800f61a:	4770      	bx	lr

0800f61c <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
 800f61c:	6883      	ldr	r3, [r0, #8]
 800f61e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800f620:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f622:	429a      	cmp	r2, r3
 800f624:	d202      	bcs.n	800f62c <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
 800f626:	2101      	movs	r1, #1
 800f628:	f7ff bfbf 	b.w	800f5aa <z_shell_op_cursor_move>
}
 800f62c:	4770      	bx	lr

0800f62e <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
 800f62e:	6883      	ldr	r3, [r0, #8]
 800f630:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800f632:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
 800f634:	4413      	add	r3, r2
 800f636:	2200      	movs	r2, #0
 800f638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
 800f63c:	f7f3 b9f6 	b.w	8002a2c <z_clear_eos>

0800f640 <z_shell_cmd_line_erase>:
{
 800f640:	b510      	push	{r4, lr}
 800f642:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
 800f644:	6880      	ldr	r0, [r0, #8]
 800f646:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800f648:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800f64a:	3020      	adds	r0, #32
 800f64c:	f7ff feaf 	bl	800f3ae <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
 800f650:	68a3      	ldr	r3, [r4, #8]
 800f652:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
 800f654:	4620      	mov	r0, r4
 800f656:	f1c1 0101 	rsb	r1, r1, #1
 800f65a:	f7f3 fa0f 	bl	8002a7c <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
 800f65e:	68a3      	ldr	r3, [r4, #8]
 800f660:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800f662:	4620      	mov	r0, r4
 800f664:	3901      	subs	r1, #1
 800f666:	f7f3 f9f3 	bl	8002a50 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
 800f66a:	4620      	mov	r0, r4
}
 800f66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
 800f670:	f7f3 b9dc 	b.w	8002a2c <z_clear_eos>

0800f674 <z_shell_write>:
{
 800f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	4605      	mov	r5, r0
 800f67a:	b086      	sub	sp, #24
 800f67c:	460f      	mov	r7, r1
 800f67e:	4614      	mov	r4, r2
	size_t offset = 0;
 800f680:	2600      	movs	r6, #0
	while (length) {
 800f682:	b914      	cbnz	r4, 800f68a <z_shell_write+0x16>
}
 800f684:	b006      	add	sp, #24
 800f686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
 800f68a:	6868      	ldr	r0, [r5, #4]
 800f68c:	6803      	ldr	r3, [r0, #0]
 800f68e:	4622      	mov	r2, r4
 800f690:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800f694:	19b9      	adds	r1, r7, r6
 800f696:	466b      	mov	r3, sp
 800f698:	47c0      	blx	r8
		offset += tmp_cnt;
 800f69a:	9a00      	ldr	r2, [sp, #0]
 800f69c:	4416      	add	r6, r2
		length -= tmp_cnt;
 800f69e:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
 800f6a0:	2a00      	cmp	r2, #0
 800f6a2:	d1ee      	bne.n	800f682 <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
 800f6a4:	68ab      	ldr	r3, [r5, #8]
 800f6a6:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
 800f6a8:	2903      	cmp	r1, #3
 800f6aa:	d0ea      	beq.n	800f682 <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
 800f6ac:	2902      	cmp	r1, #2
 800f6ae:	d813      	bhi.n	800f6d8 <z_shell_write+0x64>
		k_poll_event_init(&event,
 800f6b0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	a801      	add	r0, sp, #4
 800f6b8:	f005 f833 	bl	8014722 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
 800f6bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6c4:	2101      	movs	r1, #1
 800f6c6:	a801      	add	r0, sp, #4
 800f6c8:	f7fd fe92 	bl	800d3f0 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
 800f6cc:	68a8      	ldr	r0, [r5, #8]
 800f6ce:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
 800f6d2:	f005 f848 	bl	8014766 <z_impl_k_poll_signal_reset>
 800f6d6:	e7d4      	b.n	800f682 <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
 800f6d8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
 800f6dc:	0792      	lsls	r2, r2, #30
 800f6de:	d5fb      	bpl.n	800f6d8 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f6e0:	f3bf 8f5b 	dmb	ish
 800f6e4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800f6e8:	e853 2f00 	ldrex	r2, [r3]
 800f6ec:	f022 0202 	bic.w	r2, r2, #2
 800f6f0:	e843 2100 	strex	r1, r2, [r3]
 800f6f4:	2900      	cmp	r1, #0
 800f6f6:	d1f7      	bne.n	800f6e8 <z_shell_write+0x74>
 800f6f8:	f3bf 8f5b 	dmb	ish
	return ret;
 800f6fc:	e7c1      	b.n	800f682 <z_shell_write+0xe>

0800f6fe <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
 800f6fe:	f7ff bfb9 	b.w	800f674 <z_shell_write>

0800f702 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
 800f702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f704:	461e      	mov	r6, r3
	return sh->ctx->cfg.flags.use_colors == 1;
 800f706:	6883      	ldr	r3, [r0, #8]
 800f708:	4615      	mov	r5, r2
 800f70a:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 800f70e:	06d2      	lsls	r2, r2, #27
{
 800f710:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 800f712:	d513      	bpl.n	800f73c <z_shell_vfprintf+0x3a>
	    z_flag_use_colors_get(shell)	  &&
 800f714:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f718:	428a      	cmp	r2, r1
 800f71a:	d00f      	beq.n	800f73c <z_shell_vfprintf+0x3a>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
 800f71c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f71e:	f8ad 3004 	strh.w	r3, [sp, #4]
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
 800f722:	f7f3 fa03 	bl	8002b2c <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 800f726:	6960      	ldr	r0, [r4, #20]
 800f728:	4632      	mov	r2, r6
 800f72a:	4629      	mov	r1, r5
 800f72c:	f7f3 f808 	bl	8002740 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
 800f730:	a901      	add	r1, sp, #4
 800f732:	4620      	mov	r0, r4
 800f734:	f7f3 fa1a 	bl	8002b6c <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
 800f738:	b003      	add	sp, #12
 800f73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 800f73c:	6960      	ldr	r0, [r4, #20]
 800f73e:	4632      	mov	r2, r6
 800f740:	4629      	mov	r1, r5
}
 800f742:	b003      	add	sp, #12
 800f744:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
 800f748:	f7f2 bffa 	b.w	8002740 <z_shell_fprintf_fmt>

0800f74c <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
 800f74c:	b40c      	push	{r2, r3}
 800f74e:	b507      	push	{r0, r1, r2, lr}
 800f750:	ab04      	add	r3, sp, #16
 800f752:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
 800f756:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
 800f758:	f7ff ffd3 	bl	800f702 <z_shell_vfprintf>
	va_end(args);
}
 800f75c:	b003      	add	sp, #12
 800f75e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f762:	b002      	add	sp, #8
 800f764:	4770      	bx	lr

0800f766 <data_insert>:
{
 800f766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800f76a:	6886      	ldr	r6, [r0, #8]
 800f76c:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 800f76e:	18ab      	adds	r3, r5, r2
 800f770:	2bff      	cmp	r3, #255	; 0xff
{
 800f772:	4607      	mov	r7, r0
 800f774:	4688      	mov	r8, r1
 800f776:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 800f778:	dc1e      	bgt.n	800f7b8 <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800f77a:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800f77c:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 800f77e:	3342      	adds	r3, #66	; 0x42
 800f780:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800f782:	b2ad      	uxth	r5, r5
 800f784:	462a      	mov	r2, r5
 800f786:	4631      	mov	r1, r6
 800f788:	1930      	adds	r0, r6, r4
 800f78a:	f005 f830 	bl	80147ee <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800f78e:	4622      	mov	r2, r4
 800f790:	4641      	mov	r1, r8
 800f792:	4630      	mov	r0, r6
 800f794:	f005 f80a 	bl	80147ac <memcpy>
	shell->ctx->cmd_buff_len += len;
 800f798:	68b9      	ldr	r1, [r7, #8]
 800f79a:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
 800f79c:	4423      	add	r3, r4
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
 800f7a2:	440b      	add	r3, r1
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
 800f7aa:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
 800f7ae:	079b      	lsls	r3, r3, #30
 800f7b0:	d404      	bmi.n	800f7bc <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
 800f7b2:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 800f7b4:	4414      	add	r4, r2
 800f7b6:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
 800f7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
 800f7bc:	4629      	mov	r1, r5
 800f7be:	4638      	mov	r0, r7
}
 800f7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
 800f7c4:	f7f3 ba4c 	b.w	8002c60 <reprint_from_cursor>

0800f7c8 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
 800f7c8:	f7ff bfcd 	b.w	800f766 <data_insert>

0800f7cc <z_shell_op_char_delete>:
{
 800f7cc:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800f7ce:	6883      	ldr	r3, [r0, #8]
{
 800f7d0:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
 800f7d2:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 800f7d4:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 800f7d6:	1a24      	subs	r4, r4, r0
 800f7d8:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
 800f7da:	b18c      	cbz	r4, 800f800 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
 800f7dc:	3042      	adds	r0, #66	; 0x42
 800f7de:	4418      	add	r0, r3
__ssp_bos_icheck3(memmove, void *, const void *)
 800f7e0:	4622      	mov	r2, r4
 800f7e2:	1c41      	adds	r1, r0, #1
 800f7e4:	f005 f803 	bl	80147ee <memmove>
	--shell->ctx->cmd_buff_len;
 800f7e8:	68aa      	ldr	r2, [r5, #8]
 800f7ea:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
 800f7ec:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	2201      	movs	r2, #1
}
 800f7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
 800f7fa:	b289      	uxth	r1, r1
 800f7fc:	f7f3 ba30 	b.w	8002c60 <reprint_from_cursor>
}
 800f800:	bd38      	pop	{r3, r4, r5, pc}

0800f802 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
 800f802:	6883      	ldr	r3, [r0, #8]
 800f804:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
 800f806:	b510      	push	{r4, lr}
 800f808:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
 800f80a:	b152      	cbz	r2, 800f822 <z_shell_op_char_backspace+0x20>
 800f80c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f80e:	b143      	cbz	r3, 800f822 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
 800f810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f814:	f7ff fec9 	bl	800f5aa <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
 800f818:	4620      	mov	r0, r4
}
 800f81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
 800f81e:	f7ff bfd5 	b.w	800f7cc <z_shell_op_char_delete>
}
 800f822:	bd10      	pop	{r4, pc}

0800f824 <z_shell_raw_fprintf>:
{
 800f824:	b40e      	push	{r1, r2, r3}
 800f826:	b503      	push	{r0, r1, lr}
 800f828:	aa03      	add	r2, sp, #12
 800f82a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 800f82e:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 800f830:	f7f2 ff86 	bl	8002740 <z_shell_fprintf_fmt>
}
 800f834:	b002      	add	sp, #8
 800f836:	f85d eb04 	ldr.w	lr, [sp], #4
 800f83a:	b003      	add	sp, #12
 800f83c:	4770      	bx	lr

0800f83e <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
 800f83e:	6983      	ldr	r3, [r0, #24]
 800f840:	2000      	movs	r0, #0
 800f842:	6018      	str	r0, [r3, #0]
}
 800f844:	4770      	bx	lr

0800f846 <z_shell_raw_fprintf>:
{
 800f846:	b40e      	push	{r1, r2, r3}
 800f848:	b503      	push	{r0, r1, lr}
 800f84a:	aa03      	add	r2, sp, #12
 800f84c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 800f850:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 800f852:	f7f2 ff75 	bl	8002740 <z_shell_fprintf_fmt>
}
 800f856:	b002      	add	sp, #8
 800f858:	f85d eb04 	ldr.w	lr, [sp], #4
 800f85c:	b003      	add	sp, #12
 800f85e:	4770      	bx	lr

0800f860 <cmd_bacskpace_mode_backspace>:
 800f860:	6883      	ldr	r3, [r0, #8]
 800f862:	f3bf 8f5b 	dmb	ish
 800f866:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f86a:	e853 2f00 	ldrex	r2, [r3]
 800f86e:	f022 0208 	bic.w	r2, r2, #8
 800f872:	e843 2100 	strex	r1, r2, [r3]
 800f876:	2900      	cmp	r1, #0
 800f878:	d1f7      	bne.n	800f86a <cmd_bacskpace_mode_backspace+0xa>
 800f87a:	f3bf 8f5b 	dmb	ish
}
 800f87e:	2000      	movs	r0, #0
 800f880:	4770      	bx	lr

0800f882 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f882:	6883      	ldr	r3, [r0, #8]
 800f884:	f3bf 8f5b 	dmb	ish
 800f888:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f88c:	e853 2f00 	ldrex	r2, [r3]
 800f890:	f042 0208 	orr.w	r2, r2, #8
 800f894:	e843 2100 	strex	r1, r2, [r3]
 800f898:	2900      	cmp	r1, #0
 800f89a:	d1f7      	bne.n	800f88c <cmd_bacskpace_mode_delete+0xa>
 800f89c:	f3bf 8f5b 	dmb	ish
}
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	4770      	bx	lr

0800f8a4 <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f8a4:	6883      	ldr	r3, [r0, #8]
 800f8a6:	f3bf 8f5b 	dmb	ish
 800f8aa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f8ae:	e853 2f00 	ldrex	r2, [r3]
 800f8b2:	f022 0202 	bic.w	r2, r2, #2
 800f8b6:	e843 2100 	strex	r1, r2, [r3]
 800f8ba:	2900      	cmp	r1, #0
 800f8bc:	d1f7      	bne.n	800f8ae <cmd_echo_off+0xa>
 800f8be:	f3bf 8f5b 	dmb	ish
}
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	4770      	bx	lr

0800f8c6 <cmd_colors_off>:
 800f8c6:	6883      	ldr	r3, [r0, #8]
 800f8c8:	f3bf 8f5b 	dmb	ish
 800f8cc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f8d0:	e853 2f00 	ldrex	r2, [r3]
 800f8d4:	f022 0210 	bic.w	r2, r2, #16
 800f8d8:	e843 2100 	strex	r1, r2, [r3]
 800f8dc:	2900      	cmp	r1, #0
 800f8de:	d1f7      	bne.n	800f8d0 <cmd_colors_off+0xa>
 800f8e0:	f3bf 8f5b 	dmb	ish
}
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	4770      	bx	lr

0800f8e8 <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f8e8:	6883      	ldr	r3, [r0, #8]
 800f8ea:	f3bf 8f5b 	dmb	ish
 800f8ee:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f8f2:	e853 2f00 	ldrex	r2, [r3]
 800f8f6:	f042 0210 	orr.w	r2, r2, #16
 800f8fa:	e843 2100 	strex	r1, r2, [r3]
 800f8fe:	2900      	cmp	r1, #0
 800f900:	d1f7      	bne.n	800f8f2 <cmd_colors_on+0xa>
 800f902:	f3bf 8f5b 	dmb	ish
}
 800f906:	2000      	movs	r0, #0
 800f908:	4770      	bx	lr

0800f90a <cmd_echo_on>:
 800f90a:	6883      	ldr	r3, [r0, #8]
 800f90c:	f3bf 8f5b 	dmb	ish
 800f910:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f914:	e853 2f00 	ldrex	r2, [r3]
 800f918:	f042 0202 	orr.w	r2, r2, #2
 800f91c:	e843 2100 	strex	r1, r2, [r3]
 800f920:	2900      	cmp	r1, #0
 800f922:	d1f7      	bne.n	800f914 <cmd_echo_on+0xa>
 800f924:	f3bf 8f5b 	dmb	ish
}
 800f928:	2000      	movs	r0, #0
 800f92a:	4770      	bx	lr

0800f92c <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
 800f92c:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800f92e:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
 800f930:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
 800f932:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
 800f936:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800f938:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800f93a:	2200      	movs	r2, #0
	node->prev = NULL;
 800f93c:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
 800f940:	8919      	ldrh	r1, [r3, #8]
 800f942:	895b      	ldrh	r3, [r3, #10]
 800f944:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
 800f946:	310c      	adds	r1, #12
 800f948:	f7ff f99f 	bl	800ec8a <ring_buf_get_finish>

	return true;
}
 800f94c:	2001      	movs	r0, #1
 800f94e:	bd08      	pop	{r3, pc}

0800f950 <z_shell_history_mode_exit>:
	history->current = NULL;
 800f950:	2300      	movs	r3, #0
 800f952:	60c3      	str	r3, [r0, #12]
}
 800f954:	4770      	bx	lr

0800f956 <z_shell_history_get>:
{
 800f956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f958:	461f      	mov	r7, r3
	return list->head == list;
 800f95a:	4603      	mov	r3, r0
 800f95c:	4616      	mov	r6, r2
 800f95e:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
 800f962:	429c      	cmp	r4, r3
 800f964:	d102      	bne.n	800f96c <z_shell_history_get+0x16>
		*len = 0U;
 800f966:	2000      	movs	r0, #0
 800f968:	8038      	strh	r0, [r7, #0]
}
 800f96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
 800f96c:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
 800f96e:	b9b1      	cbnz	r1, 800f99e <z_shell_history_get+0x48>
		if (history->current == NULL) {
 800f970:	2d00      	cmp	r5, #0
 800f972:	d0f8      	beq.n	800f966 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
 800f974:	42a5      	cmp	r5, r4
 800f976:	d102      	bne.n	800f97e <z_shell_history_get+0x28>
	history->current = l_item;
 800f978:	2300      	movs	r3, #0
 800f97a:	60c3      	str	r3, [r0, #12]
	if (l_item) {
 800f97c:	e7f3      	b.n	800f966 <z_shell_history_get+0x10>
 800f97e:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
 800f980:	60c4      	str	r4, [r0, #12]
	if (l_item) {
 800f982:	2c00      	cmp	r4, #0
 800f984:	d0ef      	beq.n	800f966 <z_shell_history_get+0x10>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800f986:	8922      	ldrh	r2, [r4, #8]
 800f988:	f104 010c 	add.w	r1, r4, #12
 800f98c:	4630      	mov	r0, r6
 800f98e:	f004 ff0d 	bl	80147ac <memcpy>
		*len = h_item->len;
 800f992:	8923      	ldrh	r3, [r4, #8]
 800f994:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
 800f996:	2200      	movs	r2, #0
 800f998:	54f2      	strb	r2, [r6, r3]
		return true;
 800f99a:	2001      	movs	r0, #1
 800f99c:	e7e5      	b.n	800f96a <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
 800f99e:	2d00      	cmp	r5, #0
 800f9a0:	d0ee      	beq.n	800f980 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
 800f9a2:	6883      	ldr	r3, [r0, #8]
 800f9a4:	429d      	cmp	r5, r3
 800f9a6:	d0e7      	beq.n	800f978 <z_shell_history_get+0x22>
 800f9a8:	682c      	ldr	r4, [r5, #0]
 800f9aa:	e7e9      	b.n	800f980 <z_shell_history_get+0x2a>

0800f9ac <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
 800f9b0:	1d05      	adds	r5, r0, #4
 800f9b2:	6863      	ldr	r3, [r4, #4]
 800f9b4:	42ab      	cmp	r3, r5
 800f9b6:	d004      	beq.n	800f9c2 <z_shell_history_purge+0x16>
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f7ff ffb7 	bl	800f92c <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d1f7      	bne.n	800f9b2 <z_shell_history_purge+0x6>
	}
}
 800f9c2:	bd38      	pop	{r3, r4, r5, pc}

0800f9c4 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
 800f9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
 800f9c8:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
 800f9ca:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 800f9ce:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 800f9d2:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 800f9d4:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
 800f9d8:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 800f9da:	429d      	cmp	r5, r3
{
 800f9dc:	4604      	mov	r4, r0
 800f9de:	468a      	mov	sl, r1
 800f9e0:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 800f9e2:	d841      	bhi.n	800fa68 <z_shell_history_put+0xa4>
	history->current = NULL;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
 800f9e8:	2a00      	cmp	r2, #0
 800f9ea:	d03d      	beq.n	800fa68 <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
 800f9ec:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
 800f9f0:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800f9f2:	4581      	cmp	r9, r0
 800f9f4:	d12d      	bne.n	800fa52 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 800f9f6:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
 800f9f8:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
 800f9fc:	6820      	ldr	r0, [r4, #0]
 800f9fe:	462a      	mov	r2, r5
 800fa00:	a901      	add	r1, sp, #4
 800fa02:	f7ff f8af 	bl	800eb64 <ring_buf_put_claim>
		if (claim_len < total_len) {
 800fa06:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
 800fa08:	4606      	mov	r6, r0
		if (claim_len < total_len) {
 800fa0a:	d930      	bls.n	800fa6e <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
 800fa0c:	6820      	ldr	r0, [r4, #0]
 800fa0e:	462a      	mov	r2, r5
 800fa10:	a901      	add	r1, sp, #4
 800fa12:	f7ff f8a7 	bl	800eb64 <ring_buf_put_claim>
			if (claim2_len == total_len) {
 800fa16:	4285      	cmp	r5, r0
 800fa18:	d12a      	bne.n	800fa70 <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
 800fa1a:	4631      	mov	r1, r6
 800fa1c:	6820      	ldr	r0, [r4, #0]
 800fa1e:	f7ff f8ce 	bl	800ebbe <ring_buf_put_finish>
				padding += claim_len;
 800fa22:	44b0      	add	r8, r6
 800fa24:	fa1f f888 	uxth.w	r8, r8
 800fa28:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
 800fa2a:	9d01      	ldr	r5, [sp, #4]
 800fa2c:	4651      	mov	r1, sl
	item->len = len;
 800fa2e:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
 800fa30:	f8a5 800a 	strh.w	r8, [r5, #10]
 800fa34:	463a      	mov	r2, r7
 800fa36:	f105 000c 	add.w	r0, r5, #12
 800fa3a:	f004 feb7 	bl	80147ac <memcpy>
	sys_dnode_t *const head = list->head;
 800fa3e:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
 800fa40:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
 800fa42:	e9c5 3900 	strd	r3, r9, [r5]
 800fa46:	4631      	mov	r1, r6
	head->prev = node;
 800fa48:	605d      	str	r5, [r3, #4]
	list->head = node;
 800fa4a:	6065      	str	r5, [r4, #4]
 800fa4c:	f7ff f8b7 	bl	800ebbe <ring_buf_put_finish>
			break;
 800fa50:	e00a      	b.n	800fa68 <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
 800fa52:	9001      	str	r0, [sp, #4]
	if (l_item &&
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d0cf      	beq.n	800f9f8 <z_shell_history_put+0x34>
	   (h_item->len == len) &&
 800fa58:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d1cc      	bne.n	800f9f8 <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
 800fa5e:	300c      	adds	r0, #12
 800fa60:	f004 fe94 	bl	801478c <memcmp>
	   (h_item->len == len) &&
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d1c7      	bne.n	800f9f8 <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
 800fa68:	b003      	add	sp, #12
 800fa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
 800fa6e:	d0dc      	beq.n	800fa2a <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
 800fa70:	6820      	ldr	r0, [r4, #0]
 800fa72:	2100      	movs	r1, #0
 800fa74:	f7ff f8a3 	bl	800ebbe <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
 800fa78:	6863      	ldr	r3, [r4, #4]
 800fa7a:	4599      	cmp	r9, r3
 800fa7c:	d107      	bne.n	800fa8e <z_shell_history_put+0xca>
			ring_buf_reset(history->ring_buf);
 800fa7e:	6823      	ldr	r3, [r4, #0]
	buf->tail = 0;
 800fa80:	e9c3 bb00 	strd	fp, fp, [r3]
__ssp_bos_icheck3(memset, void *, int)
 800fa84:	f8c3 b008 	str.w	fp, [r3, #8]
 800fa88:	f8c3 b00c 	str.w	fp, [r3, #12]
}
 800fa8c:	e7b6      	b.n	800f9fc <z_shell_history_put+0x38>
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f7ff ff4c 	bl	800f92c <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d1b1      	bne.n	800f9fc <z_shell_history_put+0x38>
 800fa98:	e7f1      	b.n	800fa7e <z_shell_history_put+0xba>

0800fa9a <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
 800fa9a:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
 800fa9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
 800faa0:	2300      	movs	r3, #0
 800faa2:	60c3      	str	r3, [r0, #12]
}
 800faa4:	4770      	bx	lr

0800faa6 <z_shell_has_wildcard>:
{
 800faa6:	b510      	push	{r4, lr}
 800faa8:	4604      	mov	r4, r0
 800faaa:	b908      	cbnz	r0, 800fab0 <z_shell_has_wildcard+0xa>
	return false;
 800faac:	2000      	movs	r0, #0
}
 800faae:	bd10      	pop	{r4, pc}
 800fab0:	f7f0 fd35 	bl	800051e <strlen>
	for (size_t i = 0; i < str_len; i++) {
 800fab4:	2300      	movs	r3, #0
 800fab6:	b280      	uxth	r0, r0
 800fab8:	4283      	cmp	r3, r0
 800faba:	d2f7      	bcs.n	800faac <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
 800fabc:	5ce2      	ldrb	r2, [r4, r3]
 800fabe:	2a3f      	cmp	r2, #63	; 0x3f
 800fac0:	d003      	beq.n	800faca <z_shell_has_wildcard+0x24>
 800fac2:	2a2a      	cmp	r2, #42	; 0x2a
 800fac4:	d001      	beq.n	800faca <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
 800fac6:	3301      	adds	r3, #1
 800fac8:	e7f6      	b.n	800fab8 <z_shell_has_wildcard+0x12>
			return true;
 800faca:	2001      	movs	r0, #1
 800facc:	e7ef      	b.n	800faae <z_shell_has_wildcard+0x8>

0800face <z_shell_wildcard_prepare>:
{
 800face:	b510      	push	{r4, lr}
 800fad0:	4604      	mov	r4, r0
 800fad2:	6880      	ldr	r0, [r0, #8]
 800fad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fad8:	2100      	movs	r1, #0
 800fada:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 800fade:	f004 fea0 	bl	8014822 <memset>
	memcpy(shell->ctx->temp_buff,
 800fae2:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800fae4:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800fae6:	f100 0142 	add.w	r1, r0, #66	; 0x42
 800faea:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 800faee:	f004 fe5d 	bl	80147ac <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
 800faf2:	68a0      	ldr	r0, [r4, #8]
 800faf4:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 800faf8:	f7f2 ff28 	bl	800294c <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
 800fafc:	68a0      	ldr	r0, [r4, #8]
 800fafe:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 800fb02:	f7f0 fd0c 	bl	800051e <strlen>
 800fb06:	68a3      	ldr	r3, [r4, #8]
 800fb08:	3001      	adds	r0, #1
 800fb0a:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
 800fb0e:	bd10      	pop	{r4, pc}

0800fb10 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
 800fb10:	b510      	push	{r4, lr}
 800fb12:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
 800fb14:	6880      	ldr	r0, [r0, #8]
 800fb16:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800fb1a:	f500 71a1 	add.w	r1, r0, #322	; 0x142
 800fb1e:	3042      	adds	r0, #66	; 0x42
 800fb20:	f004 fe44 	bl	80147ac <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
 800fb24:	68a3      	ldr	r3, [r4, #8]
 800fb26:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800fb2a:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 800fb2c:	bd10      	pop	{r4, pc}

0800fb2e <inet_is_supported>:
};

#if defined(CONFIG_NET_NATIVE)
static bool inet_is_supported(int family, int type, int proto)
{
	if (family != AF_INET && family != AF_INET6) {
 800fb2e:	3801      	subs	r0, #1
		return false;
	}

	return true;
}
 800fb30:	2801      	cmp	r0, #1
 800fb32:	bf8c      	ite	hi
 800fb34:	2000      	movhi	r0, #0
 800fb36:	2001      	movls	r0, #1
 800fb38:	4770      	bx	lr

0800fb3a <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 800fb3a:	f7fc bc41 	b.w	800c3c0 <z_impl_k_mutex_lock>

0800fb3e <sock_ioctl_vmeth>:
	switch (request) {
 800fb3e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
{
 800fb42:	b538      	push	{r3, r4, r5, lr}
 800fb44:	4604      	mov	r4, r0
	switch (request) {
 800fb46:	d028      	beq.n	800fb9a <sock_ioctl_vmeth+0x5c>
 800fb48:	d80a      	bhi.n	800fb60 <sock_ioctl_vmeth+0x22>
 800fb4a:	2903      	cmp	r1, #3
 800fb4c:	d013      	beq.n	800fb76 <sock_ioctl_vmeth+0x38>
 800fb4e:	2904      	cmp	r1, #4
 800fb50:	d016      	beq.n	800fb80 <sock_ioctl_vmeth+0x42>
		errno = EOPNOTSUPP;
 800fb52:	f000 fcfe 	bl	8010552 <__errno>
 800fb56:	235f      	movs	r3, #95	; 0x5f
 800fb58:	6003      	str	r3, [r0, #0]
		return -1;
 800fb5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb5e:	e00e      	b.n	800fb7e <sock_ioctl_vmeth+0x40>
	switch (request) {
 800fb60:	f240 1303 	movw	r3, #259	; 0x103
 800fb64:	4299      	cmp	r1, r3
 800fb66:	d03f      	beq.n	800fbe8 <sock_ioctl_vmeth+0xaa>
 800fb68:	f240 1305 	movw	r3, #261	; 0x105
 800fb6c:	4299      	cmp	r1, r3
 800fb6e:	d1f0      	bne.n	800fb52 <sock_ioctl_vmeth+0x14>
		lock = va_arg(args, struct k_mutex *);
 800fb70:	6813      	ldr	r3, [r2, #0]
	ctx->cond.lock = lock;
 800fb72:	67c3      	str	r3, [r0, #124]	; 0x7c
		return 0;
 800fb74:	e002      	b.n	800fb7c <sock_ioctl_vmeth+0x3e>
 800fb76:	6d83      	ldr	r3, [r0, #88]	; 0x58
		if (sock_is_nonblock(obj)) {
 800fb78:	079b      	lsls	r3, r3, #30
 800fb7a:	d456      	bmi.n	800fc2a <sock_ioctl_vmeth+0xec>
		return 0;
 800fb7c:	2000      	movs	r0, #0
}
 800fb7e:	bd38      	pop	{r3, r4, r5, pc}
		if (flags & O_NONBLOCK) {
 800fb80:	6810      	ldr	r0, [r2, #0]
 800fb82:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fb84:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800fb88:	f022 0302 	bic.w	r3, r2, #2
 800fb8c:	d003      	beq.n	800fb96 <sock_ioctl_vmeth+0x58>
	val = (val & ~mask) | flag;
 800fb8e:	f043 0302 	orr.w	r3, r3, #2
	(ctx)->socket_data = UINT_TO_POINTER(val);
 800fb92:	65a3      	str	r3, [r4, #88]	; 0x58
 800fb94:	e7f2      	b.n	800fb7c <sock_ioctl_vmeth+0x3e>
 800fb96:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800fb98:	e7f1      	b.n	800fb7e <sock_ioctl_vmeth+0x40>
	if (pfd->events & ZSOCK_POLLIN) {
 800fb9a:	6813      	ldr	r3, [r2, #0]
 800fb9c:	8899      	ldrh	r1, [r3, #4]
 800fb9e:	07cd      	lsls	r5, r1, #31
 800fba0:	d51a      	bpl.n	800fbd8 <sock_ioctl_vmeth+0x9a>
		pev = va_arg(args, struct k_poll_event **);
 800fba2:	6853      	ldr	r3, [r2, #4]
		if (*pev == pev_end) {
 800fba4:	6892      	ldr	r2, [r2, #8]
 800fba6:	6818      	ldr	r0, [r3, #0]
 800fba8:	4282      	cmp	r2, r0
 800fbaa:	d041      	beq.n	800fc30 <sock_ioctl_vmeth+0xf2>
		(*pev)->obj = &ctx->recv_q;
 800fbac:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 800fbb0:	6102      	str	r2, [r0, #16]
		(*pev)->type = K_POLL_TYPE_FIFO_DATA_AVAILABLE;
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	7b50      	ldrb	r0, [r2, #13]
 800fbb6:	2504      	movs	r5, #4
 800fbb8:	f365 0004 	bfi	r0, r5, #0, #5
 800fbbc:	7350      	strb	r0, [r2, #13]
		(*pev)->mode = K_POLL_MODE_NOTIFY_ONLY;
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	7b90      	ldrb	r0, [r2, #14]
 800fbc2:	f36f 00c3 	bfc	r0, #3, #1
 800fbc6:	7390      	strb	r0, [r2, #14]
		(*pev)->state = K_POLL_STATE_NOT_READY;
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	68d0      	ldr	r0, [r2, #12]
 800fbcc:	f36f 3052 	bfc	r0, #13, #6
 800fbd0:	60d0      	str	r0, [r2, #12]
		(*pev)++;
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	3214      	adds	r2, #20
 800fbd6:	601a      	str	r2, [r3, #0]
	if (pfd->events & ZSOCK_POLLOUT) {
 800fbd8:	0748      	lsls	r0, r1, #29
 800fbda:	d402      	bmi.n	800fbe2 <sock_ioctl_vmeth+0xa4>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
 800fbdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
	if (sock_is_eof(ctx)) {
 800fbde:	07d9      	lsls	r1, r3, #31
 800fbe0:	d5cc      	bpl.n	800fb7c <sock_ioctl_vmeth+0x3e>
		return -EALREADY;
 800fbe2:	f06f 0077 	mvn.w	r0, #119	; 0x77
 800fbe6:	e7ca      	b.n	800fb7e <sock_ioctl_vmeth+0x40>
		pev = va_arg(args, struct k_poll_event **);
 800fbe8:	e9d2 3000 	ldrd	r3, r0, [r2]
	if (pfd->events & ZSOCK_POLLOUT) {
 800fbec:	8899      	ldrh	r1, [r3, #4]
 800fbee:	074a      	lsls	r2, r1, #29
		pfd->revents |= ZSOCK_POLLOUT;
 800fbf0:	bf42      	ittt	mi
 800fbf2:	88da      	ldrhmi	r2, [r3, #6]
 800fbf4:	f042 0204 	orrmi.w	r2, r2, #4
 800fbf8:	80da      	strhmi	r2, [r3, #6]
	if (pfd->events & ZSOCK_POLLIN) {
 800fbfa:	07cd      	lsls	r5, r1, #31
 800fbfc:	d50d      	bpl.n	800fc1a <sock_ioctl_vmeth+0xdc>
		if ((*pev)->state != K_POLL_STATE_NOT_READY || sock_is_eof(ctx)) {
 800fbfe:	6802      	ldr	r2, [r0, #0]
 800fc00:	68d1      	ldr	r1, [r2, #12]
 800fc02:	f411 2ffc 	tst.w	r1, #516096	; 0x7e000
 800fc06:	d102      	bne.n	800fc0e <sock_ioctl_vmeth+0xd0>
 800fc08:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fc0a:	07c9      	lsls	r1, r1, #31
 800fc0c:	d503      	bpl.n	800fc16 <sock_ioctl_vmeth+0xd8>
			pfd->revents |= ZSOCK_POLLIN;
 800fc0e:	88d9      	ldrh	r1, [r3, #6]
 800fc10:	f041 0101 	orr.w	r1, r1, #1
 800fc14:	80d9      	strh	r1, [r3, #6]
		(*pev)++;
 800fc16:	3214      	adds	r2, #20
 800fc18:	6002      	str	r2, [r0, #0]
 800fc1a:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (sock_is_eof(ctx)) {
 800fc1c:	07d2      	lsls	r2, r2, #31
 800fc1e:	d5ad      	bpl.n	800fb7c <sock_ioctl_vmeth+0x3e>
		pfd->revents |= ZSOCK_POLLHUP;
 800fc20:	88da      	ldrh	r2, [r3, #6]
 800fc22:	f042 0210 	orr.w	r2, r2, #16
 800fc26:	80da      	strh	r2, [r3, #6]
 800fc28:	e7a8      	b.n	800fb7c <sock_ioctl_vmeth+0x3e>
		    return O_NONBLOCK;
 800fc2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800fc2e:	e7a6      	b.n	800fb7e <sock_ioctl_vmeth+0x40>
			return -ENOMEM;
 800fc30:	f06f 000b 	mvn.w	r0, #11
 800fc34:	e7a3      	b.n	800fb7e <sock_ioctl_vmeth+0x40>

0800fc36 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 800fc36:	f7fc bc3b 	b.w	800c4b0 <z_impl_k_mutex_unlock>

0800fc3a <zsock_received_cb>:
{
 800fc3a:	b570      	push	{r4, r5, r6, lr}
 800fc3c:	4604      	mov	r4, r0
	if (ctx->cond.lock) {
 800fc3e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
{
 800fc40:	460d      	mov	r5, r1
	if (ctx->cond.lock) {
 800fc42:	b128      	cbz	r0, 800fc50 <zsock_received_cb+0x16>
		(void)k_mutex_lock(ctx->cond.lock, K_FOREVER);
 800fc44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc4c:	f7ff ff75 	bl	800fb3a <k_mutex_lock.constprop.0.isra.0>
		struct net_pkt *last_pkt = k_fifo_peek_tail(&ctx->recv_q);
 800fc50:	f104 065c 	add.w	r6, r4, #92	; 0x5c
	if (!pkt) {
 800fc54:	b9dd      	cbnz	r5, 800fc8e <zsock_received_cb+0x54>
	return z_impl_k_queue_peek_tail(queue);
 800fc56:	4630      	mov	r0, r6
 800fc58:	f004 f9f6 	bl	8014048 <z_impl_k_queue_peek_tail>
		if (!last_pkt) {
 800fc5c:	b980      	cbnz	r0, 800fc80 <zsock_received_cb+0x46>
	val = (val & ~mask) | flag;
 800fc5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fc60:	f043 0301 	orr.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
 800fc64:	65a3      	str	r3, [r4, #88]	; 0x58
	z_impl_k_queue_cancel_wait(queue);
 800fc66:	4630      	mov	r0, r6
 800fc68:	f004 f9b4 	bl	8013fd4 <z_impl_k_queue_cancel_wait>
	if (ctx->cond.lock) {
 800fc6c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800fc6e:	b108      	cbz	r0, 800fc74 <zsock_received_cb+0x3a>
		(void)k_mutex_unlock(ctx->cond.lock);
 800fc70:	f7ff ffe1 	bl	800fc36 <k_mutex_unlock.isra.0>
	return z_impl_k_condvar_signal(condvar);
 800fc74:	f104 0074 	add.w	r0, r4, #116	; 0x74
}
 800fc78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc7c:	f7fd b9e2 	b.w	800d044 <z_impl_k_condvar_signal>
	pkt->sent_or_eof = eof;
 800fc80:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800fc84:	f043 0302 	orr.w	r3, r3, #2
 800fc88:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
			NET_DBG("Set EOF flag on pkt %p", last_pkt);
 800fc8c:	e7ee      	b.n	800fc6c <zsock_received_cb+0x32>
 800fc8e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800fc92:	f36f 0341 	bfc	r3, #1, #1
 800fc96:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 800fc9a:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800fc9e:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (net_context_get_type(ctx) == SOCK_STREAM) {
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d106      	bne.n	800fcb4 <zsock_received_cb+0x7a>
		net_context_update_recv_wnd(ctx, -net_pkt_remaining_data(pkt));
 800fca6:	4628      	mov	r0, r5
 800fca8:	f001 fff9 	bl	8011c9e <net_pkt_remaining_data>
 800fcac:	4241      	negs	r1, r0
 800fcae:	4620      	mov	r0, r4
 800fcb0:	f001 fd73 	bl	801179a <net_context_update_recv_wnd>
	k_fifo_put(&ctx->recv_q, pkt);
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	f004 f9ad 	bl	8014016 <k_queue_append>
 800fcbc:	e7d6      	b.n	800fc6c <zsock_received_cb+0x32>

0800fcbe <zsock_flush_queue>:
{
 800fcbe:	b538      	push	{r3, r4, r5, lr}
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
 800fcc0:	f8b0 5086 	ldrh.w	r5, [r0, #134]	; 0x86
	while ((p = k_fifo_get(&ctx->recv_q, K_NO_WAIT)) != NULL) {
 800fcc4:	f100 045c 	add.w	r4, r0, #92	; 0x5c
	return (enum net_context_state)
 800fcc8:	f3c5 0541 	ubfx	r5, r5, #1, #2
	return z_impl_k_queue_get(queue, timeout);
 800fccc:	2200      	movs	r2, #0
 800fcce:	2300      	movs	r3, #0
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f7fc fc31 	bl	800c538 <z_impl_k_queue_get>
 800fcd6:	b920      	cbnz	r0, 800fce2 <zsock_flush_queue+0x24>
	z_impl_k_queue_cancel_wait(queue);
 800fcd8:	4620      	mov	r0, r4
}
 800fcda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcde:	f004 b979 	b.w	8013fd4 <z_impl_k_queue_cancel_wait>
		if (is_listen) {
 800fce2:	2d03      	cmp	r5, #3
 800fce4:	d102      	bne.n	800fcec <zsock_flush_queue+0x2e>
			net_context_put(p);
 800fce6:	f7f5 fa97 	bl	8005218 <net_context_put>
 800fcea:	e7ef      	b.n	800fccc <zsock_flush_queue+0xe>
			net_pkt_unref(p);
 800fcec:	f001 fe82 	bl	80119f4 <net_pkt_unref>
 800fcf0:	e7ec      	b.n	800fccc <zsock_flush_queue+0xe>

0800fcf2 <zsock_close_ctx>:
{
 800fcf2:	b513      	push	{r0, r1, r4, lr}
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
 800fcf4:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
 800fcf8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	f04f 0100 	mov.w	r1, #0
{
 800fd02:	4604      	mov	r4, r0
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
 800fd04:	9100      	str	r1, [sp, #0]
 800fd06:	f04f 0200 	mov.w	r2, #0
 800fd0a:	f04f 0300 	mov.w	r3, #0
	if (net_context_get_state(ctx) == NET_CONTEXT_LISTENING) {
 800fd0e:	d111      	bne.n	800fd34 <zsock_close_ctx+0x42>
		(void)net_context_accept(ctx, NULL, K_NO_WAIT, NULL);
 800fd10:	f001 fc60 	bl	80115d4 <net_context_accept>
	zsock_flush_queue(ctx);
 800fd14:	4620      	mov	r0, r4
 800fd16:	f7ff ffd2 	bl	800fcbe <zsock_flush_queue>
	SET_ERRNO(net_context_put(ctx));
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f7f5 fa7c 	bl	8005218 <net_context_put>
 800fd20:	1e04      	subs	r4, r0, #0
 800fd22:	da0a      	bge.n	800fd3a <zsock_close_ctx+0x48>
 800fd24:	f000 fc15 	bl	8010552 <__errno>
 800fd28:	4264      	negs	r4, r4
 800fd2a:	6004      	str	r4, [r0, #0]
 800fd2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800fd30:	b002      	add	sp, #8
 800fd32:	bd10      	pop	{r4, pc}
		(void)net_context_recv(ctx, NULL, K_NO_WAIT, NULL);
 800fd34:	f7f5 faae 	bl	8005294 <net_context_recv>
 800fd38:	e7ec      	b.n	800fd14 <zsock_close_ctx+0x22>
	return 0;
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	e7f8      	b.n	800fd30 <zsock_close_ctx+0x3e>

0800fd3e <sock_close_vmeth>:
	return zsock_close_ctx(obj);
 800fd3e:	f7ff bfd8 	b.w	800fcf2 <zsock_close_ctx>

0800fd42 <z_impl_zsock_close>:
{
 800fd42:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
 800fd44:	aa01      	add	r2, sp, #4
 800fd46:	4669      	mov	r1, sp
{
 800fd48:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
 800fd4a:	f7f0 fdb5 	bl	80008b8 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
 800fd4e:	4604      	mov	r4, r0
 800fd50:	b940      	cbnz	r0, 800fd64 <z_impl_zsock_close+0x22>
		errno = EBADF;
 800fd52:	f000 fbfe 	bl	8010552 <__errno>
 800fd56:	2309      	movs	r3, #9
 800fd58:	6003      	str	r3, [r0, #0]
		return -1;
 800fd5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800fd5e:	4620      	mov	r0, r4
 800fd60:	b003      	add	sp, #12
 800fd62:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
 800fd64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd68:	9801      	ldr	r0, [sp, #4]
 800fd6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd6e:	f7ff fee4 	bl	800fb3a <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
 800fd72:	9b00      	ldr	r3, [sp, #0]
 800fd74:	4620      	mov	r0, r4
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	4798      	blx	r3
 800fd7a:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
 800fd7c:	9801      	ldr	r0, [sp, #4]
 800fd7e:	f7ff ff5a 	bl	800fc36 <k_mutex_unlock.isra.0>
	z_free_fd(sock);
 800fd82:	4628      	mov	r0, r5
 800fd84:	f7f0 fe06 	bl	8000994 <z_free_fd>
	return ret;
 800fd88:	e7e9      	b.n	800fd5e <z_impl_zsock_close+0x1c>

0800fd8a <sock_bind_vmeth>:
	return zsock_bind_ctx(obj, addr, addrlen);
 800fd8a:	f7f3 bb69 	b.w	8003460 <zsock_bind_ctx>

0800fd8e <z_impl_zsock_bind>:
{
 800fd8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd90:	460d      	mov	r5, r1
 800fd92:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
 800fd94:	4669      	mov	r1, sp
 800fd96:	aa01      	add	r2, sp, #4
 800fd98:	f7f0 fd8e 	bl	80008b8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(bind, sock, addr, addrlen);
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	b110      	cbz	r0, 800fda6 <z_impl_zsock_bind+0x18>
 800fda0:	9b00      	ldr	r3, [sp, #0]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	b943      	cbnz	r3, 800fdb8 <z_impl_zsock_bind+0x2a>
 800fda6:	f000 fbd4 	bl	8010552 <__errno>
 800fdaa:	2309      	movs	r3, #9
 800fdac:	6003      	str	r3, [r0, #0]
 800fdae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	b002      	add	sp, #8
 800fdb6:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(bind, sock, addr, addrlen);
 800fdb8:	9801      	ldr	r0, [sp, #4]
 800fdba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdc2:	f7ff feba 	bl	800fb3a <k_mutex_lock.constprop.0.isra.0>
 800fdc6:	9b00      	ldr	r3, [sp, #0]
 800fdc8:	4632      	mov	r2, r6
 800fdca:	691b      	ldr	r3, [r3, #16]
 800fdcc:	4629      	mov	r1, r5
 800fdce:	4620      	mov	r0, r4
 800fdd0:	4798      	blx	r3
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	9801      	ldr	r0, [sp, #4]
 800fdd6:	f7ff ff2e 	bl	800fc36 <k_mutex_unlock.isra.0>
 800fdda:	e7ea      	b.n	800fdb2 <z_impl_zsock_bind+0x24>

0800fddc <sock_connect_vmeth>:
	return zsock_connect_ctx(obj, addr, addrlen);
 800fddc:	f7f3 bb62 	b.w	80034a4 <zsock_connect_ctx>

0800fde0 <sock_listen_vmeth>:
	return zsock_listen_ctx(obj, backlog);
 800fde0:	f7f3 bb88 	b.w	80034f4 <zsock_listen_ctx>

0800fde4 <z_impl_zsock_listen>:
{
 800fde4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fde6:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
 800fde8:	aa01      	add	r2, sp, #4
 800fdea:	4669      	mov	r1, sp
 800fdec:	f7f0 fd64 	bl	80008b8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(listen, sock, backlog);
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	b110      	cbz	r0, 800fdfa <z_impl_zsock_listen+0x16>
 800fdf4:	9b00      	ldr	r3, [sp, #0]
 800fdf6:	699b      	ldr	r3, [r3, #24]
 800fdf8:	b943      	cbnz	r3, 800fe0c <z_impl_zsock_listen+0x28>
 800fdfa:	f000 fbaa 	bl	8010552 <__errno>
 800fdfe:	2309      	movs	r3, #9
 800fe00:	6003      	str	r3, [r0, #0]
 800fe02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800fe06:	4620      	mov	r0, r4
 800fe08:	b003      	add	sp, #12
 800fe0a:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(listen, sock, backlog);
 800fe0c:	9801      	ldr	r0, [sp, #4]
 800fe0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe16:	f7ff fe90 	bl	800fb3a <k_mutex_lock.constprop.0.isra.0>
 800fe1a:	9b00      	ldr	r3, [sp, #0]
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	699b      	ldr	r3, [r3, #24]
 800fe20:	4620      	mov	r0, r4
 800fe22:	4798      	blx	r3
 800fe24:	4604      	mov	r4, r0
 800fe26:	9801      	ldr	r0, [sp, #4]
 800fe28:	f7ff ff05 	bl	800fc36 <k_mutex_unlock.isra.0>
 800fe2c:	e7eb      	b.n	800fe06 <z_impl_zsock_listen+0x22>

0800fe2e <sock_accept_vmeth>:
	return zsock_accept_ctx(obj, addr, addrlen);
 800fe2e:	f7f3 bb7d 	b.w	800352c <zsock_accept_ctx>

0800fe32 <z_impl_zsock_accept>:
{
 800fe32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe34:	460d      	mov	r5, r1
 800fe36:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
 800fe38:	4669      	mov	r1, sp
 800fe3a:	aa01      	add	r2, sp, #4
 800fe3c:	f7f0 fd3c 	bl	80008b8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(accept, sock, addr, addrlen);
 800fe40:	4604      	mov	r4, r0
 800fe42:	b110      	cbz	r0, 800fe4a <z_impl_zsock_accept+0x18>
 800fe44:	9b00      	ldr	r3, [sp, #0]
 800fe46:	69db      	ldr	r3, [r3, #28]
 800fe48:	b943      	cbnz	r3, 800fe5c <z_impl_zsock_accept+0x2a>
 800fe4a:	f000 fb82 	bl	8010552 <__errno>
 800fe4e:	2309      	movs	r3, #9
 800fe50:	6003      	str	r3, [r0, #0]
 800fe52:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800fe56:	4620      	mov	r0, r4
 800fe58:	b002      	add	sp, #8
 800fe5a:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(accept, sock, addr, addrlen);
 800fe5c:	9801      	ldr	r0, [sp, #4]
 800fe5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe66:	f7ff fe68 	bl	800fb3a <k_mutex_lock.constprop.0.isra.0>
 800fe6a:	9b00      	ldr	r3, [sp, #0]
 800fe6c:	4632      	mov	r2, r6
 800fe6e:	69db      	ldr	r3, [r3, #28]
 800fe70:	4629      	mov	r1, r5
 800fe72:	4620      	mov	r0, r4
 800fe74:	4798      	blx	r3
 800fe76:	4604      	mov	r4, r0
 800fe78:	9801      	ldr	r0, [sp, #4]
 800fe7a:	f7ff fedc 	bl	800fc36 <k_mutex_unlock.isra.0>
 800fe7e:	e7ea      	b.n	800fe56 <z_impl_zsock_accept+0x24>

0800fe80 <sock_sendto_vmeth>:
	return zsock_sendto_ctx(obj, buf, len, flags, dest_addr, addrlen);
 800fe80:	f7f3 bbd2 	b.w	8003628 <zsock_sendto_ctx>

0800fe84 <sock_write_vmeth>:
{
 800fe84:	b507      	push	{r0, r1, r2, lr}
	return zsock_sendto_ctx(obj, buffer, count, 0, NULL, 0);
 800fe86:	2300      	movs	r3, #0
 800fe88:	e9cd 3300 	strd	r3, r3, [sp]
 800fe8c:	f7f3 fbcc 	bl	8003628 <zsock_sendto_ctx>
}
 800fe90:	b003      	add	sp, #12
 800fe92:	f85d fb04 	ldr.w	pc, [sp], #4

0800fe96 <z_impl_zsock_sendto>:
{
 800fe96:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fe9a:	460d      	mov	r5, r1
 800fe9c:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
 800fe9e:	a902      	add	r1, sp, #8
 800fea0:	aa03      	add	r2, sp, #12
{
 800fea2:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
 800fea4:	f7f0 fd08 	bl	80008b8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
 800fea8:	4604      	mov	r4, r0
 800feaa:	b110      	cbz	r0, 800feb2 <z_impl_zsock_sendto+0x1c>
 800feac:	9b02      	ldr	r3, [sp, #8]
 800feae:	6a1b      	ldr	r3, [r3, #32]
 800feb0:	b94b      	cbnz	r3, 800fec6 <z_impl_zsock_sendto+0x30>
 800feb2:	f000 fb4e 	bl	8010552 <__errno>
 800feb6:	2309      	movs	r3, #9
 800feb8:	6003      	str	r3, [r0, #0]
 800feba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800febe:	4620      	mov	r0, r4
 800fec0:	b004      	add	sp, #16
 800fec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
 800fec6:	9803      	ldr	r0, [sp, #12]
 800fec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fed0:	f7ff fe33 	bl	800fb3a <k_mutex_lock.constprop.0.isra.0>
 800fed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fed6:	9301      	str	r3, [sp, #4]
 800fed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	9b02      	ldr	r3, [sp, #8]
 800fede:	4632      	mov	r2, r6
 800fee0:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800fee4:	4629      	mov	r1, r5
 800fee6:	463b      	mov	r3, r7
 800fee8:	4620      	mov	r0, r4
 800feea:	47c0      	blx	r8
 800feec:	4604      	mov	r4, r0
 800feee:	9803      	ldr	r0, [sp, #12]
 800fef0:	f7ff fea1 	bl	800fc36 <k_mutex_unlock.isra.0>
 800fef4:	e7e3      	b.n	800febe <z_impl_zsock_sendto+0x28>

0800fef6 <zsock_sendmsg_ctx>:
{
 800fef6:	b570      	push	{r4, r5, r6, lr}
	k_timeout_t timeout = K_FOREVER;
 800fef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 800fefc:	4615      	mov	r5, r2
 800fefe:	b086      	sub	sp, #24
	k_timeout_t timeout = K_FOREVER;
 800ff00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff04:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 800ff08:	066b      	lsls	r3, r5, #25
{
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	460e      	mov	r6, r1
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 800ff0e:	d403      	bmi.n	800ff18 <zsock_sendmsg_ctx+0x22>
	return POINTER_TO_UINT(ctx->socket_data) & mask;
 800ff10:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ff12:	f013 0302 	ands.w	r3, r3, #2
 800ff16:	d019      	beq.n	800ff4c <zsock_sendmsg_ctx+0x56>
		timeout = K_NO_WAIT;
 800ff18:	2200      	movs	r2, #0
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	status = net_context_sendmsg(ctx, msg, flags, NULL, timeout, NULL);
 800ff20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff24:	2300      	movs	r3, #0
 800ff26:	e9cd 0100 	strd	r0, r1, [sp]
 800ff2a:	9302      	str	r3, [sp, #8]
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	462a      	mov	r2, r5
 800ff30:	4631      	mov	r1, r6
 800ff32:	f001 fbe3 	bl	80116fc <net_context_sendmsg>
	if (status < 0) {
 800ff36:	1e04      	subs	r4, r0, #0
 800ff38:	da05      	bge.n	800ff46 <zsock_sendmsg_ctx+0x50>
		errno = -status;
 800ff3a:	f000 fb0a 	bl	8010552 <__errno>
 800ff3e:	4264      	negs	r4, r4
 800ff40:	6004      	str	r4, [r0, #0]
		return -1;
 800ff42:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800ff46:	4620      	mov	r0, r4
 800ff48:	b006      	add	sp, #24
 800ff4a:	bd70      	pop	{r4, r5, r6, pc}
		net_context_get_option(ctx, NET_OPT_SNDTIMEO, &timeout, NULL);
 800ff4c:	aa04      	add	r2, sp, #16
 800ff4e:	2105      	movs	r1, #5
 800ff50:	f7f5 fa52 	bl	80053f8 <net_context_get_option>
 800ff54:	e7e4      	b.n	800ff20 <zsock_sendmsg_ctx+0x2a>

0800ff56 <sock_sendmsg_vmeth>:
	return zsock_sendmsg_ctx(obj, msg, flags);
 800ff56:	f7ff bfce 	b.w	800fef6 <zsock_sendmsg_ctx>

0800ff5a <zsock_wait_data>:
	if (ctx->cond.lock == NULL) {
 800ff5a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 800ff5c:	460b      	mov	r3, r1
	if (ctx->cond.lock == NULL) {
 800ff5e:	b13a      	cbz	r2, 800ff70 <zsock_wait_data+0x16>
	if (k_fifo_is_empty(&ctx->recv_q)) {
 800ff60:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800ff62:	b942      	cbnz	r2, 800ff76 <zsock_wait_data+0x1c>
		return k_condvar_wait(&ctx->cond.recv, ctx->cond.lock,
 800ff64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff68:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
	return z_impl_k_condvar_wait(condvar, mutex, timeout);
 800ff6a:	3074      	adds	r0, #116	; 0x74
 800ff6c:	f7fd b888 	b.w	800d080 <z_impl_k_condvar_wait>
		return -EINVAL;
 800ff70:	f06f 0015 	mvn.w	r0, #21
 800ff74:	4770      	bx	lr
	return 0;
 800ff76:	2000      	movs	r0, #0
}
 800ff78:	4770      	bx	lr

0800ff7a <zsock_recvfrom_ctx>:
{
 800ff7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff7e:	b093      	sub	sp, #76	; 0x4c
 800ff80:	e9dd 7a1c 	ldrd	r7, sl, [sp, #112]	; 0x70
 800ff84:	4605      	mov	r5, r0
 800ff86:	9102      	str	r1, [sp, #8]
 800ff88:	461e      	mov	r6, r3
	if (max_len == 0) {
 800ff8a:	4614      	mov	r4, r2
 800ff8c:	2a00      	cmp	r2, #0
 800ff8e:	f000 8145 	beq.w	801021c <zsock_recvfrom_ctx+0x2a2>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 800ff92:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800ff96:	f3c3 1281 	ubfx	r2, r3, #6, #2
	if (sock_type == SOCK_DGRAM) {
 800ff9a:	2a02      	cmp	r2, #2
 800ff9c:	f040 810e 	bne.w	80101bc <zsock_recvfrom_ctx+0x242>
	k_timeout_t timeout = K_FOREVER;
 800ffa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ffa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 800ffac:	0673      	lsls	r3, r6, #25
 800ffae:	d403      	bmi.n	800ffb8 <zsock_recvfrom_ctx+0x3e>
 800ffb0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ffb2:	f013 0302 	ands.w	r3, r3, #2
 800ffb6:	d02e      	beq.n	8010016 <zsock_recvfrom_ctx+0x9c>
		timeout = K_NO_WAIT;
 800ffb8:	2200      	movs	r2, #0
 800ffba:	2300      	movs	r3, #0
 800ffbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (flags & ZSOCK_MSG_PEEK) {
 800ffc0:	f016 0302 	ands.w	r3, r6, #2
		res = fifo_wait_non_empty(&ctx->recv_q, timeout);
 800ffc4:	f105 0b5c 	add.w	fp, r5, #92	; 0x5c
	if (flags & ZSOCK_MSG_PEEK) {
 800ffc8:	9301      	str	r3, [sp, #4]
 800ffca:	d034      	beq.n	8010036 <zsock_recvfrom_ctx+0xbc>
	struct k_poll_event events[] = {
 800ffcc:	2210      	movs	r2, #16
 800ffce:	2100      	movs	r1, #0
 800ffd0:	a80c      	add	r0, sp, #48	; 0x30
 800ffd2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800ffd6:	f004 fc24 	bl	8014822 <memset>
 800ffda:	2304      	movs	r3, #4
 800ffdc:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800ffe0:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
	return z_impl_k_poll(events, num_events, timeout);
 800ffe4:	2101      	movs	r1, #1
 800ffe6:	4642      	mov	r2, r8
 800ffe8:	464b      	mov	r3, r9
 800ffea:	a80c      	add	r0, sp, #48	; 0x30
 800ffec:	f7fd fa00 	bl	800d3f0 <z_impl_k_poll>
		if (res && res != -EAGAIN && res != -EINTR) {
 800fff0:	f100 020b 	add.w	r2, r0, #11
 800fff4:	2a0b      	cmp	r2, #11
 800fff6:	4680      	mov	r8, r0
 800fff8:	d818      	bhi.n	801002c <zsock_recvfrom_ctx+0xb2>
 800fffa:	f640 0381 	movw	r3, #2177	; 0x881
 800fffe:	40d3      	lsrs	r3, r2
 8010000:	07d9      	lsls	r1, r3, #31
 8010002:	d513      	bpl.n	801002c <zsock_recvfrom_ctx+0xb2>
	return z_impl_k_queue_peek_head(queue);
 8010004:	4658      	mov	r0, fp
 8010006:	f004 f81b 	bl	8014040 <z_impl_k_queue_peek_head>
	return z_impl_k_queue_get(queue, timeout);
 801000a:	4681      	mov	r9, r0
	if (!pkt) {
 801000c:	b9c8      	cbnz	r0, 8010042 <zsock_recvfrom_ctx+0xc8>
				errno = EAGAIN;
 801000e:	f000 faa0 	bl	8010552 <__errno>
 8010012:	230b      	movs	r3, #11
 8010014:	e0e3      	b.n	80101de <zsock_recvfrom_ctx+0x264>
		net_context_get_option(ctx, NET_OPT_RCVTIMEO, &timeout, NULL);
 8010016:	aa08      	add	r2, sp, #32
 8010018:	2104      	movs	r1, #4
 801001a:	f7f5 f9ed 	bl	80053f8 <net_context_get_option>
		ret = zsock_wait_data(ctx, &timeout);
 801001e:	a908      	add	r1, sp, #32
 8010020:	4628      	mov	r0, r5
 8010022:	f7ff ff9a 	bl	800ff5a <zsock_wait_data>
		if (ret < 0) {
 8010026:	f1b0 0800 	subs.w	r8, r0, #0
 801002a:	dac9      	bge.n	800ffc0 <zsock_recvfrom_ctx+0x46>
				errno = -res;
 801002c:	f000 fa91 	bl	8010552 <__errno>
 8010030:	f1c8 0300 	rsb	r3, r8, #0
 8010034:	e0d3      	b.n	80101de <zsock_recvfrom_ctx+0x264>
		pkt = k_fifo_get(&ctx->recv_q, timeout);
 8010036:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801003a:	4658      	mov	r0, fp
 801003c:	f7fc fa7c 	bl	800c538 <z_impl_k_queue_get>
 8010040:	e7e3      	b.n	801000a <zsock_recvfrom_ctx+0x90>
	backup->buf = pkt->cursor.buf;
 8010042:	68c3      	ldr	r3, [r0, #12]
 8010044:	9303      	str	r3, [sp, #12]
	backup->pos = pkt->cursor.pos;
 8010046:	6903      	ldr	r3, [r0, #16]
 8010048:	9304      	str	r3, [sp, #16]
	if (src_addr && addrlen) {
 801004a:	b30f      	cbz	r7, 8010090 <zsock_recvfrom_ctx+0x116>
 801004c:	f1ba 0f00 	cmp.w	sl, #0
 8010050:	d01e      	beq.n	8010090 <zsock_recvfrom_ctx+0x116>
	return net_if_get_by_index(context->iface);
 8010052:	f995 0088 	ldrsb.w	r0, [r5, #136]	; 0x88
 8010056:	f7f4 fb49 	bl	80046ec <z_impl_net_if_get_by_index>
	return (iface->if_dev->offload != NULL);
 801005a:	6802      	ldr	r2, [r0, #0]
		if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 801005c:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8010060:	f1b8 0f00 	cmp.w	r8, #0
 8010064:	d026      	beq.n	80100b4 <zsock_recvfrom_ctx+0x13a>
			if (ctx->flags & NET_CONTEXT_REMOTE_ADDR_SET) {
 8010066:	f8b5 2086 	ldrh.w	r2, [r5, #134]	; 0x86
 801006a:	05d2      	lsls	r2, r2, #23
 801006c:	f140 808e 	bpl.w	801018c <zsock_recvfrom_ctx+0x212>
				memcpy(src_addr, &ctx->remote,
 8010070:	f8da 2000 	ldr.w	r2, [sl]
 8010074:	2a08      	cmp	r2, #8
 8010076:	bf28      	it	cs
 8010078:	2208      	movcs	r2, #8
 801007a:	f105 0124 	add.w	r1, r5, #36	; 0x24
 801007e:	4638      	mov	r0, r7
 8010080:	f004 fb94 	bl	80147ac <memcpy>
		if (src_addr->sa_family == AF_INET) {
 8010084:	883a      	ldrh	r2, [r7, #0]
 8010086:	2a01      	cmp	r2, #1
 8010088:	d17c      	bne.n	8010184 <zsock_recvfrom_ctx+0x20a>
			*addrlen = sizeof(struct sockaddr_in);
 801008a:	2208      	movs	r2, #8
			*addrlen = sizeof(struct sockaddr_in6);
 801008c:	f8ca 2000 	str.w	r2, [sl]
	recv_len = net_pkt_remaining_data(pkt);
 8010090:	4648      	mov	r0, r9
 8010092:	f001 fe04 	bl	8011c9e <net_pkt_remaining_data>
	read_len = MIN(recv_len, max_len);
 8010096:	4284      	cmp	r4, r0
 8010098:	bf28      	it	cs
 801009a:	4604      	movcs	r4, r0
	recv_len = net_pkt_remaining_data(pkt);
 801009c:	4607      	mov	r7, r0
	if (net_pkt_read(pkt, buf, read_len)) {
 801009e:	9902      	ldr	r1, [sp, #8]
 80100a0:	4622      	mov	r2, r4
 80100a2:	4648      	mov	r0, r9
 80100a4:	f001 fd91 	bl	8011bca <net_pkt_read>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	d073      	beq.n	8010194 <zsock_recvfrom_ctx+0x21a>
		errno = ENOBUFS;
 80100ac:	f000 fa51 	bl	8010552 <__errno>
 80100b0:	2269      	movs	r2, #105	; 0x69
 80100b2:	e022      	b.n	80100fa <zsock_recvfrom_ctx+0x180>
	backup->buf = pkt->cursor.buf;
 80100b4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80100b8:	9305      	str	r3, [sp, #20]
	net_pkt_cursor_init(pkt);
 80100ba:	4648      	mov	r0, r9
	backup->pos = pkt->cursor.pos;
 80100bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
	return context->proto;
 80100c0:	f8b5 5084 	ldrh.w	r5, [r5, #132]	; 0x84
			rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
 80100c4:	f8da b000 	ldr.w	fp, [sl]
 80100c8:	9306      	str	r3, [sp, #24]
	net_pkt_cursor_init(pkt);
 80100ca:	f001 fd03 	bl	8011ad4 <net_pkt_cursor_init>
	return pkt->family;
 80100ce:	f899 1037 	ldrb.w	r1, [r9, #55]	; 0x37
 80100d2:	f3c1 0142 	ubfx	r1, r1, #1, #3
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
 80100d6:	2901      	cmp	r1, #1
	addr->sa_family = net_pkt_family(pkt);
 80100d8:	8039      	strh	r1, [r7, #0]
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
 80100da:	d017      	beq.n	801010c <zsock_recvfrom_ctx+0x192>
		ret = -ENOTSUP;
 80100dc:	f06f 0b85 	mvn.w	fp, #133	; 0x85
	pkt->cursor.buf = backup->buf;
 80100e0:	9b05      	ldr	r3, [sp, #20]
 80100e2:	f8c9 300c 	str.w	r3, [r9, #12]
	pkt->cursor.pos = backup->pos;
 80100e6:	9b06      	ldr	r3, [sp, #24]
 80100e8:	f8c9 3010 	str.w	r3, [r9, #16]
			if (rv < 0) {
 80100ec:	f1bb 0f00 	cmp.w	fp, #0
 80100f0:	d0c8      	beq.n	8010084 <zsock_recvfrom_ctx+0x10a>
				errno = -rv;
 80100f2:	f000 fa2e 	bl	8010552 <__errno>
 80100f6:	f1cb 0200 	rsb	r2, fp, #0
	if (!(flags & ZSOCK_MSG_PEEK)) {
 80100fa:	9b01      	ldr	r3, [sp, #4]
		errno = ENOBUFS;
 80100fc:	6002      	str	r2, [r0, #0]
	if (!(flags & ZSOCK_MSG_PEEK)) {
 80100fe:	b913      	cbnz	r3, 8010106 <zsock_recvfrom_ctx+0x18c>
		net_pkt_unref(pkt);
 8010100:	4648      	mov	r0, r9
 8010102:	f001 fc77 	bl	80119f4 <net_pkt_unref>
			return -1;
 8010106:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801010a:	e04c      	b.n	80101a6 <zsock_recvfrom_ctx+0x22c>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
 801010c:	2114      	movs	r1, #20
		if (addrlen < sizeof(struct sockaddr_in)) {
 801010e:	f1bb 0f07 	cmp.w	fp, #7
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access,
 8010112:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8010116:	910d      	str	r1, [sp, #52]	; 0x34
		if (addrlen < sizeof(struct sockaddr_in)) {
 8010118:	d929      	bls.n	801016e <zsock_recvfrom_ctx+0x1f4>
		ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(
 801011a:	a90c      	add	r1, sp, #48	; 0x30
 801011c:	4648      	mov	r0, r9
 801011e:	f001 fedd 	bl	8011edc <net_pkt_get_data>
		if (!ipv4_hdr ||
 8010122:	4680      	mov	r8, r0
 8010124:	b910      	cbnz	r0, 801012c <zsock_recvfrom_ctx+0x1b2>
			ret = -ENOBUFS;
 8010126:	f06f 0b68 	mvn.w	fp, #104	; 0x68
 801012a:	e7d9      	b.n	80100e0 <zsock_recvfrom_ctx+0x166>
	return net_pkt_skip(pkt, access->size);
 801012c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801012e:	4648      	mov	r0, r9
 8010130:	f001 fd35 	bl	8011b9e <net_pkt_skip>
		if (!ipv4_hdr ||
 8010134:	2800      	cmp	r0, #0
 8010136:	d1f6      	bne.n	8010126 <zsock_recvfrom_ctx+0x1ac>
		    net_pkt_skip(pkt, net_pkt_ipv4_opts_len(pkt))) {
 8010138:	f899 103b 	ldrb.w	r1, [r9, #59]	; 0x3b
 801013c:	4648      	mov	r0, r9
 801013e:	f001 fd2e 	bl	8011b9e <net_pkt_skip>
		    net_pkt_acknowledge_data(pkt, &ipv4_access) ||
 8010142:	4683      	mov	fp, r0
 8010144:	2800      	cmp	r0, #0
 8010146:	d1ee      	bne.n	8010126 <zsock_recvfrom_ctx+0x1ac>
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 8010148:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801014c:	6079      	str	r1, [r7, #4]
			rv = sock_get_pkt_src_addr(pkt, net_context_get_ip_proto(ctx),
 801014e:	b2ed      	uxtb	r5, r5
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8010150:	2d11      	cmp	r5, #17
 8010152:	d10f      	bne.n	8010174 <zsock_recvfrom_ctx+0x1fa>
		NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8010154:	a90a      	add	r1, sp, #40	; 0x28
 8010156:	910c      	str	r1, [sp, #48]	; 0x30
 8010158:	2108      	movs	r1, #8
 801015a:	910d      	str	r1, [sp, #52]	; 0x34
		udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt,
 801015c:	a90c      	add	r1, sp, #48	; 0x30
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
 801015e:	4648      	mov	r0, r9
 8010160:	f001 febc 	bl	8011edc <net_pkt_get_data>
		if (!tcp_hdr) {
 8010164:	2800      	cmp	r0, #0
 8010166:	d0de      	beq.n	8010126 <zsock_recvfrom_ctx+0x1ac>
		*port = tcp_hdr->src_port;
 8010168:	8801      	ldrh	r1, [r0, #0]
 801016a:	8079      	strh	r1, [r7, #2]
 801016c:	e7b8      	b.n	80100e0 <zsock_recvfrom_ctx+0x166>
			ret = -EINVAL;
 801016e:	f06f 0b15 	mvn.w	fp, #21
 8010172:	e7b5      	b.n	80100e0 <zsock_recvfrom_ctx+0x166>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8010174:	2d06      	cmp	r5, #6
 8010176:	d1b1      	bne.n	80100dc <zsock_recvfrom_ctx+0x162>
		NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 8010178:	a90c      	add	r1, sp, #48	; 0x30
 801017a:	910a      	str	r1, [sp, #40]	; 0x28
 801017c:	2114      	movs	r1, #20
 801017e:	910b      	str	r1, [sp, #44]	; 0x2c
		tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt,
 8010180:	a90a      	add	r1, sp, #40	; 0x28
 8010182:	e7ec      	b.n	801015e <zsock_recvfrom_ctx+0x1e4>
		} else if (src_addr->sa_family == AF_INET6) {
 8010184:	2a02      	cmp	r2, #2
 8010186:	d101      	bne.n	801018c <zsock_recvfrom_ctx+0x212>
			*addrlen = sizeof(struct sockaddr_in6);
 8010188:	2218      	movs	r2, #24
 801018a:	e77f      	b.n	801008c <zsock_recvfrom_ctx+0x112>
			errno = ENOTSUP;
 801018c:	f000 f9e1 	bl	8010552 <__errno>
 8010190:	2286      	movs	r2, #134	; 0x86
 8010192:	e7b2      	b.n	80100fa <zsock_recvfrom_ctx+0x180>
	if (!(flags & ZSOCK_MSG_PEEK)) {
 8010194:	9b01      	ldr	r3, [sp, #4]
 8010196:	b953      	cbnz	r3, 80101ae <zsock_recvfrom_ctx+0x234>
		net_pkt_unref(pkt);
 8010198:	4648      	mov	r0, r9
 801019a:	f001 fc2b 	bl	80119f4 <net_pkt_unref>
	return (flags & ZSOCK_MSG_TRUNC) ? recv_len : read_len;
 801019e:	f016 0f20 	tst.w	r6, #32
 80101a2:	bf08      	it	eq
 80101a4:	4627      	moveq	r7, r4
}
 80101a6:	4638      	mov	r0, r7
 80101a8:	b013      	add	sp, #76	; 0x4c
 80101aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt->cursor.buf = backup->buf;
 80101ae:	9b03      	ldr	r3, [sp, #12]
 80101b0:	f8c9 300c 	str.w	r3, [r9, #12]
	pkt->cursor.pos = backup->pos;
 80101b4:	9b04      	ldr	r3, [sp, #16]
 80101b6:	f8c9 3010 	str.w	r3, [r9, #16]
}
 80101ba:	e7f0      	b.n	801019e <zsock_recvfrom_ctx+0x224>
	} else if (sock_type == SOCK_STREAM) {
 80101bc:	2a01      	cmp	r2, #1
 80101be:	d12d      	bne.n	801021c <zsock_recvfrom_ctx+0x2a2>
	k_timeout_t timeout = K_FOREVER;
 80101c0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80101c4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	if (!net_context_is_used(ctx)) {
 80101c8:	f013 0201 	ands.w	r2, r3, #1
	k_timeout_t timeout = K_FOREVER;
 80101cc:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
	if (!net_context_is_used(ctx)) {
 80101d0:	9201      	str	r2, [sp, #4]
	const bool waitall = flags & ZSOCK_MSG_WAITALL;
 80101d2:	f406 7980 	and.w	r9, r6, #256	; 0x100
	if (!net_context_is_used(ctx)) {
 80101d6:	d104      	bne.n	80101e2 <zsock_recvfrom_ctx+0x268>
		errno = EBADF;
 80101d8:	f000 f9bb 	bl	8010552 <__errno>
 80101dc:	2309      	movs	r3, #9
			errno = ENOBUFS;
 80101de:	6003      	str	r3, [r0, #0]
 80101e0:	e791      	b.n	8010106 <zsock_recvfrom_ctx+0x18c>
	if (net_context_get_state(ctx) != NET_CONTEXT_CONNECTED) {
 80101e2:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d003      	beq.n	80101f2 <zsock_recvfrom_ctx+0x278>
		errno = ENOTCONN;
 80101ea:	f000 f9b2 	bl	8010552 <__errno>
 80101ee:	2380      	movs	r3, #128	; 0x80
 80101f0:	e7f5      	b.n	80101de <zsock_recvfrom_ctx+0x264>
	if ((flags & ZSOCK_MSG_DONTWAIT) || sock_is_nonblock(ctx)) {
 80101f2:	0673      	lsls	r3, r6, #25
 80101f4:	d402      	bmi.n	80101fc <zsock_recvfrom_ctx+0x282>
 80101f6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80101f8:	079f      	lsls	r7, r3, #30
 80101fa:	d511      	bpl.n	8010220 <zsock_recvfrom_ctx+0x2a6>
		timeout = K_NO_WAIT;
 80101fc:	2200      	movs	r2, #0
 80101fe:	2300      	movs	r3, #0
 8010200:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	end = sys_clock_timeout_end_calc(timeout);
 8010204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010208:	f004 f931 	bl	801446e <sys_clock_timeout_end_calc>
 801020c:	e9cd 0105 	strd	r0, r1, [sp, #20]
	size_t recv_len = 0;
 8010210:	2700      	movs	r7, #0
		pkt = k_fifo_peek_head(&ctx->recv_q);
 8010212:	f105 0a5c 	add.w	sl, r5, #92	; 0x5c
 8010216:	6dab      	ldr	r3, [r5, #88]	; 0x58
		if (sock_is_eof(ctx)) {
 8010218:	07d9      	lsls	r1, r3, #31
 801021a:	d509      	bpl.n	8010230 <zsock_recvfrom_ctx+0x2b6>
		return 0;
 801021c:	2700      	movs	r7, #0
 801021e:	e7c2      	b.n	80101a6 <zsock_recvfrom_ctx+0x22c>
	} else if (!sock_is_eof(ctx)) {
 8010220:	f013 0301 	ands.w	r3, r3, #1
 8010224:	d1ee      	bne.n	8010204 <zsock_recvfrom_ctx+0x28a>
		net_context_get_option(ctx, NET_OPT_RCVTIMEO, &timeout, NULL);
 8010226:	aa0c      	add	r2, sp, #48	; 0x30
 8010228:	2104      	movs	r1, #4
 801022a:	f7f5 f8e5 	bl	80053f8 <net_context_get_option>
 801022e:	e7e9      	b.n	8010204 <zsock_recvfrom_ctx+0x28a>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8010230:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010234:	4313      	orrs	r3, r2
 8010236:	d007      	beq.n	8010248 <zsock_recvfrom_ctx+0x2ce>
			res = zsock_wait_data(ctx, &timeout);
 8010238:	a90c      	add	r1, sp, #48	; 0x30
 801023a:	4628      	mov	r0, r5
 801023c:	f7ff fe8d 	bl	800ff5a <zsock_wait_data>
			if (res < 0) {
 8010240:	f1b0 0800 	subs.w	r8, r0, #0
 8010244:	f6ff aef2 	blt.w	801002c <zsock_recvfrom_ctx+0xb2>
	return z_impl_k_queue_peek_head(queue);
 8010248:	4650      	mov	r0, sl
 801024a:	f003 fef9 	bl	8014040 <z_impl_k_queue_peek_head>
		if (!pkt) {
 801024e:	4680      	mov	r8, r0
 8010250:	b940      	cbnz	r0, 8010264 <zsock_recvfrom_ctx+0x2ea>
			if (waitall && (recv_len > 0)) {
 8010252:	f1b9 0f00 	cmp.w	r9, #0
 8010256:	d001      	beq.n	801025c <zsock_recvfrom_ctx+0x2e2>
 8010258:	2f00      	cmp	r7, #0
 801025a:	d1a4      	bne.n	80101a6 <zsock_recvfrom_ctx+0x22c>
 801025c:	6dab      	ldr	r3, [r5, #88]	; 0x58
			} else if (sock_is_eof(ctx)) {
 801025e:	07da      	lsls	r2, r3, #31
 8010260:	d4dc      	bmi.n	801021c <zsock_recvfrom_ctx+0x2a2>
 8010262:	e6d4      	b.n	801000e <zsock_recvfrom_ctx+0x94>
	backup->buf = pkt->cursor.buf;
 8010264:	68c3      	ldr	r3, [r0, #12]
 8010266:	9303      	str	r3, [sp, #12]
	backup->pos = pkt->cursor.pos;
 8010268:	6903      	ldr	r3, [r0, #16]
 801026a:	9304      	str	r3, [sp, #16]
		data_len = net_pkt_remaining_data(pkt);
 801026c:	f001 fd17 	bl	8011c9e <net_pkt_remaining_data>
		if (recv_len + read_len > max_len) {
 8010270:	19c3      	adds	r3, r0, r7
 8010272:	429c      	cmp	r4, r3
		bool release_pkt = true;
 8010274:	bf2c      	ite	cs
 8010276:	9b01      	ldrcs	r3, [sp, #4]
			release_pkt = false;
 8010278:	2300      	movcc	r3, #0
 801027a:	9307      	str	r3, [sp, #28]
		if (net_pkt_read(pkt, (uint8_t *)buf + recv_len, read_len)) {
 801027c:	9b02      	ldr	r3, [sp, #8]
		data_len = net_pkt_remaining_data(pkt);
 801027e:	4683      	mov	fp, r0
			read_len = max_len - recv_len;
 8010280:	bf38      	it	cc
 8010282:	eba4 0b07 	subcc.w	fp, r4, r7
		if (net_pkt_read(pkt, (uint8_t *)buf + recv_len, read_len)) {
 8010286:	19d9      	adds	r1, r3, r7
 8010288:	465a      	mov	r2, fp
 801028a:	4640      	mov	r0, r8
 801028c:	f001 fc9d 	bl	8011bca <net_pkt_read>
 8010290:	9b07      	ldr	r3, [sp, #28]
 8010292:	b118      	cbz	r0, 801029c <zsock_recvfrom_ctx+0x322>
			errno = ENOBUFS;
 8010294:	f000 f95d 	bl	8010552 <__errno>
 8010298:	2369      	movs	r3, #105	; 0x69
 801029a:	e7a0      	b.n	80101de <zsock_recvfrom_ctx+0x264>
		recv_len += read_len;
 801029c:	445f      	add	r7, fp
		if (!(flags & ZSOCK_MSG_PEEK)) {
 801029e:	f016 0b02 	ands.w	fp, r6, #2
 80102a2:	d138      	bne.n	8010316 <zsock_recvfrom_ctx+0x39c>
			if (release_pkt) {
 80102a4:	b17b      	cbz	r3, 80102c6 <zsock_recvfrom_ctx+0x34c>
	return z_impl_k_queue_get(queue, timeout);
 80102a6:	2300      	movs	r3, #0
 80102a8:	2200      	movs	r2, #0
 80102aa:	4650      	mov	r0, sl
 80102ac:	f7fc f944 	bl	800c538 <z_impl_k_queue_get>
	return pkt->sent_or_eof;
 80102b0:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
				if (net_pkt_eof(pkt)) {
 80102b4:	079b      	lsls	r3, r3, #30
	val = (val & ~mask) | flag;
 80102b6:	bf42      	ittt	mi
 80102b8:	6dab      	ldrmi	r3, [r5, #88]	; 0x58
 80102ba:	f043 0301 	orrmi.w	r3, r3, #1
	(ctx)->socket_data = UINT_TO_POINTER(val);
 80102be:	65ab      	strmi	r3, [r5, #88]	; 0x58
				net_pkt_unref(pkt);
 80102c0:	4640      	mov	r0, r8
 80102c2:	f001 fb97 	bl	80119f4 <net_pkt_unref>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 80102c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102ca:	3301      	adds	r3, #1
 80102cc:	f142 0200 	adc.w	r2, r2, #0
 80102d0:	2b02      	cmp	r3, #2
 80102d2:	f172 0300 	sbcs.w	r3, r2, #0
 80102d6:	d30e      	bcc.n	80102f6 <zsock_recvfrom_ctx+0x37c>
			int64_t remaining = end - sys_clock_tick_get();
 80102d8:	f7fd f85a 	bl	800d390 <sys_clock_tick_get>
 80102dc:	9b05      	ldr	r3, [sp, #20]
 80102de:	1a18      	subs	r0, r3, r0
 80102e0:	9b06      	ldr	r3, [sp, #24]
 80102e2:	eb63 0101 	sbc.w	r1, r3, r1
			if (remaining <= 0) {
 80102e6:	2801      	cmp	r0, #1
 80102e8:	f171 0300 	sbcs.w	r3, r1, #0
 80102ec:	da1a      	bge.n	8010324 <zsock_recvfrom_ctx+0x3aa>
				timeout = K_NO_WAIT;
 80102ee:	2200      	movs	r2, #0
 80102f0:	2300      	movs	r3, #0
 80102f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	} while ((recv_len == 0) || (waitall && (recv_len < max_len)));
 80102f6:	2f00      	cmp	r7, #0
 80102f8:	d08d      	beq.n	8010216 <zsock_recvfrom_ctx+0x29c>
 80102fa:	f1b9 0f00 	cmp.w	r9, #0
 80102fe:	d001      	beq.n	8010304 <zsock_recvfrom_ctx+0x38a>
 8010300:	42bc      	cmp	r4, r7
 8010302:	d888      	bhi.n	8010216 <zsock_recvfrom_ctx+0x29c>
	if (!(flags & ZSOCK_MSG_PEEK)) {
 8010304:	f1bb 0f00 	cmp.w	fp, #0
 8010308:	f47f af4d 	bne.w	80101a6 <zsock_recvfrom_ctx+0x22c>
		net_context_update_recv_wnd(ctx, recv_len);
 801030c:	4639      	mov	r1, r7
 801030e:	4628      	mov	r0, r5
 8010310:	f001 fa43 	bl	801179a <net_context_update_recv_wnd>
		return zsock_recv_stream(ctx, buf, max_len, flags);
 8010314:	e747      	b.n	80101a6 <zsock_recvfrom_ctx+0x22c>
	pkt->cursor.buf = backup->buf;
 8010316:	9b03      	ldr	r3, [sp, #12]
 8010318:	f8c8 300c 	str.w	r3, [r8, #12]
	pkt->cursor.pos = backup->pos;
 801031c:	9b04      	ldr	r3, [sp, #16]
 801031e:	f8c8 3010 	str.w	r3, [r8, #16]
}
 8010322:	e7d0      	b.n	80102c6 <zsock_recvfrom_ctx+0x34c>
				timeout = Z_TIMEOUT_TICKS(remaining);
 8010324:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010328:	e7e5      	b.n	80102f6 <zsock_recvfrom_ctx+0x37c>

0801032a <sock_recvfrom_vmeth>:
	return zsock_recvfrom_ctx(obj, buf, max_len, flags,
 801032a:	f7ff be26 	b.w	800ff7a <zsock_recvfrom_ctx>

0801032e <sock_read_vmeth>:
{
 801032e:	b507      	push	{r0, r1, r2, lr}
	return zsock_recvfrom_ctx(obj, buffer, count, 0, NULL, 0);
 8010330:	2300      	movs	r3, #0
 8010332:	e9cd 3300 	strd	r3, r3, [sp]
 8010336:	f7ff fe20 	bl	800ff7a <zsock_recvfrom_ctx>
}
 801033a:	b003      	add	sp, #12
 801033c:	f85d fb04 	ldr.w	pc, [sp], #4

08010340 <z_impl_zsock_recvfrom>:
{
 8010340:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010344:	460d      	mov	r5, r1
 8010346:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
 8010348:	a902      	add	r1, sp, #8
 801034a:	aa03      	add	r2, sp, #12
{
 801034c:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
 801034e:	f7f0 fab3 	bl	80008b8 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
 8010352:	4604      	mov	r4, r0
 8010354:	b110      	cbz	r0, 801035c <z_impl_zsock_recvfrom+0x1c>
 8010356:	9b02      	ldr	r3, [sp, #8]
 8010358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035a:	b94b      	cbnz	r3, 8010370 <z_impl_zsock_recvfrom+0x30>
 801035c:	f000 f8f9 	bl	8010552 <__errno>
 8010360:	2309      	movs	r3, #9
 8010362:	6003      	str	r3, [r0, #0]
 8010364:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8010368:	4620      	mov	r0, r4
 801036a:	b004      	add	sp, #16
 801036c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
 8010370:	9803      	ldr	r0, [sp, #12]
 8010372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801037a:	f7ff fbde 	bl	800fb3a <k_mutex_lock.constprop.0.isra.0>
 801037e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010380:	9301      	str	r3, [sp, #4]
 8010382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010384:	9300      	str	r3, [sp, #0]
 8010386:	9b02      	ldr	r3, [sp, #8]
 8010388:	4632      	mov	r2, r6
 801038a:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801038e:	4629      	mov	r1, r5
 8010390:	463b      	mov	r3, r7
 8010392:	4620      	mov	r0, r4
 8010394:	47c0      	blx	r8
 8010396:	4604      	mov	r4, r0
 8010398:	9803      	ldr	r0, [sp, #12]
 801039a:	f7ff fc4c 	bl	800fc36 <k_mutex_unlock.isra.0>
 801039e:	e7e3      	b.n	8010368 <z_impl_zsock_recvfrom+0x28>

080103a0 <zsock_getsockopt_ctx>:
{
 80103a0:	b510      	push	{r4, lr}
	switch (level) {
 80103a2:	2901      	cmp	r1, #1
{
 80103a4:	9c02      	ldr	r4, [sp, #8]
	switch (level) {
 80103a6:	d103      	bne.n	80103b0 <zsock_getsockopt_ctx+0x10>
		switch (optname) {
 80103a8:	2a03      	cmp	r2, #3
 80103aa:	d005      	beq.n	80103b8 <zsock_getsockopt_ctx+0x18>
 80103ac:	2a26      	cmp	r2, #38	; 0x26
 80103ae:	d011      	beq.n	80103d4 <zsock_getsockopt_ctx+0x34>
	errno = ENOPROTOOPT;
 80103b0:	f000 f8cf 	bl	8010552 <__errno>
 80103b4:	236d      	movs	r3, #109	; 0x6d
 80103b6:	e009      	b.n	80103cc <zsock_getsockopt_ctx+0x2c>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 80103b8:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
 80103bc:	f3c2 1281 	ubfx	r2, r2, #6, #2
			if (*optlen != sizeof(proto)) {
 80103c0:	6821      	ldr	r1, [r4, #0]
 80103c2:	2904      	cmp	r1, #4
 80103c4:	d009      	beq.n	80103da <zsock_getsockopt_ctx+0x3a>
				errno = EINVAL;
 80103c6:	f000 f8c4 	bl	8010552 <__errno>
 80103ca:	2316      	movs	r3, #22
	errno = ENOPROTOOPT;
 80103cc:	6003      	str	r3, [r0, #0]
	return -1;
 80103ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103d2:	e004      	b.n	80103de <zsock_getsockopt_ctx+0x3e>
			int proto = (int)net_context_get_ip_proto(ctx);
 80103d4:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 80103d8:	e7f2      	b.n	80103c0 <zsock_getsockopt_ctx+0x20>
			*(int *)optval = proto;
 80103da:	601a      	str	r2, [r3, #0]
			return 0;
 80103dc:	2000      	movs	r0, #0
}
 80103de:	bd10      	pop	{r4, pc}

080103e0 <sock_getsockopt_vmeth>:
	return zsock_getsockopt_ctx(obj, level, optname, optval, optlen);
 80103e0:	f7ff bfde 	b.w	80103a0 <zsock_getsockopt_ctx>

080103e4 <zsock_setsockopt_ctx>:
{
 80103e4:	b570      	push	{r4, r5, r6, lr}
	switch (level) {
 80103e6:	2906      	cmp	r1, #6
{
 80103e8:	9e04      	ldr	r6, [sp, #16]
 80103ea:	4604      	mov	r4, r0
 80103ec:	461d      	mov	r5, r3
	switch (level) {
 80103ee:	d03f      	beq.n	8010470 <zsock_setsockopt_ctx+0x8c>
 80103f0:	2929      	cmp	r1, #41	; 0x29
 80103f2:	d043      	beq.n	801047c <zsock_setsockopt_ctx+0x98>
 80103f4:	2901      	cmp	r1, #1
 80103f6:	d13d      	bne.n	8010474 <zsock_setsockopt_ctx+0x90>
		switch (optname) {
 80103f8:	2a02      	cmp	r2, #2
 80103fa:	d016      	beq.n	801042a <zsock_setsockopt_ctx+0x46>
 80103fc:	2a19      	cmp	r2, #25
 80103fe:	d139      	bne.n	8010474 <zsock_setsockopt_ctx+0x90>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8010400:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 8010404:	f3c3 03c2 	ubfx	r3, r3, #3, #3
			if (net_context_get_family(ctx) != AF_INET &&
 8010408:	3b01      	subs	r3, #1
 801040a:	2b01      	cmp	r3, #1
 801040c:	d906      	bls.n	801041c <zsock_setsockopt_ctx+0x38>
				errno = EAFNOSUPPORT;
 801040e:	f000 f8a0 	bl	8010552 <__errno>
 8010412:	236a      	movs	r3, #106	; 0x6a
	errno = ENOPROTOOPT;
 8010414:	6003      	str	r3, [r0, #0]
	return -1;
 8010416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801041a:	bd70      	pop	{r4, r5, r6, pc}
			if ((optlen == 0) || (ifreq != NULL &&
 801041c:	b93e      	cbnz	r6, 801042e <zsock_setsockopt_ctx+0x4a>
				ctx->flags &= ~NET_CONTEXT_BOUND_TO_IFACE;
 801041e:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 8010422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
			ctx->flags |= NET_CONTEXT_BOUND_TO_IFACE;
 8010426:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
			return 0;
 801042a:	2000      	movs	r0, #0
 801042c:	e7f5      	b.n	801041a <zsock_setsockopt_ctx+0x36>
			if ((optlen == 0) || (ifreq != NULL &&
 801042e:	b135      	cbz	r5, 801043e <zsock_setsockopt_ctx+0x5a>
					      strlen(ifreq->ifr_name) == 0)) {
 8010430:	4628      	mov	r0, r5
 8010432:	f7f0 f874 	bl	800051e <strlen>
			if ((optlen == 0) || (ifreq != NULL &&
 8010436:	2800      	cmp	r0, #0
 8010438:	d0f1      	beq.n	801041e <zsock_setsockopt_ctx+0x3a>
			if ((ifreq == NULL) || (optlen != sizeof(*ifreq))) {
 801043a:	2e30      	cmp	r6, #48	; 0x30
 801043c:	d003      	beq.n	8010446 <zsock_setsockopt_ctx+0x62>
				errno = EINVAL;
 801043e:	f000 f888 	bl	8010552 <__errno>
 8010442:	2316      	movs	r3, #22
 8010444:	e7e6      	b.n	8010414 <zsock_setsockopt_ctx+0x30>
 8010446:	4628      	mov	r0, r5
 8010448:	f7fb fcfc 	bl	800be44 <z_impl_device_get_binding>
			if (dev == NULL) {
 801044c:	b918      	cbnz	r0, 8010456 <zsock_setsockopt_ctx+0x72>
				errno = ENODEV;
 801044e:	f000 f880 	bl	8010552 <__errno>
 8010452:	2313      	movs	r3, #19
 8010454:	e7de      	b.n	8010414 <zsock_setsockopt_ctx+0x30>
			iface = net_if_lookup_by_dev(dev);
 8010456:	f7f4 f95b 	bl	8004710 <net_if_lookup_by_dev>
			if (iface == NULL) {
 801045a:	2800      	cmp	r0, #0
 801045c:	d0f7      	beq.n	801044e <zsock_setsockopt_ctx+0x6a>
	context->iface = net_if_get_by_iface(iface);
 801045e:	f7f4 fb49 	bl	8004af4 <net_if_get_by_iface>
			ctx->flags |= NET_CONTEXT_BOUND_TO_IFACE;
 8010462:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 8010466:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
 801046a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801046e:	e7da      	b.n	8010426 <zsock_setsockopt_ctx+0x42>
		switch (optname) {
 8010470:	2a01      	cmp	r2, #1
 8010472:	d0da      	beq.n	801042a <zsock_setsockopt_ctx+0x46>
	errno = ENOPROTOOPT;
 8010474:	f000 f86d 	bl	8010552 <__errno>
 8010478:	236d      	movs	r3, #109	; 0x6d
 801047a:	e7cb      	b.n	8010414 <zsock_setsockopt_ctx+0x30>
		switch (optname) {
 801047c:	2a1a      	cmp	r2, #26
 801047e:	e7f8      	b.n	8010472 <zsock_setsockopt_ctx+0x8e>

08010480 <sock_setsockopt_vmeth>:
	return zsock_setsockopt_ctx(obj, level, optname, optval, optlen);
 8010480:	f7ff bfb0 	b.w	80103e4 <zsock_setsockopt_ctx>

08010484 <zsock_getsockname_ctx>:
{
 8010484:	4603      	mov	r3, r0
 8010486:	b513      	push	{r0, r1, r4, lr}
 8010488:	4614      	mov	r4, r2
	if (!ctx->conn_handler) {
 801048a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
{
 801048c:	4608      	mov	r0, r1
	if (!ctx->conn_handler) {
 801048e:	b932      	cbnz	r2, 801049e <zsock_getsockname_ctx+0x1a>
		SET_ERRNO(-EINVAL);
 8010490:	f000 f85f 	bl	8010552 <__errno>
 8010494:	2316      	movs	r3, #22
 8010496:	6003      	str	r3, [r0, #0]
 8010498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801049c:	e014      	b.n	80104c8 <zsock_getsockname_ctx+0x44>
	if (IS_ENABLED(CONFIG_NET_IPV4) && ctx->local.family == AF_INET) {
 801049e:	8b9a      	ldrh	r2, [r3, #28]
 80104a0:	2a01      	cmp	r2, #1
 80104a2:	d1f5      	bne.n	8010490 <zsock_getsockname_ctx+0xc>
		addr4.sin_family = AF_INET;
 80104a4:	f8ad 2000 	strh.w	r2, [sp]
		addr4.sin_port = net_sin_ptr(&ctx->local)->sin_port;
 80104a8:	8bda      	ldrh	r2, [r3, #30]
 80104aa:	f8ad 2002 	strh.w	r2, [sp, #2]
		memcpy(addr, &addr4, MIN(*addrlen, newlen));
 80104ae:	6822      	ldr	r2, [r4, #0]
 80104b0:	6a1b      	ldr	r3, [r3, #32]
 80104b2:	2a08      	cmp	r2, #8
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	9301      	str	r3, [sp, #4]
 80104b8:	bf28      	it	cs
 80104ba:	2208      	movcs	r2, #8
 80104bc:	4669      	mov	r1, sp
 80104be:	f004 f975 	bl	80147ac <memcpy>
	*addrlen = newlen;
 80104c2:	2308      	movs	r3, #8
 80104c4:	6023      	str	r3, [r4, #0]
	return 0;
 80104c6:	2000      	movs	r0, #0
}
 80104c8:	b002      	add	sp, #8
 80104ca:	bd10      	pop	{r4, pc}

080104cc <sock_getsockname_vmeth>:
	return zsock_getsockname_ctx(obj, addr, addrlen);
 80104cc:	f7ff bfda 	b.w	8010484 <zsock_getsockname_ctx>

080104d0 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 80104d0:	f003 bc22 	b.w	8013d18 <z_fatal_error>

080104d4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80104d4:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 80104d6:	6800      	ldr	r0, [r0, #0]
 80104d8:	f003 bc1e 	b.w	8013d18 <z_fatal_error>

080104dc <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80104dc:	2100      	movs	r1, #0
 80104de:	2001      	movs	r0, #1
 80104e0:	f7ff bff6 	b.w	80104d0 <z_arm_fatal_error>

080104e4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 80104e4:	b508      	push	{r3, lr}
	handler();
 80104e6:	f7f3 f991 	bl	800380c <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80104ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80104ee:	f7f3 ba6b 	b.w	80039c8 <z_arm_exc_exit>

080104f2 <malloc_prepare>:
}
 80104f2:	2000      	movs	r0, #0
 80104f4:	4770      	bx	lr

080104f6 <_stdout_hook_default>:
}
 80104f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104fa:	4770      	bx	lr

080104fc <_stdin_hook_default>:
}
 80104fc:	2000      	movs	r0, #0
 80104fe:	4770      	bx	lr

08010500 <_read>:
{
 8010500:	4608      	mov	r0, r1
 8010502:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
 8010504:	f7f3 bc76 	b.w	8003df4 <z_impl_zephyr_read_stdin>

08010508 <_write>:
{
 8010508:	4608      	mov	r0, r1
 801050a:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
 801050c:	f7f3 bc86 	b.w	8003e1c <z_impl_zephyr_write_stdout>

08010510 <_close>:
 8010510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010514:	4770      	bx	lr

08010516 <_lseek>:
}
 8010516:	2000      	movs	r0, #0
 8010518:	4770      	bx	lr

0801051a <_isatty>:
}
 801051a:	2802      	cmp	r0, #2
 801051c:	bfcc      	ite	gt
 801051e:	2000      	movgt	r0, #0
 8010520:	2001      	movle	r0, #1
 8010522:	4770      	bx	lr

08010524 <_fstat>:
	st->st_mode = S_IFCHR;
 8010524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010528:	604b      	str	r3, [r1, #4]
}
 801052a:	2000      	movs	r0, #0
 801052c:	4770      	bx	lr

0801052e <__retarget_lock_init_recursive>:
{
 801052e:	b510      	push	{r4, lr}
 8010530:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
 8010532:	2014      	movs	r0, #20
 8010534:	f7fd f842 	bl	800d5bc <malloc>
 8010538:	6020      	str	r0, [r4, #0]
}
 801053a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 801053e:	f003 bcc5 	b.w	8013ecc <z_impl_k_mutex_init>

08010542 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8010542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801054a:	f7fb bf39 	b.w	800c3c0 <z_impl_k_mutex_lock>

0801054e <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 801054e:	f7fb bfaf 	b.w	800c4b0 <z_impl_k_mutex_unlock>

08010552 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8010552:	f7fb bca1 	b.w	800be98 <z_impl_z_errno>

08010556 <fixed_data_unref>:
}
 8010556:	4770      	bx	lr

08010558 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 8010558:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
 801055a:	6849      	ldr	r1, [r1, #4]
 801055c:	6809      	ldr	r1, [r1, #0]
 801055e:	f7f3 bcc7 	b.w	8003ef0 <net_buf_alloc_len>

08010562 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
 8010562:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
 8010564:	4618      	mov	r0, r3
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d1fb      	bne.n	8010564 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
 801056c:	4770      	bx	lr

0801056e <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
 801056e:	6802      	ldr	r2, [r0, #0]
{
 8010570:	b510      	push	{r4, lr}
	if (parent->frags) {
 8010572:	b12a      	cbz	r2, 8010580 <net_buf_frag_insert+0x12>
 8010574:	460b      	mov	r3, r1
	while (buf->frags) {
 8010576:	461c      	mov	r4, r3
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d1fb      	bne.n	8010576 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
 801057e:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
 8010580:	6001      	str	r1, [r0, #0]
}
 8010582:	bd10      	pop	{r4, pc}

08010584 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
 8010584:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
 8010586:	4604      	mov	r4, r0
 8010588:	b920      	cbnz	r0, 8010594 <net_buf_frag_add+0x10>
	buf->ref++;
 801058a:	790b      	ldrb	r3, [r1, #4]
 801058c:	3301      	adds	r3, #1
 801058e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
 8010590:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
 8010592:	bd10      	pop	{r4, pc}
 8010594:	4603      	mov	r3, r0
	while (buf->frags) {
 8010596:	4618      	mov	r0, r3
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1fb      	bne.n	8010596 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
 801059e:	f7ff ffe6 	bl	801056e <net_buf_frag_insert>
 80105a2:	4620      	mov	r0, r4
 80105a4:	e7f5      	b.n	8010592 <net_buf_frag_add+0xe>

080105a6 <net_buf_linearize>:
	return next_frag;
}

size_t net_buf_linearize(void *dst, size_t dst_len, struct net_buf *src,
			 size_t offset, size_t len)
{
 80105a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105aa:	4607      	mov	r7, r0
 80105ac:	460d      	mov	r5, r1
 80105ae:	4614      	mov	r4, r2
	len = MIN(len, dst_len);

	frag = src;

	/* find the right fragment to start copying from */
	while (frag && offset >= frag->len) {
 80105b0:	b30c      	cbz	r4, 80105f6 <net_buf_linearize+0x50>
 80105b2:	89a2      	ldrh	r2, [r4, #12]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d91b      	bls.n	80105f0 <net_buf_linearize+0x4a>
	len = MIN(len, dst_len);
 80105b8:	9906      	ldr	r1, [sp, #24]
 80105ba:	428d      	cmp	r5, r1
 80105bc:	bf28      	it	cs
 80105be:	460d      	movcs	r5, r1
 80105c0:	f04f 0800 	mov.w	r8, #0
		frag = frag->frags;
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (frag && len > 0) {
 80105c4:	b18d      	cbz	r5, 80105ea <net_buf_linearize+0x44>
		to_copy = MIN(len, frag->len - offset);
 80105c6:	89a6      	ldrh	r6, [r4, #12]
		memcpy((uint8_t *)dst + copied, frag->data + offset, to_copy);
 80105c8:	68a1      	ldr	r1, [r4, #8]
		to_copy = MIN(len, frag->len - offset);
 80105ca:	1af6      	subs	r6, r6, r3
 80105cc:	42ae      	cmp	r6, r5
 80105ce:	bf28      	it	cs
 80105d0:	462e      	movcs	r6, r5
 80105d2:	4419      	add	r1, r3
 80105d4:	eb07 0008 	add.w	r0, r7, r8
 80105d8:	4632      	mov	r2, r6
 80105da:	f004 f8e7 	bl	80147ac <memcpy>

		copied += to_copy;

		/* to_copy is always <= len */
		len -= to_copy;
		frag = frag->frags;
 80105de:	6824      	ldr	r4, [r4, #0]
		copied += to_copy;
 80105e0:	44b0      	add	r8, r6
		len -= to_copy;
 80105e2:	1bad      	subs	r5, r5, r6

		/* after the first iteration, this value will be 0 */
		offset = 0;
 80105e4:	2300      	movs	r3, #0
	while (frag && len > 0) {
 80105e6:	2c00      	cmp	r4, #0
 80105e8:	d1ec      	bne.n	80105c4 <net_buf_linearize+0x1e>
	}

	return copied;
}
 80105ea:	4640      	mov	r0, r8
 80105ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		frag = frag->frags;
 80105f0:	6824      	ldr	r4, [r4, #0]
		offset -= frag->len;
 80105f2:	1a9b      	subs	r3, r3, r2
		frag = frag->frags;
 80105f4:	e7dc      	b.n	80105b0 <net_buf_linearize+0xa>
 80105f6:	46a0      	mov	r8, r4
	return copied;
 80105f8:	e7f7      	b.n	80105ea <net_buf_linearize+0x44>

080105fa <net_buf_simple_add>:
	return buf->data + buf->len;
 80105fa:	8883      	ldrh	r3, [r0, #4]
 80105fc:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
 80105fe:	4419      	add	r1, r3
 8010600:	8081      	strh	r1, [r0, #4]
	return tail;
}
 8010602:	18d0      	adds	r0, r2, r3
 8010604:	4770      	bx	lr

08010606 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
 8010606:	8882      	ldrh	r2, [r0, #4]
 8010608:	1a52      	subs	r2, r2, r1
{
 801060a:	4603      	mov	r3, r0
	buf->len -= len;
 801060c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
 801060e:	6800      	ldr	r0, [r0, #0]
 8010610:	4408      	add	r0, r1
 8010612:	6018      	str	r0, [r3, #0]
}
 8010614:	4770      	bx	lr

08010616 <net_buf_simple_max_len>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
 8010616:	6803      	ldr	r3, [r0, #0]
 8010618:	6882      	ldr	r2, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
}

uint16_t net_buf_simple_max_len(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf);
 801061a:	88c0      	ldrh	r0, [r0, #6]
	return buf->data - buf->__buf;
 801061c:	1a9b      	subs	r3, r3, r2
	return buf->size - net_buf_simple_headroom(buf);
 801061e:	1ac0      	subs	r0, r0, r3
}
 8010620:	b280      	uxth	r0, r0
 8010622:	4770      	bx	lr

08010624 <net_mgmt_NET_REQUEST_WIFI_CONNECT>:
	return iface->if_dev->dev;
 8010624:	680b      	ldr	r3, [r1, #0]
 8010626:	6818      	ldr	r0, [r3, #0]
	struct net_wifi_mgmt_offload *off_api =
 8010628:	6883      	ldr	r3, [r0, #8]
{
 801062a:	b410      	push	{r4}
	if (off_api == NULL || off_api->connect == NULL) {
 801062c:	b1db      	cbz	r3, 8010666 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x42>
 801062e:	689c      	ldr	r4, [r3, #8]
 8010630:	b1cc      	cbz	r4, 8010666 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x42>
	if ((params->security > WIFI_SECURITY_TYPE_PSK) ||
 8010632:	7b91      	ldrb	r1, [r2, #14]
 8010634:	2901      	cmp	r1, #1
 8010636:	d81a      	bhi.n	801066e <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x4a>
	    (params->ssid_length > WIFI_SSID_MAX_LEN) ||
 8010638:	7913      	ldrb	r3, [r2, #4]
 801063a:	3b01      	subs	r3, #1
 801063c:	2b1f      	cmp	r3, #31
 801063e:	d816      	bhi.n	801066e <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x4a>
	    (params->ssid_length == 0U) ||
 8010640:	2901      	cmp	r1, #1
 8010642:	d105      	bne.n	8010650 <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x2c>
	     ((params->psk_length < 8) || (params->psk_length > 64) ||
 8010644:	7b13      	ldrb	r3, [r2, #12]
	    ((params->security == WIFI_SECURITY_TYPE_PSK) &&
 8010646:	3b08      	subs	r3, #8
 8010648:	2b38      	cmp	r3, #56	; 0x38
 801064a:	d810      	bhi.n	801066e <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x4a>
	      (params->psk_length == 0U) || !params->psk)) ||
 801064c:	6893      	ldr	r3, [r2, #8]
 801064e:	b173      	cbz	r3, 801066e <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x4a>
	    ((params->channel != WIFI_CHANNEL_ANY) &&
 8010650:	7b53      	ldrb	r3, [r2, #13]
 8010652:	3b0f      	subs	r3, #15
	      (params->psk_length == 0U) || !params->psk)) ||
 8010654:	b2db      	uxtb	r3, r3
 8010656:	2bef      	cmp	r3, #239	; 0xef
 8010658:	d909      	bls.n	801066e <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x4a>
	     (params->channel > WIFI_CHANNEL_MAX)) ||
 801065a:	6813      	ldr	r3, [r2, #0]
 801065c:	b13b      	cbz	r3, 801066e <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x4a>
	return off_api->connect(dev, params);
 801065e:	4623      	mov	r3, r4
 8010660:	4611      	mov	r1, r2
}
 8010662:	bc10      	pop	{r4}
	return off_api->connect(dev, params);
 8010664:	4718      	bx	r3
		return -ENOTSUP;
 8010666:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801066a:	bc10      	pop	{r4}
 801066c:	4770      	bx	lr
		return -EINVAL;
 801066e:	f06f 0015 	mvn.w	r0, #21
 8010672:	e7fa      	b.n	801066a <net_mgmt_NET_REQUEST_WIFI_CONNECT+0x46>

08010674 <net_mgmt_NET_REQUEST_WIFI_DISCONNECT>:
 8010674:	680b      	ldr	r3, [r1, #0]
 8010676:	6818      	ldr	r0, [r3, #0]
	struct net_wifi_mgmt_offload *off_api =
 8010678:	6883      	ldr	r3, [r0, #8]
	if (off_api == NULL || off_api->disconnect == NULL) {
 801067a:	b113      	cbz	r3, 8010682 <net_mgmt_NET_REQUEST_WIFI_DISCONNECT+0xe>
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	b103      	cbz	r3, 8010682 <net_mgmt_NET_REQUEST_WIFI_DISCONNECT+0xe>
	return off_api->disconnect(dev);
 8010680:	4718      	bx	r3
}
 8010682:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8010686:	4770      	bx	lr

08010688 <net_mgmt_NET_REQUEST_WIFI_AP_ENABLE>:
 8010688:	680b      	ldr	r3, [r1, #0]
 801068a:	6818      	ldr	r0, [r3, #0]
			  void *data, size_t len)
{
	struct wifi_connect_req_params *params =
		(struct wifi_connect_req_params *)data;
	const struct device *dev = net_if_get_device(iface);
	struct net_wifi_mgmt_offload *off_api =
 801068c:	6883      	ldr	r3, [r0, #8]
		(struct net_wifi_mgmt_offload *) dev->api;

	if (off_api == NULL || off_api->ap_enable == NULL) {
 801068e:	b11b      	cbz	r3, 8010698 <net_mgmt_NET_REQUEST_WIFI_AP_ENABLE+0x10>
 8010690:	691b      	ldr	r3, [r3, #16]
 8010692:	b10b      	cbz	r3, 8010698 <net_mgmt_NET_REQUEST_WIFI_AP_ENABLE+0x10>
		return -ENOTSUP;
	}

	return off_api->ap_enable(dev, params);
 8010694:	4611      	mov	r1, r2
 8010696:	4718      	bx	r3
}
 8010698:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801069c:	4770      	bx	lr

0801069e <net_mgmt_NET_REQUEST_WIFI_AP_DISABLE>:
 801069e:	680b      	ldr	r3, [r1, #0]
 80106a0:	6818      	ldr	r0, [r3, #0]

static int wifi_ap_disable(uint32_t mgmt_request, struct net_if *iface,
			  void *data, size_t len)
{
	const struct device *dev = net_if_get_device(iface);
	struct net_wifi_mgmt_offload *off_api =
 80106a2:	6883      	ldr	r3, [r0, #8]
		(struct net_wifi_mgmt_offload *) dev->api;

	if (off_api == NULL || off_api->ap_enable == NULL) {
 80106a4:	b11b      	cbz	r3, 80106ae <net_mgmt_NET_REQUEST_WIFI_AP_DISABLE+0x10>
 80106a6:	691a      	ldr	r2, [r3, #16]
 80106a8:	b10a      	cbz	r2, 80106ae <net_mgmt_NET_REQUEST_WIFI_AP_DISABLE+0x10>
		return -ENOTSUP;
	}

	return off_api->ap_disable(dev);
 80106aa:	695b      	ldr	r3, [r3, #20]
 80106ac:	4718      	bx	r3
}
 80106ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80106b2:	4770      	bx	lr

080106b4 <__wifi_args_to_params>:
{
 80106b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106b6:	460d      	mov	r5, r1
 80106b8:	4614      	mov	r4, r2
	if (argc < 1) {
 80106ba:	4606      	mov	r6, r0
 80106bc:	b918      	cbnz	r0, 80106c6 <__wifi_args_to_params+0x12>
		return -EINVAL;
 80106be:	f06f 0015 	mvn.w	r0, #21
}
 80106c2:	b002      	add	sp, #8
 80106c4:	bd70      	pop	{r4, r5, r6, pc}
	params->ssid = argv[0];
 80106c6:	6808      	ldr	r0, [r1, #0]
 80106c8:	6010      	str	r0, [r2, #0]
	params->ssid_length = strlen(params->ssid);
 80106ca:	f7ef ff28 	bl	800051e <strlen>
	if ((idx < argc) && (strlen(argv[idx]) <= 2)) {
 80106ce:	2e01      	cmp	r6, #1
	params->ssid_length = strlen(params->ssid);
 80106d0:	7120      	strb	r0, [r4, #4]
	if ((idx < argc) && (strlen(argv[idx]) <= 2)) {
 80106d2:	d014      	beq.n	80106fe <__wifi_args_to_params+0x4a>
 80106d4:	6868      	ldr	r0, [r5, #4]
 80106d6:	f7ef ff22 	bl	800051e <strlen>
 80106da:	2802      	cmp	r0, #2
 80106dc:	d80f      	bhi.n	80106fe <__wifi_args_to_params+0x4a>
		params->channel = strtol(argv[idx], &endptr, 10);
 80106de:	6868      	ldr	r0, [r5, #4]
 80106e0:	220a      	movs	r2, #10
 80106e2:	a901      	add	r1, sp, #4
 80106e4:	f7fd f8f6 	bl	800d8d4 <strtol>
		if (*endptr != '\0') {
 80106e8:	9b01      	ldr	r3, [sp, #4]
		params->channel = strtol(argv[idx], &endptr, 10);
 80106ea:	b2c0      	uxtb	r0, r0
 80106ec:	7360      	strb	r0, [r4, #13]
		if (*endptr != '\0') {
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d1e4      	bne.n	80106be <__wifi_args_to_params+0xa>
		if (params->channel == 0U) {
 80106f4:	b908      	cbnz	r0, 80106fa <__wifi_args_to_params+0x46>
			params->channel = WIFI_CHANNEL_ANY;
 80106f6:	23ff      	movs	r3, #255	; 0xff
 80106f8:	7363      	strb	r3, [r4, #13]
		idx++;
 80106fa:	2302      	movs	r3, #2
 80106fc:	e002      	b.n	8010704 <__wifi_args_to_params+0x50>
		params->channel = WIFI_CHANNEL_ANY;
 80106fe:	23ff      	movs	r3, #255	; 0xff
 8010700:	7363      	strb	r3, [r4, #13]
	int idx = 1;
 8010702:	2301      	movs	r3, #1
	if (idx < argc) {
 8010704:	42b3      	cmp	r3, r6
 8010706:	d209      	bcs.n	801071c <__wifi_args_to_params+0x68>
		params->psk = argv[idx];
 8010708:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801070c:	60a0      	str	r0, [r4, #8]
		params->psk_length = strlen(argv[idx]);
 801070e:	f7ef ff06 	bl	800051e <strlen>
		params->security = WIFI_SECURITY_TYPE_PSK;
 8010712:	2301      	movs	r3, #1
		params->psk_length = strlen(argv[idx]);
 8010714:	7320      	strb	r0, [r4, #12]
		params->security = WIFI_SECURITY_TYPE_PSK;
 8010716:	73a3      	strb	r3, [r4, #14]
	return 0;
 8010718:	2000      	movs	r0, #0
 801071a:	e7d2      	b.n	80106c2 <__wifi_args_to_params+0xe>
		params->security = WIFI_SECURITY_TYPE_NONE;
 801071c:	2000      	movs	r0, #0
 801071e:	73a0      	strb	r0, [r4, #14]
 8010720:	e7cf      	b.n	80106c2 <__wifi_args_to_params+0xe>

08010722 <processing_data>:
		locally_routed = true;
	}
#endif

	/* If there is no data, then drop the packet. */
	if (!pkt->frags) {
 8010722:	6883      	ldr	r3, [r0, #8]

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
 8010724:	b510      	push	{r4, lr}
 8010726:	4604      	mov	r4, r0
	if (!pkt->frags) {
 8010728:	b1ab      	cbz	r3, 8010756 <processing_data+0x34>
	if (!is_loopback && !locally_routed) {
 801072a:	b169      	cbz	r1, 8010748 <processing_data+0x26>
	net_pkt_cursor_init(pkt);
 801072c:	4620      	mov	r0, r4
 801072e:	f001 f9d1 	bl	8011ad4 <net_pkt_cursor_init>
	return pkt->frags->data;
 8010732:	68a3      	ldr	r3, [r4, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
 8010734:	689b      	ldr	r3, [r3, #8]
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801073c:	2b40      	cmp	r3, #64	; 0x40
 801073e:	d10a      	bne.n	8010756 <processing_data+0x34>
		return net_ipv4_input(pkt);
 8010740:	4620      	mov	r0, r4
 8010742:	f001 fe3a 	bl	80123ba <net_ipv4_input>
 8010746:	e005      	b.n	8010754 <processing_data+0x32>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
 8010748:	4601      	mov	r1, r0
 801074a:	6980      	ldr	r0, [r0, #24]
 801074c:	f000 f97f 	bl	8010a4e <net_if_recv_data>
		if (ret != NET_CONTINUE) {
 8010750:	2801      	cmp	r0, #1
 8010752:	d0eb      	beq.n	801072c <processing_data+0xa>
again:
	switch (process_data(pkt, is_loopback)) {
 8010754:	b120      	cbz	r0, 8010760 <processing_data+0x3e>
			 * to the stack in this case.
			 */
			goto again;
		} else {
			NET_DBG("Dropping pkt %p", pkt);
			net_pkt_unref(pkt);
 8010756:	4620      	mov	r0, r4
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
		break;
	}
}
 8010758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			net_pkt_unref(pkt);
 801075c:	f001 b94a 	b.w	80119f4 <net_pkt_unref>
}
 8010760:	bd10      	pop	{r4, pc}

08010762 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
 8010762:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
 8010764:	f001 fbdd 	bl	8011f22 <net_pkt_init>

	net_context_init();
 8010768:	f7f4 fe98 	bl	800549c <net_context_init>
	net_icmpv4_init();
 801076c:	f7f5 fa2e 	bl	8005bcc <net_icmpv4_init>
		net_conn_init();
 8010770:	f7f5 fc4e 	bl	8006010 <net_conn_init>
	net_tcp_init();
 8010774:	f7f6 ff98 	bl	80076a8 <net_tcp_init>

	l3_init();

	net_mgmt_event_init();
 8010778:	f7f5 f992 	bl	8005aa0 <net_mgmt_event_init>
	net_if_init();
 801077c:	f7f4 fa42 	bl	8004c04 <net_if_init>
	net_tc_rx_init();
 8010780:	f7f4 ffe0 	bl	8005744 <net_tc_rx_init>
	net_if_post_init();
 8010784:	f7f4 fa82 	bl	8004c8c <net_if_post_init>
	net_shell_init();
 8010788:	f002 f9c4 	bl	8012b14 <net_shell_init>

	init_rx_queues();

	return services_init();
}
 801078c:	2000      	movs	r0, #0
 801078e:	bd08      	pop	{r3, pc}

08010790 <net_send_data>:
{
 8010790:	b570      	push	{r4, r5, r6, lr}
	if (!pkt || !pkt->frags) {
 8010792:	4604      	mov	r4, r0
 8010794:	2800      	cmp	r0, #0
 8010796:	d062      	beq.n	801085e <net_send_data+0xce>
 8010798:	6883      	ldr	r3, [r0, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d05f      	beq.n	801085e <net_send_data+0xce>
	if (!net_pkt_iface(pkt)) {
 801079e:	6983      	ldr	r3, [r0, #24]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d05f      	beq.n	8010864 <net_send_data+0xd4>
	net_pkt_trim_buffer(pkt);
 80107a4:	f001 f97c 	bl	8011aa0 <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
 80107a8:	4620      	mov	r0, r4
 80107aa:	f001 f993 	bl	8011ad4 <net_pkt_cursor_init>
	return pkt->family;
 80107ae:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (net_pkt_family(pkt) == AF_INET) {
 80107b2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	d147      	bne.n	801084a <net_send_data+0xba>
	return pkt->frags->data;
 80107ba:	68a3      	ldr	r3, [r4, #8]
 80107bc:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_addr_cmp((struct in_addr *)NET_IPV4_HDR(pkt)->dst,
 80107be:	f7f4 fba7 	bl	8004f10 <net_ipv4_unspecified_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80107c2:	692a      	ldr	r2, [r5, #16]
 80107c4:	6803      	ldr	r3, [r0, #0]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d102      	bne.n	80107d0 <net_send_data+0x40>
			return -EADDRNOTAVAIL;
 80107ca:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
 80107ce:	bd70      	pop	{r4, r5, r6, pc}
 80107d0:	68a3      	ldr	r3, [r4, #8]
 80107d2:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 80107d4:	7c2b      	ldrb	r3, [r5, #16]
 80107d6:	2b7f      	cmp	r3, #127	; 0x7f
 80107d8:	d10f      	bne.n	80107fa <net_send_data+0x6a>
 80107da:	68a3      	ldr	r3, [r4, #8]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 80107dc:	689b      	ldr	r3, [r3, #8]
 80107de:	68da      	ldr	r2, [r3, #12]
 80107e0:	68a3      	ldr	r3, [r4, #8]
 80107e2:	689b      	ldr	r3, [r3, #8]
 80107e4:	6919      	ldr	r1, [r3, #16]
 80107e6:	60d9      	str	r1, [r3, #12]
 80107e8:	68a3      	ldr	r3, [r4, #8]
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	611a      	str	r2, [r3, #16]
		processing_data(pkt, true);
 80107ee:	2101      	movs	r1, #1
 80107f0:	4620      	mov	r0, r4
 80107f2:	f7ff ff96 	bl	8010722 <processing_data>
		return 0;
 80107f6:	2000      	movs	r0, #0
 80107f8:	e7e9      	b.n	80107ce <net_send_data+0x3e>
	return pkt->iface;
 80107fa:	69a6      	ldr	r6, [r4, #24]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80107fc:	f7f4 fb8c 	bl	8004f18 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8010800:	692a      	ldr	r2, [r5, #16]
 8010802:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8010804:	429a      	cmp	r2, r3
 8010806:	d01b      	beq.n	8010840 <net_send_data+0xb0>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8010808:	f105 0110 	add.w	r1, r5, #16
 801080c:	4630      	mov	r0, r6
 801080e:	f7f3 ffc5 	bl	800479c <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 8010812:	4601      	mov	r1, r0
 8010814:	b9a0      	cbnz	r0, 8010840 <net_send_data+0xb0>
	return pkt->frags->data;
 8010816:	68a3      	ldr	r3, [r4, #8]
 8010818:	689e      	ldr	r6, [r3, #8]
		     net_ipv4_is_my_addr((struct in_addr *)NET_IPV4_HDR(pkt)->dst))) {
 801081a:	f106 0510 	add.w	r5, r6, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 801081e:	4628      	mov	r0, r5
 8010820:	f7f4 f858 	bl	80048d4 <net_if_ipv4_addr_lookup>
	if (!ret) {
 8010824:	2800      	cmp	r0, #0
 8010826:	d1d8      	bne.n	80107da <net_send_data+0x4a>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8010828:	f7f4 fb76 	bl	8004f18 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801082c:	6932      	ldr	r2, [r6, #16]
 801082e:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8010830:	429a      	cmp	r2, r3
 8010832:	d0d2      	beq.n	80107da <net_send_data+0x4a>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8010834:	4629      	mov	r1, r5
 8010836:	2000      	movs	r0, #0
 8010838:	f7f3 ffb0 	bl	800479c <net_if_ipv4_is_addr_bcast>
				     (struct in_addr *)NET_IPV4_HDR(pkt)->dst) == false &&
 801083c:	2800      	cmp	r0, #0
 801083e:	d1cc      	bne.n	80107da <net_send_data+0x4a>
 8010840:	68a3      	ldr	r3, [r4, #8]
	return addr->s4_addr[0] == 127U;
 8010842:	689b      	ldr	r3, [r3, #8]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->src)) {
 8010844:	7b1b      	ldrb	r3, [r3, #12]
 8010846:	2b7f      	cmp	r3, #127	; 0x7f
 8010848:	d0bf      	beq.n	80107ca <net_send_data+0x3a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
 801084a:	69a0      	ldr	r0, [r4, #24]
 801084c:	4621      	mov	r1, r4
 801084e:	f000 f913 	bl	8010a78 <net_if_send_data>
		return -EIO;
 8010852:	2802      	cmp	r0, #2
 8010854:	bf14      	ite	ne
 8010856:	2000      	movne	r0, #0
 8010858:	f06f 0004 	mvneq.w	r0, #4
 801085c:	e7b7      	b.n	80107ce <net_send_data+0x3e>
		return -ENODATA;
 801085e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 8010862:	e7b4      	b.n	80107ce <net_send_data+0x3e>
		return -EINVAL;
 8010864:	f06f 0015 	mvn.w	r0, #21
 8010868:	e7b1      	b.n	80107ce <net_send_data+0x3e>

0801086a <net_process_rx_packet>:
	pkt_len = net_pkt_get_len(pkt);
 801086a:	6881      	ldr	r1, [r0, #8]
	while (buf) {
 801086c:	b909      	cbnz	r1, 8010872 <net_process_rx_packet+0x8>
	processing_data(pkt, is_loopback);
 801086e:	f7ff bf58 	b.w	8010722 <processing_data>
		buf = buf->frags;
 8010872:	6809      	ldr	r1, [r1, #0]
 8010874:	e7fa      	b.n	801086c <net_process_rx_packet+0x2>

08010876 <net_if_l2>:
	if (!iface || !iface->if_dev) {
 8010876:	b110      	cbz	r0, 801087e <net_if_l2+0x8>
 8010878:	6800      	ldr	r0, [r0, #0]
 801087a:	b100      	cbz	r0, 801087e <net_if_l2+0x8>
	return iface->if_dev->l2;
 801087c:	6840      	ldr	r0, [r0, #4]
}
 801087e:	4770      	bx	lr

08010880 <net_context_send_cb>:
{
 8010880:	b410      	push	{r4}
	if (!context) {
 8010882:	b128      	cbz	r0, 8010890 <net_context_send_cb+0x10>
	if (context->send_cb) {
 8010884:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010886:	b11c      	cbz	r4, 8010890 <net_context_send_cb+0x10>
		context->send_cb(context, status, context->user_data);
 8010888:	4623      	mov	r3, r4
 801088a:	6802      	ldr	r2, [r0, #0]
}
 801088c:	bc10      	pop	{r4}
		context->send_cb(context, status, context->user_data);
 801088e:	4718      	bx	r3
}
 8010890:	bc10      	pop	{r4}
 8010892:	4770      	bx	lr

08010894 <k_uptime_get_32>:
{
 8010894:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8010896:	f003 fde8 	bl	801446a <z_impl_k_uptime_ticks>
 801089a:	220a      	movs	r2, #10
 801089c:	2300      	movs	r3, #0
 801089e:	f7ef fcc7 	bl	8000230 <__aeabi_uldivmod>
}
 80108a2:	bd08      	pop	{r3, pc}

080108a4 <if_ipv4_get_addr>:
{
 80108a4:	b570      	push	{r4, r5, r6, lr}
 80108a6:	4604      	mov	r4, r0
 80108a8:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
 80108aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 80108b2:	4616      	mov	r6, r2
	k_mutex_lock(&lock, K_FOREVER);
 80108b4:	f7f3 fe4c 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
	if (!iface) {
 80108b8:	b10c      	cbz	r4, 80108be <if_ipv4_get_addr+0x1a>
	ipv4 = iface->config.ip.ipv4;
 80108ba:	6864      	ldr	r4, [r4, #4]
	if (!ipv4) {
 80108bc:	b9dc      	cbnz	r4, 80108f6 <if_ipv4_get_addr+0x52>
	k_mutex_unlock(&lock);
 80108be:	f7f3 fe4f 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>
}
 80108c2:	4620      	mov	r0, r4
 80108c4:	bd70      	pop	{r4, r5, r6, pc}
		if (!ipv4->unicast[i].is_used ||
 80108c6:	1c6a      	adds	r2, r5, #1
 80108c8:	d003      	beq.n	80108d2 <if_ipv4_get_addr+0x2e>
		    (addr_state != NET_ADDR_ANY_STATE &&
 80108ca:	f994 3015 	ldrsb.w	r3, [r4, #21]
 80108ce:	42ab      	cmp	r3, r5
 80108d0:	d10f      	bne.n	80108f2 <if_ipv4_get_addr+0x4e>
		     ipv4->unicast[i].addr_state != addr_state) ||
 80108d2:	8823      	ldrh	r3, [r4, #0]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d10c      	bne.n	80108f2 <if_ipv4_get_addr+0x4e>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
 80108d8:	3404      	adds	r4, #4
 80108da:	4620      	mov	r0, r4
 80108dc:	f7f3 fe2c 	bl	8004538 <net_ipv4_is_ll_addr>
 80108e0:	b118      	cbz	r0, 80108ea <if_ipv4_get_addr+0x46>
	struct in_addr *addr = NULL;
 80108e2:	2e00      	cmp	r6, #0
 80108e4:	bf08      	it	eq
 80108e6:	2400      	moveq	r4, #0
 80108e8:	e7e9      	b.n	80108be <if_ipv4_get_addr+0x1a>
 80108ea:	2e00      	cmp	r6, #0
 80108ec:	bf18      	it	ne
 80108ee:	2400      	movne	r4, #0
 80108f0:	e7e5      	b.n	80108be <if_ipv4_get_addr+0x1a>
 80108f2:	2400      	movs	r4, #0
 80108f4:	e7e3      	b.n	80108be <if_ipv4_get_addr+0x1a>
		if (!ipv4->unicast[i].is_used ||
 80108f6:	7da3      	ldrb	r3, [r4, #22]
 80108f8:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80108fc:	079b      	lsls	r3, r3, #30
 80108fe:	d4e2      	bmi.n	80108c6 <if_ipv4_get_addr+0x22>
	struct in_addr *addr = NULL;
 8010900:	4614      	mov	r4, r2
 8010902:	e7dc      	b.n	80108be <if_ipv4_get_addr+0x1a>

08010904 <net_if_flag_is_set>:
	if (iface == NULL) {
 8010904:	b140      	cbz	r0, 8010918 <net_if_flag_is_set+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8010906:	6803      	ldr	r3, [r0, #0]
 8010908:	f3bf 8f5b 	dmb	ish
 801090c:	68d8      	ldr	r0, [r3, #12]
 801090e:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 8010912:	4108      	asrs	r0, r1
 8010914:	f000 0001 	and.w	r0, r0, #1
}
 8010918:	4770      	bx	lr

0801091a <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
 801091a:	b510      	push	{r4, lr}
 801091c:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
 801091e:	f7ff ffaa 	bl	8010876 <net_if_l2>
 8010922:	b128      	cbz	r0, 8010930 <l2_flags_get.isra.0+0x16>
 8010924:	68c2      	ldr	r2, [r0, #12]
 8010926:	b11a      	cbz	r2, 8010930 <l2_flags_get.isra.0+0x16>
}
 8010928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
 801092c:	4618      	mov	r0, r3
 801092e:	4710      	bx	r2
}
 8010930:	bd10      	pop	{r4, pc}

08010932 <atomic_clear_bit>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8010932:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
 8010934:	2301      	movs	r3, #1
 8010936:	f001 011f 	and.w	r1, r1, #31
 801093a:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 801093e:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8010940:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8010944:	f3bf 8f5b 	dmb	ish
 8010948:	e850 3f00 	ldrex	r3, [r0]
 801094c:	400b      	ands	r3, r1
 801094e:	e840 3200 	strex	r2, r3, [r0]
 8010952:	2a00      	cmp	r2, #0
 8010954:	d1f8      	bne.n	8010948 <atomic_clear_bit+0x16>
 8010956:	f3bf 8f5b 	dmb	ish
}
 801095a:	4770      	bx	lr

0801095c <net_if_flag_set.isra.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
 801095c:	2301      	movs	r3, #1
 801095e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8010960:	300c      	adds	r0, #12
 8010962:	f3bf 8f5b 	dmb	ish
 8010966:	e850 2f00 	ldrex	r2, [r0]
 801096a:	431a      	orrs	r2, r3
 801096c:	e840 2100 	strex	r1, r2, [r0]
 8010970:	2900      	cmp	r1, #0
 8010972:	d1f8      	bne.n	8010966 <net_if_flag_set.isra.0+0xa>
 8010974:	f3bf 8f5b 	dmb	ish
}
 8010978:	4770      	bx	lr

0801097a <net_if_set_link_addr_locked>:
{
 801097a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801097e:	4605      	mov	r5, r0
 8010980:	4688      	mov	r8, r1
	k_mutex_lock(&lock, K_FOREVER);
 8010982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010986:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 801098a:	461e      	mov	r6, r3
 801098c:	4617      	mov	r7, r2
	k_mutex_lock(&lock, K_FOREVER);
 801098e:	f7f3 fddf 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 8010992:	2100      	movs	r1, #0
 8010994:	4628      	mov	r0, r5
 8010996:	f7ff ffb5 	bl	8010904 <net_if_flag_is_set>
 801099a:	4604      	mov	r4, r0
 801099c:	b948      	cbnz	r0, 80109b2 <net_if_set_link_addr_locked+0x38>
	return &iface->if_dev->link_addr;
 801099e:	6828      	ldr	r0, [r5, #0]
	net_if_get_link_addr(iface)->addr = addr;
 80109a0:	f8c0 8010 	str.w	r8, [r0, #16]
	net_if_get_link_addr(iface)->len = len;
 80109a4:	7507      	strb	r7, [r0, #20]
	net_if_get_link_addr(iface)->type = type;
 80109a6:	7546      	strb	r6, [r0, #21]
	k_mutex_unlock(&lock);
 80109a8:	f7f3 fdda 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>
}
 80109ac:	4620      	mov	r0, r4
 80109ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EPERM;
 80109b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80109b6:	e7f7      	b.n	80109a8 <net_if_set_link_addr_locked+0x2e>

080109b8 <net_if_ipv4_get_ttl>:
{
 80109b8:	b510      	push	{r4, lr}
 80109ba:	4604      	mov	r4, r0
	k_mutex_lock(&lock, K_FOREVER);
 80109bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80109c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109c4:	f7f3 fdc4 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
	if (!iface->config.ip.ipv4) {
 80109c8:	6864      	ldr	r4, [r4, #4]
 80109ca:	b10c      	cbz	r4, 80109d0 <net_if_ipv4_get_ttl+0x18>
	ret = iface->config.ip.ipv4->ttl;
 80109cc:	f894 4038 	ldrb.w	r4, [r4, #56]	; 0x38
	k_mutex_unlock(&lock);
 80109d0:	f7f3 fdc6 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>
}
 80109d4:	4620      	mov	r0, r4
 80109d6:	bd10      	pop	{r4, pc}

080109d8 <net_if_ipv4_addr_mask_cmp>:
{
 80109d8:	b538      	push	{r3, r4, r5, lr}
 80109da:	4605      	mov	r5, r0
 80109dc:	460c      	mov	r4, r1
	k_mutex_lock(&lock, K_FOREVER);
 80109de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80109e6:	f7f3 fdb3 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
	ipv4 = iface->config.ip.ipv4;
 80109ea:	686b      	ldr	r3, [r5, #4]
	if (!ipv4) {
 80109ec:	b1a3      	cbz	r3, 8010a18 <net_if_ipv4_addr_mask_cmp+0x40>
		if (!ipv4->unicast[i].is_used ||
 80109ee:	7d98      	ldrb	r0, [r3, #22]
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
 80109f0:	6821      	ldr	r1, [r4, #0]
 80109f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if (!ipv4->unicast[i].is_used ||
 80109f4:	f3c0 0440 	ubfx	r4, r0, #1, #1
 80109f8:	0780      	lsls	r0, r0, #30
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
 80109fa:	ea01 0102 	and.w	r1, r1, r2
		if (!ipv4->unicast[i].is_used ||
 80109fe:	d507      	bpl.n	8010a10 <net_if_ipv4_addr_mask_cmp+0x38>
 8010a00:	8818      	ldrh	r0, [r3, #0]
 8010a02:	2801      	cmp	r0, #1
 8010a04:	d108      	bne.n	8010a18 <net_if_ipv4_addr_mask_cmp+0x40>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
 8010a06:	685c      	ldr	r4, [r3, #4]
 8010a08:	4022      	ands	r2, r4
 8010a0a:	1a53      	subs	r3, r2, r1
 8010a0c:	425c      	negs	r4, r3
 8010a0e:	415c      	adcs	r4, r3
	k_mutex_unlock(&lock);
 8010a10:	f7f3 fda6 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>
}
 8010a14:	4620      	mov	r0, r4
 8010a16:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 8010a18:	2400      	movs	r4, #0
 8010a1a:	e7f9      	b.n	8010a10 <net_if_ipv4_addr_mask_cmp+0x38>

08010a1c <ipv4_is_broadcast_address>:
{
 8010a1c:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 8010a1e:	6845      	ldr	r5, [r0, #4]
{
 8010a20:	460c      	mov	r4, r1
	if (!ipv4) {
 8010a22:	b90d      	cbnz	r5, 8010a28 <ipv4_is_broadcast_address+0xc>
		return false;
 8010a24:	2000      	movs	r0, #0
}
 8010a26:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
 8010a28:	f7ff ffd6 	bl	80109d8 <net_if_ipv4_addr_mask_cmp>
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	d0f9      	beq.n	8010a24 <ipv4_is_broadcast_address+0x8>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
 8010a30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010a32:	6820      	ldr	r0, [r4, #0]
 8010a34:	43da      	mvns	r2, r3
 8010a36:	ea20 0003 	bic.w	r0, r0, r3
 8010a3a:	1a83      	subs	r3, r0, r2
 8010a3c:	4258      	negs	r0, r3
 8010a3e:	4158      	adcs	r0, r3
 8010a40:	e7f1      	b.n	8010a26 <ipv4_is_broadcast_address+0xa>

08010a42 <net_if_ipv4_get_ll>:
	return if_ipv4_get_addr(iface, addr_state, true);
 8010a42:	2201      	movs	r2, #1
 8010a44:	f7ff bf2e 	b.w	80108a4 <if_ipv4_get_addr>

08010a48 <net_if_ipv4_get_global_addr>:
	return if_ipv4_get_addr(iface, addr_state, false);
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f7ff bf2b 	b.w	80108a4 <if_ipv4_get_addr>

08010a4e <net_if_recv_data>:
{
 8010a4e:	b510      	push	{r4, lr}
 8010a50:	4603      	mov	r3, r0
	return net_if_l2(iface)->recv(iface, pkt);
 8010a52:	f7ff ff10 	bl	8010876 <net_if_l2>
}
 8010a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
 8010a5a:	6802      	ldr	r2, [r0, #0]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	4710      	bx	r2

08010a60 <net_if_queue_tx>:
{
 8010a60:	b510      	push	{r4, lr}
 8010a62:	460c      	mov	r4, r1
	uint8_t tc = net_tx_priority2tc(prio);
 8010a64:	f891 003c 	ldrb.w	r0, [r1, #60]	; 0x3c
 8010a68:	f001 fa6a 	bl	8011f40 <net_tx_priority2tc>
		net_if_tx(net_pkt_iface(pkt), pkt);
 8010a6c:	69a0      	ldr	r0, [r4, #24]
 8010a6e:	4621      	mov	r1, r4
}
 8010a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_if_tx(net_pkt_iface(pkt), pkt);
 8010a74:	f7f3 bfec 	b.w	8004a50 <net_if_tx.isra.0>

08010a78 <net_if_send_data>:
{
 8010a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return pkt->context;
 8010a7a:	694f      	ldr	r7, [r1, #20]
 8010a7c:	4605      	mov	r5, r0
 8010a7e:	460c      	mov	r4, r1
	k_mutex_lock(&lock, K_FOREVER);
 8010a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010a88:	f7f3 fd62 	bl	8004550 <k_mutex_lock.constprop.0.isra.0>
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	4628      	mov	r0, r5
 8010a90:	f7ff ff38 	bl	8010904 <net_if_flag_is_set>
 8010a94:	b1f8      	cbz	r0, 8010ad6 <net_if_send_data+0x5e>
	    net_if_flag_is_set(iface, NET_IF_SUSPENDED)) {
 8010a96:	2104      	movs	r1, #4
 8010a98:	4628      	mov	r0, r5
 8010a9a:	f7ff ff33 	bl	8010904 <net_if_flag_is_set>
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
 8010a9e:	b9d0      	cbnz	r0, 8010ad6 <net_if_send_data+0x5e>
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) && !net_if_l2(iface)) {
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	f7ff fee8 	bl	8010876 <net_if_l2>
 8010aa6:	b338      	cbz	r0, 8010af8 <net_if_send_data+0x80>
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
 8010aa8:	2101      	movs	r1, #1
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f7ff ff2a 	bl	8010904 <net_if_flag_is_set>
 8010ab0:	b940      	cbnz	r0, 8010ac4 <net_if_send_data+0x4c>
 8010ab2:	6a23      	ldr	r3, [r4, #32]
 8010ab4:	b933      	cbnz	r3, 8010ac4 <net_if_send_data+0x4c>
	return &iface->if_dev->link_addr;
 8010ab6:	69a3      	ldr	r3, [r4, #24]
 8010ab8:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
 8010aba:	691a      	ldr	r2, [r3, #16]
 8010abc:	6222      	str	r2, [r4, #32]
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 8010abe:	7d1b      	ldrb	r3, [r3, #20]
 8010ac0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		net_if_queue_tx(iface, pkt);
 8010ac4:	4621      	mov	r1, r4
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	f7ff ffca 	bl	8010a60 <net_if_queue_tx>
 8010acc:	2400      	movs	r4, #0
	k_mutex_unlock(&lock);
 8010ace:	f7f3 fd47 	bl	8004560 <k_mutex_unlock.constprop.0.isra.0>
}
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = -ENETDOWN;
 8010ad6:	f06f 0672 	mvn.w	r6, #114	; 0x72
		if (context) {
 8010ada:	b11f      	cbz	r7, 8010ae4 <net_if_send_data+0x6c>
			net_context_send_cb(context, status);
 8010adc:	4631      	mov	r1, r6
 8010ade:	4638      	mov	r0, r7
 8010ae0:	f7ff fece 	bl	8010880 <net_context_send_cb>
		if (dst->addr) {
 8010ae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010ae6:	b12b      	cbz	r3, 8010af4 <net_if_send_data+0x7c>
			net_if_call_link_cb(iface, dst, status);
 8010ae8:	4632      	mov	r2, r6
 8010aea:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010aee:	4628      	mov	r0, r5
 8010af0:	f7f3 ff90 	bl	8004a14 <net_if_call_link_cb>
 8010af4:	2402      	movs	r4, #2
 8010af6:	e7ea      	b.n	8010ace <net_if_send_data+0x56>
	int status = -EIO;
 8010af8:	f06f 0604 	mvn.w	r6, #4
 8010afc:	e7ed      	b.n	8010ada <net_if_send_data+0x62>

08010afe <net_if_need_calc_tx_checksum>:
 8010afe:	2001      	movs	r0, #1
 8010b00:	4770      	bx	lr

08010b02 <net_if_need_calc_rx_checksum>:
}
 8010b02:	2001      	movs	r0, #1
 8010b04:	4770      	bx	lr

08010b06 <calc_chksum>:
	end = data + len - 1;
 8010b06:	3a01      	subs	r2, #1
{
 8010b08:	b570      	push	{r4, r5, r6, lr}
	end = data + len - 1;
 8010b0a:	188d      	adds	r5, r1, r2
	while (data < end) {
 8010b0c:	460c      	mov	r4, r1
 8010b0e:	42ac      	cmp	r4, r5
 8010b10:	d315      	bcc.n	8010b3e <calc_chksum+0x38>
 8010b12:	f1c1 0301 	rsb	r3, r1, #1
 8010b16:	442b      	add	r3, r5
 8010b18:	f023 0301 	bic.w	r3, r3, #1
 8010b1c:	1e4c      	subs	r4, r1, #1
 8010b1e:	42a5      	cmp	r5, r4
 8010b20:	bf38      	it	cc
 8010b22:	2300      	movcc	r3, #0
 8010b24:	440b      	add	r3, r1
	if (data == end) {
 8010b26:	42ab      	cmp	r3, r5
 8010b28:	d108      	bne.n	8010b3c <calc_chksum+0x36>
		tmp = data[0] << 8;
 8010b2a:	5c8b      	ldrb	r3, [r1, r2]
		sum += tmp;
 8010b2c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8010b30:	b280      	uxth	r0, r0
		if (sum < tmp) {
 8010b32:	ebb0 2f03 	cmp.w	r0, r3, lsl #8
			sum++;
 8010b36:	bf3c      	itt	cc
 8010b38:	3001      	addcc	r0, #1
 8010b3a:	b280      	uxthcc	r0, r0
}
 8010b3c:	bd70      	pop	{r4, r5, r6, pc}
		tmp = (data[0] << 8) + data[1];
 8010b3e:	7826      	ldrb	r6, [r4, #0]
 8010b40:	7863      	ldrb	r3, [r4, #1]
 8010b42:	eb03 2306 	add.w	r3, r3, r6, lsl #8
		sum += tmp;
 8010b46:	fa10 f083 	uxtah	r0, r0, r3
 8010b4a:	b280      	uxth	r0, r0
		tmp = (data[0] << 8) + data[1];
 8010b4c:	b29e      	uxth	r6, r3
		if (sum < tmp) {
 8010b4e:	4286      	cmp	r6, r0
			sum++;
 8010b50:	bf84      	itt	hi
 8010b52:	3001      	addhi	r0, #1
 8010b54:	b280      	uxthhi	r0, r0
		data += 2;
 8010b56:	3402      	adds	r4, #2
 8010b58:	e7d9      	b.n	8010b0e <calc_chksum+0x8>

08010b5a <net_byte_to_hex>:
{
 8010b5a:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
 8010b5c:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
 8010b5e:	b1a3      	cbz	r3, 8010b8a <net_byte_to_hex+0x30>
		if (val < 10) {
 8010b60:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
 8010b62:	bf86      	itte	hi
 8010b64:	f1a2 050a 	subhi.w	r5, r2, #10
 8010b68:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
 8010b6a:	3430      	addls	r4, #48	; 0x30
			*ptr++ = (char) (val - 10 + base);
 8010b6c:	1c43      	adds	r3, r0, #1
			*ptr++ = (char) (val + '0');
 8010b6e:	7004      	strb	r4, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
 8010b70:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
 8010b74:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
 8010b76:	bf83      	ittte	hi
 8010b78:	3a0a      	subhi	r2, #10
 8010b7a:	1889      	addhi	r1, r1, r2
 8010b7c:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
 8010b7e:	3130      	addls	r1, #48	; 0x30
	*ptr = '\0';
 8010b80:	2200      	movs	r2, #0
 8010b82:	7019      	strb	r1, [r3, #0]
 8010b84:	705a      	strb	r2, [r3, #1]
			*ptr++ = (char) (val - 10 + base);
 8010b86:	1c58      	adds	r0, r3, #1
}
 8010b88:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
 8010b8a:	2c00      	cmp	r4, #0
 8010b8c:	d1e8      	bne.n	8010b60 <net_byte_to_hex+0x6>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	e7ee      	b.n	8010b70 <net_byte_to_hex+0x16>

08010b92 <z_impl_net_addr_pton>:
	if (family == AF_INET) {
 8010b92:	2801      	cmp	r0, #1
{
 8010b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b98:	460c      	mov	r4, r1
 8010b9a:	4616      	mov	r6, r2
	if (family == AF_INET) {
 8010b9c:	d126      	bne.n	8010bec <z_impl_net_addr_pton+0x5a>
		len = strlen(src);
 8010b9e:	4608      	mov	r0, r1
 8010ba0:	f7ef fcbd 	bl	800051e <strlen>
		for (i = 0; i < len; i++) {
 8010ba4:	4623      	mov	r3, r4
 8010ba6:	4420      	add	r0, r4
 8010ba8:	4298      	cmp	r0, r3
 8010baa:	d112      	bne.n	8010bd2 <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
 8010bac:	4635      	mov	r5, r6
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f845 3901 	str.w	r3, [r5], #-1
		for (i = 0; i < sizeof(struct in_addr); i++) {
 8010bb4:	3603      	adds	r6, #3
			addr->s4_addr[i] = strtol(src, &endptr, 10);
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	220a      	movs	r2, #10
 8010bba:	a901      	add	r1, sp, #4
 8010bbc:	f7fc fe8a 	bl	800d8d4 <strtol>
 8010bc0:	f805 0f01 	strb.w	r0, [r5, #1]!
			src = ++endptr;
 8010bc4:	9c01      	ldr	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
 8010bc6:	42ae      	cmp	r6, r5
			src = ++endptr;
 8010bc8:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
 8010bcc:	d1f3      	bne.n	8010bb6 <z_impl_net_addr_pton+0x24>
	return 0;
 8010bce:	2000      	movs	r0, #0
 8010bd0:	e009      	b.n	8010be6 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
 8010bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bd6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010bda:	2909      	cmp	r1, #9
 8010bdc:	d9e4      	bls.n	8010ba8 <z_impl_net_addr_pton+0x16>
 8010bde:	2a2e      	cmp	r2, #46	; 0x2e
 8010be0:	d0e2      	beq.n	8010ba8 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
 8010be2:	f06f 0015 	mvn.w	r0, #21
}
 8010be6:	b003      	add	sp, #12
 8010be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
 8010bec:	2802      	cmp	r0, #2
 8010bee:	d1f8      	bne.n	8010be2 <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
 8010bf0:	212e      	movs	r1, #46	; 0x2e
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f003 fe2b 	bl	801484e <strchr>
		if (*src == ':') {
 8010bf8:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	bf14      	ite	ne
 8010bfe:	2706      	movne	r7, #6
 8010c00:	2708      	moveq	r7, #8
		if (*src == ':') {
 8010c02:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
 8010c04:	bf08      	it	eq
 8010c06:	3401      	addeq	r4, #1
		len = strlen(src);
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f7ef fc88 	bl	800051e <strlen>
		for (i = 0; i < len; i++) {
 8010c0e:	2300      	movs	r3, #0
 8010c10:	4283      	cmp	r3, r0
 8010c12:	db1f      	blt.n	8010c54 <z_impl_net_addr_pton+0xc2>
		for (i = 0; i < expected_groups; i++) {
 8010c14:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
 8010c16:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
 8010c18:	7823      	ldrb	r3, [r4, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d0e1      	beq.n	8010be2 <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
 8010c1e:	2b3a      	cmp	r3, #58	; 0x3a
 8010c20:	d02f      	beq.n	8010c82 <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
 8010c22:	2210      	movs	r2, #16
 8010c24:	2100      	movs	r1, #0
 8010c26:	4620      	mov	r0, r4
 8010c28:	f7fc fe54 	bl	800d8d4 <strtol>
 8010c2c:	2210      	movs	r2, #16
 8010c2e:	4681      	mov	r9, r0
 8010c30:	2100      	movs	r1, #0
 8010c32:	4620      	mov	r0, r4
 8010c34:	f7fc fe4e 	bl	800d8d4 <strtol>
 8010c38:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8010c3c:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
 8010c40:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
 8010c44:	213a      	movs	r1, #58	; 0x3a
 8010c46:	4620      	mov	r0, r4
 8010c48:	f003 fe01 	bl	801484e <strchr>
				if (src) {
 8010c4c:	4604      	mov	r4, r0
 8010c4e:	b178      	cbz	r0, 8010c70 <z_impl_net_addr_pton+0xde>
			src++;
 8010c50:	3401      	adds	r4, #1
 8010c52:	e010      	b.n	8010c76 <z_impl_net_addr_pton+0xe4>
			if (!(src[i] >= '0' && src[i] <= '9') &&
 8010c54:	5ce2      	ldrb	r2, [r4, r3]
 8010c56:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010c5a:	290a      	cmp	r1, #10
 8010c5c:	d906      	bls.n	8010c6c <z_impl_net_addr_pton+0xda>
 8010c5e:	f022 0120 	bic.w	r1, r2, #32
 8010c62:	3941      	subs	r1, #65	; 0x41
 8010c64:	2905      	cmp	r1, #5
 8010c66:	d901      	bls.n	8010c6c <z_impl_net_addr_pton+0xda>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
 8010c68:	2a2e      	cmp	r2, #46	; 0x2e
 8010c6a:	d1ba      	bne.n	8010be2 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	e7cf      	b.n	8010c10 <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
 8010c70:	1e7b      	subs	r3, r7, #1
 8010c72:	42ab      	cmp	r3, r5
 8010c74:	dcb5      	bgt.n	8010be2 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
 8010c76:	3501      	adds	r5, #1
 8010c78:	42af      	cmp	r7, r5
 8010c7a:	dd16      	ble.n	8010caa <z_impl_net_addr_pton+0x118>
			if (!src || *src == '\0') {
 8010c7c:	2c00      	cmp	r4, #0
 8010c7e:	d1cb      	bne.n	8010c18 <z_impl_net_addr_pton+0x86>
 8010c80:	e7af      	b.n	8010be2 <z_impl_net_addr_pton+0x50>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
 8010c82:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8010c86:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
 8010c8a:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
 8010c8e:	3501      	adds	r5, #1
 8010c90:	42af      	cmp	r7, r5
 8010c92:	dcf6      	bgt.n	8010c82 <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
 8010c94:	213a      	movs	r1, #58	; 0x3a
 8010c96:	4620      	mov	r0, r4
 8010c98:	f003 fe21 	bl	80148de <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
 8010c9c:	4284      	cmp	r4, r0
 8010c9e:	d11f      	bne.n	8010ce0 <z_impl_net_addr_pton+0x14e>
 8010ca0:	2f06      	cmp	r7, #6
 8010ca2:	d001      	beq.n	8010ca8 <z_impl_net_addr_pton+0x116>
 8010ca4:	7863      	ldrb	r3, [r4, #1]
 8010ca6:	b9fb      	cbnz	r3, 8010ce8 <z_impl_net_addr_pton+0x156>
				src++;
 8010ca8:	3401      	adds	r4, #1
		if (expected_groups == 6) {
 8010caa:	2f06      	cmp	r7, #6
 8010cac:	d18f      	bne.n	8010bce <z_impl_net_addr_pton+0x3c>
 8010cae:	360c      	adds	r6, #12
			for (i = 0; i < 4; i++) {
 8010cb0:	2500      	movs	r5, #0
				if (!src || !*src) {
 8010cb2:	2c00      	cmp	r4, #0
 8010cb4:	d095      	beq.n	8010be2 <z_impl_net_addr_pton+0x50>
 8010cb6:	7823      	ldrb	r3, [r4, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d092      	beq.n	8010be2 <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
 8010cbc:	220a      	movs	r2, #10
 8010cbe:	2100      	movs	r1, #0
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f7fc fe07 	bl	800d8d4 <strtol>
				src = strchr(src, '.');
 8010cc6:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
 8010cc8:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
 8010ccc:	4620      	mov	r0, r4
 8010cce:	f003 fdbe 	bl	801484e <strchr>
				if (src) {
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	b1b0      	cbz	r0, 8010d04 <z_impl_net_addr_pton+0x172>
					src++;
 8010cd6:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
 8010cd8:	3501      	adds	r5, #1
 8010cda:	2d04      	cmp	r5, #4
 8010cdc:	d1e9      	bne.n	8010cb2 <z_impl_net_addr_pton+0x120>
 8010cde:	e776      	b.n	8010bce <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
 8010ce0:	2f06      	cmp	r7, #6
				tmp--;
 8010ce2:	bf08      	it	eq
 8010ce4:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
			i = expected_groups - 1;
 8010ce8:	1e7d      	subs	r5, r7, #1
 8010cea:	3001      	adds	r0, #1
				if (*tmp == ':') {
 8010cec:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
 8010cf0:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
 8010cf2:	bf08      	it	eq
 8010cf4:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
				if (i < 0) {
 8010cf8:	2d00      	cmp	r5, #0
 8010cfa:	f6ff af72 	blt.w	8010be2 <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
 8010cfe:	4284      	cmp	r4, r0
 8010d00:	d1f4      	bne.n	8010cec <z_impl_net_addr_pton+0x15a>
 8010d02:	e7a5      	b.n	8010c50 <z_impl_net_addr_pton+0xbe>
					if (i < 3) {
 8010d04:	2d03      	cmp	r5, #3
 8010d06:	f47f af6c 	bne.w	8010be2 <z_impl_net_addr_pton+0x50>
 8010d0a:	e7e5      	b.n	8010cd8 <z_impl_net_addr_pton+0x146>

08010d0c <parse_ipv4>:
{
 8010d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	len = MIN(NET_IPV4_ADDR_LEN, str_len);
 8010d10:	2910      	cmp	r1, #16
{
 8010d12:	461d      	mov	r5, r3
 8010d14:	b086      	sub	sp, #24
	len = MIN(NET_IPV4_ADDR_LEN, str_len);
 8010d16:	460b      	mov	r3, r1
{
 8010d18:	4681      	mov	r9, r0
 8010d1a:	460e      	mov	r6, r1
 8010d1c:	4617      	mov	r7, r2
	len = MIN(NET_IPV4_ADDR_LEN, str_len);
 8010d1e:	bf28      	it	cs
 8010d20:	2310      	movcs	r3, #16
	for (i = 0; i < len; i++) {
 8010d22:	2400      	movs	r4, #0
 8010d24:	42a3      	cmp	r3, r4
 8010d26:	dc0e      	bgt.n	8010d46 <parse_ipv4+0x3a>
 8010d28:	461c      	mov	r4, r3
	if (has_port) {
 8010d2a:	2d00      	cmp	r5, #0
 8010d2c:	d051      	beq.n	8010dd2 <parse_ipv4+0xc6>
		ptr = memchr(str, ':', len);
 8010d2e:	4622      	mov	r2, r4
 8010d30:	213a      	movs	r1, #58	; 0x3a
 8010d32:	4648      	mov	r0, r9
 8010d34:	f7ef fa2c 	bl	8000190 <memchr>
		if (!ptr) {
 8010d38:	4682      	mov	sl, r0
 8010d3a:	b950      	cbnz	r0, 8010d52 <parse_ipv4+0x46>
		return false;
 8010d3c:	2500      	movs	r5, #0
}
 8010d3e:	4628      	mov	r0, r5
 8010d40:	b006      	add	sp, #24
 8010d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!str[i]) {
 8010d46:	f819 2004 	ldrb.w	r2, [r9, r4]
 8010d4a:	2a00      	cmp	r2, #0
 8010d4c:	d0ed      	beq.n	8010d2a <parse_ipv4+0x1e>
	for (i = 0; i < len; i++) {
 8010d4e:	3401      	adds	r4, #1
 8010d50:	e7e8      	b.n	8010d24 <parse_ipv4+0x18>
		end = MIN(len, ptr - str);
 8010d52:	eba0 0309 	sub.w	r3, r0, r9
 8010d56:	429c      	cmp	r4, r3
 8010d58:	bfa8      	it	ge
 8010d5a:	461c      	movge	r4, r3
	memcpy(ipaddr, str, end);
 8010d5c:	f10d 0804 	add.w	r8, sp, #4
 8010d60:	4649      	mov	r1, r9
 8010d62:	2311      	movs	r3, #17
 8010d64:	4622      	mov	r2, r4
 8010d66:	4640      	mov	r0, r8
 8010d68:	f003 fd2e 	bl	80147c8 <__memcpy_chk>
	ipaddr[end] = '\0';
 8010d6c:	ab06      	add	r3, sp, #24
 8010d6e:	4423      	add	r3, r4
 8010d70:	f04f 0900 	mov.w	r9, #0
 8010d74:	f803 9c14 	strb.w	r9, [r3, #-20]
 8010d78:	2001      	movs	r0, #1
 8010d7a:	1d3a      	adds	r2, r7, #4
 8010d7c:	4641      	mov	r1, r8
 8010d7e:	f7ff ff08 	bl	8010b92 <z_impl_net_addr_pton>
	if (ret < 0) {
 8010d82:	4548      	cmp	r0, r9
 8010d84:	dbda      	blt.n	8010d3c <parse_ipv4+0x30>
	net_sin(addr)->sin_family = AF_INET;
 8010d86:	2301      	movs	r3, #1
 8010d88:	803b      	strh	r3, [r7, #0]
	if (!has_port) {
 8010d8a:	b325      	cbz	r5, 8010dd6 <parse_ipv4+0xca>
	memcpy(ipaddr, ptr + 1, str_len - end);
 8010d8c:	1b34      	subs	r4, r6, r4
 8010d8e:	4622      	mov	r2, r4
 8010d90:	2311      	movs	r3, #17
 8010d92:	f10a 0101 	add.w	r1, sl, #1
 8010d96:	4640      	mov	r0, r8
 8010d98:	f003 fd16 	bl	80147c8 <__memcpy_chk>
	ipaddr[str_len - end] = '\0';
 8010d9c:	ab06      	add	r3, sp, #24
 8010d9e:	441c      	add	r4, r3
	tmp = strtoul(buf, &endptr, 10);
 8010da0:	220a      	movs	r2, #10
	ipaddr[str_len - end] = '\0';
 8010da2:	f804 9c14 	strb.w	r9, [r4, #-20]
	tmp = strtoul(buf, &endptr, 10);
 8010da6:	4669      	mov	r1, sp
 8010da8:	4640      	mov	r0, r8
 8010daa:	f7fc fe0f 	bl	800d9cc <strtoul>
	if ((endptr == buf && tmp == 0) ||
 8010dae:	9b00      	ldr	r3, [sp, #0]
 8010db0:	4543      	cmp	r3, r8
 8010db2:	d101      	bne.n	8010db8 <parse_ipv4+0xac>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	d0c1      	beq.n	8010d3c <parse_ipv4+0x30>
 8010db8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010dbc:	2a00      	cmp	r2, #0
 8010dbe:	d0bd      	beq.n	8010d3c <parse_ipv4+0x30>
	    !(*buf != '\0' && *endptr == '\0') ||
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1ba      	bne.n	8010d3c <parse_ipv4+0x30>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
 8010dc6:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
 8010dc8:	4298      	cmp	r0, r3
 8010dca:	d1b7      	bne.n	8010d3c <parse_ipv4+0x30>
	net_sin(addr)->sin_port = htons(port);
 8010dcc:	ba5b      	rev16	r3, r3
 8010dce:	807b      	strh	r3, [r7, #2]
	return true;
 8010dd0:	e7b5      	b.n	8010d3e <parse_ipv4+0x32>
	char *ptr = NULL;
 8010dd2:	46aa      	mov	sl, r5
 8010dd4:	e7c2      	b.n	8010d5c <parse_ipv4+0x50>
		return true;
 8010dd6:	461d      	mov	r5, r3
 8010dd8:	e7b1      	b.n	8010d3e <parse_ipv4+0x32>

08010dda <net_calc_chksum>:
	return pkt->family;
 8010dda:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8010dde:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8010de2:	2b01      	cmp	r3, #1
{
 8010de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010de8:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8010dea:	d17b      	bne.n	8010ee4 <net_calc_chksum+0x10a>
		if (proto != IPPROTO_ICMP) {
 8010dec:	2901      	cmp	r1, #1
 8010dee:	d050      	beq.n	8010e92 <net_calc_chksum+0xb8>
			sum = net_pkt_get_len(pkt) -
 8010df0:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
 8010df2:	2200      	movs	r2, #0
	while (buf) {
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d148      	bne.n	8010e8a <net_calc_chksum+0xb0>
				net_pkt_ip_hdr_len(pkt) -
 8010df8:	f895 4034 	ldrb.w	r4, [r5, #52]	; 0x34
				net_pkt_ipv4_opts_len(pkt) + proto;
 8010dfc:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			sum = net_pkt_get_len(pkt) -
 8010e00:	441c      	add	r4, r3
 8010e02:	1b0c      	subs	r4, r1, r4
 8010e04:	4414      	add	r4, r2
 8010e06:	b2a4      	uxth	r4, r4
			len = 2 * sizeof(struct in_addr);
 8010e08:	f04f 0908 	mov.w	r9, #8
	net_pkt_cursor_init(pkt);
 8010e0c:	4628      	mov	r0, r5
	backup->pos = pkt->cursor.pos;
 8010e0e:	e9d5 8703 	ldrd	r8, r7, [r5, #12]
 8010e12:	f000 fe5f 	bl	8011ad4 <net_pkt_cursor_init>
	return pkt->overwrite;
 8010e16:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
 8010e1a:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
 8010e1e:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
 8010e22:	f043 0301 	orr.w	r3, r3, #1
 8010e26:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8010e2a:	eba1 0109 	sub.w	r1, r1, r9
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f000 feb5 	bl	8011b9e <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
 8010e34:	6929      	ldr	r1, [r5, #16]
 8010e36:	464a      	mov	r2, r9
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f7ff fe64 	bl	8010b06 <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
 8010e3e:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	sum = calc_chksum(sum, pkt->cursor.pos, len);
 8010e42:	4604      	mov	r4, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
 8010e44:	4449      	add	r1, r9
 8010e46:	4628      	mov	r0, r5
 8010e48:	f000 fea9 	bl	8011b9e <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
 8010e4c:	68eb      	ldr	r3, [r5, #12]
 8010e4e:	b163      	cbz	r3, 8010e6a <net_calc_chksum+0x90>
 8010e50:	692a      	ldr	r2, [r5, #16]
 8010e52:	b152      	cbz	r2, 8010e6a <net_calc_chksum+0x90>
	len = cur->buf->len - (cur->pos - cur->buf->data);
 8010e54:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8010e58:	689b      	ldr	r3, [r3, #8]
 8010e5a:	1ad2      	subs	r2, r2, r3
 8010e5c:	eba9 0902 	sub.w	r9, r9, r2
	while (cur->buf) {
 8010e60:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8010e64:	f1ba 0f00 	cmp.w	sl, #0
 8010e68:	d116      	bne.n	8010e98 <net_calc_chksum+0xbe>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8010e6a:	2c00      	cmp	r4, #0
 8010e6c:	d037      	beq.n	8010ede <net_calc_chksum+0x104>
 8010e6e:	ba64      	rev16	r4, r4
 8010e70:	b2a4      	uxth	r4, r4
 8010e72:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
	pkt->cursor.pos = backup->pos;
 8010e76:	e9c5 8703 	strd	r8, r7, [r5, #12]
	pkt->overwrite = overwrite;
 8010e7a:	f366 0300 	bfi	r3, r6, #0, #1
	return ~sum;
 8010e7e:	43e0      	mvns	r0, r4
 8010e80:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8010e84:	b280      	uxth	r0, r0
}
 8010e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
 8010e8a:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
 8010e8c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 8010e8e:	4402      	add	r2, r0
		buf = buf->frags;
 8010e90:	e7b0      	b.n	8010df4 <net_calc_chksum+0x1a>
	uint16_t sum = 0U;
 8010e92:	2400      	movs	r4, #0
	size_t len = 0U;
 8010e94:	46a1      	mov	r9, r4
 8010e96:	e7b9      	b.n	8010e0c <net_calc_chksum+0x32>
		sum = calc_chksum(sum, cur->pos, len);
 8010e98:	4620      	mov	r0, r4
 8010e9a:	6929      	ldr	r1, [r5, #16]
 8010e9c:	464a      	mov	r2, r9
 8010e9e:	f7ff fe32 	bl	8010b06 <calc_chksum>
		cur->buf = cur->buf->frags;
 8010ea2:	f8da 3000 	ldr.w	r3, [sl]
 8010ea6:	60eb      	str	r3, [r5, #12]
		sum = calc_chksum(sum, cur->pos, len);
 8010ea8:	4604      	mov	r4, r0
		if (!cur->buf || !cur->buf->len) {
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d0dd      	beq.n	8010e6a <net_calc_chksum+0x90>
 8010eae:	899a      	ldrh	r2, [r3, #12]
 8010eb0:	2a00      	cmp	r2, #0
 8010eb2:	d0da      	beq.n	8010e6a <net_calc_chksum+0x90>
		cur->pos = cur->buf->data;
 8010eb4:	689b      	ldr	r3, [r3, #8]
 8010eb6:	612b      	str	r3, [r5, #16]
		if (len % 2) {
 8010eb8:	f019 0f01 	tst.w	r9, #1
 8010ebc:	d00d      	beq.n	8010eda <net_calc_chksum+0x100>
			sum += *cur->pos;
 8010ebe:	7819      	ldrb	r1, [r3, #0]
 8010ec0:	440c      	add	r4, r1
 8010ec2:	b2a4      	uxth	r4, r4
			if (sum < *cur->pos) {
 8010ec4:	42a1      	cmp	r1, r4
				sum++;
 8010ec6:	bf88      	it	hi
 8010ec8:	3401      	addhi	r4, #1
			cur->pos++;
 8010eca:	f103 0301 	add.w	r3, r3, #1
				sum++;
 8010ece:	bf88      	it	hi
 8010ed0:	b2a4      	uxthhi	r4, r4
			cur->pos++;
 8010ed2:	612b      	str	r3, [r5, #16]
			len = cur->buf->len - 1;
 8010ed4:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
 8010ed8:	e7c2      	b.n	8010e60 <net_calc_chksum+0x86>
			len = cur->buf->len;
 8010eda:	4691      	mov	r9, r2
 8010edc:	e7c0      	b.n	8010e60 <net_calc_chksum+0x86>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8010ede:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8010ee2:	e7c6      	b.n	8010e72 <net_calc_chksum+0x98>
		return 0;
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	e7ce      	b.n	8010e86 <net_calc_chksum+0xac>

08010ee8 <net_calc_chksum_ipv4>:
{
 8010ee8:	b508      	push	{r3, lr}
			  net_pkt_ipv4_opts_len(pkt));
 8010eea:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
			  net_pkt_ip_hdr_len(pkt) +
 8010eee:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	sum = calc_chksum(0, pkt->buffer->data,
 8010ef2:	6883      	ldr	r3, [r0, #8]
 8010ef4:	440a      	add	r2, r1
 8010ef6:	2000      	movs	r0, #0
 8010ef8:	6899      	ldr	r1, [r3, #8]
 8010efa:	f7ff fe04 	bl	8010b06 <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8010efe:	b120      	cbz	r0, 8010f0a <net_calc_chksum_ipv4+0x22>
 8010f00:	ba40      	rev16	r0, r0
 8010f02:	b280      	uxth	r0, r0
	return ~sum;
 8010f04:	43c0      	mvns	r0, r0
}
 8010f06:	b280      	uxth	r0, r0
 8010f08:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8010f0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010f0e:	e7f9      	b.n	8010f04 <net_calc_chksum_ipv4+0x1c>

08010f10 <net_ipaddr_parse>:
{
 8010f10:	b470      	push	{r4, r5, r6}
	if (!str || str_len == 0) {
 8010f12:	b1b8      	cbz	r0, 8010f44 <net_ipaddr_parse+0x34>
 8010f14:	b1b1      	cbz	r1, 8010f44 <net_ipaddr_parse+0x34>
	if (*str == '\0') {
 8010f16:	7803      	ldrb	r3, [r0, #0]
 8010f18:	b1a3      	cbz	r3, 8010f44 <net_ipaddr_parse+0x34>
	if (*str == '[') {
 8010f1a:	2b5b      	cmp	r3, #91	; 0x5b
 8010f1c:	d012      	beq.n	8010f44 <net_ipaddr_parse+0x34>
 8010f1e:	4604      	mov	r4, r0
 8010f20:	180e      	adds	r6, r1, r0
	for (count = i = 0; str[i] && i < str_len; i++) {
 8010f22:	2300      	movs	r3, #0
 8010f24:	7825      	ldrb	r5, [r4, #0]
 8010f26:	b925      	cbnz	r5, 8010f32 <net_ipaddr_parse+0x22>
	if (count == 1) {
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d109      	bne.n	8010f40 <net_ipaddr_parse+0x30>
}
 8010f2c:	bc70      	pop	{r4, r5, r6}
	return parse_ipv4(str, str_len, addr, false);
 8010f2e:	f7ff beed 	b.w	8010d0c <parse_ipv4>
	for (count = i = 0; str[i] && i < str_len; i++) {
 8010f32:	42b4      	cmp	r4, r6
 8010f34:	d0f8      	beq.n	8010f28 <net_ipaddr_parse+0x18>
		if (str[i] == ':') {
 8010f36:	2d3a      	cmp	r5, #58	; 0x3a
			count++;
 8010f38:	bf08      	it	eq
 8010f3a:	3301      	addeq	r3, #1
	for (count = i = 0; str[i] && i < str_len; i++) {
 8010f3c:	3401      	adds	r4, #1
 8010f3e:	e7f1      	b.n	8010f24 <net_ipaddr_parse+0x14>
	return parse_ipv4(str, str_len, addr, false);
 8010f40:	2300      	movs	r3, #0
 8010f42:	e7f3      	b.n	8010f2c <net_ipaddr_parse+0x1c>
}
 8010f44:	2000      	movs	r0, #0
 8010f46:	bc70      	pop	{r4, r5, r6}
 8010f48:	4770      	bx	lr

08010f4a <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8010f4a:	6800      	ldr	r0, [r0, #0]
 8010f4c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 8010f50:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 8010f54:	4258      	negs	r0, r3
 8010f56:	4158      	adcs	r0, r3
 8010f58:	4770      	bx	lr

08010f5a <context_write_data>:
{
 8010f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f5e:	4680      	mov	r8, r0
 8010f60:	4615      	mov	r5, r2
	if (msghdr) {
 8010f62:	461e      	mov	r6, r3
 8010f64:	b9d3      	cbnz	r3, 8010f9c <context_write_data+0x42>
}
 8010f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ret = net_pkt_write(pkt, buf, buf_len);
 8010f6a:	f000 bf9c 	b.w	8011ea6 <net_pkt_write>
			int len = MIN(msghdr->msg_iov[i].iov_len, buf_len);
 8010f6e:	68b3      	ldr	r3, [r6, #8]
 8010f70:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
 8010f74:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
			int len = MIN(msghdr->msg_iov[i].iov_len, buf_len);
 8010f78:	6857      	ldr	r7, [r2, #4]
 8010f7a:	42af      	cmp	r7, r5
 8010f7c:	bf28      	it	cs
 8010f7e:	462f      	movcs	r7, r5
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
 8010f80:	463a      	mov	r2, r7
 8010f82:	4640      	mov	r0, r8
 8010f84:	f000 ff8f 	bl	8011ea6 <net_pkt_write>
			if (ret < 0) {
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	db05      	blt.n	8010f98 <context_write_data+0x3e>
			if (buf_len == 0) {
 8010f8c:	1bed      	subs	r5, r5, r7
 8010f8e:	d003      	beq.n	8010f98 <context_write_data+0x3e>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 8010f90:	3401      	adds	r4, #1
 8010f92:	68f3      	ldr	r3, [r6, #12]
 8010f94:	42a3      	cmp	r3, r4
 8010f96:	d8ea      	bhi.n	8010f6e <context_write_data+0x14>
}
 8010f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 8010f9c:	2400      	movs	r4, #0
	int ret = 0;
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	e7f7      	b.n	8010f92 <context_write_data+0x38>

08010fa2 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8010fa2:	f7fb ba0d 	b.w	800c3c0 <z_impl_k_mutex_lock>

08010fa6 <net_context_get_iface.isra.0>:
 8010fa6:	f7f3 bba1 	b.w	80046ec <z_impl_net_if_get_by_index>

08010faa <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8010faa:	f7fb ba81 	b.w	800c4b0 <z_impl_k_mutex_unlock>

08010fae <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8010fae:	1d03      	adds	r3, r0, #4
 8010fb0:	f3bf 8f5b 	dmb	ish
 8010fb4:	e853 0f00 	ldrex	r0, [r3]
 8010fb8:	1c42      	adds	r2, r0, #1
 8010fba:	e843 2100 	strex	r1, r2, [r3]
 8010fbe:	2900      	cmp	r1, #0
 8010fc0:	d1f8      	bne.n	8010fb4 <net_context_ref+0x6>
 8010fc2:	f3bf 8f5b 	dmb	ish
}
 8010fc6:	3001      	adds	r0, #1
 8010fc8:	4770      	bx	lr

08010fca <net_context_unref>:
{
 8010fca:	b538      	push	{r3, r4, r5, lr}
 8010fcc:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8010fce:	1d03      	adds	r3, r0, #4
 8010fd0:	f3bf 8f5b 	dmb	ish
 8010fd4:	e853 0f00 	ldrex	r0, [r3]
 8010fd8:	1e42      	subs	r2, r0, #1
 8010fda:	e843 2100 	strex	r1, r2, [r3]
 8010fde:	2900      	cmp	r1, #0
 8010fe0:	d1f8      	bne.n	8010fd4 <net_context_unref+0xa>
 8010fe2:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
 8010fe6:	2801      	cmp	r0, #1
 8010fe8:	d001      	beq.n	8010fee <net_context_unref+0x24>
		return old_rc - 1;
 8010fea:	3801      	subs	r0, #1
}
 8010fec:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
 8010fee:	f104 0508 	add.w	r5, r4, #8
 8010ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	f7ff ffd1 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
	net_tcp_unref(context);
 8011000:	4620      	mov	r0, r4
 8011002:	f001 fbce 	bl	80127a2 <net_tcp_unref>
	if (context->conn_handler) {
 8011006:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011008:	b118      	cbz	r0, 8011012 <net_context_unref+0x48>
			net_conn_unregister(context->conn_handler);
 801100a:	f7f4 feb1 	bl	8005d70 <net_conn_unregister>
		context->conn_handler = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
 8011012:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 8011016:	f023 0307 	bic.w	r3, r3, #7
	k_mutex_unlock(&context->lock);
 801101a:	4628      	mov	r0, r5
	context->flags &= ~NET_CONTEXT_IN_USE;
 801101c:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
	k_mutex_unlock(&context->lock);
 8011020:	f7ff ffc3 	bl	8010faa <k_mutex_unlock.isra.0>
	return 0;
 8011024:	2000      	movs	r0, #0
 8011026:	e7e1      	b.n	8010fec <net_context_unref+0x22>

08011028 <net_context_bind>:
{
 8011028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (context->conn_handler) {
 801102a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 801102c:	4605      	mov	r5, r0
 801102e:	460e      	mov	r6, r1
 8011030:	4617      	mov	r7, r2
	if (context->conn_handler) {
 8011032:	2c00      	cmp	r4, #0
 8011034:	d16a      	bne.n	801110c <net_context_bind+0xe4>
	if (IS_ENABLED(CONFIG_NET_IPV4) && addr->sa_family == AF_INET) {
 8011036:	880b      	ldrh	r3, [r1, #0]
 8011038:	2b01      	cmp	r3, #1
 801103a:	d16a      	bne.n	8011112 <net_context_bind+0xea>
		if (addrlen < sizeof(struct sockaddr_in)) {
 801103c:	2a07      	cmp	r2, #7
		struct net_if *iface = NULL;
 801103e:	9401      	str	r4, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in)) {
 8011040:	d967      	bls.n	8011112 <net_context_bind+0xea>
		if (net_context_is_bound_to_iface(context)) {
 8011042:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 8011046:	051b      	lsls	r3, r3, #20
 8011048:	d504      	bpl.n	8011054 <net_context_bind+0x2c>
			iface = net_context_get_iface(context);
 801104a:	f990 0088 	ldrsb.w	r0, [r0, #136]	; 0x88
 801104e:	f7ff ffaa 	bl	8010fa6 <net_context_get_iface.isra.0>
 8011052:	9001      	str	r0, [sp, #4]
		if (net_ipv4_is_addr_mcast(&addr4->sin_addr)) {
 8011054:	1d32      	adds	r2, r6, #4
 8011056:	4610      	mov	r0, r2
 8011058:	f7ff ff77 	bl	8010f4a <net_ipv4_is_addr_mcast>
 801105c:	b148      	cbz	r0, 8011072 <net_context_bind+0x4a>
			maddr = net_if_ipv4_maddr_lookup(&addr4->sin_addr,
 801105e:	a901      	add	r1, sp, #4
 8011060:	4610      	mov	r0, r2
 8011062:	f7f3 fca9 	bl	80049b8 <net_if_ipv4_maddr_lookup>
			if (!maddr) {
 8011066:	bb58      	cbnz	r0, 80110c0 <net_context_bind+0x98>
				return -ENOENT;
 8011068:	f06f 0401 	mvn.w	r4, #1
}
 801106c:	4620      	mov	r0, r4
 801106e:	b003      	add	sp, #12
 8011070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
 8011072:	6871      	ldr	r1, [r6, #4]
			if (iface == NULL) {
 8011074:	9b01      	ldr	r3, [sp, #4]
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
 8011076:	b9e1      	cbnz	r1, 80110b2 <net_context_bind+0x8a>
			if (iface == NULL) {
 8011078:	b923      	cbnz	r3, 8011084 <net_context_bind+0x5c>
				iface = net_if_ipv4_select_src_iface(
 801107a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801107e:	f7f3 fbb3 	bl	80047e8 <net_if_ipv4_select_src_iface>
 8011082:	9001      	str	r0, [sp, #4]
			ptr = (struct in_addr *)net_ipv4_unspecified_address();
 8011084:	f7f3 ff44 	bl	8004f10 <net_ipv4_unspecified_address>
 8011088:	4604      	mov	r4, r0
		if (!iface) {
 801108a:	9801      	ldr	r0, [sp, #4]
 801108c:	2800      	cmp	r0, #0
 801108e:	d03a      	beq.n	8011106 <net_context_bind+0xde>
	return (iface->if_dev->offload != NULL);
 8011090:	6803      	ldr	r3, [r0, #0]
		if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 8011092:	699b      	ldr	r3, [r3, #24]
 8011094:	b1b3      	cbz	r3, 80110c4 <net_context_bind+0x9c>
 8011096:	f7f3 fd2d 	bl	8004af4 <net_if_get_by_iface>
	return iface->if_dev->offload;
 801109a:	9b01      	ldr	r3, [sp, #4]
 801109c:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
 80110a0:	681b      	ldr	r3, [r3, #0]
	return net_if_offload(iface)->bind(context, addr, addrlen);
 80110a2:	699b      	ldr	r3, [r3, #24]
 80110a4:	463a      	mov	r2, r7
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	4631      	mov	r1, r6
 80110aa:	4628      	mov	r0, r5
 80110ac:	4798      	blx	r3
 80110ae:	4604      	mov	r4, r0
			return net_offload_bind(iface,
 80110b0:	e7dc      	b.n	801106c <net_context_bind+0x44>
			ifaddr = net_if_ipv4_addr_lookup(
 80110b2:	b903      	cbnz	r3, 80110b6 <net_context_bind+0x8e>
 80110b4:	ac01      	add	r4, sp, #4
 80110b6:	4621      	mov	r1, r4
 80110b8:	4610      	mov	r0, r2
 80110ba:	f7f3 fc0b 	bl	80048d4 <net_if_ipv4_addr_lookup>
 80110be:	e7d2      	b.n	8011066 <net_context_bind+0x3e>
			ptr = &ifaddr->address.in_addr;
 80110c0:	1d04      	adds	r4, r0, #4
 80110c2:	e7e2      	b.n	801108a <net_context_bind+0x62>
		k_mutex_lock(&context->lock, K_FOREVER);
 80110c4:	f105 0708 	add.w	r7, r5, #8
 80110c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110d0:	4638      	mov	r0, r7
 80110d2:	f7ff ff66 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
 80110d6:	9801      	ldr	r0, [sp, #4]
 80110d8:	f7f3 fd0c 	bl	8004af4 <net_if_get_by_iface>
 80110dc:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
		if (addr4->sin_port) {
 80110e0:	8871      	ldrh	r1, [r6, #2]
		net_sin_ptr(&context->local)->sin_addr = ptr;
 80110e2:	622c      	str	r4, [r5, #32]
		net_sin_ptr(&context->local)->sin_family = AF_INET;
 80110e4:	2001      	movs	r0, #1
 80110e6:	83a8      	strh	r0, [r5, #28]
		if (addr4->sin_port) {
 80110e8:	b149      	cbz	r1, 80110fe <net_context_bind+0xd6>
			ret = check_used_port(AF_INET, addr4->sin_port,
 80110ea:	4632      	mov	r2, r6
 80110ec:	f7f3 ff18 	bl	8004f20 <check_used_port>
			if (!ret) {
 80110f0:	4604      	mov	r4, r0
 80110f2:	b900      	cbnz	r0, 80110f6 <net_context_bind+0xce>
				net_sin_ptr(&context->local)->sin_port =
 80110f4:	83e9      	strh	r1, [r5, #30]
		k_mutex_unlock(&context->lock);
 80110f6:	4638      	mov	r0, r7
 80110f8:	f7ff ff57 	bl	8010faa <k_mutex_unlock.isra.0>
		return ret;
 80110fc:	e7b6      	b.n	801106c <net_context_bind+0x44>
			addr4->sin_port =
 80110fe:	8beb      	ldrh	r3, [r5, #30]
 8011100:	8073      	strh	r3, [r6, #2]
 8011102:	460c      	mov	r4, r1
 8011104:	e7f7      	b.n	80110f6 <net_context_bind+0xce>
			return -EADDRNOTAVAIL;
 8011106:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 801110a:	e7af      	b.n	801106c <net_context_bind+0x44>
		return -EISCONN;
 801110c:	f06f 047e 	mvn.w	r4, #126	; 0x7e
 8011110:	e7ac      	b.n	801106c <net_context_bind+0x44>
	return -EINVAL;
 8011112:	f06f 0415 	mvn.w	r4, #21
 8011116:	e7a9      	b.n	801106c <net_context_bind+0x44>

08011118 <bind_default>:
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8011118:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 801111c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8011120:	2b01      	cmp	r3, #1
{
 8011122:	b513      	push	{r0, r1, r4, lr}
 8011124:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 8011126:	d112      	bne.n	801114e <bind_default+0x36>
		if (net_sin_ptr(&context->local)->sin_addr) {
 8011128:	6a02      	ldr	r2, [r0, #32]
 801112a:	b972      	cbnz	r2, 801114a <bind_default+0x32>
			find_available_port(context,
 801112c:	4669      	mov	r1, sp
		addr4.sin_addr.s_addr = INADDR_ANY;
 801112e:	9201      	str	r2, [sp, #4]
		addr4.sin_family = AF_INET;
 8011130:	f8ad 3000 	strh.w	r3, [sp]
			find_available_port(context,
 8011134:	f7f3 ff18 	bl	8004f68 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr4,
 8011138:	2208      	movs	r2, #8
		addr4.sin_port =
 801113a:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr4,
 801113e:	4669      	mov	r1, sp
 8011140:	4620      	mov	r0, r4
 8011142:	f7ff ff71 	bl	8011028 <net_context_bind>
}
 8011146:	b002      	add	sp, #8
 8011148:	bd10      	pop	{r4, pc}
			return 0;
 801114a:	2000      	movs	r0, #0
 801114c:	e7fb      	b.n	8011146 <bind_default+0x2e>
	return -EINVAL;
 801114e:	f06f 0015 	mvn.w	r0, #21
 8011152:	e7f8      	b.n	8011146 <bind_default+0x2e>

08011154 <net_context_listen>:
	return context->flags & NET_CONTEXT_IN_USE;
 8011154:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
	if (!net_context_is_used(context)) {
 8011158:	07db      	lsls	r3, r3, #31
{
 801115a:	b570      	push	{r4, r5, r6, lr}
 801115c:	4604      	mov	r4, r0
 801115e:	460e      	mov	r6, r1
	if (!net_context_is_used(context)) {
 8011160:	d52a      	bpl.n	80111b8 <net_context_listen+0x64>
	    net_if_is_ip_offloaded(net_context_get_iface(context))) {
 8011162:	f990 0088 	ldrsb.w	r0, [r0, #136]	; 0x88
 8011166:	f7ff ff1e 	bl	8010fa6 <net_context_get_iface.isra.0>
	return (iface->if_dev->offload != NULL);
 801116a:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 801116c:	699d      	ldr	r5, [r3, #24]
 801116e:	b15d      	cbz	r5, 8011188 <net_context_listen+0x34>
		return net_offload_listen(net_context_get_iface(context),
 8011170:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 8011174:	f7ff ff17 	bl	8010fa6 <net_context_get_iface.isra.0>
	return iface->if_dev->offload;
 8011178:	6803      	ldr	r3, [r0, #0]
	return net_if_offload(iface)->listen(context, backlog);
 801117a:	699b      	ldr	r3, [r3, #24]
 801117c:	4631      	mov	r1, r6
 801117e:	4620      	mov	r0, r4
 8011180:	689b      	ldr	r3, [r3, #8]
}
 8011182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011186:	4718      	bx	r3
	k_mutex_lock(&context->lock, K_FOREVER);
 8011188:	f104 0608 	add.w	r6, r4, #8
 801118c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011194:	4630      	mov	r0, r6
 8011196:	f7ff ff04 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
	if (net_tcp_listen(context) >= 0) {
 801119a:	4620      	mov	r0, r4
 801119c:	f001 fb06 	bl	80127ac <net_tcp_listen>
 80111a0:	2800      	cmp	r0, #0
		k_mutex_unlock(&context->lock);
 80111a2:	4630      	mov	r0, r6
	if (net_tcp_listen(context) >= 0) {
 80111a4:	db03      	blt.n	80111ae <net_context_listen+0x5a>
		k_mutex_unlock(&context->lock);
 80111a6:	f7ff ff00 	bl	8010faa <k_mutex_unlock.isra.0>
		return 0;
 80111aa:	4628      	mov	r0, r5
}
 80111ac:	bd70      	pop	{r4, r5, r6, pc}
	k_mutex_unlock(&context->lock);
 80111ae:	f7ff fefc 	bl	8010faa <k_mutex_unlock.isra.0>
	return -EOPNOTSUPP;
 80111b2:	f06f 005e 	mvn.w	r0, #94	; 0x5e
 80111b6:	e7f9      	b.n	80111ac <net_context_listen+0x58>
		return -EBADF;
 80111b8:	f06f 0008 	mvn.w	r0, #8
 80111bc:	e7f6      	b.n	80111ac <net_context_listen+0x58>

080111be <net_context_create_ipv4_new>:
{
 80111be:	b570      	push	{r4, r5, r6, lr}
 80111c0:	460c      	mov	r4, r1
 80111c2:	4606      	mov	r6, r0
 80111c4:	461d      	mov	r5, r3
	if (!src) {
 80111c6:	4611      	mov	r1, r2
 80111c8:	b902      	cbnz	r2, 80111cc <net_context_create_ipv4_new+0xe>
		src = ((struct sockaddr_in_ptr *)&context->local)->sin_addr;
 80111ca:	6a01      	ldr	r1, [r0, #32]
	return UNALIGNED_GET(&addr->s_addr) == 0;
 80111cc:	680b      	ldr	r3, [r1, #0]
	if (net_ipv4_is_addr_unspecified(src)
 80111ce:	b11b      	cbz	r3, 80111d8 <net_context_create_ipv4_new+0x1a>
	    || net_ipv4_is_addr_mcast(src)) {
 80111d0:	4608      	mov	r0, r1
 80111d2:	f7ff feba 	bl	8010f4a <net_ipv4_is_addr_mcast>
 80111d6:	b130      	cbz	r0, 80111e6 <net_context_create_ipv4_new+0x28>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
 80111d8:	4629      	mov	r1, r5
 80111da:	69a0      	ldr	r0, [r4, #24]
 80111dc:	f7f3 fb26 	bl	800482c <net_if_ipv4_select_src_addr>
 80111e0:	6803      	ldr	r3, [r0, #0]
 80111e2:	4601      	mov	r1, r0
		if (net_ipv4_is_addr_unspecified(src)) {
 80111e4:	b14b      	cbz	r3, 80111fa <net_context_create_ipv4_new+0x3c>
	pkt->ipv4_ttl = ttl;
 80111e6:	f896 3089 	ldrb.w	r3, [r6, #137]	; 0x89
 80111ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	return net_ipv4_create(pkt, src, dst);
 80111ee:	462a      	mov	r2, r5
 80111f0:	4620      	mov	r0, r4
}
 80111f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_ipv4_create(pkt, src, dst);
 80111f6:	f001 b893 	b.w	8012320 <net_ipv4_create>
}
 80111fa:	f06f 0015 	mvn.w	r0, #21
 80111fe:	bd70      	pop	{r4, r5, r6, pc}

08011200 <context_sendto>:
{
 8011200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	b085      	sub	sp, #20
 8011206:	461e      	mov	r6, r3
 8011208:	e9dd a310 	ldrd	sl, r3, [sp, #64]	; 0x40
 801120c:	9302      	str	r3, [sp, #8]
 801120e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011212:	9303      	str	r3, [sp, #12]
 8011214:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 8011218:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801121c:	4689      	mov	r9, r1
	if (!net_context_is_used(context)) {
 801121e:	07d9      	lsls	r1, r3, #31
{
 8011220:	4604      	mov	r4, r0
 8011222:	4690      	mov	r8, r2
	if (!net_context_is_used(context)) {
 8011224:	f140 8132 	bpl.w	801148c <context_sendto+0x28c>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
 8011228:	9a03      	ldr	r2, [sp, #12]
 801122a:	b14a      	cbz	r2, 8011240 <context_sendto+0x40>
 801122c:	f1bb 0f00 	cmp.w	fp, #0
 8011230:	d106      	bne.n	8011240 <context_sendto+0x40>
 8011232:	b93e      	cbnz	r6, 8011244 <context_sendto+0x44>
 8011234:	f1b9 0f00 	cmp.w	r9, #0
 8011238:	d145      	bne.n	80112c6 <context_sendto+0xc6>
		return -EDESTADDRREQ;
 801123a:	f06f 0378 	mvn.w	r3, #120	; 0x78
 801123e:	e05b      	b.n	80112f8 <context_sendto+0xf8>
	if (!msghdr && !dst_addr) {
 8011240:	2e00      	cmp	r6, #0
 8011242:	d0fa      	beq.n	801123a <context_sendto+0x3a>
 8011244:	2700      	movs	r7, #0
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8011246:	f3c3 02c2 	ubfx	r2, r3, #3, #3
 801124a:	2a01      	cmp	r2, #1
 801124c:	d140      	bne.n	80112d0 <context_sendto+0xd0>
		if (msghdr) {
 801124e:	2f00      	cmp	r7, #0
 8011250:	d03b      	beq.n	80112ca <context_sendto+0xca>
			addrlen = msghdr->msg_namelen;
 8011252:	e9d7 6b00 	ldrd	r6, fp, [r7]
			if (!addr4) {
 8011256:	2e00      	cmp	r6, #0
 8011258:	d137      	bne.n	80112ca <context_sendto+0xca>
				addr4 = net_sin(&context->remote);
 801125a:	f104 0624 	add.w	r6, r4, #36	; 0x24
				addrlen = sizeof(struct sockaddr_in);
 801125e:	f04f 0b08 	mov.w	fp, #8
		if (!addr4->sin_addr.s_addr) {
 8011262:	6872      	ldr	r2, [r6, #4]
 8011264:	2a00      	cmp	r2, #0
 8011266:	d0e8      	beq.n	801123a <context_sendto+0x3a>
		if (net_sin(&context->remote)->sin_addr.s_addr == 0U &&
 8011268:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801126a:	b942      	cbnz	r2, 801127e <context_sendto+0x7e>
 801126c:	051a      	lsls	r2, r3, #20
 801126e:	d406      	bmi.n	801127e <context_sendto+0x7e>
			iface = net_if_ipv4_select_src_iface(&addr4->sin_addr);
 8011270:	1d30      	adds	r0, r6, #4
 8011272:	f7f3 fab9 	bl	80047e8 <net_if_ipv4_select_src_iface>
	context->iface = net_if_get_by_iface(iface);
 8011276:	f7f3 fc3d 	bl	8004af4 <net_if_get_by_iface>
 801127a:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
	if (msghdr && len == 0) {
 801127e:	b137      	cbz	r7, 801128e <context_sendto+0x8e>
 8011280:	f1b8 0f00 	cmp.w	r8, #0
 8011284:	d103      	bne.n	801128e <context_sendto+0x8e>
 8011286:	68f9      	ldr	r1, [r7, #12]
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 8011288:	4643      	mov	r3, r8
 801128a:	4299      	cmp	r1, r3
 801128c:	d123      	bne.n	80112d6 <context_sendto+0xd6>
	iface = net_context_get_iface(context);
 801128e:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 8011292:	f7ff fe88 	bl	8010fa6 <net_context_get_iface.isra.0>
	if (iface && !net_if_is_up(iface)) {
 8011296:	bb28      	cbnz	r0, 80112e4 <context_sendto+0xe4>
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
 8011298:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 801129c:	f7ff fe83 	bl	8010fa6 <net_context_get_iface.isra.0>
 80112a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80112a4:	2300      	movs	r3, #0
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 80112a6:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
 80112aa:	e9cd 2300 	strd	r2, r3, [sp]
 80112ae:	f3c1 02c2 	ubfx	r2, r1, #3, #3
 80112b2:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80112b6:	4641      	mov	r1, r8
 80112b8:	f7f4 fa20 	bl	80056fc <net_pkt_alloc_with_buffer>
	if (pkt) {
 80112bc:	4605      	mov	r5, r0
 80112be:	b9f8      	cbnz	r0, 8011300 <context_sendto+0x100>
		return -ENOBUFS;
 80112c0:	f06f 0368 	mvn.w	r3, #104	; 0x68
 80112c4:	e018      	b.n	80112f8 <context_sendto+0xf8>
 80112c6:	464f      	mov	r7, r9
 80112c8:	e7bd      	b.n	8011246 <context_sendto+0x46>
		if (addrlen < sizeof(struct sockaddr_in)) {
 80112ca:	f1bb 0f07 	cmp.w	fp, #7
 80112ce:	d8c8      	bhi.n	8011262 <context_sendto+0x62>
		return -EINVAL;
 80112d0:	f06f 0315 	mvn.w	r3, #21
 80112d4:	e010      	b.n	80112f8 <context_sendto+0xf8>
			len += msghdr->msg_iov[i].iov_len;
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 80112dc:	3301      	adds	r3, #1
			len += msghdr->msg_iov[i].iov_len;
 80112de:	6852      	ldr	r2, [r2, #4]
 80112e0:	4490      	add	r8, r2
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 80112e2:	e7d2      	b.n	801128a <context_sendto+0x8a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80112e4:	6803      	ldr	r3, [r0, #0]
 80112e6:	f3bf 8f5b 	dmb	ish
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	f3bf 8f5b 	dmb	ish
	if (iface && !net_if_is_up(iface)) {
 80112f0:	07db      	lsls	r3, r3, #31
 80112f2:	d4d1      	bmi.n	8011298 <context_sendto+0x98>
		return -ENETDOWN;
 80112f4:	f06f 0372 	mvn.w	r3, #114	; 0x72
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	b005      	add	sp, #20
 80112fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tmp_len = net_pkt_available_payload_buffer(
 8011300:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
	pkt->context = ctx;
 8011304:	6144      	str	r4, [r0, #20]
 8011306:	f000 fbb1 	bl	8011a6c <net_pkt_available_payload_buffer>
	context->send_cb = cb;
 801130a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801130c:	6363      	str	r3, [r4, #52]	; 0x34
 801130e:	4580      	cmp	r8, r0
	context->user_data = user_data;
 8011310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011312:	6023      	str	r3, [r4, #0]
 8011314:	bf28      	it	cs
 8011316:	4680      	movcs	r8, r0
	    net_if_is_ip_offloaded(net_context_get_iface(context))) {
 8011318:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 801131c:	f7ff fe43 	bl	8010fa6 <net_context_get_iface.isra.0>
	return (iface->if_dev->offload != NULL);
 8011320:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 8011322:	699a      	ldr	r2, [r3, #24]
 8011324:	2a00      	cmp	r2, #0
 8011326:	d051      	beq.n	80113cc <context_sendto+0x1cc>
		ret = context_write_data(pkt, buf, len, msghdr);
 8011328:	463b      	mov	r3, r7
 801132a:	4642      	mov	r2, r8
 801132c:	4649      	mov	r1, r9
 801132e:	4628      	mov	r0, r5
 8011330:	f7ff fe13 	bl	8010f5a <context_write_data>
		if (ret < 0) {
 8011334:	1e03      	subs	r3, r0, #0
 8011336:	f2c0 8084 	blt.w	8011442 <context_sendto+0x242>
		net_pkt_cursor_init(pkt);
 801133a:	4628      	mov	r0, r5
 801133c:	f000 fbca 	bl	8011ad4 <net_pkt_cursor_init>
		if (sendto) {
 8011340:	9b03      	ldr	r3, [sp, #12]
 8011342:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 8011346:	b323      	cbz	r3, 8011392 <context_sendto+0x192>
			ret = net_offload_sendto(net_context_get_iface(context),
 8011348:	f7ff fe2d 	bl	8010fa6 <net_context_get_iface.isra.0>
	return iface->if_dev->offload;
 801134c:	6803      	ldr	r3, [r0, #0]
	return net_if_offload(iface)->sendto(
 801134e:	699b      	ldr	r3, [r3, #24]
 8011350:	699c      	ldr	r4, [r3, #24]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8011352:	9b02      	ldr	r3, [sp, #8]
 8011354:	ea53 030a 	orrs.w	r3, r3, sl
 8011358:	d016      	beq.n	8011388 <context_sendto+0x188>
	} else if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801135a:	9b02      	ldr	r3, [sp, #8]
 801135c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011360:	bf08      	it	eq
 8011362:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
 8011366:	d011      	beq.n	801138c <context_sendto+0x18c>
			return ((uint32_t)t) / (from_hz / to_hz);
 8011368:	220a      	movs	r2, #10
 801136a:	fbba f2f2 	udiv	r2, sl, r2
	return net_if_offload(iface)->sendto(
 801136e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011370:	4631      	mov	r1, r6
 8011372:	e9cd 2300 	strd	r2, r3, [sp]
 8011376:	4628      	mov	r0, r5
 8011378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801137a:	465a      	mov	r2, fp
 801137c:	47a0      	blx	r4
	if (ret < 0) {
 801137e:	2800      	cmp	r0, #0
		ret = net_tcp_send_data(context, cb, user_data);
 8011380:	4603      	mov	r3, r0
	if (ret < 0) {
 8011382:	db5e      	blt.n	8011442 <context_sendto+0x242>
	return len;
 8011384:	4643      	mov	r3, r8
 8011386:	e7b7      	b.n	80112f8 <context_sendto+0xf8>
		return 0;
 8011388:	2200      	movs	r2, #0
 801138a:	e7f0      	b.n	801136e <context_sendto+0x16e>
		return -1;
 801138c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011390:	e7ed      	b.n	801136e <context_sendto+0x16e>
			ret = net_offload_send(net_context_get_iface(context),
 8011392:	f7ff fe08 	bl	8010fa6 <net_context_get_iface.isra.0>
 8011396:	6803      	ldr	r3, [r0, #0]
	return net_if_offload(iface)->send(
 8011398:	699b      	ldr	r3, [r3, #24]
 801139a:	695c      	ldr	r4, [r3, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801139c:	9b02      	ldr	r3, [sp, #8]
 801139e:	ea53 030a 	orrs.w	r3, r3, sl
 80113a2:	d00e      	beq.n	80113c2 <context_sendto+0x1c2>
	} else if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80113a4:	9b02      	ldr	r3, [sp, #8]
 80113a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113aa:	bf08      	it	eq
 80113ac:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
 80113b0:	d009      	beq.n	80113c6 <context_sendto+0x1c6>
 80113b2:	220a      	movs	r2, #10
 80113b4:	fbba f2f2 	udiv	r2, sl, r2
	return net_if_offload(iface)->send(
 80113b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80113ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80113bc:	4628      	mov	r0, r5
 80113be:	47a0      	blx	r4
 80113c0:	e7dd      	b.n	801137e <context_sendto+0x17e>
		return 0;
 80113c2:	9a03      	ldr	r2, [sp, #12]
 80113c4:	e7f8      	b.n	80113b8 <context_sendto+0x1b8>
		return -1;
 80113c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80113ca:	e7f5      	b.n	80113b8 <context_sendto+0x1b8>
	return context->proto;
 80113cc:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
 80113d0:	2b11      	cmp	r3, #17
 80113d2:	d13c      	bne.n	801144e <context_sendto+0x24e>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 80113d4:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 80113d8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d14f      	bne.n	8011480 <context_sendto+0x280>
		ret = net_context_create_ipv4_new(context, pkt,
 80113e0:	1d33      	adds	r3, r6, #4
 80113e2:	4629      	mov	r1, r5
 80113e4:	4620      	mov	r0, r4
		dst_port = addr4->sin_port;
 80113e6:	f8b6 a002 	ldrh.w	sl, [r6, #2]
		ret = net_context_create_ipv4_new(context, pkt,
 80113ea:	f7ff fee8 	bl	80111be <net_context_create_ipv4_new>
	if (ret < 0) {
 80113ee:	1e03      	subs	r3, r0, #0
 80113f0:	db27      	blt.n	8011442 <context_sendto+0x242>
	ret = bind_default(context);
 80113f2:	4620      	mov	r0, r4
 80113f4:	f7ff fe90 	bl	8011118 <bind_default>
	if (ret) {
 80113f8:	4603      	mov	r3, r0
 80113fa:	bb00      	cbnz	r0, 801143e <context_sendto+0x23e>
	ret = net_udp_create(pkt,
 80113fc:	8be1      	ldrh	r1, [r4, #30]
 80113fe:	4652      	mov	r2, sl
 8011400:	4628      	mov	r0, r5
 8011402:	f001 fabe 	bl	8012982 <net_udp_create>
	if (ret) {
 8011406:	4603      	mov	r3, r0
 8011408:	b9c8      	cbnz	r0, 801143e <context_sendto+0x23e>
	ret = context_write_data(pkt, buf, len, msg);
 801140a:	463b      	mov	r3, r7
 801140c:	4642      	mov	r2, r8
 801140e:	4649      	mov	r1, r9
 8011410:	4628      	mov	r0, r5
 8011412:	f7ff fda2 	bl	8010f5a <context_write_data>
	if (ret) {
 8011416:	4603      	mov	r3, r0
 8011418:	b988      	cbnz	r0, 801143e <context_sendto+0x23e>
	net_pkt_cursor_init(pkt);
 801141a:	4628      	mov	r0, r5
 801141c:	f000 fb5a 	bl	8011ad4 <net_pkt_cursor_init>
 8011420:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8011424:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8011428:	2b01      	cmp	r3, #1
 801142a:	d104      	bne.n	8011436 <context_sendto+0x236>
		net_ipv4_finalize(pkt, net_context_get_ip_proto(context));
 801142c:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
 8011430:	4628      	mov	r0, r5
 8011432:	f000 ff82 	bl	801233a <net_ipv4_finalize>
		ret = net_send_data(pkt);
 8011436:	4628      	mov	r0, r5
 8011438:	f7ff f9aa 	bl	8010790 <net_send_data>
 801143c:	e79f      	b.n	801137e <context_sendto+0x17e>
		if (ret < 0) {
 801143e:	2b00      	cmp	r3, #0
 8011440:	daeb      	bge.n	801141a <context_sendto+0x21a>
	net_pkt_unref(pkt);
 8011442:	4628      	mov	r0, r5
 8011444:	9302      	str	r3, [sp, #8]
 8011446:	f000 fad5 	bl	80119f4 <net_pkt_unref>
	return ret;
 801144a:	9b02      	ldr	r3, [sp, #8]
 801144c:	e754      	b.n	80112f8 <context_sendto+0xf8>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 801144e:	2b06      	cmp	r3, #6
 8011450:	d119      	bne.n	8011486 <context_sendto+0x286>
		ret = context_write_data(pkt, buf, len, msghdr);
 8011452:	463b      	mov	r3, r7
 8011454:	4642      	mov	r2, r8
 8011456:	4649      	mov	r1, r9
 8011458:	4628      	mov	r0, r5
 801145a:	f7ff fd7e 	bl	8010f5a <context_write_data>
		if (ret < 0) {
 801145e:	1e03      	subs	r3, r0, #0
 8011460:	dbef      	blt.n	8011442 <context_sendto+0x242>
		net_pkt_cursor_init(pkt);
 8011462:	4628      	mov	r0, r5
 8011464:	f000 fb36 	bl	8011ad4 <net_pkt_cursor_init>
		ret = net_tcp_queue_data(context, pkt);
 8011468:	4629      	mov	r1, r5
 801146a:	4620      	mov	r0, r4
 801146c:	f7f5 fa7c 	bl	8006968 <net_tcp_queue_data>
		if (ret < 0) {
 8011470:	1e03      	subs	r3, r0, #0
 8011472:	dbe6      	blt.n	8011442 <context_sendto+0x242>
		ret = net_tcp_send_data(context, cb, user_data);
 8011474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011476:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011478:	4620      	mov	r0, r4
 801147a:	f001 f9a2 	bl	80127c2 <net_tcp_send_data>
 801147e:	e77e      	b.n	801137e <context_sendto+0x17e>
	int ret = -EINVAL;
 8011480:	f06f 0315 	mvn.w	r3, #21
 8011484:	e7dd      	b.n	8011442 <context_sendto+0x242>
		ret = -EPROTONOSUPPORT;
 8011486:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 801148a:	e7da      	b.n	8011442 <context_sendto+0x242>
		return -EBADF;
 801148c:	f06f 0308 	mvn.w	r3, #8
 8011490:	e732      	b.n	80112f8 <context_sendto+0xf8>

08011492 <net_context_connect>:
{
 8011492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011496:	b08d      	sub	sp, #52	; 0x34
 8011498:	461d      	mov	r5, r3
 801149a:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
 801149e:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
 80114a0:	f100 0a08 	add.w	sl, r0, #8
{
 80114a4:	9307      	str	r3, [sp, #28]
 80114a6:	4617      	mov	r7, r2
	k_mutex_lock(&context->lock, K_FOREVER);
 80114a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114b0:	4650      	mov	r0, sl
{
 80114b2:	4688      	mov	r8, r1
	k_mutex_lock(&context->lock, K_FOREVER);
 80114b4:	f7ff fd75 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
	return context->flags & NET_CONTEXT_IN_USE;
 80114b8:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if (!net_context_is_used(context)) {
 80114bc:	07da      	lsls	r2, r3, #31
 80114be:	d57d      	bpl.n	80115bc <net_context_connect+0x12a>
	if (addr->sa_family != net_context_get_family(context)) {
 80114c0:	f8b8 2000 	ldrh.w	r2, [r8]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 80114c4:	f3c3 00c2 	ubfx	r0, r3, #3, #3
 80114c8:	4282      	cmp	r2, r0
 80114ca:	d17d      	bne.n	80115c8 <net_context_connect+0x136>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
 80114cc:	f3c3 0041 	ubfx	r0, r3, #1, #2
 80114d0:	2803      	cmp	r0, #3
 80114d2:	d076      	beq.n	80115c2 <net_context_connect+0x130>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 80114d4:	2a01      	cmp	r2, #1
 80114d6:	d177      	bne.n	80115c8 <net_context_connect+0x136>
		if (addrlen < sizeof(struct sockaddr_in)) {
 80114d8:	2f07      	cmp	r7, #7
 80114da:	d975      	bls.n	80115c8 <net_context_connect+0x136>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80114dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80114e0:	62a0      	str	r0, [r4, #40]	; 0x28
		addr4->sin_port = net_sin(addr)->sin_port;
 80114e2:	f8b8 b002 	ldrh.w	fp, [r8, #2]
 80114e6:	f8a4 b026 	strh.w	fp, [r4, #38]	; 0x26
		addr4->sin_family = AF_INET;
 80114ea:	84a2      	strh	r2, [r4, #36]	; 0x24
		if (addr4->sin_addr.s_addr) {
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d041      	beq.n	8011574 <net_context_connect+0xe2>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 80114f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114f4:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
		ret = bind_default(context);
 80114f8:	4620      	mov	r0, r4
 80114fa:	f7ff fe0d 	bl	8011118 <bind_default>
		if (ret) {
 80114fe:	4681      	mov	r9, r0
 8011500:	2800      	cmp	r0, #0
 8011502:	d145      	bne.n	8011590 <net_context_connect+0xfe>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
 8011504:	2201      	movs	r2, #1
 8011506:	83a2      	strh	r2, [r4, #28]
		net_sin(&local_addr)->sin_family = AF_INET;
 8011508:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
		if (net_sin_ptr(&context->local)->sin_addr) {
 801150c:	6a22      	ldr	r2, [r4, #32]
		net_sin(&local_addr)->sin_port = lport =
 801150e:	8be3      	ldrh	r3, [r4, #30]
 8011510:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		if (net_sin_ptr(&context->local)->sin_addr) {
 8011514:	b112      	cbz	r2, 801151c <net_context_connect+0x8a>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
 8011516:	6812      	ldr	r2, [r2, #0]
 8011518:	920b      	str	r2, [sp, #44]	; 0x2c
			laddr = &local_addr;
 801151a:	aa0a      	add	r2, sp, #40	; 0x28
	    net_if_is_ip_offloaded(net_context_get_iface(context))) {
 801151c:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 8011520:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011524:	f7ff fd3f 	bl	8010fa6 <net_context_get_iface.isra.0>
	return (iface->if_dev->offload != NULL);
 8011528:	6800      	ldr	r0, [r0, #0]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 801152a:	6981      	ldr	r1, [r0, #24]
 801152c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011530:	b321      	cbz	r1, 801157c <net_context_connect+0xea>
		ret = net_offload_connect(
 8011532:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 8011536:	f7ff fd36 	bl	8010fa6 <net_context_get_iface.isra.0>
	return iface->if_dev->offload;
 801153a:	6802      	ldr	r2, [r0, #0]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801153c:	9b07      	ldr	r3, [sp, #28]
	return net_if_offload(iface)->connect(
 801153e:	6992      	ldr	r2, [r2, #24]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8011540:	4333      	orrs	r3, r6
	return net_if_offload(iface)->connect(
 8011542:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8011546:	d00b      	beq.n	8011560 <net_context_connect+0xce>
	} else if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8011548:	9b07      	ldr	r3, [sp, #28]
 801154a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801154e:	bf08      	it	eq
 8011550:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
		return -1;
 8011554:	bf0e      	itee	eq
 8011556:	f04f 39ff 	moveq.w	r9, #4294967295	; 0xffffffff
 801155a:	230a      	movne	r3, #10
 801155c:	fbb6 f9f3 	udivne	r9, r6, r3
	return net_if_offload(iface)->connect(
 8011560:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011562:	463a      	mov	r2, r7
 8011564:	e9cd 9300 	strd	r9, r3, [sp]
 8011568:	4641      	mov	r1, r8
 801156a:	462b      	mov	r3, r5
 801156c:	4620      	mov	r0, r4
 801156e:	47d8      	blx	fp
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
 8011570:	4681      	mov	r9, r0
 8011572:	e00d      	b.n	8011590 <net_context_connect+0xfe>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
 8011574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011578:	b29b      	uxth	r3, r3
 801157a:	e7bb      	b.n	80114f4 <net_context_connect+0x62>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 801157c:	f8b4 7086 	ldrh.w	r7, [r4, #134]	; 0x86
 8011580:	f3c7 1781 	ubfx	r7, r7, #6, #2
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 8011584:	2f02      	cmp	r7, #2
 8011586:	d10a      	bne.n	801159e <net_context_connect+0x10c>
		if (cb) {
 8011588:	b115      	cbz	r5, 8011590 <net_context_connect+0xfe>
			cb(context, 0, user_data);
 801158a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801158c:	4620      	mov	r0, r4
 801158e:	47a8      	blx	r5
	k_mutex_unlock(&context->lock);
 8011590:	4650      	mov	r0, sl
 8011592:	f7ff fd0a 	bl	8010faa <k_mutex_unlock.isra.0>
}
 8011596:	4648      	mov	r0, r9
 8011598:	b00d      	add	sp, #52	; 0x34
 801159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 801159e:	2f01      	cmp	r7, #1
 80115a0:	d115      	bne.n	80115ce <net_context_connect+0x13c>
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
 80115a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	e9cd 5104 	strd	r5, r1, [sp, #16]
 80115aa:	9907      	ldr	r1, [sp, #28]
 80115ac:	9103      	str	r1, [sp, #12]
 80115ae:	9602      	str	r6, [sp, #8]
 80115b0:	465b      	mov	r3, fp
 80115b2:	4641      	mov	r1, r8
 80115b4:	4620      	mov	r0, r4
 80115b6:	f7f5 ff0d 	bl	80073d4 <net_tcp_connect>
 80115ba:	e7d9      	b.n	8011570 <net_context_connect+0xde>
		ret = -EBADF;
 80115bc:	f06f 0908 	mvn.w	r9, #8
 80115c0:	e7e6      	b.n	8011590 <net_context_connect+0xfe>
		ret = -EOPNOTSUPP;
 80115c2:	f06f 095e 	mvn.w	r9, #94	; 0x5e
 80115c6:	e7e3      	b.n	8011590 <net_context_connect+0xfe>
		ret = -EINVAL;
 80115c8:	f06f 0915 	mvn.w	r9, #21
 80115cc:	e7e0      	b.n	8011590 <net_context_connect+0xfe>
		ret = -ENOTSUP;
 80115ce:	f06f 0985 	mvn.w	r9, #133	; 0x85
 80115d2:	e7dd      	b.n	8011590 <net_context_connect+0xfe>

080115d4 <net_context_accept>:
{
 80115d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115d8:	4699      	mov	r9, r3
	return context->flags & NET_CONTEXT_IN_USE;
 80115da:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 80115de:	f8dd 8020 	ldr.w	r8, [sp, #32]
	if (!net_context_is_used(context)) {
 80115e2:	07db      	lsls	r3, r3, #31
{
 80115e4:	4604      	mov	r4, r0
 80115e6:	460e      	mov	r6, r1
 80115e8:	4615      	mov	r5, r2
	if (!net_context_is_used(context)) {
 80115ea:	d54c      	bpl.n	8011686 <net_context_accept+0xb2>
	k_mutex_lock(&context->lock, K_FOREVER);
 80115ec:	f100 0708 	add.w	r7, r0, #8
 80115f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115f8:	4638      	mov	r0, r7
 80115fa:	f7ff fcd2 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
	    net_if_is_ip_offloaded(net_context_get_iface(context))) {
 80115fe:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 8011602:	f7ff fcd0 	bl	8010fa6 <net_context_get_iface.isra.0>
	return (iface->if_dev->offload != NULL);
 8011606:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 8011608:	699b      	ldr	r3, [r3, #24]
 801160a:	b31b      	cbz	r3, 8011654 <net_context_accept+0x80>
		ret = net_offload_accept(
 801160c:	f994 0088 	ldrsb.w	r0, [r4, #136]	; 0x88
 8011610:	f7ff fcc9 	bl	8010fa6 <net_context_get_iface.isra.0>
	return iface->if_dev->offload;
 8011614:	6803      	ldr	r3, [r0, #0]
	return net_if_offload(iface)->accept(
 8011616:	699b      	ldr	r3, [r3, #24]
 8011618:	f8d3 a010 	ldr.w	sl, [r3, #16]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801161c:	ea59 0305 	orrs.w	r3, r9, r5
 8011620:	d013      	beq.n	801164a <net_context_accept+0x76>
	} else if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8011622:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8011626:	bf08      	it	eq
 8011628:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 801162c:	d00f      	beq.n	801164e <net_context_accept+0x7a>
 801162e:	220a      	movs	r2, #10
 8011630:	fbb5 f2f2 	udiv	r2, r5, r2
	return net_if_offload(iface)->accept(
 8011634:	4643      	mov	r3, r8
 8011636:	4631      	mov	r1, r6
 8011638:	4620      	mov	r0, r4
 801163a:	47d0      	blx	sl
		ret = net_tcp_accept(context, cb, user_data);
 801163c:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 801163e:	4638      	mov	r0, r7
 8011640:	f7ff fcb3 	bl	8010faa <k_mutex_unlock.isra.0>
}
 8011644:	4620      	mov	r0, r4
 8011646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
 801164a:	2200      	movs	r2, #0
 801164c:	e7f2      	b.n	8011634 <net_context_accept+0x60>
		return -1;
 801164e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011652:	e7ef      	b.n	8011634 <net_context_accept+0x60>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
 8011654:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
 8011658:	f3c3 0241 	ubfx	r2, r3, #1, #2
 801165c:	2a03      	cmp	r2, #3
 801165e:	d003      	beq.n	8011668 <net_context_accept+0x94>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 8011660:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8011664:	2b01      	cmp	r3, #1
 8011666:	d109      	bne.n	801167c <net_context_accept+0xa8>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
 8011668:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801166c:	2b06      	cmp	r3, #6
 801166e:	d108      	bne.n	8011682 <net_context_accept+0xae>
		ret = net_tcp_accept(context, cb, user_data);
 8011670:	4642      	mov	r2, r8
 8011672:	4631      	mov	r1, r6
 8011674:	4620      	mov	r0, r4
 8011676:	f7f4 ffa7 	bl	80065c8 <net_tcp_accept>
 801167a:	e7df      	b.n	801163c <net_context_accept+0x68>
		ret = -EINVAL;
 801167c:	f06f 0415 	mvn.w	r4, #21
 8011680:	e7dd      	b.n	801163e <net_context_accept+0x6a>
	int ret = 0;
 8011682:	2400      	movs	r4, #0
 8011684:	e7db      	b.n	801163e <net_context_accept+0x6a>
		return -EBADF;
 8011686:	f06f 0408 	mvn.w	r4, #8
 801168a:	e7db      	b.n	8011644 <net_context_accept+0x70>

0801168c <net_context_send>:
{
 801168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011690:	4604      	mov	r4, r0
	k_mutex_lock(&context->lock, K_FOREVER);
 8011692:	f100 0708 	add.w	r7, r0, #8
 8011696:	4638      	mov	r0, r7
{
 8011698:	b086      	sub	sp, #24
 801169a:	4616      	mov	r6, r2
 801169c:	4698      	mov	r8, r3
	k_mutex_lock(&context->lock, K_FOREVER);
 801169e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 80116a6:	460d      	mov	r5, r1
	k_mutex_lock(&context->lock, K_FOREVER);
 80116a8:	f7ff fc7b 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
 80116ac:	f8b4 0086 	ldrh.w	r0, [r4, #134]	; 0x86
 80116b0:	05c3      	lsls	r3, r0, #23
 80116b2:	d520      	bpl.n	80116f6 <net_context_send+0x6a>
 80116b4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80116b6:	b1f3      	cbz	r3, 80116f6 <net_context_send+0x6a>
	ret = context_sendto(context, buf, len, &context->remote,
 80116b8:	2300      	movs	r3, #0
 80116ba:	9305      	str	r3, [sp, #20]
 80116bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116be:	9304      	str	r3, [sp, #16]
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 80116c0:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	ret = context_sendto(context, buf, len, &context->remote,
 80116c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		addrlen = 0;
 80116c8:	2801      	cmp	r0, #1
 80116ca:	bf0c      	ite	eq
 80116cc:	2108      	moveq	r1, #8
 80116ce:	2100      	movne	r1, #0
	ret = context_sendto(context, buf, len, &context->remote,
 80116d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80116d4:	e9cd 1800 	strd	r1, r8, [sp]
 80116d8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80116dc:	4620      	mov	r0, r4
 80116de:	4632      	mov	r2, r6
 80116e0:	4629      	mov	r1, r5
 80116e2:	f7ff fd8d 	bl	8011200 <context_sendto>
 80116e6:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 80116e8:	4638      	mov	r0, r7
 80116ea:	f7ff fc5e 	bl	8010faa <k_mutex_unlock.isra.0>
}
 80116ee:	4620      	mov	r0, r4
 80116f0:	b006      	add	sp, #24
 80116f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -EDESTADDRREQ;
 80116f6:	f06f 0478 	mvn.w	r4, #120	; 0x78
 80116fa:	e7f5      	b.n	80116e8 <net_context_send+0x5c>

080116fc <net_context_sendmsg>:
{
 80116fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
 80116fe:	f100 0708 	add.w	r7, r0, #8
{
 8011702:	b087      	sub	sp, #28
 8011704:	4604      	mov	r4, r0
 8011706:	461e      	mov	r6, r3
	k_mutex_lock(&context->lock, K_FOREVER);
 8011708:	4638      	mov	r0, r7
 801170a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801170e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8011712:	460d      	mov	r5, r1
	k_mutex_lock(&context->lock, K_FOREVER);
 8011714:	f7ff fc45 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
	ret = context_sendto(context, msghdr, 0, NULL, 0,
 8011718:	2301      	movs	r3, #1
 801171a:	9305      	str	r3, [sp, #20]
 801171c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801171e:	9304      	str	r3, [sp, #16]
 8011720:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011728:	2300      	movs	r3, #0
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	461a      	mov	r2, r3
 801172e:	4629      	mov	r1, r5
 8011730:	9601      	str	r6, [sp, #4]
 8011732:	4620      	mov	r0, r4
 8011734:	f7ff fd64 	bl	8011200 <context_sendto>
 8011738:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 801173a:	4638      	mov	r0, r7
 801173c:	f7ff fc35 	bl	8010faa <k_mutex_unlock.isra.0>
}
 8011740:	4620      	mov	r0, r4
 8011742:	b007      	add	sp, #28
 8011744:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011746 <net_context_sendto>:
{
 8011746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
 801174a:	f100 0808 	add.w	r8, r0, #8
{
 801174e:	b086      	sub	sp, #24
 8011750:	4604      	mov	r4, r0
 8011752:	4616      	mov	r6, r2
 8011754:	461f      	mov	r7, r3
	k_mutex_lock(&context->lock, K_FOREVER);
 8011756:	4640      	mov	r0, r8
 8011758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801175c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8011760:	460d      	mov	r5, r1
	k_mutex_lock(&context->lock, K_FOREVER);
 8011762:	f7ff fc1e 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
 8011766:	2301      	movs	r3, #1
 8011768:	9305      	str	r3, [sp, #20]
 801176a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801176c:	9304      	str	r3, [sp, #16]
 801176e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011772:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011778:	9301      	str	r3, [sp, #4]
 801177a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801177c:	9300      	str	r3, [sp, #0]
 801177e:	4632      	mov	r2, r6
 8011780:	463b      	mov	r3, r7
 8011782:	4629      	mov	r1, r5
 8011784:	4620      	mov	r0, r4
 8011786:	f7ff fd3b 	bl	8011200 <context_sendto>
 801178a:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 801178c:	4640      	mov	r0, r8
 801178e:	f7ff fc0c 	bl	8010faa <k_mutex_unlock.isra.0>
}
 8011792:	4620      	mov	r0, r4
 8011794:	b006      	add	sp, #24
 8011796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801179a <net_context_update_recv_wnd>:
{
 801179a:	b570      	push	{r4, r5, r6, lr}
 801179c:	4604      	mov	r4, r0
		net_if_is_ip_offloaded(net_context_get_iface(context))) {
 801179e:	f990 0088 	ldrsb.w	r0, [r0, #136]	; 0x88
{
 80117a2:	460d      	mov	r5, r1
		net_if_is_ip_offloaded(net_context_get_iface(context))) {
 80117a4:	f7ff fbff 	bl	8010fa6 <net_context_get_iface.isra.0>
	return (iface->if_dev->offload != NULL);
 80117a8:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) &&
 80117aa:	699b      	ldr	r3, [r3, #24]
 80117ac:	b993      	cbnz	r3, 80117d4 <net_context_update_recv_wnd+0x3a>
	k_mutex_lock(&context->lock, K_FOREVER);
 80117ae:	f104 0608 	add.w	r6, r4, #8
 80117b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117ba:	4630      	mov	r0, r6
 80117bc:	f7ff fbf1 	bl	8010fa2 <k_mutex_lock.constprop.0.isra.0>
	ret = net_tcp_update_recv_wnd(context, delta);
 80117c0:	4620      	mov	r0, r4
 80117c2:	4629      	mov	r1, r5
 80117c4:	f000 fffa 	bl	80127bc <net_tcp_update_recv_wnd>
 80117c8:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 80117ca:	4630      	mov	r0, r6
 80117cc:	f7ff fbed 	bl	8010faa <k_mutex_unlock.isra.0>
}
 80117d0:	4620      	mov	r0, r4
 80117d2:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 80117d4:	2400      	movs	r4, #0
 80117d6:	e7fb      	b.n	80117d0 <net_context_update_recv_wnd+0x36>

080117d8 <pkt_cursor_jump>:
		pkt->cursor.pos = NULL;
	}
}

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
 80117d8:	b538      	push	{r3, r4, r5, lr}
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
 80117da:	68c3      	ldr	r3, [r0, #12]
{
 80117dc:	4604      	mov	r4, r0
 80117de:	460d      	mov	r5, r1
	while (cursor->buf) {
		const size_t len =
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	60e3      	str	r3, [r4, #12]
	while (cursor->buf) {
 80117e4:	68e0      	ldr	r0, [r4, #12]
 80117e6:	b130      	cbz	r0, 80117f6 <pkt_cursor_jump+0x1e>
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 80117e8:	b14d      	cbz	r5, 80117fe <pkt_cursor_jump+0x26>
	return net_buf_simple_max_len(&buf->b);
 80117ea:	3008      	adds	r0, #8
 80117ec:	f7fe ff13 	bl	8010616 <net_buf_simple_max_len>
			cursor->buf = cursor->buf->frags;
 80117f0:	68e3      	ldr	r3, [r4, #12]
		if (!len) {
 80117f2:	2800      	cmp	r0, #0
 80117f4:	d0f4      	beq.n	80117e0 <pkt_cursor_jump+0x8>
		} else {
			break;
		}
	}

	if (cursor->buf) {
 80117f6:	68e3      	ldr	r3, [r4, #12]
 80117f8:	b91b      	cbnz	r3, 8011802 <pkt_cursor_jump+0x2a>
 80117fa:	6123      	str	r3, [r4, #16]
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
	}
}
 80117fc:	bd38      	pop	{r3, r4, r5, pc}
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 80117fe:	8980      	ldrh	r0, [r0, #12]
 8011800:	e7f6      	b.n	80117f0 <pkt_cursor_jump+0x18>
		cursor->pos = cursor->buf->data;
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	e7f9      	b.n	80117fa <pkt_cursor_jump+0x22>

08011806 <pkt_cursor_advance>:

static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
 8011806:	b538      	push	{r3, r4, r5, lr}
 8011808:	4604      	mov	r4, r0
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
 801180a:	68c0      	ldr	r0, [r0, #12]
{
 801180c:	460d      	mov	r5, r1
	if (!cursor->buf) {
 801180e:	b188      	cbz	r0, 8011834 <pkt_cursor_advance+0x2e>
		return;
	}

	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 8011810:	b171      	cbz	r1, 8011830 <pkt_cursor_advance+0x2a>
 8011812:	3008      	adds	r0, #8
 8011814:	f7fe feff 	bl	8010616 <net_buf_simple_max_len>
	if ((cursor->pos - cursor->buf->data) == len) {
 8011818:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 801181c:	6892      	ldr	r2, [r2, #8]
 801181e:	1a9b      	subs	r3, r3, r2
 8011820:	4283      	cmp	r3, r0
 8011822:	d107      	bne.n	8011834 <pkt_cursor_advance+0x2e>
		pkt_cursor_jump(pkt, write);
 8011824:	4629      	mov	r1, r5
 8011826:	4620      	mov	r0, r4
	}
}
 8011828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		pkt_cursor_jump(pkt, write);
 801182c:	f7ff bfd4 	b.w	80117d8 <pkt_cursor_jump>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 8011830:	8980      	ldrh	r0, [r0, #12]
 8011832:	e7f1      	b.n	8011818 <pkt_cursor_advance+0x12>
}
 8011834:	bd38      	pop	{r3, r4, r5, pc}

08011836 <pkt_cursor_update>:

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
 8011836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011838:	4604      	mov	r4, r0
 801183a:	4616      	mov	r6, r2
	return pkt->overwrite;
 801183c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35

	if (net_pkt_is_being_overwritten(pkt)) {
		write = false;
	}

	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 8011840:	68c0      	ldr	r0, [r0, #12]
	if (net_pkt_is_being_overwritten(pkt)) {
 8011842:	07da      	lsls	r2, r3, #31
{
 8011844:	460f      	mov	r7, r1
	if (net_pkt_is_being_overwritten(pkt)) {
 8011846:	d415      	bmi.n	8011874 <pkt_cursor_update+0x3e>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 8011848:	b1a6      	cbz	r6, 8011874 <pkt_cursor_update+0x3e>
 801184a:	3008      	adds	r0, #8
 801184c:	f7fe fee3 	bl	8010616 <net_buf_simple_max_len>
 8011850:	4605      	mov	r5, r0
	if (length + (cursor->pos - cursor->buf->data) == len &&
 8011852:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8011856:	6882      	ldr	r2, [r0, #8]
 8011858:	1a9b      	subs	r3, r3, r2
 801185a:	443b      	add	r3, r7
 801185c:	42ab      	cmp	r3, r5
 801185e:	d111      	bne.n	8011884 <pkt_cursor_update+0x4e>
 8011860:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8011864:	07db      	lsls	r3, r3, #31
 8011866:	d408      	bmi.n	801187a <pkt_cursor_update+0x44>
	    !(net_pkt_is_being_overwritten(pkt) &&
	      len < net_buf_max_len(cursor->buf))) {
		pkt_cursor_jump(pkt, write);
 8011868:	4631      	mov	r1, r6
 801186a:	4620      	mov	r0, r4
	} else {
		cursor->pos += length;
	}
}
 801186c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		pkt_cursor_jump(pkt, write);
 8011870:	f7ff bfb2 	b.w	80117d8 <pkt_cursor_jump>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 8011874:	8985      	ldrh	r5, [r0, #12]
 8011876:	2600      	movs	r6, #0
 8011878:	e7eb      	b.n	8011852 <pkt_cursor_update+0x1c>
 801187a:	3008      	adds	r0, #8
 801187c:	f7fe fecb 	bl	8010616 <net_buf_simple_max_len>
	    !(net_pkt_is_being_overwritten(pkt) &&
 8011880:	42a8      	cmp	r0, r5
 8011882:	d9f1      	bls.n	8011868 <pkt_cursor_update+0x32>
		cursor->pos += length;
 8011884:	6921      	ldr	r1, [r4, #16]
 8011886:	4439      	add	r1, r7
 8011888:	6121      	str	r1, [r4, #16]
}
 801188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801188c <pkt_estimate_headers_length.part.0>:
		hdr_len += NET_IPV4H_LEN;
 801188c:	2801      	cmp	r0, #1
 801188e:	bf14      	ite	ne
 8011890:	2000      	movne	r0, #0
 8011892:	2014      	moveq	r0, #20
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8011894:	2906      	cmp	r1, #6
 8011896:	d101      	bne.n	801189c <pkt_estimate_headers_length.part.0+0x10>
		hdr_len += NET_TCPH_LEN + NET_TCP_MAX_OPT_SIZE;
 8011898:	301c      	adds	r0, #28
 801189a:	4770      	bx	lr
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 801189c:	2911      	cmp	r1, #17
 801189e:	d101      	bne.n	80118a4 <pkt_estimate_headers_length.part.0+0x18>
		hdr_len += NET_UDPH_LEN;
 80118a0:	3008      	adds	r0, #8
 80118a2:	4770      	bx	lr
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
 80118a4:	2901      	cmp	r1, #1
 80118a6:	d001      	beq.n	80118ac <pkt_estimate_headers_length.part.0+0x20>
 80118a8:	293a      	cmp	r1, #58	; 0x3a
 80118aa:	d100      	bne.n	80118ae <pkt_estimate_headers_length.part.0+0x22>
		hdr_len += NET_ICMPH_LEN;
 80118ac:	3004      	adds	r0, #4
}
 80118ae:	4770      	bx	lr

080118b0 <net_pkt_get_len.isra.0>:
static inline size_t net_pkt_get_len(struct net_pkt *pkt)
 80118b0:	4603      	mov	r3, r0
	size_t bytes = 0;
 80118b2:	2000      	movs	r0, #0
	while (buf) {
 80118b4:	b903      	cbnz	r3, 80118b8 <net_pkt_get_len.isra.0+0x8>
}
 80118b6:	4770      	bx	lr
		bytes += buf->len;
 80118b8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 80118ba:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 80118bc:	4410      	add	r0, r2
		buf = buf->frags;
 80118be:	e7f9      	b.n	80118b4 <net_pkt_get_len.isra.0+0x4>

080118c0 <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
 80118c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118c4:	f89d 8020 	ldrb.w	r8, [sp, #32]
 80118c8:	4604      	mov	r4, r0
 80118ca:	460f      	mov	r7, r1
 80118cc:	4616      	mov	r6, r2
 80118ce:	4699      	mov	r9, r3
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
 80118d0:	68e3      	ldr	r3, [r4, #12]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d05a      	beq.n	801198c <net_pkt_cursor_operate+0xcc>
 80118d6:	b90e      	cbnz	r6, 80118dc <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
 80118d8:	4630      	mov	r0, r6
 80118da:	e00d      	b.n	80118f8 <net_pkt_cursor_operate+0x38>
	return pkt->overwrite;
 80118dc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
 80118e0:	f013 0f01 	tst.w	r3, #1
 80118e4:	4620      	mov	r0, r4
 80118e6:	bf0c      	ite	eq
 80118e8:	4641      	moveq	r1, r8
 80118ea:	2100      	movne	r1, #0
 80118ec:	f7ff ff8b 	bl	8011806 <pkt_cursor_advance>
		if (c_op->buf == NULL) {
 80118f0:	68e0      	ldr	r0, [r4, #12]
 80118f2:	b918      	cbnz	r0, 80118fc <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
 80118f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 80118f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
 80118fc:	f1b8 0f00 	cmp.w	r8, #0
 8011900:	d034      	beq.n	801196c <net_pkt_cursor_operate+0xac>
 8011902:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8011906:	07da      	lsls	r2, r3, #31
 8011908:	d430      	bmi.n	801196c <net_pkt_cursor_operate+0xac>
	return net_buf_simple_max_len(&buf->b);
 801190a:	3008      	adds	r0, #8
 801190c:	f7fe fe83 	bl	8010616 <net_buf_simple_max_len>
				(c_op->pos - c_op->buf->data);
 8011910:	e9d4 3503 	ldrd	r3, r5, [r4, #12]
 8011914:	689b      	ldr	r3, [r3, #8]
 8011916:	1aed      	subs	r5, r5, r3
			d_len = net_buf_max_len(c_op->buf) -
 8011918:	1b45      	subs	r5, r0, r5
		if (!d_len) {
 801191a:	2d00      	cmp	r5, #0
 801191c:	d0ea      	beq.n	80118f4 <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
 801191e:	42b5      	cmp	r5, r6
 8011920:	bf28      	it	cs
 8011922:	4635      	movcs	r5, r6
		if (copy) {
 8011924:	f1b9 0f00 	cmp.w	r9, #0
 8011928:	d028      	beq.n	801197c <net_pkt_cursor_operate+0xbc>
			memcpy(write ? c_op->pos : data,
 801192a:	6920      	ldr	r0, [r4, #16]
 801192c:	f1b8 0f00 	cmp.w	r8, #0
 8011930:	d122      	bne.n	8011978 <net_pkt_cursor_operate+0xb8>
 8011932:	4601      	mov	r1, r0
 8011934:	4638      	mov	r0, r7
 8011936:	462a      	mov	r2, r5
 8011938:	f002 ff38 	bl	80147ac <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
 801193c:	f1b8 0f00 	cmp.w	r8, #0
 8011940:	d008      	beq.n	8011954 <net_pkt_cursor_operate+0x94>
 8011942:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8011946:	07db      	lsls	r3, r3, #31
 8011948:	d404      	bmi.n	8011954 <net_pkt_cursor_operate+0x94>
	return net_buf_simple_add(&buf->b, len);
 801194a:	68e0      	ldr	r0, [r4, #12]
 801194c:	4629      	mov	r1, r5
 801194e:	3008      	adds	r0, #8
 8011950:	f7fe fe53 	bl	80105fa <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
 8011954:	4642      	mov	r2, r8
 8011956:	4629      	mov	r1, r5
 8011958:	4620      	mov	r0, r4
 801195a:	f7ff ff6c 	bl	8011836 <pkt_cursor_update>
		if (copy && data) {
 801195e:	f1b9 0f00 	cmp.w	r9, #0
 8011962:	d001      	beq.n	8011968 <net_pkt_cursor_operate+0xa8>
 8011964:	b107      	cbz	r7, 8011968 <net_pkt_cursor_operate+0xa8>
			data = (uint8_t *) data + len;
 8011966:	442f      	add	r7, r5
		length -= len;
 8011968:	1b76      	subs	r6, r6, r5
 801196a:	e7b1      	b.n	80118d0 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
 801196c:	8985      	ldrh	r5, [r0, #12]
 801196e:	6923      	ldr	r3, [r4, #16]
 8011970:	6880      	ldr	r0, [r0, #8]
 8011972:	1a1b      	subs	r3, r3, r0
 8011974:	1aed      	subs	r5, r5, r3
 8011976:	e7d0      	b.n	801191a <net_pkt_cursor_operate+0x5a>
 8011978:	4639      	mov	r1, r7
 801197a:	e7dc      	b.n	8011936 <net_pkt_cursor_operate+0x76>
		} else if (data) {
 801197c:	2f00      	cmp	r7, #0
 801197e:	d0dd      	beq.n	801193c <net_pkt_cursor_operate+0x7c>
__ssp_bos_icheck3(memset, void *, int)
 8011980:	6839      	ldr	r1, [r7, #0]
 8011982:	6920      	ldr	r0, [r4, #16]
 8011984:	462a      	mov	r2, r5
 8011986:	f002 ff4c 	bl	8014822 <memset>
 801198a:	e7d7      	b.n	801193c <net_pkt_cursor_operate+0x7c>
	if (length) {
 801198c:	2e00      	cmp	r6, #0
 801198e:	d0a3      	beq.n	80118d8 <net_pkt_cursor_operate+0x18>
 8011990:	e7b0      	b.n	80118f4 <net_pkt_cursor_operate+0x34>

08011992 <net_pkt_get_reserve_data>:
{
 8011992:	b570      	push	{r4, r5, r6, lr}
 8011994:	4604      	mov	r4, r0
 8011996:	4616      	mov	r6, r2
 8011998:	461d      	mov	r5, r3
	if (k_is_in_isr()) {
 801199a:	f002 fa68 	bl	8013e6e <k_is_in_isr>
 801199e:	b130      	cbz	r0, 80119ae <net_pkt_get_reserve_data+0x1c>
	return net_buf_alloc_fixed(pool, timeout);
 80119a0:	2200      	movs	r2, #0
 80119a2:	2300      	movs	r3, #0
 80119a4:	4620      	mov	r0, r4
}
 80119a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119aa:	f7fe bdd5 	b.w	8010558 <net_buf_alloc_fixed>
 80119ae:	4632      	mov	r2, r6
 80119b0:	462b      	mov	r3, r5
 80119b2:	e7f7      	b.n	80119a4 <net_pkt_get_reserve_data+0x12>

080119b4 <net_pkt_ref>:
{
 80119b4:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
 80119b6:	f100 031c 	add.w	r3, r0, #28
 80119ba:	b1a8      	cbz	r0, 80119e8 <net_pkt_ref+0x34>
 80119bc:	f3bf 8f5b 	dmb	ish
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	f3bf 8f5b 	dmb	ish
		if (!ref) {
 80119c6:	b17a      	cbz	r2, 80119e8 <net_pkt_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80119c8:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
 80119cc:	1c51      	adds	r1, r2, #1
 80119ce:	e853 4f00 	ldrex	r4, [r3]
 80119d2:	4294      	cmp	r4, r2
 80119d4:	d104      	bne.n	80119e0 <net_pkt_ref+0x2c>
 80119d6:	e843 1c00 	strex	ip, r1, [r3]
 80119da:	f1bc 0f00 	cmp.w	ip, #0
 80119de:	d1f6      	bne.n	80119ce <net_pkt_ref+0x1a>
 80119e0:	f3bf 8f5b 	dmb	ish
 80119e4:	d1e9      	bne.n	80119ba <net_pkt_ref+0x6>
}
 80119e6:	bd10      	pop	{r4, pc}
			return NULL;
 80119e8:	2000      	movs	r0, #0
 80119ea:	e7fc      	b.n	80119e6 <net_pkt_ref+0x32>

080119ec <net_pkt_frag_unref>:
	if (!frag) {
 80119ec:	b108      	cbz	r0, 80119f2 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
 80119ee:	f7f2 bb13 	b.w	8004018 <net_buf_unref>
}
 80119f2:	4770      	bx	lr

080119f4 <net_pkt_unref>:
{
 80119f4:	b507      	push	{r0, r1, r2, lr}
 80119f6:	9001      	str	r0, [sp, #4]
	if (!pkt) {
 80119f8:	b318      	cbz	r0, 8011a42 <net_pkt_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80119fa:	9b01      	ldr	r3, [sp, #4]
 80119fc:	f3bf 8f5b 	dmb	ish
 8011a00:	69db      	ldr	r3, [r3, #28]
 8011a02:	f3bf 8f5b 	dmb	ish
		if (!ref) {
 8011a06:	b1e3      	cbz	r3, 8011a42 <net_pkt_unref+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8011a08:	9a01      	ldr	r2, [sp, #4]
 8011a0a:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
 8011a0e:	1e59      	subs	r1, r3, #1
 8011a10:	321c      	adds	r2, #28
 8011a12:	e852 0f00 	ldrex	r0, [r2]
 8011a16:	4298      	cmp	r0, r3
 8011a18:	d104      	bne.n	8011a24 <net_pkt_unref+0x30>
 8011a1a:	e842 1c00 	strex	ip, r1, [r2]
 8011a1e:	f1bc 0f00 	cmp.w	ip, #0
 8011a22:	d1f6      	bne.n	8011a12 <net_pkt_unref+0x1e>
 8011a24:	f3bf 8f5b 	dmb	ish
 8011a28:	d1e7      	bne.n	80119fa <net_pkt_unref+0x6>
	if (ref > 1) {
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	dc09      	bgt.n	8011a42 <net_pkt_unref+0x4e>
	if (pkt->frags) {
 8011a2e:	9b01      	ldr	r3, [sp, #4]
 8011a30:	6898      	ldr	r0, [r3, #8]
 8011a32:	b108      	cbz	r0, 8011a38 <net_pkt_unref+0x44>
		net_pkt_frag_unref(pkt->frags);
 8011a34:	f7ff ffda 	bl	80119ec <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
 8011a38:	9b01      	ldr	r3, [sp, #4]
 8011a3a:	a901      	add	r1, sp, #4
 8011a3c:	6858      	ldr	r0, [r3, #4]
 8011a3e:	f002 f9ec 	bl	8013e1a <k_mem_slab_free>
}
 8011a42:	b003      	add	sp, #12
 8011a44:	f85d fb04 	ldr.w	pc, [sp], #4

08011a48 <net_pkt_available_buffer>:
{
 8011a48:	b570      	push	{r4, r5, r6, lr}
	if (!pkt) {
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	b130      	cbz	r0, 8011a5c <net_pkt_available_buffer+0x14>
	return pkt_get_max_len(pkt) - net_pkt_get_len(pkt);
 8011a4e:	6885      	ldr	r5, [r0, #8]
	size_t size = 0;
 8011a50:	2600      	movs	r6, #0
	while (buf) {
 8011a52:	b925      	cbnz	r5, 8011a5e <net_pkt_available_buffer+0x16>
	return pkt_get_max_len(pkt) - net_pkt_get_len(pkt);
 8011a54:	68a0      	ldr	r0, [r4, #8]
 8011a56:	f7ff ff2b 	bl	80118b0 <net_pkt_get_len.isra.0>
 8011a5a:	1a30      	subs	r0, r6, r0
}
 8011a5c:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_max_len(&buf->b);
 8011a5e:	f105 0008 	add.w	r0, r5, #8
 8011a62:	f7fe fdd8 	bl	8010616 <net_buf_simple_max_len>
		buf = buf->frags;
 8011a66:	682d      	ldr	r5, [r5, #0]
		size += net_buf_max_len(buf);
 8011a68:	4406      	add	r6, r0
		buf = buf->frags;
 8011a6a:	e7f2      	b.n	8011a52 <net_pkt_available_buffer+0xa>

08011a6c <net_pkt_available_payload_buffer>:
{
 8011a6c:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
 8011a6e:	4604      	mov	r4, r0
 8011a70:	b1a8      	cbz	r0, 8011a9e <net_pkt_available_payload_buffer+0x32>
	return pkt->family;
 8011a72:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
	if (family == AF_UNSPEC) {
 8011a76:	f013 0f0e 	tst.w	r3, #14
	hdr_len = pkt_estimate_headers_length(pkt, net_pkt_family(pkt), proto);
 8011a7a:	f3c3 0042 	ubfx	r0, r3, #1, #3
	if (family == AF_UNSPEC) {
 8011a7e:	d001      	beq.n	8011a84 <net_pkt_available_payload_buffer+0x18>
 8011a80:	f7ff ff04 	bl	801188c <pkt_estimate_headers_length.part.0>
		return  0;
 8011a84:	4605      	mov	r5, r0
	len = net_pkt_get_len(pkt);
 8011a86:	68a0      	ldr	r0, [r4, #8]
 8011a88:	f7ff ff12 	bl	80118b0 <net_pkt_get_len.isra.0>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
 8011a8c:	42a8      	cmp	r0, r5
 8011a8e:	bf38      	it	cc
 8011a90:	1a2d      	subcc	r5, r5, r0
	len = net_pkt_available_buffer(pkt) - hdr_len;
 8011a92:	4620      	mov	r0, r4
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
 8011a94:	bf28      	it	cs
 8011a96:	2500      	movcs	r5, #0
	len = net_pkt_available_buffer(pkt) - hdr_len;
 8011a98:	f7ff ffd6 	bl	8011a48 <net_pkt_available_buffer>
 8011a9c:	1b40      	subs	r0, r0, r5
}
 8011a9e:	bd38      	pop	{r3, r4, r5, pc}

08011aa0 <net_pkt_trim_buffer>:
{
 8011aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa2:	4604      	mov	r4, r0
	buf = pkt->buffer;
 8011aa4:	6880      	ldr	r0, [r0, #8]
			buf->frags = NULL;
 8011aa6:	2700      	movs	r7, #0
	prev = buf;
 8011aa8:	4605      	mov	r5, r0
	while (buf) {
 8011aaa:	b900      	cbnz	r0, 8011aae <net_pkt_trim_buffer+0xe>
}
 8011aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
 8011aae:	8983      	ldrh	r3, [r0, #12]
		struct net_buf *next = buf->frags;
 8011ab0:	6806      	ldr	r6, [r0, #0]
		if (!buf->len) {
 8011ab2:	b93b      	cbnz	r3, 8011ac4 <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
 8011ab4:	68a3      	ldr	r3, [r4, #8]
 8011ab6:	4283      	cmp	r3, r0
 8011ab8:	d107      	bne.n	8011aca <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
 8011aba:	60a6      	str	r6, [r4, #8]
			buf->frags = NULL;
 8011abc:	6007      	str	r7, [r0, #0]
			net_buf_unref(buf);
 8011abe:	f7f2 faab 	bl	8004018 <net_buf_unref>
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	4605      	mov	r5, r0
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	e7ef      	b.n	8011aaa <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
 8011aca:	682b      	ldr	r3, [r5, #0]
 8011acc:	4283      	cmp	r3, r0
				prev->frags = next;
 8011ace:	bf08      	it	eq
 8011ad0:	602e      	streq	r6, [r5, #0]
 8011ad2:	e7f3      	b.n	8011abc <net_pkt_trim_buffer+0x1c>

08011ad4 <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
 8011ad4:	6883      	ldr	r3, [r0, #8]
 8011ad6:	60c3      	str	r3, [r0, #12]
	if (pkt->cursor.buf) {
 8011ad8:	b103      	cbz	r3, 8011adc <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
 8011ada:	689b      	ldr	r3, [r3, #8]
 8011adc:	6103      	str	r3, [r0, #16]
}
 8011ade:	4770      	bx	lr

08011ae0 <pkt_alloc_on_iface>:
{
 8011ae0:	b510      	push	{r4, lr}
 8011ae2:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
 8011ae4:	f7f3 fd18 	bl	8005518 <pkt_alloc>
	if (pkt) {
 8011ae8:	b140      	cbz	r0, 8011afc <pkt_alloc_on_iface+0x1c>
	pkt->iface = iface;
 8011aea:	6184      	str	r4, [r0, #24]
	if (iface) {
 8011aec:	b134      	cbz	r4, 8011afc <pkt_alloc_on_iface+0x1c>
	return &iface->if_dev->link_addr;
 8011aee:	6823      	ldr	r3, [r4, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 8011af0:	7d5a      	ldrb	r2, [r3, #21]
 8011af2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 8011af6:	7d5b      	ldrb	r3, [r3, #21]
 8011af8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
}
 8011afc:	bd10      	pop	{r4, pc}

08011afe <net_pkt_append_buffer>:
	if (!pkt->buffer) {
 8011afe:	6882      	ldr	r2, [r0, #8]
{
 8011b00:	b510      	push	{r4, lr}
 8011b02:	460c      	mov	r4, r1
	if (!pkt->buffer) {
 8011b04:	b922      	cbnz	r2, 8011b10 <net_pkt_append_buffer+0x12>
}
 8011b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pkt->buffer = buffer;
 8011b0a:	6081      	str	r1, [r0, #8]
		net_pkt_cursor_init(pkt);
 8011b0c:	f7ff bfe2 	b.w	8011ad4 <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
 8011b10:	4610      	mov	r0, r2
 8011b12:	f7fe fd26 	bl	8010562 <net_buf_frag_last>
 8011b16:	4621      	mov	r1, r4
}
 8011b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
 8011b1c:	f7fe bd27 	b.w	801056e <net_buf_frag_insert>

08011b20 <pkt_alloc_with_buffer>:
{
 8011b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b24:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8011b28:	4606      	mov	r6, r0
 8011b2a:	468b      	mov	fp, r1
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	4621      	mov	r1, r4
{
 8011b30:	4690      	mov	r8, r2
 8011b32:	469a      	mov	sl, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8011b34:	f002 fc9b 	bl	801446e <sys_clock_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
 8011b38:	462a      	mov	r2, r5
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8011b3a:	4607      	mov	r7, r0
 8011b3c:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
 8011b3e:	4630      	mov	r0, r6
 8011b40:	4623      	mov	r3, r4
 8011b42:	4659      	mov	r1, fp
 8011b44:	f7ff ffcc 	bl	8011ae0 <pkt_alloc_on_iface>
	if (!pkt) {
 8011b48:	4606      	mov	r6, r0
 8011b4a:	b320      	cbz	r0, 8011b96 <pkt_alloc_with_buffer+0x76>
	pkt->family = family;
 8011b4c:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 8011b50:	f36a 0343 	bfi	r3, sl, #1, #3
 8011b54:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8011b58:	ea55 0304 	orrs.w	r3, r5, r4
 8011b5c:	d00e      	beq.n	8011b7c <pkt_alloc_with_buffer+0x5c>
 8011b5e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8011b62:	bf08      	it	eq
 8011b64:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8011b68:	d008      	beq.n	8011b7c <pkt_alloc_with_buffer+0x5c>
		int64_t remaining = end - sys_clock_tick_get();
 8011b6a:	f7fb fc11 	bl	800d390 <sys_clock_tick_get>
 8011b6e:	1a3d      	subs	r5, r7, r0
 8011b70:	eb69 0401 	sbc.w	r4, r9, r1
 8011b74:	2c00      	cmp	r4, #0
 8011b76:	bfbc      	itt	lt
 8011b78:	2500      	movlt	r5, #0
 8011b7a:	462c      	movlt	r4, r5
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
 8011b7c:	e9cd 5400 	strd	r5, r4, [sp]
 8011b80:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8011b84:	4641      	mov	r1, r8
 8011b86:	4630      	mov	r0, r6
 8011b88:	f7f3 fd06 	bl	8005598 <net_pkt_alloc_buffer>
	if (ret) {
 8011b8c:	b118      	cbz	r0, 8011b96 <pkt_alloc_with_buffer+0x76>
		net_pkt_unref(pkt);
 8011b8e:	4630      	mov	r0, r6
 8011b90:	f7ff ff30 	bl	80119f4 <net_pkt_unref>
		return NULL;
 8011b94:	2600      	movs	r6, #0
}
 8011b96:	4630      	mov	r0, r6
 8011b98:	b003      	add	sp, #12
 8011b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b9e <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
 8011b9e:	b507      	push	{r0, r1, r2, lr}
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	9300      	str	r3, [sp, #0]
 8011ba4:	2300      	movs	r3, #0
{
 8011ba6:	460a      	mov	r2, r1
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
 8011ba8:	4619      	mov	r1, r3
 8011baa:	f7ff fe89 	bl	80118c0 <net_pkt_cursor_operate>
}
 8011bae:	b003      	add	sp, #12
 8011bb0:	f85d fb04 	ldr.w	pc, [sp], #4

08011bb4 <net_pkt_memset>:

int net_pkt_memset(struct net_pkt *pkt, int byte, size_t amount)
{
 8011bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	NET_DBG("pkt %p byte %d amount %zu", pkt, byte, amount);

	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
 8011bb6:	2301      	movs	r3, #1
{
 8011bb8:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
 8011bba:	9300      	str	r3, [sp, #0]
 8011bbc:	a903      	add	r1, sp, #12
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	f7ff fe7e 	bl	80118c0 <net_pkt_cursor_operate>
}
 8011bc4:	b005      	add	sp, #20
 8011bc6:	f85d fb04 	ldr.w	pc, [sp], #4

08011bca <net_pkt_read>:

int net_pkt_read(struct net_pkt *pkt, void *data, size_t length)
{
 8011bca:	b507      	push	{r0, r1, r2, lr}
	NET_DBG("pkt %p data %p length %zu", pkt, data, length);

	return net_pkt_cursor_operate(pkt, data, length, true, false);
 8011bcc:	2300      	movs	r3, #0
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	f7ff fe75 	bl	80118c0 <net_pkt_cursor_operate>
}
 8011bd6:	b003      	add	sp, #12
 8011bd8:	f85d fb04 	ldr.w	pc, [sp], #4

08011bdc <net_pkt_read_be32>:

	return ret;
}

int net_pkt_read_be32(struct net_pkt *pkt, uint32_t *data)
{
 8011bdc:	b513      	push	{r0, r1, r4, lr}
	uint8_t d32[4];
	int ret;

	ret = net_pkt_read(pkt, d32, sizeof(uint32_t));
 8011bde:	2204      	movs	r2, #4
{
 8011be0:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d32, sizeof(uint32_t));
 8011be2:	eb0d 0102 	add.w	r1, sp, r2
 8011be6:	f7ff fff0 	bl	8011bca <net_pkt_read>

	*data = d32[0] << 24 | d32[1] << 16 | d32[2] << 8 | d32[3];
 8011bea:	9b01      	ldr	r3, [sp, #4]
 8011bec:	ba1b      	rev	r3, r3
 8011bee:	6023      	str	r3, [r4, #0]

	return ret;
}
 8011bf0:	b002      	add	sp, #8
 8011bf2:	bd10      	pop	{r4, pc}

08011bf4 <net_pkt_copy>:
}

int net_pkt_copy(struct net_pkt *pkt_dst,
		 struct net_pkt *pkt_src,
		 size_t length)
{
 8011bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf8:	4606      	mov	r6, r0
 8011bfa:	460f      	mov	r7, r1
 8011bfc:	4614      	mov	r4, r2
	struct net_pkt_cursor *c_dst = &pkt_dst->cursor;
	struct net_pkt_cursor *c_src = &pkt_src->cursor;

	while (c_dst->buf && c_src->buf && length) {
 8011bfe:	68f3      	ldr	r3, [r6, #12]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d049      	beq.n	8011c98 <net_pkt_copy+0xa4>
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d046      	beq.n	8011c98 <net_pkt_copy+0xa4>
 8011c0a:	b90c      	cbnz	r4, 8011c10 <net_pkt_copy+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	e027      	b.n	8011c60 <net_pkt_copy+0x6c>
		pkt_cursor_advance(pkt_dst, true);
 8011c10:	2101      	movs	r1, #1
 8011c12:	4630      	mov	r0, r6
 8011c14:	f7ff fdf7 	bl	8011806 <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
 8011c18:	4638      	mov	r0, r7
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	f7ff fdf3 	bl	8011806 <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
 8011c20:	68f0      	ldr	r0, [r6, #12]
 8011c22:	b1d8      	cbz	r0, 8011c5c <net_pkt_copy+0x68>
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	b1cb      	cbz	r3, 8011c5c <net_pkt_copy+0x68>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
 8011c28:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8011c2c:	693d      	ldr	r5, [r7, #16]
 8011c2e:	689b      	ldr	r3, [r3, #8]
 8011c30:	3008      	adds	r0, #8
 8011c32:	1aed      	subs	r5, r5, r3
 8011c34:	f7fe fcef 	bl	8010616 <net_buf_simple_max_len>
 8011c38:	4603      	mov	r3, r0
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
 8011c3a:	e9d6 2003 	ldrd	r2, r0, [r6, #12]
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
 8011c3e:	eba8 0805 	sub.w	r8, r8, r5
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
 8011c42:	6895      	ldr	r5, [r2, #8]
		if (length < s_len && length < d_len) {
 8011c44:	45a0      	cmp	r8, r4
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
 8011c46:	eba0 0505 	sub.w	r5, r0, r5
 8011c4a:	eba3 0505 	sub.w	r5, r3, r5
		if (length < s_len && length < d_len) {
 8011c4e:	d901      	bls.n	8011c54 <net_pkt_copy+0x60>
 8011c50:	42a5      	cmp	r5, r4
 8011c52:	d807      	bhi.n	8011c64 <net_pkt_copy+0x70>
			if (d_len < s_len) {
 8011c54:	4545      	cmp	r5, r8
 8011c56:	bf28      	it	cs
 8011c58:	4645      	movcs	r5, r8
		if (!len) {
 8011c5a:	b925      	cbnz	r5, 8011c66 <net_pkt_copy+0x72>
		return -ENOBUFS;
 8011c5c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 8011c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c64:	4625      	mov	r5, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8011c66:	6939      	ldr	r1, [r7, #16]
 8011c68:	462a      	mov	r2, r5
 8011c6a:	f002 fd9f 	bl	80147ac <memcpy>
	return pkt->overwrite;
 8011c6e:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
 8011c72:	07db      	lsls	r3, r3, #31
 8011c74:	d404      	bmi.n	8011c80 <net_pkt_copy+0x8c>
	return net_buf_simple_add(&buf->b, len);
 8011c76:	68f0      	ldr	r0, [r6, #12]
 8011c78:	4629      	mov	r1, r5
 8011c7a:	3008      	adds	r0, #8
 8011c7c:	f7fe fcbd 	bl	80105fa <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
 8011c80:	2201      	movs	r2, #1
 8011c82:	4629      	mov	r1, r5
 8011c84:	4630      	mov	r0, r6
 8011c86:	f7ff fdd6 	bl	8011836 <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	4629      	mov	r1, r5
 8011c8e:	4638      	mov	r0, r7
 8011c90:	f7ff fdd1 	bl	8011836 <pkt_cursor_update>
		length -= len;
 8011c94:	1b64      	subs	r4, r4, r5
 8011c96:	e7b2      	b.n	8011bfe <net_pkt_copy+0xa>
	if (length) {
 8011c98:	2c00      	cmp	r4, #0
 8011c9a:	d0b7      	beq.n	8011c0c <net_pkt_copy+0x18>
 8011c9c:	e7de      	b.n	8011c5c <net_pkt_copy+0x68>

08011c9e <net_pkt_remaining_data>:
size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
 8011c9e:	b170      	cbz	r0, 8011cbe <net_pkt_remaining_data+0x20>
 8011ca0:	68c3      	ldr	r3, [r0, #12]
 8011ca2:	b15b      	cbz	r3, 8011cbc <net_pkt_remaining_data+0x1e>
 8011ca4:	6900      	ldr	r0, [r0, #16]
 8011ca6:	b150      	cbz	r0, 8011cbe <net_pkt_remaining_data+0x20>
		return 0;
	}

	buf = pkt->cursor.buf;
	data_length = buf->len - (pkt->cursor.pos - buf->data);
 8011ca8:	6899      	ldr	r1, [r3, #8]
 8011caa:	899a      	ldrh	r2, [r3, #12]
 8011cac:	1a40      	subs	r0, r0, r1
 8011cae:	1a10      	subs	r0, r2, r0

	buf = buf->frags;
	while (buf) {
		data_length += buf->len;
		buf = buf->frags;
 8011cb0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 8011cb2:	b903      	cbnz	r3, 8011cb6 <net_pkt_remaining_data+0x18>
 8011cb4:	4770      	bx	lr
		data_length += buf->len;
 8011cb6:	899a      	ldrh	r2, [r3, #12]
 8011cb8:	4410      	add	r0, r2
 8011cba:	e7f9      	b.n	8011cb0 <net_pkt_remaining_data+0x12>
		return 0;
 8011cbc:	4618      	mov	r0, r3
	}

	return data_length;
}
 8011cbe:	4770      	bx	lr

08011cc0 <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
 8011cc0:	6883      	ldr	r3, [r0, #8]
 8011cc2:	b92b      	cbnz	r3, 8011cd0 <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
 8011cc4:	2900      	cmp	r1, #0
}
 8011cc6:	bf14      	ite	ne
 8011cc8:	f06f 0015 	mvnne.w	r0, #21
 8011ccc:	2000      	moveq	r0, #0
 8011cce:	4770      	bx	lr
		if (buf->len < length) {
 8011cd0:	899a      	ldrh	r2, [r3, #12]
 8011cd2:	428a      	cmp	r2, r1
			buf->len = length;
 8011cd4:	bf2c      	ite	cs
 8011cd6:	8199      	strhcs	r1, [r3, #12]
			length -= buf->len;
 8011cd8:	1a89      	subcc	r1, r1, r2
	for (buf = pkt->buffer; buf; buf = buf->frags) {
 8011cda:	681b      	ldr	r3, [r3, #0]
			length = 0;
 8011cdc:	bf28      	it	cs
 8011cde:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
 8011ce0:	e7ef      	b.n	8011cc2 <net_pkt_update_length+0x2>

08011ce2 <net_pkt_pull>:

int net_pkt_pull(struct net_pkt *pkt, size_t length)
{
 8011ce2:	b570      	push	{r4, r5, r6, lr}
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	460d      	mov	r5, r1
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (length) {
 8011ce8:	b945      	cbnz	r5, 8011cfc <net_pkt_pull+0x1a>
		}

		length -= rem;
	}

	net_pkt_cursor_init(pkt);
 8011cea:	4620      	mov	r0, r4
 8011cec:	f7ff fef2 	bl	8011ad4 <net_pkt_cursor_init>

	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
 8011cf0:	2d00      	cmp	r5, #0
	}

	return 0;
}
 8011cf2:	bf14      	ite	ne
 8011cf4:	f06f 0068 	mvnne.w	r0, #104	; 0x68
 8011cf8:	2000      	moveq	r0, #0
 8011cfa:	bd70      	pop	{r4, r5, r6, pc}
		pkt_cursor_advance(pkt, false);
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	4620      	mov	r0, r4
 8011d00:	f7ff fd81 	bl	8011806 <pkt_cursor_advance>
		if (!c_op->buf) {
 8011d04:	68e1      	ldr	r1, [r4, #12]
 8011d06:	2900      	cmp	r1, #0
 8011d08:	d0ef      	beq.n	8011cea <net_pkt_pull+0x8>
		left = c_op->buf->len - (c_op->pos - c_op->buf->data);
 8011d0a:	6920      	ldr	r0, [r4, #16]
 8011d0c:	688a      	ldr	r2, [r1, #8]
 8011d0e:	898b      	ldrh	r3, [r1, #12]
 8011d10:	1a82      	subs	r2, r0, r2
		if (!left) {
 8011d12:	1a9a      	subs	r2, r3, r2
 8011d14:	d0e9      	beq.n	8011cea <net_pkt_pull+0x8>
		if (rem > length) {
 8011d16:	42aa      	cmp	r2, r5
 8011d18:	4616      	mov	r6, r2
 8011d1a:	bf28      	it	cs
 8011d1c:	462e      	movcs	r6, r5
		c_op->buf->len -= rem;
 8011d1e:	1b9b      	subs	r3, r3, r6
		if (left) {
 8011d20:	1b92      	subs	r2, r2, r6
		c_op->buf->len -= rem;
 8011d22:	818b      	strh	r3, [r1, #12]
		if (left) {
 8011d24:	d004      	beq.n	8011d30 <net_pkt_pull+0x4e>
__ssp_bos_icheck3(memmove, void *, const void *)
 8011d26:	1981      	adds	r1, r0, r6
 8011d28:	f002 fd61 	bl	80147ee <memmove>
		length -= rem;
 8011d2c:	1bad      	subs	r5, r5, r6
 8011d2e:	e7db      	b.n	8011ce8 <net_pkt_pull+0x6>
			struct net_buf *buf = pkt->buffer;
 8011d30:	68a0      	ldr	r0, [r4, #8]
			if (buf) {
 8011d32:	b120      	cbz	r0, 8011d3e <net_pkt_pull+0x5c>
				pkt->buffer = buf->frags;
 8011d34:	6803      	ldr	r3, [r0, #0]
 8011d36:	60a3      	str	r3, [r4, #8]
				buf->frags = NULL;
 8011d38:	6002      	str	r2, [r0, #0]
				net_buf_unref(buf);
 8011d3a:	f7f2 f96d 	bl	8004018 <net_buf_unref>
			net_pkt_cursor_init(pkt);
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f7ff fec8 	bl	8011ad4 <net_pkt_cursor_init>
 8011d44:	e7f2      	b.n	8011d2c <net_pkt_pull+0x4a>

08011d46 <net_pkt_get_current_offset>:
uint16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
	struct net_buf *buf = pkt->buffer;
	uint16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
 8011d46:	68c2      	ldr	r2, [r0, #12]
{
 8011d48:	b510      	push	{r4, lr}
 8011d4a:	4603      	mov	r3, r0
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
 8011d4c:	b17a      	cbz	r2, 8011d6e <net_pkt_get_current_offset+0x28>
 8011d4e:	6900      	ldr	r0, [r0, #16]
 8011d50:	b138      	cbz	r0, 8011d62 <net_pkt_get_current_offset+0x1c>
	struct net_buf *buf = pkt->buffer;
 8011d52:	6899      	ldr	r1, [r3, #8]
		return 0;
	}

	offset = 0U;
 8011d54:	2300      	movs	r3, #0

	while (buf != pkt->cursor.buf) {
 8011d56:	428a      	cmp	r2, r1
 8011d58:	d104      	bne.n	8011d64 <net_pkt_get_current_offset+0x1e>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
 8011d5a:	6892      	ldr	r2, [r2, #8]
 8011d5c:	1a80      	subs	r0, r0, r2
 8011d5e:	4418      	add	r0, r3
 8011d60:	b280      	uxth	r0, r0

	return offset;
}
 8011d62:	bd10      	pop	{r4, pc}
		offset += buf->len;
 8011d64:	898c      	ldrh	r4, [r1, #12]
		buf = buf->frags;
 8011d66:	6809      	ldr	r1, [r1, #0]
		offset += buf->len;
 8011d68:	4423      	add	r3, r4
 8011d6a:	b29b      	uxth	r3, r3
		buf = buf->frags;
 8011d6c:	e7f3      	b.n	8011d56 <net_pkt_get_current_offset+0x10>
		return 0;
 8011d6e:	4610      	mov	r0, r2
 8011d70:	e7f7      	b.n	8011d62 <net_pkt_get_current_offset+0x1c>

08011d72 <net_pkt_clone>:
{
 8011d72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d76:	b085      	sub	sp, #20
 8011d78:	461d      	mov	r5, r3
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	4617      	mov	r7, r2
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
 8011d7e:	f7ff ffe2 	bl	8011d46 <net_pkt_get_current_offset>
 8011d82:	4606      	mov	r6, r0
	clone_pkt = pkt_alloc_with_buffer(pkt->slab, net_pkt_iface(pkt),
 8011d84:	68a0      	ldr	r0, [r4, #8]
 8011d86:	f7ff fd93 	bl	80118b0 <net_pkt_get_len.isra.0>
 8011d8a:	f04f 0900 	mov.w	r9, #0
 8011d8e:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8011d92:	4602      	mov	r2, r0
 8011d94:	69a1      	ldr	r1, [r4, #24]
 8011d96:	6860      	ldr	r0, [r4, #4]
 8011d98:	f8cd 9000 	str.w	r9, [sp]
 8011d9c:	464b      	mov	r3, r9
 8011d9e:	f7ff febf 	bl	8011b20 <pkt_alloc_with_buffer>
	if (!clone_pkt) {
 8011da2:	4605      	mov	r5, r0
 8011da4:	b198      	cbz	r0, 8011dce <net_pkt_clone+0x5c>
	net_pkt_cursor_init(pkt);
 8011da6:	4620      	mov	r0, r4
	backup->pos = pkt->cursor.pos;
 8011da8:	e9d4 8703 	ldrd	r8, r7, [r4, #12]
 8011dac:	f7ff fe92 	bl	8011ad4 <net_pkt_cursor_init>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
 8011db0:	68a0      	ldr	r0, [r4, #8]
 8011db2:	f7ff fd7d 	bl	80118b0 <net_pkt_get_len.isra.0>
 8011db6:	4621      	mov	r1, r4
 8011db8:	4602      	mov	r2, r0
 8011dba:	4628      	mov	r0, r5
 8011dbc:	f7ff ff1a 	bl	8011bf4 <net_pkt_copy>
 8011dc0:	b148      	cbz	r0, 8011dd6 <net_pkt_clone+0x64>
		net_pkt_unref(clone_pkt);
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	f7ff fe16 	bl	80119f4 <net_pkt_unref>
	pkt->cursor.pos = backup->pos;
 8011dc8:	e9c4 8703 	strd	r8, r7, [r4, #12]
		return NULL;
 8011dcc:	464d      	mov	r5, r9
}
 8011dce:	4628      	mov	r0, r5
 8011dd0:	b005      	add	sp, #20
 8011dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (clone_pkt->buffer) {
 8011dd6:	68ab      	ldr	r3, [r5, #8]
 8011dd8:	b13b      	cbz	r3, 8011dea <net_pkt_clone+0x78>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8011dda:	6a23      	ldr	r3, [r4, #32]
 8011ddc:	622b      	str	r3, [r5, #32]
 8011dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011de0:	626b      	str	r3, [r5, #36]	; 0x24
 8011de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011de4:	62ab      	str	r3, [r5, #40]	; 0x28
 8011de6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011de8:	62eb      	str	r3, [r5, #44]	; 0x2c
	return pkt->family;
 8011dea:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	pkt->family = family;
 8011dee:	f895 2037 	ldrb.w	r2, [r5, #55]	; 0x37
	return pkt->family;
 8011df2:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
 8011df6:	f363 0243 	bfi	r2, r3, #1, #3
 8011dfa:	f885 2037 	strb.w	r2, [r5, #55]	; 0x37
	return pkt->context;
 8011dfe:	6963      	ldr	r3, [r4, #20]
	pkt->context = ctx;
 8011e00:	616b      	str	r3, [r5, #20]
	return pkt->ip_hdr_len;
 8011e02:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
	pkt->ip_hdr_len = len;
 8011e06:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	return pkt->priority;
 8011e0a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	pkt->priority = priority;
 8011e0e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	return !!(pkt->captured);
 8011e12:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	pkt->captured = is_captured;
 8011e16:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
	return !!(pkt->captured);
 8011e1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	pkt->captured = is_captured;
 8011e1e:	f363 0241 	bfi	r2, r3, #1, #1
 8011e22:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	return pkt->family;
 8011e26:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 8011e2a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8011e2e:	2b01      	cmp	r3, #1
	return pkt->ipv4_ttl;
 8011e30:	bf01      	itttt	eq
 8011e32:	f894 303a 	ldrbeq.w	r3, [r4, #58]	; 0x3a
	pkt->ipv4_ttl = ttl;
 8011e36:	f885 303a 	strbeq.w	r3, [r5, #58]	; 0x3a
	return pkt->ipv4_opts_len;
 8011e3a:	f894 303b 	ldrbeq.w	r3, [r4, #59]	; 0x3b
	pkt->ipv4_opts_len = opts_len;
 8011e3e:	f885 303b 	strbeq.w	r3, [r5, #59]	; 0x3b
	net_pkt_cursor_init(clone_pkt);
 8011e42:	4628      	mov	r0, r5
 8011e44:	f7ff fe46 	bl	8011ad4 <net_pkt_cursor_init>
	if (cursor_offset) {
 8011e48:	b146      	cbz	r6, 8011e5c <net_pkt_clone+0xea>
	pkt->overwrite = overwrite;
 8011e4a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8011e4e:	f043 0301 	orr.w	r3, r3, #1
 8011e52:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
		net_pkt_skip(clone_pkt, cursor_offset);
 8011e56:	4631      	mov	r1, r6
 8011e58:	f7ff fea1 	bl	8011b9e <net_pkt_skip>
	pkt->cursor.pos = backup->pos;
 8011e5c:	e9c4 8703 	strd	r8, r7, [r4, #12]
	return clone_pkt;
 8011e60:	e7b5      	b.n	8011dce <net_pkt_clone+0x5c>

08011e62 <net_pkt_get_contiguous_len>:
	return pkt->overwrite;
 8011e62:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35

	return len >= size;
}

size_t net_pkt_get_contiguous_len(struct net_pkt *pkt)
{
 8011e66:	b510      	push	{r4, lr}
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
 8011e68:	43c9      	mvns	r1, r1
{
 8011e6a:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
 8011e6c:	f001 0101 	and.w	r1, r1, #1
 8011e70:	f7ff fcc9 	bl	8011806 <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
 8011e74:	68e3      	ldr	r3, [r4, #12]
 8011e76:	b15b      	cbz	r3, 8011e90 <net_pkt_get_contiguous_len+0x2e>
 8011e78:	6920      	ldr	r0, [r4, #16]
 8011e7a:	b140      	cbz	r0, 8011e8e <net_pkt_get_contiguous_len+0x2c>
 8011e7c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
 8011e80:	07d2      	lsls	r2, r2, #31
 8011e82:	bf4c      	ite	mi
 8011e84:	899a      	ldrhmi	r2, [r3, #12]
 8011e86:	89da      	ldrhpl	r2, [r3, #14]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
 8011e88:	689b      	ldr	r3, [r3, #8]
 8011e8a:	1ac0      	subs	r0, r0, r3
 8011e8c:	1a10      	subs	r0, r2, r0
		return len;
	}

	return 0;
}
 8011e8e:	bd10      	pop	{r4, pc}
	return 0;
 8011e90:	4618      	mov	r0, r3
 8011e92:	e7fc      	b.n	8011e8e <net_pkt_get_contiguous_len+0x2c>

08011e94 <net_pkt_is_contiguous>:
{
 8011e94:	b510      	push	{r4, lr}
 8011e96:	460c      	mov	r4, r1
	size_t len = net_pkt_get_contiguous_len(pkt);
 8011e98:	f7ff ffe3 	bl	8011e62 <net_pkt_get_contiguous_len>
}
 8011e9c:	42a0      	cmp	r0, r4
 8011e9e:	bf34      	ite	cc
 8011ea0:	2000      	movcc	r0, #0
 8011ea2:	2001      	movcs	r0, #1
 8011ea4:	bd10      	pop	{r4, pc}

08011ea6 <net_pkt_write>:
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 8011ea6:	6903      	ldr	r3, [r0, #16]
 8011ea8:	4299      	cmp	r1, r3
{
 8011eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011eac:	4604      	mov	r4, r0
 8011eae:	460e      	mov	r6, r1
 8011eb0:	4615      	mov	r5, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 8011eb2:	d10a      	bne.n	8011eca <net_pkt_write+0x24>
	size_t len = net_pkt_get_contiguous_len(pkt);
 8011eb4:	f7ff ffd5 	bl	8011e62 <net_pkt_get_contiguous_len>
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 8011eb8:	42a8      	cmp	r0, r5
 8011eba:	d306      	bcc.n	8011eca <net_pkt_write+0x24>
		return net_pkt_skip(pkt, length);
 8011ebc:	4629      	mov	r1, r5
 8011ebe:	4620      	mov	r0, r4
}
 8011ec0:	b002      	add	sp, #8
 8011ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_skip(pkt, length);
 8011ec6:	f7ff be6a 	b.w	8011b9e <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
 8011eca:	2301      	movs	r3, #1
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	462a      	mov	r2, r5
 8011ed0:	4631      	mov	r1, r6
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f7ff fcf4 	bl	80118c0 <net_pkt_cursor_operate>
}
 8011ed8:	b002      	add	sp, #8
 8011eda:	bd70      	pop	{r4, r5, r6, pc}

08011edc <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
 8011edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
 8011ede:	684e      	ldr	r6, [r1, #4]
{
 8011ee0:	4604      	mov	r4, r0
 8011ee2:	460d      	mov	r5, r1
	size_t len = net_pkt_get_contiguous_len(pkt);
 8011ee4:	f7ff ffbd 	bl	8011e62 <net_pkt_get_contiguous_len>
		if (net_pkt_is_contiguous(pkt, access->size)) {
 8011ee8:	4286      	cmp	r6, r0
 8011eea:	d803      	bhi.n	8011ef4 <net_pkt_get_data+0x18>
			access->data = pkt->cursor.pos;
 8011eec:	6923      	ldr	r3, [r4, #16]
 8011eee:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
 8011ef0:	6829      	ldr	r1, [r5, #0]
 8011ef2:	e010      	b.n	8011f16 <net_pkt_get_data+0x3a>
 8011ef4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
		} else if (net_pkt_is_being_overwritten(pkt)) {
 8011ef8:	07db      	lsls	r3, r3, #31
 8011efa:	d5f9      	bpl.n	8011ef0 <net_pkt_get_data+0x14>
			if (!access->data) {
 8011efc:	6829      	ldr	r1, [r5, #0]
 8011efe:	b151      	cbz	r1, 8011f16 <net_pkt_get_data+0x3a>
			if (net_pkt_read(pkt, access->data, access->size)) {
 8011f00:	686a      	ldr	r2, [r5, #4]
 8011f02:	4620      	mov	r0, r4
	backup->pos = pkt->cursor.pos;
 8011f04:	e9d4 7603 	ldrd	r7, r6, [r4, #12]
 8011f08:	f7ff fe5f 	bl	8011bca <net_pkt_read>
	pkt->cursor.pos = backup->pos;
 8011f0c:	e9c4 7603 	strd	r7, r6, [r4, #12]
 8011f10:	2800      	cmp	r0, #0
 8011f12:	d0ed      	beq.n	8011ef0 <net_pkt_get_data+0x14>
				return NULL;
 8011f14:	2100      	movs	r1, #0
	}

	return NULL;
}
 8011f16:	4608      	mov	r0, r1
 8011f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f1a <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
 8011f1a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011f1e:	f7ff bfc2 	b.w	8011ea6 <net_pkt_write>

08011f22 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
 8011f22:	4770      	bx	lr

08011f24 <tc_rx_handler>:
{
 8011f24:	b510      	push	{r4, lr}
 8011f26:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
 8011f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f30:	4620      	mov	r0, r4
 8011f32:	f7fa fb01 	bl	800c538 <z_impl_k_queue_get>
		if (pkt == NULL) {
 8011f36:	2800      	cmp	r0, #0
 8011f38:	d0f6      	beq.n	8011f28 <tc_rx_handler+0x4>
		net_process_rx_packet(pkt);
 8011f3a:	f7fe fc96 	bl	801086a <net_process_rx_packet>
 8011f3e:	e7f3      	b.n	8011f28 <tc_rx_handler+0x4>

08011f40 <net_tx_priority2tc>:
}
 8011f40:	2000      	movs	r0, #0
 8011f42:	4770      	bx	lr

08011f44 <net_tc_tx_init>:
}
 8011f44:	4770      	bx	lr

08011f46 <icmpv4_create>:
{
 8011f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8011f48:	2304      	movs	r3, #4
{
 8011f4a:	460f      	mov	r7, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8011f4c:	2500      	movs	r5, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 8011f4e:	4669      	mov	r1, sp
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8011f50:	e9cd 5300 	strd	r5, r3, [sp]
{
 8011f54:	4604      	mov	r4, r0
 8011f56:	4616      	mov	r6, r2
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 8011f58:	f7ff ffc0 	bl	8011edc <net_pkt_get_data>
	if (!icmp_hdr) {
 8011f5c:	b148      	cbz	r0, 8011f72 <icmpv4_create+0x2c>
	icmp_hdr->type   = icmp_type;
 8011f5e:	7007      	strb	r7, [r0, #0]
	icmp_hdr->code   = icmp_code;
 8011f60:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
 8011f62:	7085      	strb	r5, [r0, #2]
 8011f64:	70c5      	strb	r5, [r0, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
 8011f66:	4669      	mov	r1, sp
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f7ff ffd6 	bl	8011f1a <net_pkt_set_data>
}
 8011f6e:	b003      	add	sp, #12
 8011f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
 8011f72:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8011f76:	e7fa      	b.n	8011f6e <icmpv4_create+0x28>

08011f78 <net_ipv4_is_addr_bcast>:
{
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	460c      	mov	r4, r1
 8011f7c:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8011f7e:	f7f2 ffcb 	bl	8004f18 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8011f82:	6822      	ldr	r2, [r4, #0]
 8011f84:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d005      	beq.n	8011f96 <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8011f8a:	4621      	mov	r1, r4
 8011f8c:	4628      	mov	r0, r5
}
 8011f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8011f92:	f7f2 bc03 	b.w	800479c <net_if_ipv4_is_addr_bcast>
}
 8011f96:	2001      	movs	r0, #1
 8011f98:	bd38      	pop	{r3, r4, r5, pc}

08011f9a <icmpv4_handle_echo_request>:
	return UNALIGNED_GET(&addr->s_addr) == 0;
 8011f9a:	68cb      	ldr	r3, [r1, #12]
{
 8011f9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011fa0:	4605      	mov	r5, r0
 8011fa2:	460f      	mov	r7, r1
	if (net_ipv4_is_addr_unspecified((struct in_addr *)ip_hdr->src)) {
 8011fa4:	b173      	cbz	r3, 8011fc4 <icmpv4_handle_echo_request+0x2a>
	payload_len = net_pkt_get_len(pkt) -
 8011fa6:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
 8011fa8:	2200      	movs	r2, #0
	while (buf) {
 8011faa:	b96b      	cbnz	r3, 8011fc8 <icmpv4_handle_echo_request+0x2e>
	return pkt->ipv4_opts_len;
 8011fac:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
		      net_pkt_ip_hdr_len(pkt) -
 8011fb0:	f895 4034 	ldrb.w	r4, [r5, #52]	; 0x34
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
 8011fb4:	440c      	add	r4, r1
 8011fb6:	f5c4 447f 	rsb	r4, r4, #65280	; 0xff00
 8011fba:	34fc      	adds	r4, #252	; 0xfc
 8011fbc:	4414      	add	r4, r2
	payload_len = net_pkt_get_len(pkt) -
 8011fbe:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
 8011fc0:	2c03      	cmp	r4, #3
 8011fc2:	dc05      	bgt.n	8011fd0 <icmpv4_handle_echo_request+0x36>
	return NET_DROP;
 8011fc4:	2002      	movs	r0, #2
 8011fc6:	e041      	b.n	801204c <icmpv4_handle_echo_request+0xb2>
		bytes += buf->len;
 8011fc8:	8999      	ldrh	r1, [r3, #12]
		buf = buf->frags;
 8011fca:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 8011fcc:	440a      	add	r2, r1
		buf = buf->frags;
 8011fce:	e7ec      	b.n	8011faa <icmpv4_handle_echo_request+0x10>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
 8011fd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	e9cd 2300 	strd	r2, r3, [sp]
 8011fda:	2301      	movs	r3, #1
 8011fdc:	69a8      	ldr	r0, [r5, #24]
 8011fde:	461a      	mov	r2, r3
 8011fe0:	4421      	add	r1, r4
 8011fe2:	f7f3 fb8b 	bl	80056fc <net_pkt_alloc_with_buffer>
	if (!reply) {
 8011fe6:	4606      	mov	r6, r0
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d0eb      	beq.n	8011fc4 <icmpv4_handle_echo_request+0x2a>
	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
 8011fec:	693b      	ldr	r3, [r7, #16]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8011fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ff2:	2be0      	cmp	r3, #224	; 0xe0
 8011ff4:	f107 0810 	add.w	r8, r7, #16
 8011ff8:	d12b      	bne.n	8012052 <icmpv4_handle_echo_request+0xb8>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
 8011ffa:	4641      	mov	r1, r8
 8011ffc:	69a8      	ldr	r0, [r5, #24]
 8011ffe:	f7f2 fc15 	bl	800482c <net_if_ipv4_select_src_addr>
 8012002:	4680      	mov	r8, r0
	if (net_ipv4_create(reply, src, (struct in_addr *)ip_hdr->src)) {
 8012004:	f107 020c 	add.w	r2, r7, #12
 8012008:	4641      	mov	r1, r8
 801200a:	4630      	mov	r0, r6
 801200c:	f000 f988 	bl	8012320 <net_ipv4_create>
 8012010:	4602      	mov	r2, r0
 8012012:	bb28      	cbnz	r0, 8012060 <icmpv4_handle_echo_request+0xc6>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
 8012014:	4601      	mov	r1, r0
 8012016:	4630      	mov	r0, r6
 8012018:	f7ff ff95 	bl	8011f46 <icmpv4_create>
 801201c:	bb00      	cbnz	r0, 8012060 <icmpv4_handle_echo_request+0xc6>
	    net_pkt_copy(reply, pkt, payload_len)) {
 801201e:	4622      	mov	r2, r4
 8012020:	4629      	mov	r1, r5
 8012022:	4630      	mov	r0, r6
 8012024:	f7ff fde6 	bl	8011bf4 <net_pkt_copy>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
 8012028:	4604      	mov	r4, r0
 801202a:	b9c8      	cbnz	r0, 8012060 <icmpv4_handle_echo_request+0xc6>
	net_pkt_cursor_init(reply);
 801202c:	4630      	mov	r0, r6
 801202e:	f7ff fd51 	bl	8011ad4 <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
 8012032:	2101      	movs	r1, #1
 8012034:	4630      	mov	r0, r6
 8012036:	f000 f980 	bl	801233a <net_ipv4_finalize>
	if (net_send_data(reply) < 0) {
 801203a:	4630      	mov	r0, r6
 801203c:	f7fe fba8 	bl	8010790 <net_send_data>
 8012040:	2800      	cmp	r0, #0
 8012042:	db0d      	blt.n	8012060 <icmpv4_handle_echo_request+0xc6>
	net_pkt_unref(pkt);
 8012044:	4628      	mov	r0, r5
 8012046:	f7ff fcd5 	bl	80119f4 <net_pkt_unref>
	return NET_OK;
 801204a:	4620      	mov	r0, r4
}
 801204c:	b002      	add	sp, #8
 801204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
 8012052:	69a8      	ldr	r0, [r5, #24]
 8012054:	4641      	mov	r1, r8
 8012056:	f7ff ff8f 	bl	8011f78 <net_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
 801205a:	2800      	cmp	r0, #0
 801205c:	d1cd      	bne.n	8011ffa <icmpv4_handle_echo_request+0x60>
 801205e:	e7d1      	b.n	8012004 <icmpv4_handle_echo_request+0x6a>
		net_pkt_unref(reply);
 8012060:	4630      	mov	r0, r6
 8012062:	f7ff fcc7 	bl	80119f4 <net_pkt_unref>
 8012066:	e7ad      	b.n	8011fc4 <icmpv4_handle_echo_request+0x2a>

08012068 <net_icmpv4_finalize>:
{
 8012068:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 801206a:	2304      	movs	r3, #4
 801206c:	2200      	movs	r2, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 801206e:	4669      	mov	r1, sp
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8012070:	e9cd 2300 	strd	r2, r3, [sp]
{
 8012074:	4604      	mov	r4, r0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 8012076:	f7ff ff31 	bl	8011edc <net_pkt_get_data>
	if (!icmp_hdr) {
 801207a:	4605      	mov	r5, r0
 801207c:	b150      	cbz	r0, 8012094 <net_icmpv4_finalize+0x2c>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
 801207e:	2101      	movs	r1, #1
 8012080:	4620      	mov	r0, r4
 8012082:	f7fe feaa 	bl	8010dda <net_calc_chksum>
	return net_pkt_set_data(pkt, &icmpv4_access);
 8012086:	4669      	mov	r1, sp
	icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
 8012088:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmpv4_access);
 801208a:	4620      	mov	r0, r4
 801208c:	f7ff ff45 	bl	8011f1a <net_pkt_set_data>
}
 8012090:	b003      	add	sp, #12
 8012092:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
 8012094:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8012098:	e7fa      	b.n	8012090 <net_icmpv4_finalize+0x28>

0801209a <net_icmpv4_send_echo_request>:
{
 801209a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801209e:	4617      	mov	r7, r2
 80120a0:	b085      	sub	sp, #20
 80120a2:	461e      	mov	r6, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 80120a4:	2200      	movs	r2, #0
 80120a6:	2304      	movs	r3, #4
 80120a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return (iface->if_dev->offload != NULL);
 80120ac:	6803      	ldr	r3, [r0, #0]
{
 80120ae:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) && net_if_is_ip_offloaded(iface)) {
 80120b2:	699b      	ldr	r3, [r3, #24]
{
 80120b4:	4689      	mov	r9, r1
	if (IS_ENABLED(CONFIG_NET_OFFLOAD) && net_if_is_ip_offloaded(iface)) {
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d149      	bne.n	801214e <net_icmpv4_send_echo_request+0xb4>
	if (!iface->config.ip.ipv4) {
 80120ba:	6845      	ldr	r5, [r0, #4]
 80120bc:	2d00      	cmp	r5, #0
 80120be:	d049      	beq.n	8012154 <net_icmpv4_send_echo_request+0xba>
	pkt = net_pkt_alloc_with_buffer(iface,
 80120c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80120c4:	2300      	movs	r3, #0
 80120c6:	e9cd 2300 	strd	r2, r3, [sp]
 80120ca:	2301      	movs	r3, #1
 80120cc:	461a      	mov	r2, r3
 80120ce:	f108 0104 	add.w	r1, r8, #4
 80120d2:	f7f3 fb13 	bl	80056fc <net_pkt_alloc_with_buffer>
	src = &iface->config.ip.ipv4->unicast[0].address.in_addr;
 80120d6:	3504      	adds	r5, #4
	if (!pkt) {
 80120d8:	4604      	mov	r4, r0
 80120da:	2800      	cmp	r0, #0
 80120dc:	d03d      	beq.n	801215a <net_icmpv4_send_echo_request+0xc0>
	if (net_ipv4_create(pkt, src, dst) ||
 80120de:	464a      	mov	r2, r9
 80120e0:	4629      	mov	r1, r5
 80120e2:	f000 f91d 	bl	8012320 <net_ipv4_create>
 80120e6:	4602      	mov	r2, r0
 80120e8:	b140      	cbz	r0, 80120fc <net_icmpv4_send_echo_request+0x62>
	int ret = -ENOBUFS;
 80120ea:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
 80120ee:	4620      	mov	r0, r4
 80120f0:	f7ff fc80 	bl	80119f4 <net_pkt_unref>
}
 80120f4:	4628      	mov	r0, r5
 80120f6:	b005      	add	sp, #20
 80120f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    icmpv4_create(pkt, NET_ICMPV4_ECHO_REQUEST, 0)) {
 80120fc:	2108      	movs	r1, #8
 80120fe:	4620      	mov	r0, r4
 8012100:	f7ff ff21 	bl	8011f46 <icmpv4_create>
	if (net_ipv4_create(pkt, src, dst) ||
 8012104:	4605      	mov	r5, r0
 8012106:	2800      	cmp	r0, #0
 8012108:	d1ef      	bne.n	80120ea <net_icmpv4_send_echo_request+0x50>
	echo_req = (struct net_icmpv4_echo_req *)net_pkt_get_data(
 801210a:	a902      	add	r1, sp, #8
 801210c:	4620      	mov	r0, r4
 801210e:	f7ff fee5 	bl	8011edc <net_pkt_get_data>
	if (!echo_req) {
 8012112:	2800      	cmp	r0, #0
 8012114:	d0e9      	beq.n	80120ea <net_icmpv4_send_echo_request+0x50>
	echo_req->identifier = htons(identifier);
 8012116:	ba7f      	rev16	r7, r7
	echo_req->sequence   = htons(sequence);
 8012118:	ba76      	rev16	r6, r6
	echo_req->identifier = htons(identifier);
 801211a:	8007      	strh	r7, [r0, #0]
	echo_req->sequence   = htons(sequence);
 801211c:	8046      	strh	r6, [r0, #2]
	net_pkt_set_data(pkt, &icmpv4_access);
 801211e:	a902      	add	r1, sp, #8
 8012120:	4620      	mov	r0, r4
 8012122:	f7ff fefa 	bl	8011f1a <net_pkt_set_data>
	net_pkt_write(pkt, data, data_size);
 8012126:	4642      	mov	r2, r8
 8012128:	990c      	ldr	r1, [sp, #48]	; 0x30
 801212a:	4620      	mov	r0, r4
 801212c:	f7ff febb 	bl	8011ea6 <net_pkt_write>
	net_pkt_cursor_init(pkt);
 8012130:	4620      	mov	r0, r4
 8012132:	f7ff fccf 	bl	8011ad4 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
 8012136:	2101      	movs	r1, #1
 8012138:	4620      	mov	r0, r4
 801213a:	f000 f8fe 	bl	801233a <net_ipv4_finalize>
	if (net_send_data(pkt) >= 0) {
 801213e:	4620      	mov	r0, r4
 8012140:	f7fe fb26 	bl	8010790 <net_send_data>
 8012144:	2800      	cmp	r0, #0
 8012146:	dad5      	bge.n	80120f4 <net_icmpv4_send_echo_request+0x5a>
	ret = -EIO;
 8012148:	f06f 0504 	mvn.w	r5, #4
 801214c:	e7cf      	b.n	80120ee <net_icmpv4_send_echo_request+0x54>
		return -ENOTSUP;
 801214e:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8012152:	e7cf      	b.n	80120f4 <net_icmpv4_send_echo_request+0x5a>
		return -ENETUNREACH;
 8012154:	f06f 0571 	mvn.w	r5, #113	; 0x71
 8012158:	e7cc      	b.n	80120f4 <net_icmpv4_send_echo_request+0x5a>
		return -ENOMEM;
 801215a:	f06f 050b 	mvn.w	r5, #11
 801215e:	e7c9      	b.n	80120f4 <net_icmpv4_send_echo_request+0x5a>

08012160 <net_icmpv4_send_error>:
{
 8012160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 8012164:	2314      	movs	r3, #20
{
 8012166:	b086      	sub	sp, #24
 8012168:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 801216a:	2400      	movs	r4, #0
 801216c:	e9cd 4302 	strd	r4, r3, [sp, #8]
{
 8012170:	4688      	mov	r8, r1
 8012172:	4691      	mov	r9, r2
	net_pkt_cursor_init(orig);
 8012174:	f7ff fcae 	bl	8011ad4 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
 8012178:	a902      	add	r1, sp, #8
 801217a:	4628      	mov	r0, r5
 801217c:	f7ff feae 	bl	8011edc <net_pkt_get_data>
	if (!ip_hdr) {
 8012180:	4606      	mov	r6, r0
 8012182:	b910      	cbnz	r0, 801218a <net_icmpv4_send_error+0x2a>
	int err = -EIO;
 8012184:	f06f 0604 	mvn.w	r6, #4
 8012188:	e00f      	b.n	80121aa <net_icmpv4_send_error+0x4a>
	if (ip_hdr->proto == IPPROTO_ICMP) {
 801218a:	7a43      	ldrb	r3, [r0, #9]
 801218c:	2b01      	cmp	r3, #1
 801218e:	d110      	bne.n	80121b2 <net_icmpv4_send_error+0x52>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8012190:	2304      	movs	r3, #4
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
 8012192:	a904      	add	r1, sp, #16
 8012194:	4628      	mov	r0, r5
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8012196:	9404      	str	r4, [sp, #16]
 8012198:	9305      	str	r3, [sp, #20]
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
 801219a:	f7ff fe9f 	bl	8011edc <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 8) {
 801219e:	b110      	cbz	r0, 80121a6 <net_icmpv4_send_error+0x46>
 80121a0:	7843      	ldrb	r3, [r0, #1]
 80121a2:	2b07      	cmp	r3, #7
 80121a4:	d805      	bhi.n	80121b2 <net_icmpv4_send_error+0x52>
			err = -EINVAL;
 80121a6:	f06f 0615 	mvn.w	r6, #21
}
 80121aa:	4630      	mov	r0, r6
 80121ac:	b006      	add	sp, #24
 80121ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				   (struct in_addr *)ip_hdr->dst)) {
 80121b2:	f106 0a10 	add.w	sl, r6, #16
	if (net_ipv4_is_addr_bcast(net_pkt_iface(orig),
 80121b6:	69a8      	ldr	r0, [r5, #24]
 80121b8:	4651      	mov	r1, sl
 80121ba:	f7ff fedd 	bl	8011f78 <net_ipv4_is_addr_bcast>
 80121be:	2800      	cmp	r0, #0
 80121c0:	d1e0      	bne.n	8012184 <net_icmpv4_send_error+0x24>
	if (ip_hdr->proto == IPPROTO_UDP) {
 80121c2:	7a73      	ldrb	r3, [r6, #9]
 80121c4:	2b11      	cmp	r3, #17
 80121c6:	d01a      	beq.n	80121fe <net_icmpv4_send_error+0x9e>
		copy_len = 0;
 80121c8:	2b06      	cmp	r3, #6
 80121ca:	bf0c      	ite	eq
 80121cc:	2728      	moveq	r7, #40	; 0x28
 80121ce:	2700      	movne	r7, #0
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
 80121d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80121d4:	2300      	movs	r3, #0
 80121d6:	e9cd 2300 	strd	r2, r3, [sp]
 80121da:	2301      	movs	r3, #1
 80121dc:	69a8      	ldr	r0, [r5, #24]
 80121de:	461a      	mov	r2, r3
 80121e0:	1d39      	adds	r1, r7, #4
 80121e2:	f7f3 fa8b 	bl	80056fc <net_pkt_alloc_with_buffer>
	if (!pkt) {
 80121e6:	4604      	mov	r4, r0
 80121e8:	b3a0      	cbz	r0, 8012254 <net_icmpv4_send_error+0xf4>
	if (net_ipv4_create(pkt, (struct in_addr *)ip_hdr->dst,
 80121ea:	f106 020c 	add.w	r2, r6, #12
 80121ee:	4651      	mov	r1, sl
 80121f0:	f000 f896 	bl	8012320 <net_ipv4_create>
 80121f4:	b128      	cbz	r0, 8012202 <net_icmpv4_send_error+0xa2>
	net_pkt_unref(pkt);
 80121f6:	4620      	mov	r0, r4
 80121f8:	f7ff fbfc 	bl	80119f4 <net_pkt_unref>
 80121fc:	e7c2      	b.n	8012184 <net_icmpv4_send_error+0x24>
		copy_len = sizeof(struct net_ipv4_hdr) +
 80121fe:	271c      	movs	r7, #28
 8012200:	e7e6      	b.n	80121d0 <net_icmpv4_send_error+0x70>
	    icmpv4_create(pkt, type, code) ||
 8012202:	4641      	mov	r1, r8
 8012204:	464a      	mov	r2, r9
 8012206:	4620      	mov	r0, r4
 8012208:	f7ff fe9d 	bl	8011f46 <icmpv4_create>
			    (struct in_addr *)ip_hdr->src) ||
 801220c:	4601      	mov	r1, r0
 801220e:	2800      	cmp	r0, #0
 8012210:	d1f1      	bne.n	80121f6 <net_icmpv4_send_error+0x96>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
 8012212:	2204      	movs	r2, #4
 8012214:	4620      	mov	r0, r4
 8012216:	f7ff fccd 	bl	8011bb4 <net_pkt_memset>
	    icmpv4_create(pkt, type, code) ||
 801221a:	2800      	cmp	r0, #0
 801221c:	d1eb      	bne.n	80121f6 <net_icmpv4_send_error+0x96>
	    net_pkt_copy(pkt, orig, copy_len)) {
 801221e:	463a      	mov	r2, r7
 8012220:	4629      	mov	r1, r5
 8012222:	4620      	mov	r0, r4
 8012224:	f7ff fce6 	bl	8011bf4 <net_pkt_copy>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
 8012228:	4606      	mov	r6, r0
 801222a:	2800      	cmp	r0, #0
 801222c:	d1e3      	bne.n	80121f6 <net_icmpv4_send_error+0x96>
	net_pkt_cursor_init(pkt);
 801222e:	4620      	mov	r0, r4
 8012230:	f7ff fc50 	bl	8011ad4 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
 8012234:	2101      	movs	r1, #1
 8012236:	4620      	mov	r0, r4
 8012238:	f000 f87f 	bl	801233a <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
 801223c:	6a2b      	ldr	r3, [r5, #32]
 801223e:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
 8012240:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8012244:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (net_send_data(pkt) >= 0) {
 8012248:	4620      	mov	r0, r4
 801224a:	f7fe faa1 	bl	8010790 <net_send_data>
 801224e:	2800      	cmp	r0, #0
 8012250:	daab      	bge.n	80121aa <net_icmpv4_send_error+0x4a>
 8012252:	e7d0      	b.n	80121f6 <net_icmpv4_send_error+0x96>
		err =  -ENOMEM;
 8012254:	f06f 060b 	mvn.w	r6, #11
 8012258:	e7a7      	b.n	80121aa <net_icmpv4_send_error+0x4a>

0801225a <net_ipv4_is_addr_mcast>:
 801225a:	6800      	ldr	r0, [r0, #0]
 801225c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 8012260:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 8012264:	4258      	negs	r0, r3
 8012266:	4158      	adcs	r0, r3
 8012268:	4770      	bx	lr

0801226a <net_ipv4_is_addr_bcast>:
{
 801226a:	b538      	push	{r3, r4, r5, lr}
 801226c:	460c      	mov	r4, r1
 801226e:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8012270:	f7f2 fe52 	bl	8004f18 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8012274:	6822      	ldr	r2, [r4, #0]
 8012276:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8012278:	429a      	cmp	r2, r3
 801227a:	d005      	beq.n	8012288 <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 801227c:	4621      	mov	r1, r4
 801227e:	4628      	mov	r0, r5
}
 8012280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8012284:	f7f2 ba8a 	b.w	800479c <net_if_ipv4_is_addr_bcast>
}
 8012288:	2001      	movs	r0, #1
 801228a:	bd38      	pop	{r3, r4, r5, pc}

0801228c <net_ipv4_create_full>:
			 uint8_t tos,
			 uint16_t id,
			 uint8_t flags,
			 uint16_t offset,
			 uint8_t ttl)
{
 801228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012290:	b085      	sub	sp, #20
 8012292:	460e      	mov	r6, r1
 8012294:	4617      	mov	r7, r2
 8012296:	469b      	mov	fp, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 8012298:	2214      	movs	r2, #20
{
 801229a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801229e:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80122a2:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80122a6:	9301      	str	r3, [sp, #4]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 80122a8:	f04f 0800 	mov.w	r8, #0
	struct net_ipv4_hdr *ipv4_hdr;

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 80122ac:	a902      	add	r1, sp, #8
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 80122ae:	e9cd 8202 	strd	r8, r2, [sp, #8]
{
 80122b2:	4605      	mov	r5, r0
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 80122b4:	f7ff fe12 	bl	8011edc <net_pkt_get_data>
	if (!ipv4_hdr) {
 80122b8:	4604      	mov	r4, r0
 80122ba:	b370      	cbz	r0, 801231a <net_ipv4_create_full+0x8e>
	}

	ipv4_hdr->vhl       = 0x45;
	ipv4_hdr->tos       = tos;
	ipv4_hdr->len       = 0U;
	ipv4_hdr->id[0]     = id >> 8;
 80122bc:	9b01      	ldr	r3, [sp, #4]
	ipv4_hdr->id[1]     = id;
 80122be:	7143      	strb	r3, [r0, #5]
	ipv4_hdr->vhl       = 0x45;
 80122c0:	2245      	movs	r2, #69	; 0x45
 80122c2:	7002      	strb	r2, [r0, #0]
	ipv4_hdr->id[0]     = id >> 8;
 80122c4:	0a1a      	lsrs	r2, r3, #8
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
 80122c6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
	ipv4_hdr->tos       = tos;
 80122ca:	f880 b001 	strb.w	fp, [r0, #1]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
 80122ce:	015b      	lsls	r3, r3, #5
 80122d0:	ea43 231a 	orr.w	r3, r3, sl, lsr #8
	ipv4_hdr->len       = 0U;
 80122d4:	f880 8002 	strb.w	r8, [r0, #2]
 80122d8:	f880 8003 	strb.w	r8, [r0, #3]
	ipv4_hdr->id[0]     = id >> 8;
 80122dc:	7102      	strb	r2, [r0, #4]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
 80122de:	7183      	strb	r3, [r0, #6]
	ipv4_hdr->offset[1] = offset;
 80122e0:	f880 a007 	strb.w	sl, [r0, #7]
	ipv4_hdr->ttl       = ttl;
 80122e4:	f880 9008 	strb.w	r9, [r0, #8]

	if (ttl == 0U) {
 80122e8:	f1b9 0f00 	cmp.w	r9, #0
 80122ec:	d103      	bne.n	80122f6 <net_ipv4_create_full+0x6a>
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
 80122ee:	69a8      	ldr	r0, [r5, #24]
 80122f0:	f7fe fb62 	bl	80109b8 <net_if_ipv4_get_ttl>
 80122f4:	7220      	strb	r0, [r4, #8]
	}

	ipv4_hdr->proto     = 0U;
 80122f6:	2300      	movs	r3, #0
 80122f8:	7263      	strb	r3, [r4, #9]
	ipv4_hdr->chksum    = 0U;
 80122fa:	72a3      	strb	r3, [r4, #10]
 80122fc:	72e3      	strb	r3, [r4, #11]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	6123      	str	r3, [r4, #16]
 8012302:	6833      	ldr	r3, [r6, #0]
 8012304:	60e3      	str	r3, [r4, #12]
	pkt->ip_hdr_len = len;
 8012306:	2314      	movs	r3, #20
 8012308:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	net_ipv4_addr_copy_raw(ipv4_hdr->dst, (uint8_t *)dst);
	net_ipv4_addr_copy_raw(ipv4_hdr->src, (uint8_t *)src);

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	return net_pkt_set_data(pkt, &ipv4_access);
 801230c:	a902      	add	r1, sp, #8
 801230e:	4628      	mov	r0, r5
 8012310:	f7ff fe03 	bl	8011f1a <net_pkt_set_data>
}
 8012314:	b005      	add	sp, #20
 8012316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
 801231a:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801231e:	e7f9      	b.n	8012314 <net_ipv4_create_full+0x88>

08012320 <net_ipv4_create>:

int net_ipv4_create(struct net_pkt *pkt,
		    const struct in_addr *src,
		    const struct in_addr *dst)
{
 8012320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return net_ipv4_create_full(pkt, src, dst, 0U, 0U, 0U, 0U,
 8012322:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8012326:	9303      	str	r3, [sp, #12]
 8012328:	2300      	movs	r3, #0
 801232a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801232e:	9300      	str	r3, [sp, #0]
 8012330:	f7ff ffac 	bl	801228c <net_ipv4_create_full>
				    net_pkt_ipv4_ttl(pkt));
}
 8012334:	b005      	add	sp, #20
 8012336:	f85d fb04 	ldr.w	pc, [sp], #4

0801233a <net_ipv4_finalize>:

int net_ipv4_finalize(struct net_pkt *pkt, uint8_t next_header_proto)
{
 801233a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 801233c:	2314      	movs	r3, #20
 801233e:	2500      	movs	r5, #0
 8012340:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
 8012344:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8012348:	f043 0301 	orr.w	r3, r3, #1
{
 801234c:	460e      	mov	r6, r1
 801234e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
	struct net_ipv4_hdr *ipv4_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 8012352:	4669      	mov	r1, sp
{
 8012354:	4604      	mov	r4, r0
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 8012356:	f7ff fdc1 	bl	8011edc <net_pkt_get_data>
	if (!ipv4_hdr) {
 801235a:	4607      	mov	r7, r0
 801235c:	b340      	cbz	r0, 80123b0 <net_ipv4_finalize+0x76>
					((net_pkt_ip_hdr_len(pkt) +
					  net_pkt_ipv4_opts_len(pkt)) / 4U));
		}
	}

	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
 801235e:	68a2      	ldr	r2, [r4, #8]
	size_t bytes = 0;
 8012360:	462b      	mov	r3, r5
	while (buf) {
 8012362:	b9aa      	cbnz	r2, 8012390 <net_ipv4_finalize+0x56>
 8012364:	ba5b      	rev16	r3, r3
	ipv4_hdr->proto = next_header_proto;
 8012366:	727e      	strb	r6, [r7, #9]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 8012368:	69a0      	ldr	r0, [r4, #24]
	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
 801236a:	807b      	strh	r3, [r7, #2]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 801236c:	f7fe fbc7 	bl	8010afe <net_if_need_calc_tx_checksum>
 8012370:	b118      	cbz	r0, 801237a <net_ipv4_finalize+0x40>
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
 8012372:	4620      	mov	r0, r4
 8012374:	f7fe fdb8 	bl	8010ee8 <net_calc_chksum_ipv4>
 8012378:	8178      	strh	r0, [r7, #10]
	}

	net_pkt_set_data(pkt, &ipv4_access);
 801237a:	4669      	mov	r1, sp
 801237c:	4620      	mov	r0, r4
 801237e:	f7ff fdcc 	bl	8011f1a <net_pkt_set_data>

	if (IS_ENABLED(CONFIG_NET_UDP) &&
 8012382:	2e11      	cmp	r6, #17
 8012384:	d108      	bne.n	8012398 <net_ipv4_finalize+0x5e>
	    next_header_proto == IPPROTO_UDP) {
		return net_udp_finalize(pkt);
 8012386:	4620      	mov	r0, r4
 8012388:	f000 fb18 	bl	80129bc <net_udp_finalize>
	} else if (next_header_proto == IPPROTO_ICMP) {
		return net_icmpv4_finalize(pkt);
	}

	return 0;
}
 801238c:	b003      	add	sp, #12
 801238e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
 8012390:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
 8012392:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
 8012394:	440b      	add	r3, r1
		buf = buf->frags;
 8012396:	e7e4      	b.n	8012362 <net_ipv4_finalize+0x28>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 8012398:	2e06      	cmp	r6, #6
 801239a:	d103      	bne.n	80123a4 <net_ipv4_finalize+0x6a>
		return net_tcp_finalize(pkt);
 801239c:	4620      	mov	r0, r4
 801239e:	f000 fa1d 	bl	80127dc <net_tcp_finalize>
 80123a2:	e7f3      	b.n	801238c <net_ipv4_finalize+0x52>
	} else if (next_header_proto == IPPROTO_ICMP) {
 80123a4:	2e01      	cmp	r6, #1
 80123a6:	d106      	bne.n	80123b6 <net_ipv4_finalize+0x7c>
		return net_icmpv4_finalize(pkt);
 80123a8:	4620      	mov	r0, r4
 80123aa:	f7ff fe5d 	bl	8012068 <net_icmpv4_finalize>
 80123ae:	e7ed      	b.n	801238c <net_ipv4_finalize+0x52>
		return -ENOBUFS;
 80123b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80123b4:	e7ea      	b.n	801238c <net_ipv4_finalize+0x52>
	return 0;
 80123b6:	2000      	movs	r0, #0
 80123b8:	e7e8      	b.n	801238c <net_ipv4_finalize+0x52>

080123ba <net_ipv4_input>:
	return 0;
}
#endif

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
 80123ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 80123bc:	2314      	movs	r3, #20
{
 80123be:	b091      	sub	sp, #68	; 0x44
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 80123c0:	eb0d 0203 	add.w	r2, sp, r3
 80123c4:	9207      	str	r2, [sp, #28]
 80123c6:	2208      	movs	r2, #8
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 80123c8:	2700      	movs	r7, #0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 80123ca:	9208      	str	r2, [sp, #32]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80123cc:	aa0b      	add	r2, sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 80123ce:	e9cd 7303 	strd	r7, r3, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80123d2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	int real_len = net_pkt_get_len(pkt);
 80123d6:	6883      	ldr	r3, [r0, #8]
{
 80123d8:	4604      	mov	r4, r0
	while (buf) {
 80123da:	b943      	cbnz	r3, 80123ee <net_ipv4_input+0x34>
	net_pkt_cursor_backup(pkt, &hdr_start);
#endif

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 80123dc:	a903      	add	r1, sp, #12
 80123de:	4620      	mov	r0, r4
 80123e0:	f7ff fd7c 	bl	8011edc <net_pkt_get_data>
	if (!hdr) {
 80123e4:	4605      	mov	r5, r0
 80123e6:	b930      	cbnz	r0, 80123f6 <net_ipv4_input+0x3c>

	NET_DBG("IPv4 packet received from %s to %s",
		log_strdup(net_sprint_ipv4_addr(&hdr->src)),
		log_strdup(net_sprint_ipv4_addr(&hdr->dst)));

	switch (hdr->proto) {
 80123e8:	2002      	movs	r0, #2
		return verdict;
	}
drop:
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
}
 80123ea:	b011      	add	sp, #68	; 0x44
 80123ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
 80123ee:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 80123f0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 80123f2:	4417      	add	r7, r2
		buf = buf->frags;
 80123f4:	e7f1      	b.n	80123da <net_ipv4_input+0x20>
	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
 80123f6:	7806      	ldrb	r6, [r0, #0]
 80123f8:	f006 060f 	and.w	r6, r6, #15
 80123fc:	00b6      	lsls	r6, r6, #2
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
 80123fe:	2e13      	cmp	r6, #19
 8012400:	d9f2      	bls.n	80123e8 <net_ipv4_input+0x2e>
	pkt->ip_hdr_len = len;
 8012402:	2314      	movs	r3, #20
 8012404:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	if (hdr->ttl == 0) {
 8012408:	7a03      	ldrb	r3, [r0, #8]
	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
 801240a:	3e14      	subs	r6, #20
 801240c:	b2f6      	uxtb	r6, r6
	if (hdr->ttl == 0) {
 801240e:	2b00      	cmp	r3, #0
 8012410:	d0ea      	beq.n	80123e8 <net_ipv4_input+0x2e>
	pkt->ipv4_opts_len = opts_len;
 8012412:	8841      	ldrh	r1, [r0, #2]
 8012414:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
	pkt_len = ntohs(hdr->len);
 8012418:	ba49      	rev16	r1, r1
 801241a:	b289      	uxth	r1, r1
	if (real_len < pkt_len) {
 801241c:	42b9      	cmp	r1, r7
 801241e:	dce3      	bgt.n	80123e8 <net_ipv4_input+0x2e>
	} else if (real_len > pkt_len) {
 8012420:	da02      	bge.n	8012428 <net_ipv4_input+0x6e>
		net_pkt_update_length(pkt, pkt_len);
 8012422:	4620      	mov	r0, r4
 8012424:	f7ff fc4c 	bl	8011cc0 <net_pkt_update_length>
	if (net_ipv4_is_addr_mcast((struct in_addr *)hdr->src)) {
 8012428:	f105 010c 	add.w	r1, r5, #12
 801242c:	4608      	mov	r0, r1
 801242e:	f7ff ff14 	bl	801225a <net_ipv4_is_addr_mcast>
 8012432:	2800      	cmp	r0, #0
 8012434:	d1d8      	bne.n	80123e8 <net_ipv4_input+0x2e>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->src)) {
 8012436:	69a0      	ldr	r0, [r4, #24]
 8012438:	f7ff ff17 	bl	801226a <net_ipv4_is_addr_bcast>
 801243c:	2800      	cmp	r0, #0
 801243e:	d1d3      	bne.n	80123e8 <net_ipv4_input+0x2e>
	return UNALIGNED_GET(&addr->s_addr) == 0;
 8012440:	68eb      	ldr	r3, [r5, #12]
	if (net_ipv4_is_addr_unspecified((struct in_addr *)hdr->src)) {
 8012442:	2b00      	cmp	r3, #0
 8012444:	d0d0      	beq.n	80123e8 <net_ipv4_input+0x2e>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 8012446:	69a0      	ldr	r0, [r4, #24]
 8012448:	f7fe fb5b 	bl	8010b02 <net_if_need_calc_rx_checksum>
 801244c:	2800      	cmp	r0, #0
 801244e:	d141      	bne.n	80124d4 <net_ipv4_input+0x11a>
	if ((!net_ipv4_is_my_addr((struct in_addr *)hdr->dst) &&
 8012450:	f105 0710 	add.w	r7, r5, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 8012454:	2100      	movs	r1, #0
 8012456:	4638      	mov	r0, r7
 8012458:	f7f2 fa3c 	bl	80048d4 <net_if_ipv4_addr_lookup>
	if (!ret) {
 801245c:	b980      	cbnz	r0, 8012480 <net_ipv4_input+0xc6>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
 801245e:	4639      	mov	r1, r7
 8012460:	f7ff ff03 	bl	801226a <net_ipv4_is_addr_bcast>
 8012464:	b960      	cbnz	r0, 8012480 <net_ipv4_input+0xc6>
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
 8012466:	4638      	mov	r0, r7
 8012468:	f7ff fef7 	bl	801225a <net_ipv4_is_addr_mcast>
	if ((!net_ipv4_is_my_addr((struct in_addr *)hdr->dst) &&
 801246c:	b940      	cbnz	r0, 8012480 <net_ipv4_input+0xc6>
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
 801246e:	7a6b      	ldrb	r3, [r5, #9]
 8012470:	2b11      	cmp	r3, #17
 8012472:	d1b9      	bne.n	80123e8 <net_ipv4_input+0x2e>
	       (net_ipv4_addr_cmp((struct in_addr *)hdr->dst, net_ipv4_broadcast_address()) ||
 8012474:	f7f2 fd50 	bl	8004f18 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8012478:	692b      	ldr	r3, [r5, #16]
 801247a:	6802      	ldr	r2, [r0, #0]
	     !(hdr->proto == IPPROTO_UDP &&
 801247c:	429a      	cmp	r2, r3
 801247e:	d1b3      	bne.n	80123e8 <net_ipv4_input+0x2e>
				   net_ipv4_unspecified_address()))))) ||
 8012480:	7a6b      	ldrb	r3, [r5, #9]
 8012482:	2b06      	cmp	r3, #6
 8012484:	d105      	bne.n	8012492 <net_ipv4_input+0xd8>
	     net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->dst))) {
 8012486:	69a0      	ldr	r0, [r4, #24]
 8012488:	4639      	mov	r1, r7
 801248a:	f7ff feee 	bl	801226a <net_ipv4_is_addr_bcast>
	    (hdr->proto == IPPROTO_TCP &&
 801248e:	2800      	cmp	r0, #0
 8012490:	d1aa      	bne.n	80123e8 <net_ipv4_input+0x2e>
	return net_pkt_skip(pkt, access->size);
 8012492:	9904      	ldr	r1, [sp, #16]
 8012494:	4620      	mov	r0, r4
 8012496:	f7ff fb82 	bl	8011b9e <net_pkt_skip>
	if (opts_len) {
 801249a:	b12e      	cbz	r6, 80124a8 <net_ipv4_input+0xee>
		if (net_pkt_skip(pkt, opts_len)) {
 801249c:	4631      	mov	r1, r6
 801249e:	4620      	mov	r0, r4
 80124a0:	f7ff fb7d 	bl	8011b9e <net_pkt_skip>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d19f      	bne.n	80123e8 <net_ipv4_input+0x2e>
	pkt->ipv4_ttl = ttl;
 80124a8:	7a2b      	ldrb	r3, [r5, #8]
 80124aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	pkt->family = family;
 80124ae:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80124b2:	2201      	movs	r2, #1
 80124b4:	f362 0343 	bfi	r3, r2, #1, #3
 80124b8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	switch (hdr->proto) {
 80124bc:	7a6b      	ldrb	r3, [r5, #9]
 80124be:	2b06      	cmp	r3, #6
 80124c0:	d00e      	beq.n	80124e0 <net_ipv4_input+0x126>
 80124c2:	2b11      	cmp	r3, #17
 80124c4:	d01c      	beq.n	8012500 <net_ipv4_input+0x146>
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d18e      	bne.n	80123e8 <net_ipv4_input+0x2e>
		verdict = net_icmpv4_input(pkt, hdr);
 80124ca:	4629      	mov	r1, r5
 80124cc:	4620      	mov	r0, r4
 80124ce:	f7f3 fb43 	bl	8005b58 <net_icmpv4_input>
		if (verdict == NET_DROP) {
 80124d2:	e78a      	b.n	80123ea <net_ipv4_input+0x30>
	    net_calc_chksum_ipv4(pkt) != 0U) {
 80124d4:	4620      	mov	r0, r4
 80124d6:	f7fe fd07 	bl	8010ee8 <net_calc_chksum_ipv4>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 80124da:	2800      	cmp	r0, #0
 80124dc:	d0b8      	beq.n	8012450 <net_ipv4_input+0x96>
 80124de:	e783      	b.n	80123e8 <net_ipv4_input+0x2e>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
 80124e0:	a909      	add	r1, sp, #36	; 0x24
 80124e2:	4620      	mov	r0, r4
 80124e4:	f000 f99b 	bl	801281e <net_tcp_input>
 80124e8:	9001      	str	r0, [sp, #4]
		if (proto_hdr.tcp) {
 80124ea:	2800      	cmp	r0, #0
 80124ec:	f43f af7c 	beq.w	80123e8 <net_ipv4_input+0x2e>
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
 80124f0:	7a6a      	ldrb	r2, [r5, #9]
	ip.ipv4 = hdr;
 80124f2:	9502      	str	r5, [sp, #8]
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
 80124f4:	ab01      	add	r3, sp, #4
 80124f6:	a902      	add	r1, sp, #8
 80124f8:	4620      	mov	r0, r4
 80124fa:	f7f3 fc69 	bl	8005dd0 <net_conn_input>
	if (verdict != NET_DROP) {
 80124fe:	e774      	b.n	80123ea <net_ipv4_input+0x30>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
 8012500:	a907      	add	r1, sp, #28
 8012502:	4620      	mov	r0, r4
 8012504:	f000 fa8d 	bl	8012a22 <net_udp_input>
 8012508:	e7ee      	b.n	80124e8 <net_ipv4_input+0x12e>

0801250a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
 801250a:	4603      	mov	r3, r0
	return list->head;
 801250c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
 801250e:	b128      	cbz	r0, 801251c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8012510:	6859      	ldr	r1, [r3, #4]
	return node->next;
 8012512:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 8012514:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8012516:	4288      	cmp	r0, r1
	list->tail = node;
 8012518:	bf08      	it	eq
 801251a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
 801251c:	4770      	bx	lr

0801251e <tcp_timewait_timeout>:
	net_context_unref(conn->context);
 801251e:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8012522:	6840      	ldr	r0, [r0, #4]
 8012524:	f7fe bd51 	b.w	8010fca <net_context_unref>

08012528 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8012528:	f7f9 bf4a 	b.w	800c3c0 <z_impl_k_mutex_lock>

0801252c <net_pkt_get_len.isra.0>:
static inline size_t net_pkt_get_len(struct net_pkt *pkt)
 801252c:	4603      	mov	r3, r0
	size_t bytes = 0;
 801252e:	2000      	movs	r0, #0
	while (buf) {
 8012530:	b903      	cbnz	r3, 8012534 <net_pkt_get_len.isra.0+0x8>
}
 8012532:	4770      	bx	lr
		bytes += buf->len;
 8012534:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
 8012536:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
 8012538:	4410      	add	r0, r2
		buf = buf->frags;
 801253a:	e7f9      	b.n	8012530 <net_pkt_get_len.isra.0+0x4>

0801253c <tcp_pkt_pull>:
{
 801253c:	b538      	push	{r3, r4, r5, lr}
 801253e:	4604      	mov	r4, r0
	int total = net_pkt_get_len(pkt);
 8012540:	6880      	ldr	r0, [r0, #8]
 8012542:	f7ff fff3 	bl	801252c <net_pkt_get_len.isra.0>
	if (len > total) {
 8012546:	4288      	cmp	r0, r1
{
 8012548:	460d      	mov	r5, r1
	if (len > total) {
 801254a:	d311      	bcc.n	8012570 <tcp_pkt_pull+0x34>
	net_pkt_cursor_init(pkt);
 801254c:	4620      	mov	r0, r4
 801254e:	f7ff fac1 	bl	8011ad4 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
 8012552:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8012556:	f043 0301 	orr.w	r3, r3, #1
 801255a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	net_pkt_pull(pkt, len);
 801255e:	4629      	mov	r1, r5
 8012560:	4620      	mov	r0, r4
 8012562:	f7ff fbbe 	bl	8011ce2 <net_pkt_pull>
	net_pkt_trim_buffer(pkt);
 8012566:	4620      	mov	r0, r4
 8012568:	f7ff fa9a 	bl	8011aa0 <net_pkt_trim_buffer>
	int ret = 0;
 801256c:	2000      	movs	r0, #0
}
 801256e:	bd38      	pop	{r3, r4, r5, pc}
		ret = -EINVAL;
 8012570:	f06f 0015 	mvn.w	r0, #21
	return ret;
 8012574:	e7fb      	b.n	801256e <tcp_pkt_pull+0x32>

08012576 <net_context_get_iface.isra.0>:
 8012576:	f7f2 b8b9 	b.w	80046ec <z_impl_net_if_get_by_index>

0801257a <th_get>:
{
 801257a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t ip_len = net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt);
 801257e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
 8012582:	f890 8034 	ldrb.w	r8, [r0, #52]	; 0x34
	if (!net_pkt_is_contiguous(pkt, sizeof(*th))) {
 8012586:	f04f 0a14 	mov.w	sl, #20
	size_t ip_len = net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt);
 801258a:	4498      	add	r8, r3
{
 801258c:	b085      	sub	sp, #20
 801258e:	4604      	mov	r4, r0
	if (net_pkt_get_len(pkt) < (pos + len)) {
 8012590:	eb08 0b0a 	add.w	fp, r8, sl
	net_pkt_cursor_init(pkt);
 8012594:	4620      	mov	r0, r4
 8012596:	f7ff fa9d 	bl	8011ad4 <net_pkt_cursor_init>
 801259a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801259e:	f043 0301 	orr.w	r3, r3, #1
 80125a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	if (net_pkt_skip(pkt, ip_len) != 0) {
 80125a6:	4641      	mov	r1, r8
 80125a8:	4620      	mov	r0, r4
 80125aa:	f7ff faf8 	bl	8011b9e <net_pkt_skip>
 80125ae:	b978      	cbnz	r0, 80125d0 <th_get+0x56>
	if (!net_pkt_is_contiguous(pkt, sizeof(*th))) {
 80125b0:	2114      	movs	r1, #20
 80125b2:	4620      	mov	r0, r4
 80125b4:	f7ff fc6e 	bl	8011e94 <net_pkt_is_contiguous>
 80125b8:	4605      	mov	r5, r0
 80125ba:	2800      	cmp	r0, #0
 80125bc:	d147      	bne.n	801264e <th_get+0xd4>
	if (net_pkt_get_len(pkt) < (pos + len)) {
 80125be:	68a0      	ldr	r0, [r4, #8]
	struct net_buf *buf, *first = pkt->cursor.buf, *second = first->frags;
 80125c0:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (net_pkt_get_len(pkt) < (pos + len)) {
 80125c4:	f7ff ffb2 	bl	801252c <net_pkt_get_len.isra.0>
 80125c8:	4558      	cmp	r0, fp
	struct net_buf *buf, *first = pkt->cursor.buf, *second = first->frags;
 80125ca:	f8d9 7000 	ldr.w	r7, [r9]
	if (net_pkt_get_len(pkt) < (pos + len)) {
 80125ce:	d201      	bcs.n	80125d4 <th_get+0x5a>
	struct tcphdr *th = NULL;
 80125d0:	2000      	movs	r0, #0
	return th;
 80125d2:	e03d      	b.n	8012650 <th_get+0xd6>
	buf = net_pkt_get_frag(pkt, TCP_PKT_ALLOC_TIMEOUT);
 80125d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80125d8:	2300      	movs	r3, #0
 80125da:	4620      	mov	r0, r4
 80125dc:	f7f2 ff76 	bl	80054cc <net_pkt_get_frag>
	if (!buf || buf->size < len) {
 80125e0:	4606      	mov	r6, r0
 80125e2:	2800      	cmp	r0, #0
 80125e4:	d0f4      	beq.n	80125d0 <th_get+0x56>
 80125e6:	89c1      	ldrh	r1, [r0, #14]
 80125e8:	2913      	cmp	r1, #19
 80125ea:	d934      	bls.n	8012656 <th_get+0xdc>
	net_buf_linearize(buf->data, buf->size, pkt->frags, pos, len);
 80125ec:	4605      	mov	r5, r0
 80125ee:	f8cd a000 	str.w	sl, [sp]
 80125f2:	f855 0f08 	ldr.w	r0, [r5, #8]!
 80125f6:	68a2      	ldr	r2, [r4, #8]
 80125f8:	4643      	mov	r3, r8
 80125fa:	f7fd ffd4 	bl	80105a6 <net_buf_linearize>
	return net_buf_simple_add(&buf->b, len);
 80125fe:	2114      	movs	r1, #20
 8012600:	4628      	mov	r0, r5
 8012602:	f7fd fffa 	bl	80105fa <net_buf_simple_add>
	len1 = first->len - (pkt->cursor.pos - pkt->cursor.buf->data);
 8012606:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 801260a:	6889      	ldr	r1, [r1, #8]
 801260c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8012610:	1a5b      	subs	r3, r3, r1
 8012612:	1ad3      	subs	r3, r2, r3
	len2 = len - len1;
 8012614:	f1c3 0514 	rsb	r5, r3, #20
	first->len -= len1;
 8012618:	1ad3      	subs	r3, r2, r3
 801261a:	f8a9 300c 	strh.w	r3, [r9, #12]
	while (len2) {
 801261e:	b91d      	cbnz	r5, 8012628 <th_get+0xae>
	buf->frags = second;
 8012620:	6037      	str	r7, [r6, #0]
	first->frags = buf;
 8012622:	f8c9 6000 	str.w	r6, [r9]
	return ret;
 8012626:	e7b5      	b.n	8012594 <th_get+0x1a>
		size_t pull_len = MIN(second->len, len2);
 8012628:	89b9      	ldrh	r1, [r7, #12]
 801262a:	42a9      	cmp	r1, r5
 801262c:	bf28      	it	cs
 801262e:	4629      	movcs	r1, r5
	return net_buf_simple_pull(&buf->b, len);
 8012630:	f107 0008 	add.w	r0, r7, #8
		len2 -= pull_len;
 8012634:	1a6d      	subs	r5, r5, r1
 8012636:	f7fd ffe6 	bl	8010606 <net_buf_simple_pull>
		if (second->len == 0) {
 801263a:	89ba      	ldrh	r2, [r7, #12]
		next = second->frags;
 801263c:	683b      	ldr	r3, [r7, #0]
		if (second->len == 0) {
 801263e:	b922      	cbnz	r2, 801264a <th_get+0xd0>
			net_buf_unref(second);
 8012640:	4638      	mov	r0, r7
 8012642:	9303      	str	r3, [sp, #12]
 8012644:	f7f1 fce8 	bl	8004018 <net_buf_unref>
 8012648:	9b03      	ldr	r3, [sp, #12]
{
 801264a:	461f      	mov	r7, r3
 801264c:	e7e7      	b.n	801261e <th_get+0xa4>
	return pkt->cursor.pos;
 801264e:	6920      	ldr	r0, [r4, #16]
}
 8012650:	b005      	add	sp, #20
 8012652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			net_buf_unref(buf);
 8012656:	f7f1 fcdf 	bl	8004018 <net_buf_unref>
	struct tcphdr *th = NULL;
 801265a:	4628      	mov	r0, r5
 801265c:	e7f8      	b.n	8012650 <th_get+0xd6>

0801265e <tcp_endpoint_set>:
{
 801265e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return pkt->family;
 8012660:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
	switch (net_pkt_family(pkt)) {
 8012664:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8012668:	2b01      	cmp	r3, #1
{
 801266a:	4604      	mov	r4, r0
 801266c:	4617      	mov	r7, r2
 801266e:	4608      	mov	r0, r1
	switch (net_pkt_family(pkt)) {
 8012670:	d119      	bne.n	80126a6 <tcp_endpoint_set+0x48>
	return pkt->frags->data;
 8012672:	688b      	ldr	r3, [r1, #8]
 8012674:	689d      	ldr	r5, [r3, #8]
			th = th_get(pkt);
 8012676:	f7ff ff80 	bl	801257a <th_get>
			if (!th) {
 801267a:	4606      	mov	r6, r0
 801267c:	b1b0      	cbz	r0, 80126ac <tcp_endpoint_set+0x4e>
__ssp_bos_icheck3(memset, void *, int)
 801267e:	2218      	movs	r2, #24
 8012680:	2100      	movs	r1, #0
 8012682:	4620      	mov	r0, r4
 8012684:	f002 f8cd 	bl	8014822 <memset>
			ep->sin.sin_port = src == TCP_EP_SRC ? th_sport(th) :
 8012688:	2f01      	cmp	r7, #1
 801268a:	bf0c      	ite	eq
 801268c:	8833      	ldrheq	r3, [r6, #0]
							       th_dport(th);
 801268e:	8873      	ldrhne	r3, [r6, #2]
			ep->sin.sin_port = src == TCP_EP_SRC ? th_sport(th) :
 8012690:	8063      	strh	r3, [r4, #2]
			net_ipv4_addr_copy_raw((uint8_t *)&ep->sin.sin_addr,
 8012692:	2f01      	cmp	r7, #1
 8012694:	bf0c      	ite	eq
 8012696:	350c      	addeq	r5, #12
 8012698:	3510      	addne	r5, #16
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 801269a:	682b      	ldr	r3, [r5, #0]
 801269c:	6063      	str	r3, [r4, #4]
			ep->sa.sa_family = AF_INET;
 801269e:	2301      	movs	r3, #1
 80126a0:	8023      	strh	r3, [r4, #0]
	int ret = 0;
 80126a2:	2000      	movs	r0, #0
}
 80126a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ret = -EINVAL;
 80126a6:	f06f 0015 	mvn.w	r0, #21
 80126aa:	e7fb      	b.n	80126a4 <tcp_endpoint_set+0x46>
				return -ENOBUFS;
 80126ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80126b0:	e7f8      	b.n	80126a4 <tcp_endpoint_set+0x46>

080126b2 <tcp_endpoint_cmp>:
{
 80126b2:	b510      	push	{r4, lr}
 80126b4:	b086      	sub	sp, #24
 80126b6:	4604      	mov	r4, r0
	if (tcp_endpoint_set(&ep_tmp, pkt, which) < 0) {
 80126b8:	4668      	mov	r0, sp
 80126ba:	f7ff ffd0 	bl	801265e <tcp_endpoint_set>
 80126be:	2800      	cmp	r0, #0
 80126c0:	db0d      	blt.n	80126de <tcp_endpoint_cmp+0x2c>
	return (af == AF_INET) ? sizeof(struct sockaddr_in) :
 80126c2:	8823      	ldrh	r3, [r4, #0]
 80126c4:	2b01      	cmp	r3, #1
	return !memcmp(ep, &ep_tmp, tcp_endpoint_len(ep->sa.sa_family));
 80126c6:	bf0c      	ite	eq
 80126c8:	2208      	moveq	r2, #8
 80126ca:	2218      	movne	r2, #24
 80126cc:	4669      	mov	r1, sp
 80126ce:	4620      	mov	r0, r4
 80126d0:	f002 f85c 	bl	801478c <memcmp>
 80126d4:	fab0 f080 	clz	r0, r0
 80126d8:	0940      	lsrs	r0, r0, #5
}
 80126da:	b006      	add	sp, #24
 80126dc:	bd10      	pop	{r4, pc}
		return false;
 80126de:	2000      	movs	r0, #0
 80126e0:	e7fb      	b.n	80126da <tcp_endpoint_cmp+0x28>

080126e2 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 80126e2:	f7f9 bee5 	b.w	800c4b0 <z_impl_k_mutex_unlock>

080126e6 <tcp_cleanup_recv_queue>:
{
 80126e6:	b538      	push	{r3, r4, r5, lr}
 80126e8:	4604      	mov	r4, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
 80126ea:	f1a0 0584 	sub.w	r5, r0, #132	; 0x84
 80126ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126f2:	4628      	mov	r0, r5
 80126f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126f8:	f7ff ff16 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	net_buf_unref(conn->queue_recv_data->buffer);
 80126fc:	f854 3c9c 	ldr.w	r3, [r4, #-156]
 8012700:	6898      	ldr	r0, [r3, #8]
 8012702:	f7f1 fc89 	bl	8004018 <net_buf_unref>
	conn->queue_recv_data->buffer = NULL;
 8012706:	f854 3c9c 	ldr.w	r3, [r4, #-156]
 801270a:	2200      	movs	r2, #0
 801270c:	609a      	str	r2, [r3, #8]
	k_mutex_unlock(&conn->lock);
 801270e:	4628      	mov	r0, r5
}
 8012710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&conn->lock);
 8012714:	f7ff bfe5 	b.w	80126e2 <k_mutex_unlock.isra.0>

08012718 <tcp_send_queue_flush>:
{
 8012718:	b570      	push	{r4, r5, r6, lr}
 801271a:	4605      	mov	r5, r0
	k_work_cancel_delayable(&conn->send_timer);
 801271c:	3078      	adds	r0, #120	; 0x78
 801271e:	f001 fd5b 	bl	80141d8 <k_work_cancel_delayable>
	while ((pkt = tcp_slist(conn, &conn->send_queue, get,
 8012722:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8012726:	3518      	adds	r5, #24
 8012728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801272c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012730:	4630      	mov	r0, r6
 8012732:	f7ff fef9 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
 8012736:	4628      	mov	r0, r5
 8012738:	f7ff fee7 	bl	801250a <sys_slist_get>
 801273c:	4604      	mov	r4, r0
 801273e:	b108      	cbz	r0, 8012744 <tcp_send_queue_flush+0x2c>
 8012740:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
 8012744:	4630      	mov	r0, r6
 8012746:	f7ff ffcc 	bl	80126e2 <k_mutex_unlock.isra.0>
 801274a:	b904      	cbnz	r4, 801274e <tcp_send_queue_flush+0x36>
}
 801274c:	bd70      	pop	{r4, r5, r6, pc}
		tcp_pkt_unref(pkt);
 801274e:	4620      	mov	r0, r4
 8012750:	f7ff f950 	bl	80119f4 <net_pkt_unref>
 8012754:	e7e8      	b.n	8012728 <tcp_send_queue_flush+0x10>

08012756 <tcp_fin_timeout>:
	if (conn->state == TCP_SYN_RECEIVED) {
 8012756:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 801275a:	2a03      	cmp	r2, #3
 801275c:	f5a0 739c 	sub.w	r3, r0, #312	; 0x138
 8012760:	d102      	bne.n	8012768 <tcp_fin_timeout+0x12>
	(void)tcp_conn_unref(conn);
 8012762:	4618      	mov	r0, r3
 8012764:	f7f3 bd8c 	b.w	8006280 <tcp_conn_unref>
	net_context_unref(conn->context);
 8012768:	6858      	ldr	r0, [r3, #4]
 801276a:	f7fe bc2e 	b.w	8010fca <net_context_unref>

0801276e <tcp_send_process>:
{
 801276e:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
 8012770:	f1a0 0454 	sub.w	r4, r0, #84	; 0x54
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, send_timer);
 8012774:	f1a0 0678 	sub.w	r6, r0, #120	; 0x78
	k_mutex_lock(&conn->lock, K_FOREVER);
 8012778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801277c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012780:	4620      	mov	r0, r4
 8012782:	f7ff fed1 	bl	8012528 <k_mutex_lock.constprop.0.isra.0>
	unref = tcp_send_process_no_lock(conn);
 8012786:	4630      	mov	r0, r6
 8012788:	f7f3 fcc2 	bl	8006110 <tcp_send_process_no_lock>
 801278c:	4605      	mov	r5, r0
	k_mutex_unlock(&conn->lock);
 801278e:	4620      	mov	r0, r4
 8012790:	f7ff ffa7 	bl	80126e2 <k_mutex_unlock.isra.0>
	if (unref) {
 8012794:	b125      	cbz	r5, 80127a0 <tcp_send_process+0x32>
		tcp_conn_unref(conn);
 8012796:	4630      	mov	r0, r6
}
 8012798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		tcp_conn_unref(conn);
 801279c:	f7f3 bd70 	b.w	8006280 <tcp_conn_unref>
}
 80127a0:	bd70      	pop	{r4, r5, r6, pc}

080127a2 <net_tcp_unref>:
	if (context->tcp) {
 80127a2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80127a4:	b108      	cbz	r0, 80127aa <net_tcp_unref+0x8>
		ref_count = tcp_conn_unref(context->tcp);
 80127a6:	f7f3 bd6b 	b.w	8006280 <tcp_conn_unref>
}
 80127aa:	4770      	bx	lr

080127ac <net_tcp_listen>:
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 80127ac:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 80127b0:	f043 0306 	orr.w	r3, r3, #6
 80127b4:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
}
 80127b8:	2000      	movs	r0, #0
 80127ba:	4770      	bx	lr

080127bc <net_tcp_update_recv_wnd>:
}
 80127bc:	f06f 007a 	mvn.w	r0, #122	; 0x7a
 80127c0:	4770      	bx	lr

080127c2 <net_tcp_send_data>:
{
 80127c2:	b508      	push	{r3, lr}
	if (cb) {
 80127c4:	460b      	mov	r3, r1
 80127c6:	b109      	cbz	r1, 80127cc <net_tcp_send_data+0xa>
		cb(context, 0, user_data);
 80127c8:	2100      	movs	r1, #0
 80127ca:	4798      	blx	r3
}
 80127cc:	2000      	movs	r0, #0
 80127ce:	bd08      	pop	{r3, pc}

080127d0 <net_tcp_recv>:
	struct tcp *conn = context->tcp;
 80127d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	context->recv_cb = cb;
 80127d2:	6301      	str	r1, [r0, #48]	; 0x30
	if (conn) {
 80127d4:	b103      	cbz	r3, 80127d8 <net_tcp_recv+0x8>
		conn->recv_user_data = user_data;
 80127d6:	615a      	str	r2, [r3, #20]
}
 80127d8:	2000      	movs	r0, #0
 80127da:	4770      	bx	lr

080127dc <net_tcp_finalize>:
{
 80127dc:	b530      	push	{r4, r5, lr}
 80127de:	b089      	sub	sp, #36	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80127e0:	ab03      	add	r3, sp, #12
 80127e2:	9301      	str	r3, [sp, #4]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
 80127e4:	a901      	add	r1, sp, #4
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80127e6:	2314      	movs	r3, #20
{
 80127e8:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80127ea:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
 80127ec:	f7ff fb76 	bl	8011edc <net_pkt_get_data>
	if (!tcp_hdr) {
 80127f0:	4604      	mov	r4, r0
 80127f2:	b188      	cbz	r0, 8012818 <net_tcp_finalize+0x3c>
	tcp_hdr->chksum = 0U;
 80127f4:	2300      	movs	r3, #0
 80127f6:	7403      	strb	r3, [r0, #16]
 80127f8:	7443      	strb	r3, [r0, #17]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 80127fa:	69a8      	ldr	r0, [r5, #24]
 80127fc:	f7fe f97f 	bl	8010afe <net_if_need_calc_tx_checksum>
 8012800:	b120      	cbz	r0, 801280c <net_tcp_finalize+0x30>
	return net_calc_chksum(pkt, IPPROTO_TCP);
 8012802:	2106      	movs	r1, #6
 8012804:	4628      	mov	r0, r5
 8012806:	f7fe fae8 	bl	8010dda <net_calc_chksum>
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
 801280a:	8220      	strh	r0, [r4, #16]
	return net_pkt_set_data(pkt, &tcp_access);
 801280c:	a901      	add	r1, sp, #4
 801280e:	4628      	mov	r0, r5
 8012810:	f7ff fb83 	bl	8011f1a <net_pkt_set_data>
}
 8012814:	b009      	add	sp, #36	; 0x24
 8012816:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
 8012818:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801281c:	e7fa      	b.n	8012814 <net_tcp_finalize+0x38>

0801281e <net_tcp_input>:
{
 801281e:	b570      	push	{r4, r5, r6, lr}
 8012820:	4604      	mov	r4, r0
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 8012822:	6980      	ldr	r0, [r0, #24]
{
 8012824:	460e      	mov	r6, r1
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 8012826:	f7fe f96c 	bl	8010b02 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
 801282a:	b940      	cbnz	r0, 801283e <net_tcp_input+0x20>
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, tcp_access);
 801282c:	4631      	mov	r1, r6
 801282e:	4620      	mov	r0, r4
 8012830:	f7ff fb54 	bl	8011edc <net_pkt_get_data>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
 8012834:	4605      	mov	r5, r0
 8012836:	b948      	cbnz	r0, 801284c <net_tcp_input+0x2e>
	return NULL;
 8012838:	2500      	movs	r5, #0
}
 801283a:	4628      	mov	r0, r5
 801283c:	bd70      	pop	{r4, r5, r6, pc}
 801283e:	2106      	movs	r1, #6
 8012840:	4620      	mov	r0, r4
 8012842:	f7fe faca 	bl	8010dda <net_calc_chksum>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 8012846:	2800      	cmp	r0, #0
 8012848:	d0f0      	beq.n	801282c <net_tcp_input+0xe>
 801284a:	e7f5      	b.n	8012838 <net_tcp_input+0x1a>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
 801284c:	4631      	mov	r1, r6
 801284e:	4620      	mov	r0, r4
 8012850:	f7ff fb63 	bl	8011f1a <net_pkt_set_data>
 8012854:	2800      	cmp	r0, #0
 8012856:	d0f0      	beq.n	801283a <net_tcp_input+0x1c>
drop:
 8012858:	e7ee      	b.n	8012838 <net_tcp_input+0x1a>

0801285a <net_tcp_get_recv_mss>:
	sa_family_t family = net_context_get_family(conn->context);
 801285a:	6842      	ldr	r2, [r0, #4]
{
 801285c:	b508      	push	{r3, lr}
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 801285e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
	if (family == AF_INET) {
 8012862:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8012866:	2b01      	cmp	r3, #1
 8012868:	d001      	beq.n	801286e <net_tcp_get_recv_mss+0x14>
	return 0;
 801286a:	2000      	movs	r0, #0
}
 801286c:	bd08      	pop	{r3, pc}
		struct net_if *iface = net_context_get_iface(conn->context);
 801286e:	f992 0088 	ldrsb.w	r0, [r2, #136]	; 0x88
 8012872:	f7ff fe80 	bl	8012576 <net_context_get_iface.isra.0>
		if (iface && net_if_get_mtu(iface) >= NET_IPV4TCPH_LEN) {
 8012876:	2800      	cmp	r0, #0
 8012878:	d0f7      	beq.n	801286a <net_tcp_get_recv_mss+0x10>
	return iface->if_dev->mtu;
 801287a:	6803      	ldr	r3, [r0, #0]
 801287c:	8b98      	ldrh	r0, [r3, #28]
 801287e:	2827      	cmp	r0, #39	; 0x27
 8012880:	d9f3      	bls.n	801286a <net_tcp_get_recv_mss+0x10>
			return net_if_get_mtu(iface) - NET_IPV4TCPH_LEN;
 8012882:	3828      	subs	r0, #40	; 0x28
 8012884:	b280      	uxth	r0, r0
 8012886:	e7f1      	b.n	801286c <net_tcp_get_recv_mss+0x12>

08012888 <tcp_send_data>:
{
 8012888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pos = conn->unacked_len;
 801288c:	f8d0 81a0 	ldr.w	r8, [r0, #416]	; 0x1a0
	len = MIN3(conn->send_data_total - conn->unacked_len,
 8012890:	f8d0 5198 	ldr.w	r5, [r0, #408]	; 0x198
 8012894:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8012898:	eba5 0208 	sub.w	r2, r5, r8
 801289c:	f8b0 51b6 	ldrh.w	r5, [r0, #438]	; 0x1b6
 80128a0:	07db      	lsls	r3, r3, #31
{
 80128a2:	4604      	mov	r4, r0
	len = MIN3(conn->send_data_total - conn->unacked_len,
 80128a4:	eba5 0508 	sub.w	r5, r5, r8
 80128a8:	d561      	bpl.n	801296e <tcp_send_data+0xe6>
 80128aa:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80128ae:	429d      	cmp	r5, r3
 80128b0:	bfb4      	ite	lt
 80128b2:	4629      	movlt	r1, r5
 80128b4:	4619      	movge	r1, r3
 80128b6:	428a      	cmp	r2, r1
 80128b8:	d234      	bcs.n	8012924 <tcp_send_data+0x9c>
 80128ba:	4615      	mov	r5, r2
	if (len == 0) {
 80128bc:	2d00      	cmp	r5, #0
 80128be:	d053      	beq.n	8012968 <tcp_send_data+0xe0>
	pkt = tcp_pkt_alloc(conn, len);
 80128c0:	dd34      	ble.n	801292c <tcp_send_data+0xa4>
 80128c2:	6863      	ldr	r3, [r4, #4]
 80128c4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80128c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80128cc:	2100      	movs	r1, #0
 80128ce:	e9cd 0100 	strd	r0, r1, [sp]
 80128d2:	2306      	movs	r3, #6
 80128d4:	6920      	ldr	r0, [r4, #16]
 80128d6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
 80128da:	4629      	mov	r1, r5
 80128dc:	f7f2 ff0e 	bl	80056fc <net_pkt_alloc_with_buffer>
 80128e0:	4606      	mov	r6, r0
	if (!pkt) {
 80128e2:	b1e0      	cbz	r0, 801291e <tcp_send_data+0x96>
	ret = tcp_pkt_peek(pkt, conn->send_data, pos, len);
 80128e4:	68a7      	ldr	r7, [r4, #8]
	net_pkt_cursor_init(to);
 80128e6:	f7ff f8f5 	bl	8011ad4 <net_pkt_cursor_init>
	net_pkt_cursor_init(from);
 80128ea:	4638      	mov	r0, r7
 80128ec:	f7ff f8f2 	bl	8011ad4 <net_pkt_cursor_init>
	if (pos) {
 80128f0:	f1b8 0f00 	cmp.w	r8, #0
 80128f4:	d009      	beq.n	801290a <tcp_send_data+0x82>
	pkt->overwrite = overwrite;
 80128f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80128fa:	f043 0301 	orr.w	r3, r3, #1
 80128fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		net_pkt_skip(from, pos);
 8012902:	4641      	mov	r1, r8
 8012904:	4638      	mov	r0, r7
 8012906:	f7ff f94a 	bl	8011b9e <net_pkt_skip>
	return net_pkt_copy(to, from, len);
 801290a:	462a      	mov	r2, r5
 801290c:	4639      	mov	r1, r7
 801290e:	4630      	mov	r0, r6
 8012910:	f7ff f970 	bl	8011bf4 <net_pkt_copy>
	if (ret < 0) {
 8012914:	2800      	cmp	r0, #0
 8012916:	da0f      	bge.n	8012938 <tcp_send_data+0xb0>
		tcp_pkt_unref(pkt);
 8012918:	4630      	mov	r0, r6
 801291a:	f7ff f86b 	bl	80119f4 <net_pkt_unref>
		ret = -ENOBUFS;
 801291e:	f06f 0768 	mvn.w	r7, #104	; 0x68
	return ret;
 8012922:	e01d      	b.n	8012960 <tcp_send_data+0xd8>
	len = MIN3(conn->send_data_total - conn->unacked_len,
 8012924:	429d      	cmp	r5, r3
 8012926:	bfa8      	it	ge
 8012928:	461d      	movge	r5, r3
 801292a:	e7c7      	b.n	80128bc <tcp_send_data+0x34>
	pkt = tcp_pkt_alloc(conn, len);
 801292c:	2100      	movs	r1, #0
 801292e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012932:	f7f2 fe21 	bl	8005578 <net_pkt_alloc>
 8012936:	e7d3      	b.n	80128e0 <tcp_send_data+0x58>
	ret = tcp_out_ext(conn, PSH | ACK, pkt, conn->seq + conn->unacked_len);
 8012938:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
 801293c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8012940:	2118      	movs	r1, #24
 8012942:	4413      	add	r3, r2
 8012944:	4620      	mov	r0, r4
 8012946:	4632      	mov	r2, r6
 8012948:	f7f3 fecc 	bl	80066e4 <tcp_out_ext>
	if (ret == 0) {
 801294c:	4607      	mov	r7, r0
 801294e:	b920      	cbnz	r0, 801295a <tcp_send_data+0xd2>
		conn->unacked_len += len;
 8012950:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8012954:	442b      	add	r3, r5
 8012956:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
	tcp_pkt_unref(pkt);
 801295a:	4630      	mov	r0, r6
 801295c:	f7ff f84a 	bl	80119f4 <net_pkt_unref>
}
 8012960:	4638      	mov	r0, r7
 8012962:	b002      	add	sp, #8
 8012964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -ENODATA;
 8012968:	f06f 073c 	mvn.w	r7, #60	; 0x3c
 801296c:	e7f8      	b.n	8012960 <tcp_send_data+0xd8>
	len = MIN3(conn->send_data_total - conn->unacked_len,
 801296e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8012972:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 8012976:	e79b      	b.n	80128b0 <tcp_send_data+0x28>

08012978 <tcp_out>:
	(void)tcp_out_ext(conn, flags, NULL /* no data */, conn->seq);
 8012978:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 801297c:	2200      	movs	r2, #0
 801297e:	f7f3 beb1 	b.w	80066e4 <tcp_out_ext>

08012982 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, uint16_t src_port, uint16_t dst_port)
{
 8012982:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8012984:	2308      	movs	r3, #8
{
 8012986:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8012988:	eb0d 0103 	add.w	r1, sp, r3
{
 801298c:	4604      	mov	r4, r0
 801298e:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8012990:	f8cd d008 	str.w	sp, [sp, #8]
 8012994:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8012996:	f7ff faa1 	bl	8011edc <net_pkt_get_data>
	if (!udp_hdr) {
 801299a:	b160      	cbz	r0, 80129b6 <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
 801299c:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
 801299e:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
 80129a0:	8045      	strh	r5, [r0, #2]
	udp_hdr->len      = 0U;
 80129a2:	7103      	strb	r3, [r0, #4]
 80129a4:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
 80129a6:	7183      	strb	r3, [r0, #6]
 80129a8:	71c3      	strb	r3, [r0, #7]

	return net_pkt_set_data(pkt, &udp_access);
 80129aa:	a902      	add	r1, sp, #8
 80129ac:	4620      	mov	r0, r4
 80129ae:	f7ff fab4 	bl	8011f1a <net_pkt_set_data>
}
 80129b2:	b004      	add	sp, #16
 80129b4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 80129b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80129ba:	e7fa      	b.n	80129b2 <net_udp_create+0x30>

080129bc <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
 80129bc:	b530      	push	{r4, r5, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 80129be:	2308      	movs	r3, #8
{
 80129c0:	b085      	sub	sp, #20
	struct net_udp_hdr *udp_hdr;
	uint16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 80129c2:	eb0d 0103 	add.w	r1, sp, r3
{
 80129c6:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 80129c8:	f8cd d008 	str.w	sp, [sp, #8]
 80129cc:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 80129ce:	f7ff fa85 	bl	8011edc <net_pkt_get_data>
	if (!udp_hdr) {
 80129d2:	4605      	mov	r5, r0
 80129d4:	b310      	cbz	r0, 8012a1c <net_udp_finalize+0x60>
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
 80129d6:	68a2      	ldr	r2, [r4, #8]
	size_t bytes = 0;
 80129d8:	2300      	movs	r3, #0
	while (buf) {
 80129da:	b9da      	cbnz	r2, 8012a14 <net_udp_finalize+0x58>
 80129dc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	return pkt->ipv4_opts_len;
 80129e0:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 80129e4:	69a0      	ldr	r0, [r4, #24]
	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
 80129e6:	440a      	add	r2, r1
 80129e8:	1a9b      	subs	r3, r3, r2
	udp_hdr->len = htons(length);
 80129ea:	ba5b      	rev16	r3, r3
 80129ec:	80ab      	strh	r3, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 80129ee:	f7fe f886 	bl	8010afe <net_if_need_calc_tx_checksum>
 80129f2:	b148      	cbz	r0, 8012a08 <net_udp_finalize+0x4c>
	uint16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
 80129f4:	2111      	movs	r1, #17
 80129f6:	4620      	mov	r0, r4
 80129f8:	f7fe f9ef 	bl	8010dda <net_calc_chksum>
	return chksum == 0U ? 0xffff : chksum;
 80129fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012a00:	2800      	cmp	r0, #0
 8012a02:	bf18      	it	ne
 8012a04:	4603      	movne	r3, r0
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
 8012a06:	80eb      	strh	r3, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
 8012a08:	a902      	add	r1, sp, #8
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	f7ff fa85 	bl	8011f1a <net_pkt_set_data>
}
 8012a10:	b005      	add	sp, #20
 8012a12:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
 8012a14:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
 8012a16:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
 8012a18:	440b      	add	r3, r1
		buf = buf->frags;
 8012a1a:	e7de      	b.n	80129da <net_udp_finalize+0x1e>
		return -ENOBUFS;
 8012a1c:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8012a20:	e7f6      	b.n	8012a10 <net_udp_finalize+0x54>

08012a22 <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
 8012a22:	b570      	push	{r4, r5, r6, lr}
 8012a24:	4604      	mov	r4, r0
 8012a26:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
 8012a28:	f7ff fa58 	bl	8011edc <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
 8012a2c:	4605      	mov	r5, r0
 8012a2e:	b910      	cbnz	r0, 8012a36 <net_udp_input+0x14>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
 8012a30:	2500      	movs	r5, #0
}
 8012a32:	4628      	mov	r0, r5
 8012a34:	bd70      	pop	{r4, r5, r6, pc}
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
 8012a36:	4631      	mov	r1, r6
 8012a38:	4620      	mov	r0, r4
 8012a3a:	f7ff fa6e 	bl	8011f1a <net_pkt_set_data>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2800      	cmp	r0, #0
 8012a42:	d1f5      	bne.n	8012a30 <net_udp_input+0xe>
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
 8012a44:	88aa      	ldrh	r2, [r5, #4]
 8012a46:	68a1      	ldr	r1, [r4, #8]
 8012a48:	ba52      	rev16	r2, r2
 8012a4a:	b292      	uxth	r2, r2
	while (buf) {
 8012a4c:	b9b1      	cbnz	r1, 8012a7c <net_udp_input+0x5a>
				    net_pkt_ip_hdr_len(pkt) -
 8012a4e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
				    net_pkt_ip_opts_len(pkt))) {
 8012a52:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
				    net_pkt_ip_hdr_len(pkt) -
 8012a56:	4408      	add	r0, r1
 8012a58:	1a1b      	subs	r3, r3, r0
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d1e8      	bne.n	8012a30 <net_udp_input+0xe>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
 8012a5e:	69a0      	ldr	r0, [r4, #24]
 8012a60:	f7fe f84f 	bl	8010b02 <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
 8012a64:	2800      	cmp	r0, #0
 8012a66:	d0e4      	beq.n	8012a32 <net_udp_input+0x10>
		if (!udp_hdr->chksum) {
 8012a68:	88eb      	ldrh	r3, [r5, #6]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d0e0      	beq.n	8012a30 <net_udp_input+0xe>
	return net_calc_chksum(pkt, IPPROTO_UDP);
 8012a6e:	2111      	movs	r1, #17
 8012a70:	4620      	mov	r0, r4
 8012a72:	f7fe f9b2 	bl	8010dda <net_calc_chksum>
		if (net_calc_verify_chksum_udp(pkt) != 0U) {
 8012a76:	2800      	cmp	r0, #0
 8012a78:	d0db      	beq.n	8012a32 <net_udp_input+0x10>
 8012a7a:	e7d9      	b.n	8012a30 <net_udp_input+0xe>
		bytes += buf->len;
 8012a7c:	8988      	ldrh	r0, [r1, #12]
		buf = buf->frags;
 8012a7e:	6809      	ldr	r1, [r1, #0]
		bytes += buf->len;
 8012a80:	4403      	add	r3, r0
		buf = buf->frags;
 8012a82:	e7e3      	b.n	8012a4c <net_udp_input+0x2a>

08012a84 <cmd_net_tcp>:
}
 8012a84:	2000      	movs	r0, #0
 8012a86:	4770      	bx	lr

08012a88 <cmd_net_vlan_add>:
 8012a88:	f7f4 be3a 	b.w	8007700 <cmd_net_vlan>

08012a8c <cmd_net_vlan_del>:
 8012a8c:	f7f4 be38 	b.w	8007700 <cmd_net_vlan>

08012a90 <cmd_net_stats_iface>:
 8012a90:	f7f4 be6e 	b.w	8007770 <cmd_net_stats_all>

08012a94 <cmd_net_stats>:
 8012a94:	f7f4 be6c 	b.w	8007770 <cmd_net_stats_all>

08012a98 <cmd_net_gptp>:
 8012a98:	f7f4 bed4 	b.w	8007844 <cmd_net_gptp_port>

08012a9c <cmd_net_capture_setup>:
 8012a9c:	f7f4 bf0a 	b.w	80078b4 <cmd_net_capture>

08012aa0 <cmd_net_capture_cleanup>:
 8012aa0:	f7f4 bf08 	b.w	80078b4 <cmd_net_capture>

08012aa4 <cmd_net_capture_enable>:
 8012aa4:	f7f4 bf06 	b.w	80078b4 <cmd_net_capture>

08012aa8 <cmd_net_capture_disable>:
 8012aa8:	f7f4 bf04 	b.w	80078b4 <cmd_net_capture>

08012aac <parse_arg>:
{
 8012aac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const char *str = argv[*i] + 2;
 8012aae:	6803      	ldr	r3, [r0, #0]
 8012ab0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	if (*str == 0) {
 8012ab4:	78a6      	ldrb	r6, [r4, #2]
	const char *str = argv[*i] + 2;
 8012ab6:	009d      	lsls	r5, r3, #2
	if (*str == 0) {
 8012ab8:	b1b6      	cbz	r6, 8012ae8 <parse_arg+0x3c>
	const char *str = argv[*i] + 2;
 8012aba:	3402      	adds	r4, #2
	errno = 0;
 8012abc:	f7fd fd49 	bl	8010552 <__errno>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	6003      	str	r3, [r0, #0]
	res = strtol(str, &endptr, 10);
 8012ac4:	220a      	movs	r2, #10
 8012ac6:	a901      	add	r1, sp, #4
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f7fa ff03 	bl	800d8d4 <strtol>
 8012ace:	4605      	mov	r5, r0
	if (errno || (endptr == str)) {
 8012ad0:	f7fd fd3f 	bl	8010552 <__errno>
 8012ad4:	6803      	ldr	r3, [r0, #0]
 8012ad6:	b913      	cbnz	r3, 8012ade <parse_arg+0x32>
 8012ad8:	9b01      	ldr	r3, [sp, #4]
 8012ada:	42a3      	cmp	r3, r4
 8012adc:	d101      	bne.n	8012ae2 <parse_arg+0x36>
		return -1;
 8012ade:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	b002      	add	sp, #8
 8012ae6:	bd70      	pop	{r4, r5, r6, pc}
		if (*i + 1 >= argc) {
 8012ae8:	3301      	adds	r3, #1
 8012aea:	428b      	cmp	r3, r1
 8012aec:	d2f7      	bcs.n	8012ade <parse_arg+0x32>
		str = argv[*i];
 8012aee:	442a      	add	r2, r5
		*i += 1;
 8012af0:	6003      	str	r3, [r0, #0]
		str = argv[*i];
 8012af2:	6854      	ldr	r4, [r2, #4]
 8012af4:	e7e2      	b.n	8012abc <parse_arg+0x10>

08012af6 <net_if_get_by_index>:
 8012af6:	f7f1 bdf9 	b.w	80046ec <z_impl_net_if_get_by_index>

08012afa <cmd_net_udp>:
 8012afa:	2000      	movs	r0, #0
 8012afc:	4770      	bx	lr

08012afe <net_if_flag_is_set>:
	if (iface == NULL) {
 8012afe:	b140      	cbz	r0, 8012b12 <net_if_flag_is_set+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8012b00:	6803      	ldr	r3, [r0, #0]
 8012b02:	f3bf 8f5b 	dmb	ish
 8012b06:	68d8      	ldr	r0, [r3, #12]
 8012b08:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 8012b0c:	4108      	asrs	r0, r1
 8012b0e:	f000 0001 	and.w	r0, r0, #1
}
 8012b12:	4770      	bx	lr

08012b14 <net_shell_init>:

	(void)cmd_net_events_on(shell_backend_uart_get_ptr(), 1, argv);
#endif

	return 0;
}
 8012b14:	2000      	movs	r0, #0
 8012b16:	4770      	bx	lr

08012b18 <iface_find_cb>:
	if (*iface_to_use == NULL &&
 8012b18:	680b      	ldr	r3, [r1, #0]
 8012b1a:	b953      	cbnz	r3, 8012b32 <iface_find_cb+0x1a>
	if (iface == NULL) {
 8012b1c:	b908      	cbnz	r0, 8012b22 <iface_find_cb+0xa>
		*iface_to_use = iface;
 8012b1e:	6008      	str	r0, [r1, #0]
		return;
 8012b20:	4770      	bx	lr
 8012b22:	6803      	ldr	r3, [r0, #0]
 8012b24:	f3bf 8f5b 	dmb	ish
 8012b28:	68db      	ldr	r3, [r3, #12]
 8012b2a:	f3bf 8f5b 	dmb	ish
	if (*iface_to_use == NULL &&
 8012b2e:	071b      	lsls	r3, r3, #28
 8012b30:	d5f5      	bpl.n	8012b1e <iface_find_cb+0x6>
}
 8012b32:	4770      	bx	lr

08012b34 <z_impl_sys_rand_get>:

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
	rand_get(dst, outlen, false);
 8012b34:	2200      	movs	r2, #0
 8012b36:	f7f6 b8ed 	b.w	8008d14 <rand_get>

08012b3a <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8012b3a:	2200      	movs	r2, #0
{
 8012b3c:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8012b3e:	4611      	mov	r1, r2
 8012b40:	2006      	movs	r0, #6
 8012b42:	f7f0 fe4b 	bl	80037dc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8012b46:	2200      	movs	r2, #0
 8012b48:	4611      	mov	r1, r2
 8012b4a:	2007      	movs	r0, #7
 8012b4c:	f7f0 fe46 	bl	80037dc <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8012b50:	2200      	movs	r2, #0
 8012b52:	4611      	mov	r1, r2
 8012b54:	2008      	movs	r0, #8
 8012b56:	f7f0 fe41 	bl	80037dc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	4611      	mov	r1, r2
 8012b5e:	2009      	movs	r0, #9
 8012b60:	f7f0 fe3c 	bl	80037dc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8012b64:	2200      	movs	r2, #0
 8012b66:	4611      	mov	r1, r2
 8012b68:	200a      	movs	r0, #10
 8012b6a:	f7f0 fe37 	bl	80037dc <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8012b6e:	2200      	movs	r2, #0
 8012b70:	4611      	mov	r1, r2
 8012b72:	2017      	movs	r0, #23
 8012b74:	f7f0 fe32 	bl	80037dc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8012b78:	2200      	movs	r2, #0
 8012b7a:	4611      	mov	r1, r2
 8012b7c:	2028      	movs	r0, #40	; 0x28
 8012b7e:	f7f0 fe2d 	bl	80037dc <z_arm_irq_priority_set>
}
 8012b82:	2000      	movs	r0, #0
 8012b84:	bd08      	pop	{r3, pc}

08012b86 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8012b86:	6902      	ldr	r2, [r0, #16]
 8012b88:	2110      	movs	r1, #16
 8012b8a:	200a      	movs	r0, #10
 8012b8c:	f7f6 b906 	b.w	8008d9c <__stm32_exti_isr.isra.0>

08012b90 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8012b90:	6902      	ldr	r2, [r0, #16]
 8012b92:	210a      	movs	r1, #10
 8012b94:	2005      	movs	r0, #5
 8012b96:	f7f6 b901 	b.w	8008d9c <__stm32_exti_isr.isra.0>

08012b9a <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8012b9a:	6902      	ldr	r2, [r0, #16]
 8012b9c:	2105      	movs	r1, #5
 8012b9e:	2004      	movs	r0, #4
 8012ba0:	f7f6 b8fc 	b.w	8008d9c <__stm32_exti_isr.isra.0>

08012ba4 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8012ba4:	6902      	ldr	r2, [r0, #16]
 8012ba6:	2104      	movs	r1, #4
 8012ba8:	2003      	movs	r0, #3
 8012baa:	f7f6 b8f7 	b.w	8008d9c <__stm32_exti_isr.isra.0>

08012bae <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8012bae:	6902      	ldr	r2, [r0, #16]
 8012bb0:	2103      	movs	r1, #3
 8012bb2:	2002      	movs	r0, #2
 8012bb4:	f7f6 b8f2 	b.w	8008d9c <__stm32_exti_isr.isra.0>

08012bb8 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8012bb8:	6902      	ldr	r2, [r0, #16]
 8012bba:	2102      	movs	r1, #2
 8012bbc:	2001      	movs	r0, #1
 8012bbe:	f7f6 b8ed 	b.w	8008d9c <__stm32_exti_isr.isra.0>

08012bc2 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8012bc2:	6902      	ldr	r2, [r0, #16]
 8012bc4:	2101      	movs	r1, #1
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	f7f6 b8e8 	b.w	8008d9c <__stm32_exti_isr.isra.0>

08012bcc <config_pll_init>:
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8012bcc:	2314      	movs	r3, #20
 8012bce:	2200      	movs	r2, #0
 8012bd0:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 8012bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012bd8:	6083      	str	r3, [r0, #8]
}
 8012bda:	4770      	bx	lr

08012bdc <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012bdc:	6843      	ldr	r3, [r0, #4]
 8012bde:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8012be0:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8012be2:	600b      	str	r3, [r1, #0]
}
 8012be4:	2000      	movs	r0, #0
 8012be6:	4770      	bx	lr

08012be8 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012be8:	6843      	ldr	r3, [r0, #4]
 8012bea:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8012bec:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8012bee:	4042      	eors	r2, r0
 8012bf0:	400a      	ands	r2, r1
 8012bf2:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8012bf4:	615a      	str	r2, [r3, #20]
}
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	4770      	bx	lr

08012bfa <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012bfa:	6843      	ldr	r3, [r0, #4]
 8012bfc:	685b      	ldr	r3, [r3, #4]
}
 8012bfe:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8012c00:	6199      	str	r1, [r3, #24]
}
 8012c02:	4770      	bx	lr

08012c04 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012c04:	6843      	ldr	r3, [r0, #4]
 8012c06:	685b      	ldr	r3, [r3, #4]
}
 8012c08:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8012c0a:	6299      	str	r1, [r3, #40]	; 0x28
 8012c0c:	4770      	bx	lr

08012c0e <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012c0e:	6843      	ldr	r3, [r0, #4]
 8012c10:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8012c12:	6953      	ldr	r3, [r2, #20]
 8012c14:	404b      	eors	r3, r1
 8012c16:	6153      	str	r3, [r2, #20]
}
 8012c18:	2000      	movs	r0, #0
 8012c1a:	4770      	bx	lr

08012c1c <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 8012c1c:	6903      	ldr	r3, [r0, #16]
	return list->head;
 8012c1e:	6898      	ldr	r0, [r3, #8]
{
 8012c20:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8012c22:	b158      	cbz	r0, 8012c3c <gpio_stm32_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8012c24:	2400      	movs	r4, #0
 8012c26:	4281      	cmp	r1, r0
 8012c28:	d112      	bne.n	8012c50 <gpio_stm32_manage_callback+0x34>
	return node->next;
 8012c2a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8012c2c:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8012c2e:	b954      	cbnz	r4, 8012c46 <gpio_stm32_manage_callback+0x2a>
 8012c30:	428d      	cmp	r5, r1
	list->head = node;
 8012c32:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8012c34:	d100      	bne.n	8012c38 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8012c36:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8012c38:	2000      	movs	r0, #0
 8012c3a:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8012c3c:	b96a      	cbnz	r2, 8012c5a <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8012c3e:	2000      	movs	r0, #0
}
 8012c40:	bd30      	pop	{r4, r5, pc}
 8012c42:	4628      	mov	r0, r5
 8012c44:	e7ef      	b.n	8012c26 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8012c46:	428d      	cmp	r5, r1
	parent->next = child;
 8012c48:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8012c4a:	bf08      	it	eq
 8012c4c:	60dc      	streq	r4, [r3, #12]
}
 8012c4e:	e7f3      	b.n	8012c38 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8012c50:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8012c52:	4604      	mov	r4, r0
 8012c54:	2d00      	cmp	r5, #0
 8012c56:	d1f4      	bne.n	8012c42 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8012c58:	b13a      	cbz	r2, 8012c6a <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8012c5a:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8012c5c:	689a      	ldr	r2, [r3, #8]
 8012c5e:	600a      	str	r2, [r1, #0]
	list->head = node;
 8012c60:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8012c62:	2800      	cmp	r0, #0
 8012c64:	d1eb      	bne.n	8012c3e <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8012c66:	60d9      	str	r1, [r3, #12]
}
 8012c68:	e7ea      	b.n	8012c40 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8012c6a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8012c6e:	e7e7      	b.n	8012c40 <gpio_stm32_manage_callback+0x24>

08012c70 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8012c70:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012c72:	6844      	ldr	r4, [r0, #4]
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8012c74:	f002 0530 	and.w	r5, r2, #48	; 0x30
	if (mode == STM32_MODER_ANALOG_MODE) {
 8012c78:	2d30      	cmp	r5, #48	; 0x30
  SET_BIT(GPIOx->ASCR, PinMask);
 8012c7a:	bf08      	it	eq
 8012c7c:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
	pinval = 1 << pin;
 8012c7e:	f04f 0001 	mov.w	r0, #1
 8012c82:	fa00 f001 	lsl.w	r0, r0, r1
 8012c86:	bf04      	itt	eq
 8012c88:	4306      	orreq	r6, r0
 8012c8a:	62e6      	streq	r6, [r4, #44]	; 0x2c
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8012c8c:	6867      	ldr	r7, [r4, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8012c8e:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8012c92:	ea27 0700 	bic.w	r7, r7, r0
 8012c96:	408e      	lsls	r6, r1
 8012c98:	433e      	orrs	r6, r7
 8012c9a:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012c9c:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8012ca0:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8012ca4:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8012ca8:	f04f 0e03 	mov.w	lr, #3
 8012cac:	007f      	lsls	r7, r7, #1
 8012cae:	fa0e f707 	lsl.w	r7, lr, r7
 8012cb2:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012cb6:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8012cba:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8012cbe:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8012cc2:	007f      	lsls	r7, r7, #1
 8012cc4:	40be      	lsls	r6, r7
 8012cc6:	ea46 060c 	orr.w	r6, r6, ip
 8012cca:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012ccc:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8012cd0:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8012cd4:	68e7      	ldr	r7, [r4, #12]
 8012cd6:	0076      	lsls	r6, r6, #1
 8012cd8:	fa0e f606 	lsl.w	r6, lr, r6
 8012cdc:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012ce0:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8012ce4:	fab6 f686 	clz	r6, r6
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8012ce8:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8012cec:	0076      	lsls	r6, r6, #1
 8012cee:	40b2      	lsls	r2, r6
 8012cf0:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8012cf2:	2d20      	cmp	r5, #32
 8012cf4:	60e2      	str	r2, [r4, #12]
 8012cf6:	d115      	bne.n	8012d24 <gpio_stm32_configure_raw.isra.0+0xb4>
		if (pin < 8) {
 8012cf8:	2907      	cmp	r1, #7
 8012cfa:	dc2b      	bgt.n	8012d54 <gpio_stm32_configure_raw.isra.0+0xe4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012cfc:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8012d00:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8012d02:	b32a      	cbz	r2, 8012d50 <gpio_stm32_configure_raw.isra.0+0xe0>
  return __builtin_clz(value);
 8012d04:	fab2 f282 	clz	r2, r2
 8012d08:	0092      	lsls	r2, r2, #2
 8012d0a:	260f      	movs	r6, #15
 8012d0c:	fa06 f202 	lsl.w	r2, r6, r2
 8012d10:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d14:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8012d18:	fab2 f282 	clz	r2, r2
 8012d1c:	0092      	lsls	r2, r2, #2
 8012d1e:	4093      	lsls	r3, r2
 8012d20:	430b      	orrs	r3, r1
 8012d22:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d24:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8012d28:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8012d2c:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d2e:	fa90 f0a0 	rbit	r0, r0
 8012d32:	005b      	lsls	r3, r3, #1
 8012d34:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8012d36:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8012d3a:	092d      	lsrs	r5, r5, #4
 8012d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8012d40:	0040      	lsls	r0, r0, #1
 8012d42:	ea22 0303 	bic.w	r3, r2, r3
 8012d46:	fa05 f000 	lsl.w	r0, r5, r0
 8012d4a:	4318      	orrs	r0, r3
 8012d4c:	6020      	str	r0, [r4, #0]
}
 8012d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8012d50:	462a      	mov	r2, r5
 8012d52:	e7d9      	b.n	8012d08 <gpio_stm32_configure_raw.isra.0+0x98>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8012d54:	0a02      	lsrs	r2, r0, #8
 8012d56:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d58:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8012d5c:	b181      	cbz	r1, 8012d80 <gpio_stm32_configure_raw.isra.0+0x110>
  return __builtin_clz(value);
 8012d5e:	fab1 f181 	clz	r1, r1
 8012d62:	0089      	lsls	r1, r1, #2
 8012d64:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d66:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8012d6a:	fab2 f282 	clz	r2, r2
 8012d6e:	fa07 f101 	lsl.w	r1, r7, r1
 8012d72:	0092      	lsls	r2, r2, #2
 8012d74:	ea26 0101 	bic.w	r1, r6, r1
 8012d78:	4093      	lsls	r3, r2
 8012d7a:	430b      	orrs	r3, r1
 8012d7c:	6263      	str	r3, [r4, #36]	; 0x24
}
 8012d7e:	e7d1      	b.n	8012d24 <gpio_stm32_configure_raw.isra.0+0xb4>
    return 32U;
 8012d80:	4629      	mov	r1, r5
 8012d82:	e7ee      	b.n	8012d62 <gpio_stm32_configure_raw.isra.0+0xf2>

08012d84 <gpio_stm32_config>:
{
 8012d84:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8012d86:	059a      	lsls	r2, r3, #22
{
 8012d88:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8012d8a:	d51a      	bpl.n	8012dc2 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8012d8c:	079c      	lsls	r4, r3, #30
 8012d8e:	d511      	bpl.n	8012db4 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8012d90:	075a      	lsls	r2, r3, #29
 8012d92:	d52f      	bpl.n	8012df4 <gpio_stm32_config+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8012d94:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8012d96:	06dc      	lsls	r4, r3, #27
 8012d98:	d50e      	bpl.n	8012db8 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8012d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8012d9e:	f413 6f00 	tst.w	r3, #2048	; 0x800
	const struct gpio_stm32_config *cfg = dev->config;
 8012da2:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8012da4:	d11c      	bne.n	8012de0 <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8012da6:	055b      	lsls	r3, r3, #21
 8012da8:	d514      	bpl.n	8012dd4 <gpio_stm32_config+0x50>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012daa:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8012dac:	2301      	movs	r3, #1
 8012dae:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8012db0:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8012db2:	e00f      	b.n	8012dd4 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8012db4:	2210      	movs	r2, #16
 8012db6:	e7ee      	b.n	8012d96 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8012db8:	069c      	lsls	r4, r3, #26
 8012dba:	d5f0      	bpl.n	8012d9e <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8012dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8012dc0:	e7ed      	b.n	8012d9e <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8012dc2:	05dc      	lsls	r4, r3, #23
 8012dc4:	d511      	bpl.n	8012dea <gpio_stm32_config+0x66>
		if ((flags & GPIO_PULL_UP) != 0) {
 8012dc6:	06da      	lsls	r2, r3, #27
 8012dc8:	d411      	bmi.n	8012dee <gpio_stm32_config+0x6a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8012dca:	f013 0220 	ands.w	r2, r3, #32
 8012dce:	bf18      	it	ne
 8012dd0:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8012dd4:	6840      	ldr	r0, [r0, #4]
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	f7ff ff4a 	bl	8012c70 <gpio_stm32_configure_raw.isra.0>
	return 0;
 8012ddc:	2000      	movs	r0, #0
}
 8012dde:	bd10      	pop	{r4, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012de0:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8012de2:	2301      	movs	r3, #1
 8012de4:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8012de6:	61a3      	str	r3, [r4, #24]
	return 0;
 8012de8:	e7f4      	b.n	8012dd4 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8012dea:	2230      	movs	r2, #48	; 0x30
 8012dec:	e7f2      	b.n	8012dd4 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8012dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012df2:	e7ef      	b.n	8012dd4 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8012df4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8012df8:	e7f1      	b.n	8012dde <gpio_stm32_config+0x5a>

08012dfa <gpio_stm32_isr>:
{
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	6889      	ldr	r1, [r1, #8]
 8012dfe:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8012e00:	b169      	cbz	r1, 8012e1e <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8012e02:	2501      	movs	r5, #1
 8012e04:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8012e06:	680c      	ldr	r4, [r1, #0]
 8012e08:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8012e0a:	688a      	ldr	r2, [r1, #8]
 8012e0c:	402a      	ands	r2, r5
 8012e0e:	d002      	beq.n	8012e16 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8012e10:	684b      	ldr	r3, [r1, #4]
 8012e12:	4630      	mov	r0, r6
 8012e14:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8012e16:	b114      	cbz	r4, 8012e1e <gpio_stm32_isr+0x24>
 8012e18:	4621      	mov	r1, r4
 8012e1a:	6824      	ldr	r4, [r4, #0]
 8012e1c:	e7f5      	b.n	8012e0a <gpio_stm32_isr+0x10>
}
 8012e1e:	bd70      	pop	{r4, r5, r6, pc}

08012e20 <gpio_stm32_configure>:
{
 8012e20:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 8012e22:	6840      	ldr	r0, [r0, #4]
 8012e24:	f7ff ff24 	bl	8012c70 <gpio_stm32_configure_raw.isra.0>
}
 8012e28:	2000      	movs	r0, #0
 8012e2a:	bd08      	pop	{r3, pc}

08012e2c <spi_context_get_next_buf>:
{
 8012e2c:	b570      	push	{r4, r5, r6, lr}
 8012e2e:	4605      	mov	r5, r0
	while (*count) {
 8012e30:	6808      	ldr	r0, [r1, #0]
 8012e32:	b908      	cbnz	r0, 8012e38 <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 8012e34:	6010      	str	r0, [r2, #0]
	return NULL;
 8012e36:	e007      	b.n	8012e48 <spi_context_get_next_buf+0x1c>
		if (((*current)->len / dfs) != 0) {
 8012e38:	682c      	ldr	r4, [r5, #0]
 8012e3a:	6866      	ldr	r6, [r4, #4]
 8012e3c:	429e      	cmp	r6, r3
 8012e3e:	d304      	bcc.n	8012e4a <spi_context_get_next_buf+0x1e>
			return (*current)->buf;
 8012e40:	6820      	ldr	r0, [r4, #0]
			*buf_len = (*current)->len / dfs;
 8012e42:	fbb6 f3f3 	udiv	r3, r6, r3
 8012e46:	6013      	str	r3, [r2, #0]
}
 8012e48:	bd70      	pop	{r4, r5, r6, pc}
		++(*current);
 8012e4a:	3408      	adds	r4, #8
		--(*count);
 8012e4c:	3801      	subs	r0, #1
		++(*current);
 8012e4e:	602c      	str	r4, [r5, #0]
		--(*count);
 8012e50:	6008      	str	r0, [r1, #0]
 8012e52:	e7ed      	b.n	8012e30 <spi_context_get_next_buf+0x4>

08012e54 <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 8012e54:	b508      	push	{r3, lr}
 8012e56:	2023      	movs	r0, #35	; 0x23
 8012e58:	2200      	movs	r2, #0
 8012e5a:	2105      	movs	r1, #5
 8012e5c:	f7f0 fcbe 	bl	80037dc <z_arm_irq_priority_set>
 8012e60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012e64:	2023      	movs	r0, #35	; 0x23
 8012e66:	f7f0 bc87 	b.w	8003778 <arch_irq_enable>

08012e6a <spi_stm32_irq_config_func_1>:
 8012e6a:	b508      	push	{r3, lr}
 8012e6c:	2033      	movs	r0, #51	; 0x33
 8012e6e:	2200      	movs	r2, #0
 8012e70:	2105      	movs	r1, #5
 8012e72:	f7f0 fcb3 	bl	80037dc <z_arm_irq_priority_set>
 8012e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012e7a:	2033      	movs	r0, #51	; 0x33
 8012e7c:	f7f0 bc7c 	b.w	8003778 <arch_irq_enable>

08012e80 <spi_stm32_get_err>:
{
 8012e80:	4602      	mov	r2, r0
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8012e82:	6880      	ldr	r0, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8012e84:	f410 70b8 	ands.w	r0, r0, #368	; 0x170
{
 8012e88:	b082      	sub	sp, #8
	if (sr & SPI_STM32_ERR_MSK) {
 8012e8a:	d00a      	beq.n	8012ea2 <spi_stm32_get_err+0x22>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8012e8c:	6893      	ldr	r3, [r2, #8]
 8012e8e:	065b      	lsls	r3, r3, #25
 8012e90:	d505      	bpl.n	8012e9e <spi_stm32_get_err+0x1e>
  tmpreg = SPIx->DR;
 8012e92:	68d3      	ldr	r3, [r2, #12]
 8012e94:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8012e96:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 8012e98:	6893      	ldr	r3, [r2, #8]
 8012e9a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8012e9c:	9b01      	ldr	r3, [sp, #4]
 8012e9e:	f06f 0004 	mvn.w	r0, #4
}
 8012ea2:	b002      	add	sp, #8
 8012ea4:	4770      	bx	lr

08012ea6 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8012eaa:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8012eac:	7919      	ldrb	r1, [r3, #4]
 8012eae:	2301      	movs	r3, #1
 8012eb0:	fa03 f101 	lsl.w	r1, r3, r1
 8012eb4:	6903      	ldr	r3, [r0, #16]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8012eba:	bf18      	it	ne
 8012ebc:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8012ec0:	b112      	cbz	r2, 8012ec8 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 8012ec2:	6883      	ldr	r3, [r0, #8]
 8012ec4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8012ec6:	4718      	bx	r3
 8012ec8:	6883      	ldr	r3, [r0, #8]
 8012eca:	691b      	ldr	r3, [r3, #16]
 8012ecc:	e7fb      	b.n	8012ec6 <gpio_pin_set_dt.isra.0+0x20>

08012ece <_spi_context_cs_control>:
{
 8012ece:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8012ed0:	6803      	ldr	r3, [r0, #0]
{
 8012ed2:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8012ed4:	b1e3      	cbz	r3, 8012f10 <_spi_context_cs_control+0x42>
 8012ed6:	6898      	ldr	r0, [r3, #8]
 8012ed8:	b1d0      	cbz	r0, 8012f10 <_spi_context_cs_control+0x42>
 8012eda:	6805      	ldr	r5, [r0, #0]
 8012edc:	b1c5      	cbz	r5, 8012f10 <_spi_context_cs_control+0x42>
		if (on) {
 8012ede:	b149      	cbz	r1, 8012ef4 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 8012ee0:	2101      	movs	r1, #1
 8012ee2:	f7ff ffe0 	bl	8012ea6 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 8012ee6:	6823      	ldr	r3, [r4, #0]
 8012ee8:	689b      	ldr	r3, [r3, #8]
 8012eea:	6898      	ldr	r0, [r3, #8]
}
 8012eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8012ef0:	f7fa ba66 	b.w	800d3c0 <z_impl_k_busy_wait>
			if (!force_off &&
 8012ef4:	b912      	cbnz	r2, 8012efc <_spi_context_cs_control+0x2e>
 8012ef6:	889b      	ldrh	r3, [r3, #4]
 8012ef8:	04db      	lsls	r3, r3, #19
 8012efa:	d409      	bmi.n	8012f10 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 8012efc:	6880      	ldr	r0, [r0, #8]
 8012efe:	f7fa fa5f 	bl	800d3c0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8012f02:	6823      	ldr	r3, [r4, #0]
 8012f04:	2100      	movs	r1, #0
 8012f06:	6898      	ldr	r0, [r3, #8]
}
 8012f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8012f0c:	f7ff bfcb 	b.w	8012ea6 <gpio_pin_set_dt.isra.0>
}
 8012f10:	bd38      	pop	{r3, r4, r5, pc}

08012f12 <spi_context_unlock_unconditionally>:
{
 8012f12:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 8012f14:	2201      	movs	r2, #1
 8012f16:	2100      	movs	r1, #0
{
 8012f18:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 8012f1a:	f7ff ffd8 	bl	8012ece <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 8012f1e:	69a3      	ldr	r3, [r4, #24]
 8012f20:	b933      	cbnz	r3, 8012f30 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 8012f22:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8012f24:	f104 0010 	add.w	r0, r4, #16
}
 8012f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f2c:	f7f9 bb38 	b.w	800c5a0 <z_impl_k_sem_give>
 8012f30:	bd10      	pop	{r4, pc}

08012f32 <spi_stm32_release>:
{
 8012f32:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 8012f34:	6900      	ldr	r0, [r0, #16]
 8012f36:	f7ff ffec 	bl	8012f12 <spi_context_unlock_unconditionally>
}
 8012f3a:	2000      	movs	r0, #0
 8012f3c:	bd08      	pop	{r3, pc}

08012f3e <spi_stm32_complete>:
	SPI_TypeDef *spi = cfg->spi;
 8012f3e:	6843      	ldr	r3, [r0, #4]
{
 8012f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SPI_TypeDef *spi = cfg->spi;
 8012f42:	689c      	ldr	r4, [r3, #8]
	struct spi_stm32_data *data = dev->data;
 8012f44:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8012f46:	6863      	ldr	r3, [r4, #4]
 8012f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f4c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8012f4e:	6863      	ldr	r3, [r4, #4]
 8012f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012f54:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8012f56:	6863      	ldr	r3, [r4, #4]
	_spi_context_cs_control(ctx, on, false);
 8012f58:	2200      	movs	r2, #0
 8012f5a:	f023 0320 	bic.w	r3, r3, #32
{
 8012f5e:	460e      	mov	r6, r1
 8012f60:	6063      	str	r3, [r4, #4]
 8012f62:	4611      	mov	r1, r2
 8012f64:	4628      	mov	r0, r5
 8012f66:	f7ff ffb2 	bl	8012ece <_spi_context_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8012f6a:	68a3      	ldr	r3, [r4, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 8012f6c:	07d9      	lsls	r1, r3, #31
 8012f6e:	d41e      	bmi.n	8012fae <spi_stm32_complete+0x70>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8012f70:	6823      	ldr	r3, [r4, #0]
 8012f72:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8012f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012f7a:	d102      	bne.n	8012f82 <spi_stm32_complete+0x44>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8012f7c:	68a3      	ldr	r3, [r4, #8]
 8012f7e:	061a      	lsls	r2, r3, #24
 8012f80:	d4fc      	bmi.n	8012f7c <spi_stm32_complete+0x3e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8012f82:	68a3      	ldr	r3, [r4, #8]
 8012f84:	069b      	lsls	r3, r3, #26
 8012f86:	d506      	bpl.n	8012f96 <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 8012f88:	68a3      	ldr	r3, [r4, #8]
 8012f8a:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 8012f8c:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8012f8e:	6823      	ldr	r3, [r4, #0]
 8012f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012f94:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8012f96:	6823      	ldr	r3, [r4, #0]
 8012f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012f9c:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 8012f9e:	642e      	str	r6, [r5, #64]	; 0x40
 8012fa0:	f105 0028 	add.w	r0, r5, #40	; 0x28
}
 8012fa4:	b002      	add	sp, #8
 8012fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012faa:	f7f9 baf9 	b.w	800c5a0 <z_impl_k_sem_give>
  return (uint8_t)(READ_REG(SPIx->DR));
 8012fae:	68e3      	ldr	r3, [r4, #12]
 8012fb0:	e7db      	b.n	8012f6a <spi_stm32_complete+0x2c>

08012fb2 <spi_stm32_isr>:
	SPI_TypeDef *spi = cfg->spi;
 8012fb2:	6843      	ldr	r3, [r0, #4]
{
 8012fb4:	b570      	push	{r4, r5, r6, lr}
	SPI_TypeDef *spi = cfg->spi;
 8012fb6:	689d      	ldr	r5, [r3, #8]
	struct spi_stm32_data *data = dev->data;
 8012fb8:	6904      	ldr	r4, [r0, #16]
{
 8012fba:	4606      	mov	r6, r0
	err = spi_stm32_get_err(spi);
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	f7ff ff5f 	bl	8012e80 <spi_stm32_get_err>
	if (err) {
 8012fc2:	4601      	mov	r1, r0
 8012fc4:	b120      	cbz	r0, 8012fd0 <spi_stm32_isr+0x1e>
		spi_stm32_complete(dev, err);
 8012fc6:	4630      	mov	r0, r6
}
 8012fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		spi_stm32_complete(dev, err);
 8012fcc:	f7ff bfb7 	b.w	8012f3e <spi_stm32_complete>
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 8012fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8012fd2:	b913      	cbnz	r3, 8012fda <spi_stm32_isr+0x28>
	if (spi_stm32_transfer_ongoing(data)) {
 8012fd4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012fd6:	2a00      	cmp	r2, #0
 8012fd8:	d0f5      	beq.n	8012fc6 <spi_stm32_isr+0x14>
	uint16_t operation = data->ctx.config->operation;
 8012fda:	6822      	ldr	r2, [r4, #0]
 8012fdc:	8892      	ldrh	r2, [r2, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8012fde:	f012 0001 	ands.w	r0, r2, #1
 8012fe2:	f040 8081 	bne.w	80130e8 <spi_stm32_isr+0x136>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8012fe6:	68a9      	ldr	r1, [r5, #8]
 8012fe8:	0789      	lsls	r1, r1, #30
 8012fea:	d5fc      	bpl.n	8012fe6 <spi_stm32_isr+0x34>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8012fec:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8012ff0:	2a08      	cmp	r2, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8012ff2:	6d61      	ldr	r1, [r4, #84]	; 0x54
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8012ff4:	d150      	bne.n	8013098 <spi_stm32_isr+0xe6>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 8012ff6:	b109      	cbz	r1, 8012ffc <spi_stm32_isr+0x4a>
 8012ff8:	b103      	cbz	r3, 8012ffc <spi_stm32_isr+0x4a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8012ffa:	7808      	ldrb	r0, [r1, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8012ffc:	b2c0      	uxtb	r0, r0
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8012ffe:	7328      	strb	r0, [r5, #12]
	if (!ctx->tx_len) {
 8013000:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013002:	b1bb      	cbz	r3, 8013034 <spi_stm32_isr+0x82>
	ctx->tx_len -= len;
 8013004:	3b01      	subs	r3, #1
 8013006:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 8013008:	b983      	cbnz	r3, 801302c <spi_stm32_isr+0x7a>
		++ctx->current_tx;
 801300a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801300c:	3308      	adds	r3, #8
 801300e:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 8013010:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8013012:	3b01      	subs	r3, #1
 8013014:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8013016:	2301      	movs	r3, #1
 8013018:	f104 0258 	add.w	r2, r4, #88	; 0x58
 801301c:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8013020:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8013024:	f7ff ff02 	bl	8012e2c <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 8013028:	6560      	str	r0, [r4, #84]	; 0x54
 801302a:	e003      	b.n	8013034 <spi_stm32_isr+0x82>
	} else if (ctx->tx_buf) {
 801302c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801302e:	b10b      	cbz	r3, 8013034 <spi_stm32_isr+0x82>
		ctx->tx_buf += dfs * len;
 8013030:	3301      	adds	r3, #1
 8013032:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8013034:	68ab      	ldr	r3, [r5, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 8013036:	07d8      	lsls	r0, r3, #31
 8013038:	d5fc      	bpl.n	8013034 <spi_stm32_isr+0x82>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 801303a:	6822      	ldr	r2, [r4, #0]
 801303c:	8892      	ldrh	r2, [r2, #4]
 801303e:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8013042:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8013044:	e9d4 3117 	ldrd	r3, r1, [r4, #92]	; 0x5c
  return (uint8_t)(READ_REG(SPIx->DR));
 8013048:	68ea      	ldr	r2, [r5, #12]
 801304a:	d13b      	bne.n	80130c4 <spi_stm32_isr+0x112>
 801304c:	b10b      	cbz	r3, 8013052 <spi_stm32_isr+0xa0>
 801304e:	b101      	cbz	r1, 8013052 <spi_stm32_isr+0xa0>
 8013050:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8013052:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013054:	b1a3      	cbz	r3, 8013080 <spi_stm32_isr+0xce>
	ctx->rx_len -= len;
 8013056:	3b01      	subs	r3, #1
 8013058:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 801305a:	2b00      	cmp	r3, #0
 801305c:	f040 8090 	bne.w	8013180 <spi_stm32_isr+0x1ce>
		++ctx->current_rx;
 8013060:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8013062:	3308      	adds	r3, #8
 8013064:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 8013066:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8013068:	3b01      	subs	r3, #1
 801306a:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 801306c:	2301      	movs	r3, #1
 801306e:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8013072:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8013076:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801307a:	f7ff fed7 	bl	8012e2c <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 801307e:	65e0      	str	r0, [r4, #92]	; 0x5c
	return spi_stm32_get_err(spi);
 8013080:	4628      	mov	r0, r5
 8013082:	f7ff fefd 	bl	8012e80 <spi_stm32_get_err>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8013086:	4601      	mov	r1, r0
 8013088:	2800      	cmp	r0, #0
 801308a:	d19c      	bne.n	8012fc6 <spi_stm32_isr+0x14>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 801308c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801308e:	b913      	cbnz	r3, 8013096 <spi_stm32_isr+0xe4>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8013090:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013092:	2b00      	cmp	r3, #0
 8013094:	d097      	beq.n	8012fc6 <spi_stm32_isr+0x14>
}
 8013096:	bd70      	pop	{r4, r5, r6, pc}
	return !!(ctx->tx_buf && ctx->tx_len);
 8013098:	b109      	cbz	r1, 801309e <spi_stm32_isr+0xec>
		if (spi_context_tx_buf_on(&data->ctx)) {
 801309a:	b103      	cbz	r3, 801309e <spi_stm32_isr+0xec>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 801309c:	8808      	ldrh	r0, [r1, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 801309e:	81a8      	strh	r0, [r5, #12]
	if (!ctx->tx_len) {
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d0c7      	beq.n	8013034 <spi_stm32_isr+0x82>
	ctx->tx_len -= len;
 80130a4:	3b01      	subs	r3, #1
 80130a6:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 80130a8:	b93b      	cbnz	r3, 80130ba <spi_stm32_isr+0x108>
		++ctx->current_tx;
 80130aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80130ac:	3308      	adds	r3, #8
 80130ae:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 80130b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80130b2:	3b01      	subs	r3, #1
 80130b4:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 80130b6:	2302      	movs	r3, #2
 80130b8:	e7ae      	b.n	8013018 <spi_stm32_isr+0x66>
	} else if (ctx->tx_buf) {
 80130ba:	2900      	cmp	r1, #0
 80130bc:	d0ba      	beq.n	8013034 <spi_stm32_isr+0x82>
		ctx->tx_buf += dfs * len;
 80130be:	3102      	adds	r1, #2
 80130c0:	6561      	str	r1, [r4, #84]	; 0x54
 80130c2:	e7b7      	b.n	8013034 <spi_stm32_isr+0x82>
	return !!(ctx->rx_buf && ctx->rx_len);
 80130c4:	b10b      	cbz	r3, 80130ca <spi_stm32_isr+0x118>
 80130c6:	b101      	cbz	r1, 80130ca <spi_stm32_isr+0x118>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 80130c8:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 80130ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d0d7      	beq.n	8013080 <spi_stm32_isr+0xce>
	ctx->rx_len -= len;
 80130d0:	3b01      	subs	r3, #1
 80130d2:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d15a      	bne.n	801318e <spi_stm32_isr+0x1dc>
		++ctx->current_rx;
 80130d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80130da:	3308      	adds	r3, #8
 80130dc:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 80130de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80130e0:	3b01      	subs	r3, #1
 80130e2:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 80130e4:	2302      	movs	r3, #2
 80130e6:	e7c2      	b.n	801306e <spi_stm32_isr+0xbc>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80130e8:	68a9      	ldr	r1, [r5, #8]
 80130ea:	0789      	lsls	r1, r1, #30
 80130ec:	d543      	bpl.n	8013176 <spi_stm32_isr+0x1c4>
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d041      	beq.n	8013176 <spi_stm32_isr+0x1c4>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80130f2:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80130f6:	2a08      	cmp	r2, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80130f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80130fa:	d12c      	bne.n	8013156 <spi_stm32_isr+0x1a4>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80130fc:	780b      	ldrb	r3, [r1, #0]
  *spidr = TxData;
 80130fe:	732b      	strb	r3, [r5, #12]
	if (!ctx->tx_len) {
 8013100:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013102:	b1bb      	cbz	r3, 8013134 <spi_stm32_isr+0x182>
	ctx->tx_len -= len;
 8013104:	3b01      	subs	r3, #1
 8013106:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 8013108:	b983      	cbnz	r3, 801312c <spi_stm32_isr+0x17a>
		++ctx->current_tx;
 801310a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801310c:	3308      	adds	r3, #8
 801310e:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 8013110:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8013112:	3b01      	subs	r3, #1
 8013114:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8013116:	2301      	movs	r3, #1
 8013118:	f104 0258 	add.w	r2, r4, #88	; 0x58
 801311c:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8013120:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8013124:	f7ff fe82 	bl	8012e2c <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 8013128:	6560      	str	r0, [r4, #84]	; 0x54
 801312a:	e003      	b.n	8013134 <spi_stm32_isr+0x182>
	} else if (ctx->tx_buf) {
 801312c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801312e:	b10b      	cbz	r3, 8013134 <spi_stm32_isr+0x182>
		ctx->tx_buf += dfs * len;
 8013130:	3301      	adds	r3, #1
 8013132:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8013134:	68ab      	ldr	r3, [r5, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 8013136:	07db      	lsls	r3, r3, #31
 8013138:	d5a2      	bpl.n	8013080 <spi_stm32_isr+0xce>
	return !!(ctx->rx_buf && ctx->rx_len);
 801313a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801313c:	2b00      	cmp	r3, #0
 801313e:	d09f      	beq.n	8013080 <spi_stm32_isr+0xce>
 8013140:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8013142:	2a00      	cmp	r2, #0
 8013144:	d09c      	beq.n	8013080 <spi_stm32_isr+0xce>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8013146:	6822      	ldr	r2, [r4, #0]
 8013148:	8892      	ldrh	r2, [r2, #4]
 801314a:	f3c2 1245 	ubfx	r2, r2, #5, #6
 801314e:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 8013150:	68ea      	ldr	r2, [r5, #12]
 8013152:	d1b9      	bne.n	80130c8 <spi_stm32_isr+0x116>
 8013154:	e77c      	b.n	8013050 <spi_stm32_isr+0x9e>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8013156:	880a      	ldrh	r2, [r1, #0]
  *spidr = TxData;
 8013158:	81aa      	strh	r2, [r5, #12]
	ctx->tx_len -= len;
 801315a:	3b01      	subs	r3, #1
 801315c:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 801315e:	b93b      	cbnz	r3, 8013170 <spi_stm32_isr+0x1be>
		++ctx->current_tx;
 8013160:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013162:	3308      	adds	r3, #8
 8013164:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 8013166:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8013168:	3b01      	subs	r3, #1
 801316a:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 801316c:	2302      	movs	r3, #2
 801316e:	e7d3      	b.n	8013118 <spi_stm32_isr+0x166>
		ctx->tx_buf += dfs * len;
 8013170:	3102      	adds	r1, #2
 8013172:	6561      	str	r1, [r4, #84]	; 0x54
 8013174:	e7de      	b.n	8013134 <spi_stm32_isr+0x182>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8013176:	686b      	ldr	r3, [r5, #4]
 8013178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801317c:	606b      	str	r3, [r5, #4]
	defined(CONFIG_SOC_SERIES_STM32U5X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 801317e:	e7d9      	b.n	8013134 <spi_stm32_isr+0x182>
	} else if (ctx->rx_buf) {
 8013180:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8013182:	2b00      	cmp	r3, #0
 8013184:	f43f af7c 	beq.w	8013080 <spi_stm32_isr+0xce>
		ctx->rx_buf += dfs * len;
 8013188:	3301      	adds	r3, #1
 801318a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801318c:	e778      	b.n	8013080 <spi_stm32_isr+0xce>
	} else if (ctx->rx_buf) {
 801318e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8013190:	2b00      	cmp	r3, #0
 8013192:	f43f af75 	beq.w	8013080 <spi_stm32_isr+0xce>
		ctx->rx_buf += dfs * len;
 8013196:	3302      	adds	r3, #2
 8013198:	e7f7      	b.n	801318a <spi_stm32_isr+0x1d8>

0801319a <__eswifi_sta_config>:
{
 801319a:	b570      	push	{r4, r5, r6, lr}
 801319c:	460d      	mov	r5, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 801319e:	790a      	ldrb	r2, [r1, #4]
 80131a0:	6809      	ldr	r1, [r1, #0]
 80131a2:	4604      	mov	r4, r0
 80131a4:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80131a8:	f001 fb00 	bl	80147ac <memcpy>
	eswifi->sta.ssid[params->ssid_length] = '\0';
 80131ac:	792b      	ldrb	r3, [r5, #4]
 80131ae:	4423      	add	r3, r4
 80131b0:	2600      	movs	r6, #0
 80131b2:	f883 6108 	strb.w	r6, [r3, #264]	; 0x108
	switch (params->security) {
 80131b6:	7bab      	ldrb	r3, [r5, #14]
 80131b8:	b123      	cbz	r3, 80131c4 <__eswifi_sta_config+0x2a>
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d00f      	beq.n	80131de <__eswifi_sta_config+0x44>
 80131be:	f06f 0015 	mvn.w	r0, #21
}
 80131c2:	bd70      	pop	{r4, r5, r6, pc}
		eswifi->sta.pass[0] = '\0';
 80131c4:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
		eswifi->sta.security = ESWIFI_SEC_WPA2_MIXED;
 80131c8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
	if (params->channel == WIFI_CHANNEL_ANY) {
 80131cc:	7b6b      	ldrb	r3, [r5, #13]
 80131ce:	2000      	movs	r0, #0
 80131d0:	2bff      	cmp	r3, #255	; 0xff
		eswifi->sta.channel = 0U;
 80131d2:	bf0c      	ite	eq
 80131d4:	f884 016c 	strbeq.w	r0, [r4, #364]	; 0x16c
		eswifi->sta.channel = params->channel;
 80131d8:	f884 316c 	strbne.w	r3, [r4, #364]	; 0x16c
 80131dc:	e7f1      	b.n	80131c2 <__eswifi_sta_config+0x28>
 80131de:	7b2a      	ldrb	r2, [r5, #12]
 80131e0:	68a9      	ldr	r1, [r5, #8]
 80131e2:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80131e6:	f001 fae1 	bl	80147ac <memcpy>
		eswifi->sta.pass[params->psk_length] = '\0';
 80131ea:	7b2b      	ldrb	r3, [r5, #12]
 80131ec:	4423      	add	r3, r4
 80131ee:	f883 612a 	strb.w	r6, [r3, #298]	; 0x12a
		eswifi->sta.security = ESWIFI_SEC_WPA2_MIXED;
 80131f2:	2304      	movs	r3, #4
 80131f4:	e7e8      	b.n	80131c8 <__eswifi_sta_config+0x2e>

080131f6 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80131f6:	2301      	movs	r3, #1
 80131f8:	fa03 f101 	lsl.w	r1, r3, r1
 80131fc:	6903      	ldr	r3, [r0, #16]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8013202:	bf18      	it	ne
 8013204:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8013208:	b112      	cbz	r2, 8013210 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 801320a:	6883      	ldr	r3, [r0, #8]
 801320c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 801320e:	4718      	bx	r3
 8013210:	6883      	ldr	r3, [r0, #8]
 8013212:	691b      	ldr	r3, [r3, #16]
 8013214:	e7fb      	b.n	801320e <gpio_pin_set.isra.0+0x18>

08013216 <eswifi_unlock>:
	if (!--eswifi->mutex_depth) {
 8013216:	f8d0 37d0 	ldr.w	r3, [r0, #2000]	; 0x7d0
 801321a:	3b01      	subs	r3, #1
 801321c:	f8c0 37d0 	str.w	r3, [r0, #2000]	; 0x7d0
 8013220:	b993      	cbnz	r3, 8013248 <eswifi_unlock+0x32>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8013222:	f3bf 8f5b 	dmb	ish
 8013226:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 801322a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801322e:	e853 1f00 	ldrex	r1, [r3]
 8013232:	e843 2c00 	strex	ip, r2, [r3]
 8013236:	f1bc 0f00 	cmp.w	ip, #0
 801323a:	d1f8      	bne.n	801322e <eswifi_unlock+0x18>
 801323c:	f3bf 8f5b 	dmb	ish
	return z_impl_k_mutex_unlock(mutex);
 8013240:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8013244:	f7f9 b934 	b.w	800c4b0 <z_impl_k_mutex_unlock>
}
 8013248:	4770      	bx	lr

0801324a <eswifi_mgmt_disconnect>:
{
 801324a:	b510      	push	{r4, lr}
	struct eswifi_dev *eswifi = dev->data;
 801324c:	6904      	ldr	r4, [r0, #16]
	eswifi_lock(eswifi);
 801324e:	4620      	mov	r0, r4
 8013250:	f7f6 f9aa 	bl	80095a8 <eswifi_lock>
	eswifi->req = ESWIFI_REQ_DISCONNECT;
 8013254:	2302      	movs	r3, #2
 8013256:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
	k_work_submit_to_queue(&eswifi->work_q, &eswifi->request_work);
 801325a:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 801325e:	f104 0020 	add.w	r0, r4, #32
 8013262:	f000 ff8e 	bl	8014182 <k_work_submit_to_queue>
	eswifi_unlock(eswifi);
 8013266:	4620      	mov	r0, r4
 8013268:	f7ff ffd5 	bl	8013216 <eswifi_unlock>
}
 801326c:	2000      	movs	r0, #0
 801326e:	bd10      	pop	{r4, pc}

08013270 <eswifi_mgmt_connect>:
{
 8013270:	b538      	push	{r3, r4, r5, lr}
	struct eswifi_dev *eswifi = dev->data;
 8013272:	6904      	ldr	r4, [r0, #16]
{
 8013274:	460d      	mov	r5, r1
	eswifi_lock(eswifi);
 8013276:	4620      	mov	r0, r4
 8013278:	f7f6 f996 	bl	80095a8 <eswifi_lock>
	err = __eswifi_sta_config(eswifi, params);
 801327c:	4629      	mov	r1, r5
 801327e:	4620      	mov	r0, r4
 8013280:	f7ff ff8b 	bl	801319a <__eswifi_sta_config>
	if (!err) {
 8013284:	4605      	mov	r5, r0
 8013286:	b940      	cbnz	r0, 801329a <eswifi_mgmt_connect+0x2a>
		eswifi->req = ESWIFI_REQ_CONNECT;
 8013288:	2301      	movs	r3, #1
 801328a:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
		k_work_submit_to_queue(&eswifi->work_q,
 801328e:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8013292:	f104 0020 	add.w	r0, r4, #32
 8013296:	f000 ff74 	bl	8014182 <k_work_submit_to_queue>
	eswifi_unlock(eswifi);
 801329a:	4620      	mov	r0, r4
 801329c:	f7ff ffbb 	bl	8013216 <eswifi_unlock>
}
 80132a0:	4628      	mov	r0, r5
 80132a2:	bd38      	pop	{r3, r4, r5, pc}

080132a4 <eswifi_mgmt_scan>:
{
 80132a4:	b538      	push	{r3, r4, r5, lr}
	struct eswifi_dev *eswifi = dev->data;
 80132a6:	6904      	ldr	r4, [r0, #16]
{
 80132a8:	460d      	mov	r5, r1
	eswifi_lock(eswifi);
 80132aa:	4620      	mov	r0, r4
 80132ac:	f7f6 f97c 	bl	80095a8 <eswifi_lock>
	eswifi->scan_cb = cb;
 80132b0:	61a5      	str	r5, [r4, #24]
	eswifi->req = ESWIFI_REQ_SCAN;
 80132b2:	2500      	movs	r5, #0
	k_work_submit_to_queue(&eswifi->work_q, &eswifi->request_work);
 80132b4:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
	eswifi->req = ESWIFI_REQ_SCAN;
 80132b8:	f884 516d 	strb.w	r5, [r4, #365]	; 0x16d
	k_work_submit_to_queue(&eswifi->work_q, &eswifi->request_work);
 80132bc:	f104 0020 	add.w	r0, r4, #32
 80132c0:	f000 ff5f 	bl	8014182 <k_work_submit_to_queue>
	eswifi_unlock(eswifi);
 80132c4:	4620      	mov	r0, r4
 80132c6:	f7ff ffa6 	bl	8013216 <eswifi_unlock>
}
 80132ca:	4628      	mov	r0, r5
 80132cc:	bd38      	pop	{r3, r4, r5, pc}

080132ce <eswifi_at_cmd>:
	return eswifi_at_cmd_rsp(eswifi, cmd, NULL);
 80132ce:	2200      	movs	r2, #0
 80132d0:	f7f6 b9e6 	b.w	80096a0 <eswifi_at_cmd_rsp>

080132d4 <eswifi_async_msg>:
	eswifi_offload_async_msg(eswifi, msg, len);
 80132d4:	f7f6 be16 	b.w	8009f04 <eswifi_offload_async_msg>

080132d8 <eswifi_unlock>:
	if (!--eswifi->mutex_depth) {
 80132d8:	f8d0 37d0 	ldr.w	r3, [r0, #2000]	; 0x7d0
 80132dc:	3b01      	subs	r3, #1
 80132de:	f8c0 37d0 	str.w	r3, [r0, #2000]	; 0x7d0
 80132e2:	b993      	cbnz	r3, 801330a <eswifi_unlock+0x32>
 80132e4:	f3bf 8f5b 	dmb	ish
 80132e8:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 80132ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132f0:	e853 1f00 	ldrex	r1, [r3]
 80132f4:	e843 2c00 	strex	ip, r2, [r3]
 80132f8:	f1bc 0f00 	cmp.w	ip, #0
 80132fc:	d1f8      	bne.n	80132f0 <eswifi_unlock+0x18>
 80132fe:	f3bf 8f5b 	dmb	ish
 8013302:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8013306:	f7f9 b8d3 	b.w	800c4b0 <z_impl_k_mutex_unlock>
}
 801330a:	4770      	bx	lr

0801330c <eswifi_off_put>:
{
 801330c:	b570      	push	{r4, r5, r6, lr}
	struct eswifi_off_socket *socket = context->offload_context;
 801330e:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 8013312:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
 8013316:	f7f6 fc83 	bl	8009c20 <eswifi_by_iface_idx>
 801331a:	4605      	mov	r5, r0
	eswifi_lock(eswifi);
 801331c:	f7f6 fc84 	bl	8009c28 <eswifi_lock>
	ret = __eswifi_socket_free(eswifi, socket);
 8013320:	4631      	mov	r1, r6
 8013322:	4628      	mov	r0, r5
 8013324:	f000 f992 	bl	801364c <__eswifi_socket_free>
	if (ret) {
 8013328:	4604      	mov	r4, r0
 801332a:	b930      	cbnz	r0, 801333a <eswifi_off_put+0x2e>
	if (--socket->usage <= 0) {
 801332c:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
 8013330:	3b01      	subs	r3, #1
 8013332:	2b00      	cmp	r3, #0
 8013334:	dd06      	ble.n	8013344 <eswifi_off_put+0x38>
 8013336:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
	eswifi_unlock(eswifi);
 801333a:	4628      	mov	r0, r5
 801333c:	f7ff ffcc 	bl	80132d8 <eswifi_unlock>
}
 8013340:	4620      	mov	r0, r4
 8013342:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
 8013344:	4601      	mov	r1, r0
 8013346:	22e0      	movs	r2, #224	; 0xe0
 8013348:	4630      	mov	r0, r6
 801334a:	f001 fa6a 	bl	8014822 <memset>
 801334e:	e7f4      	b.n	801333a <eswifi_off_put+0x2e>

08013350 <eswifi_off_connect>:
{
 8013350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013354:	4689      	mov	r9, r1
	struct eswifi_off_socket *socket = context->offload_context;
 8013356:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 801335a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801335c:	4680      	mov	r8, r0
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 801335e:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
{
 8013362:	461f      	mov	r7, r3
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 8013364:	f7f6 fc5c 	bl	8009c20 <eswifi_by_iface_idx>
	if (addr->sa_family != AF_INET) {
 8013368:	f8b9 b000 	ldrh.w	fp, [r9]
 801336c:	f1bb 0f01 	cmp.w	fp, #1
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 8013370:	4606      	mov	r6, r0
	if (addr->sa_family != AF_INET) {
 8013372:	d139      	bne.n	80133e8 <eswifi_off_connect+0x98>
	eswifi_lock(eswifi);
 8013374:	f7f6 fc58 	bl	8009c28 <eswifi_lock>
	if (socket->state != ESWIFI_SOCKET_STATE_NONE) {
 8013378:	f895 a002 	ldrb.w	sl, [r5, #2]
 801337c:	f1ba 0f00 	cmp.w	sl, #0
 8013380:	d007      	beq.n	8013392 <eswifi_off_connect+0x42>
		eswifi_unlock(eswifi);
 8013382:	4630      	mov	r0, r6
 8013384:	f7ff ffa8 	bl	80132d8 <eswifi_unlock>
		return -EBUSY;
 8013388:	f06f 040f 	mvn.w	r4, #15
}
 801338c:	4620      	mov	r0, r4
 801338e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	socket->peer_addr = *addr;
 8013392:	f8d9 0000 	ldr.w	r0, [r9]
 8013396:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801339a:	f105 0380 	add.w	r3, r5, #128	; 0x80
 801339e:	c303      	stmia	r3!, {r0, r1}
	socket->conn_data = user_data;
 80133a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133a2:	61eb      	str	r3, [r5, #28]
	socket->conn_cb = cb;
 80133a4:	60ef      	str	r7, [r5, #12]
	socket->state = ESWIFI_SOCKET_STATE_CONNECTING;
 80133a6:	f885 b002 	strb.w	fp, [r5, #2]
	if (timeout == 0) {
 80133aa:	b94c      	cbnz	r4, 80133c0 <eswifi_off_connect+0x70>
		k_work_submit_to_queue(&eswifi->work_q, &socket->connect_work);
 80133ac:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 80133b0:	f106 0020 	add.w	r0, r6, #32
 80133b4:	f000 fee5 	bl	8014182 <k_work_submit_to_queue>
		eswifi_unlock(eswifi);
 80133b8:	4630      	mov	r0, r6
 80133ba:	f7ff ff8d 	bl	80132d8 <eswifi_unlock>
		return 0;
 80133be:	e7e5      	b.n	801338c <eswifi_off_connect+0x3c>
	err = __eswifi_off_start_client(eswifi, socket);
 80133c0:	4629      	mov	r1, r5
 80133c2:	4630      	mov	r0, r6
 80133c4:	f7f6 ff70 	bl	800a2a8 <__eswifi_off_start_client>
		socket->state = ESWIFI_SOCKET_STATE_CONNECTED;
 80133c8:	1e04      	subs	r4, r0, #0
 80133ca:	bf08      	it	eq
 80133cc:	f04f 0a02 	moveq.w	sl, #2
 80133d0:	f885 a002 	strb.w	sl, [r5, #2]
	eswifi_unlock(eswifi);
 80133d4:	4630      	mov	r0, r6
 80133d6:	f7ff ff7f 	bl	80132d8 <eswifi_unlock>
	if (cb) {
 80133da:	2f00      	cmp	r7, #0
 80133dc:	d0d6      	beq.n	801338c <eswifi_off_connect+0x3c>
		cb(context, err, user_data);
 80133de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80133e0:	4621      	mov	r1, r4
 80133e2:	4640      	mov	r0, r8
 80133e4:	47b8      	blx	r7
 80133e6:	e7d1      	b.n	801338c <eswifi_off_connect+0x3c>
		return -EPFNOSUPPORT;
 80133e8:	f06f 045f 	mvn.w	r4, #95	; 0x5f
 80133ec:	e7ce      	b.n	801338c <eswifi_off_connect+0x3c>

080133ee <eswifi_off_accept>:
{
 80133ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct eswifi_off_socket *socket = context->offload_context;
 80133f2:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 80133f6:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
{
 80133fa:	4688      	mov	r8, r1
 80133fc:	4614      	mov	r4, r2
 80133fe:	4699      	mov	r9, r3
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 8013400:	f7f6 fc0e 	bl	8009c20 <eswifi_by_iface_idx>
 8013404:	4606      	mov	r6, r0
	eswifi_lock(eswifi);
 8013406:	f7f6 fc0f 	bl	8009c28 <eswifi_lock>
	ret = __eswifi_accept(eswifi, socket);
 801340a:	4629      	mov	r1, r5
 801340c:	4630      	mov	r0, r6
 801340e:	f7f6 ffa9 	bl	800a364 <__eswifi_accept>
	if (ret < 0) {
 8013412:	1e07      	subs	r7, r0, #0
 8013414:	da06      	bge.n	8013424 <eswifi_off_accept+0x36>
		eswifi_unlock(eswifi);
 8013416:	4630      	mov	r0, r6
 8013418:	f7ff ff5e 	bl	80132d8 <eswifi_unlock>
		return ret;
 801341c:	463c      	mov	r4, r7
}
 801341e:	4620      	mov	r0, r4
 8013420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	socket->accept_cb = cb;
 8013424:	f8c5 8014 	str.w	r8, [r5, #20]
	socket->accept_data = user_data;
 8013428:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	k_sem_reset(&socket->accept_sem);
 801342c:	35a0      	adds	r5, #160	; 0xa0
	z_impl_k_sem_reset(sem);
 801342e:	4628      	mov	r0, r5
 8013430:	f7f9 f904 	bl	800c63c <z_impl_k_sem_reset>
	eswifi_unlock(eswifi);
 8013434:	4630      	mov	r0, r6
 8013436:	f7ff ff4f 	bl	80132d8 <eswifi_unlock>
	if (timeout == 0) {
 801343a:	2c00      	cmp	r4, #0
 801343c:	d0ef      	beq.n	801341e <eswifi_off_accept+0x30>
	return k_sem_take(&socket->accept_sem, K_MSEC(timeout));
 801343e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
			return t * ((uint64_t)to_hz / from_hz);
 8013442:	230a      	movs	r3, #10
 8013444:	fb84 2303 	smull	r2, r3, r4, r3
	return z_impl_k_sem_take(sem, timeout);
 8013448:	4628      	mov	r0, r5
}
 801344a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801344e:	f7f9 b8cd 	b.w	800c5ec <z_impl_k_sem_take>

08013452 <eswifi_off_bind>:
{
 8013452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct eswifi_off_socket *socket = context->offload_context;
 8013454:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 8013458:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
{
 801345c:	460d      	mov	r5, r1
 801345e:	4616      	mov	r6, r2
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 8013460:	f7f6 fbde 	bl	8009c20 <eswifi_by_iface_idx>
 8013464:	4604      	mov	r4, r0
	eswifi_lock(eswifi);
 8013466:	f7f6 fbdf 	bl	8009c28 <eswifi_lock>
	err = __eswifi_bind(eswifi, socket, addr, addrlen);
 801346a:	462a      	mov	r2, r5
 801346c:	4633      	mov	r3, r6
 801346e:	4639      	mov	r1, r7
 8013470:	4620      	mov	r0, r4
 8013472:	f7f6 fef3 	bl	800a25c <__eswifi_bind>
 8013476:	4605      	mov	r5, r0
	eswifi_unlock(eswifi);
 8013478:	4620      	mov	r0, r4
 801347a:	f7ff ff2d 	bl	80132d8 <eswifi_unlock>
}
 801347e:	4628      	mov	r0, r5
 8013480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013482 <eswifi_off_recv>:
{
 8013482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct eswifi_off_socket *socket = context->offload_context;
 8013486:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 801348a:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
{
 801348e:	461f      	mov	r7, r3
 8013490:	4688      	mov	r8, r1
 8013492:	4614      	mov	r4, r2
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(context->iface);
 8013494:	f7f6 fbc4 	bl	8009c20 <eswifi_by_iface_idx>
 8013498:	4605      	mov	r5, r0
	eswifi_lock(eswifi);
 801349a:	f7f6 fbc5 	bl	8009c28 <eswifi_lock>
	socket->recv_data = user_data;
 801349e:	61b7      	str	r7, [r6, #24]
	socket->recv_cb = cb;
 80134a0:	f8c6 8008 	str.w	r8, [r6, #8]
	k_sem_reset(&socket->read_sem);
 80134a4:	f106 0788 	add.w	r7, r6, #136	; 0x88
	z_impl_k_sem_reset(sem);
 80134a8:	4638      	mov	r0, r7
 80134aa:	f7f9 f8c7 	bl	800c63c <z_impl_k_sem_reset>
	eswifi_unlock(eswifi);
 80134ae:	4628      	mov	r0, r5
 80134b0:	f7ff ff12 	bl	80132d8 <eswifi_unlock>
	if (timeout == 0) {
 80134b4:	b184      	cbz	r4, 80134d8 <eswifi_off_recv+0x56>
	err = k_sem_take(&socket->read_sem, K_MSEC(timeout));
 80134b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80134ba:	220a      	movs	r2, #10
 80134bc:	fb84 2302 	smull	r2, r3, r4, r2
	return z_impl_k_sem_take(sem, timeout);
 80134c0:	4638      	mov	r0, r7
 80134c2:	f7f9 f893 	bl	800c5ec <z_impl_k_sem_take>
 80134c6:	4604      	mov	r4, r0
	eswifi_lock(eswifi);
 80134c8:	4628      	mov	r0, r5
 80134ca:	f7f6 fbad 	bl	8009c28 <eswifi_lock>
	socket->recv_cb = NULL;
 80134ce:	2300      	movs	r3, #0
 80134d0:	60b3      	str	r3, [r6, #8]
	eswifi_unlock(eswifi);
 80134d2:	4628      	mov	r0, r5
 80134d4:	f7ff ff00 	bl	80132d8 <eswifi_unlock>
}
 80134d8:	4620      	mov	r0, r4
 80134da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134de <eswifi_off_sendto>:
{
 80134de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134e2:	461f      	mov	r7, r3
	struct eswifi_off_socket *socket = pkt->context->offload_context;
 80134e4:	6943      	ldr	r3, [r0, #20]
 80134e6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(socket->context->iface);
 80134ea:	6863      	ldr	r3, [r4, #4]
{
 80134ec:	4682      	mov	sl, r0
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(socket->context->iface);
 80134ee:	f893 0088 	ldrb.w	r0, [r3, #136]	; 0x88
{
 80134f2:	460d      	mov	r5, r1
 80134f4:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(socket->context->iface);
 80134f8:	f7f6 fb92 	bl	8009c20 <eswifi_by_iface_idx>
 80134fc:	4606      	mov	r6, r0
	eswifi_lock(eswifi);
 80134fe:	f7f6 fb93 	bl	8009c28 <eswifi_lock>
	if (socket->tx_pkt) {
 8013502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013504:	b13b      	cbz	r3, 8013516 <eswifi_off_sendto+0x38>
		eswifi_unlock(eswifi);
 8013506:	4630      	mov	r0, r6
 8013508:	f7ff fee6 	bl	80132d8 <eswifi_unlock>
		return -EBUSY;
 801350c:	f06f 050f 	mvn.w	r5, #15
}
 8013510:	4628      	mov	r0, r5
 8013512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (socket->state != ESWIFI_SOCKET_STATE_CONNECTED) {
 8013516:	78a3      	ldrb	r3, [r4, #2]
	socket->tx_pkt = pkt;
 8013518:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
	if (socket->state != ESWIFI_SOCKET_STATE_CONNECTED) {
 801351c:	2b02      	cmp	r3, #2
 801351e:	d010      	beq.n	8013542 <eswifi_off_sendto+0x64>
		socket->peer_addr = *dst_addr;
 8013520:	6828      	ldr	r0, [r5, #0]
 8013522:	6869      	ldr	r1, [r5, #4]
 8013524:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8013528:	c303      	stmia	r3!, {r0, r1}
		err = __eswifi_off_start_client(eswifi, socket);
 801352a:	4621      	mov	r1, r4
 801352c:	4630      	mov	r0, r6
 801352e:	f7f6 febb 	bl	800a2a8 <__eswifi_off_start_client>
		if (err < 0) {
 8013532:	1e05      	subs	r5, r0, #0
 8013534:	da03      	bge.n	801353e <eswifi_off_sendto+0x60>
			eswifi_unlock(eswifi);
 8013536:	4630      	mov	r0, r6
 8013538:	f7ff fece 	bl	80132d8 <eswifi_unlock>
			return err;
 801353c:	e7e8      	b.n	8013510 <eswifi_off_sendto+0x32>
		socket->state = ESWIFI_SOCKET_STATE_CONNECTED;
 801353e:	2302      	movs	r3, #2
 8013540:	70a3      	strb	r3, [r4, #2]
	if (timeout == 0) {
 8013542:	f1b9 0f00 	cmp.w	r9, #0
 8013546:	d10d      	bne.n	8013564 <eswifi_off_sendto+0x86>
		k_work_submit_to_queue(&eswifi->work_q, &socket->send_work);
 8013548:	f104 013c 	add.w	r1, r4, #60	; 0x3c
		socket->send_data = user_data;
 801354c:	f8c4 8020 	str.w	r8, [r4, #32]
		socket->send_cb = cb;
 8013550:	6127      	str	r7, [r4, #16]
		k_work_submit_to_queue(&eswifi->work_q, &socket->send_work);
 8013552:	f106 0020 	add.w	r0, r6, #32
 8013556:	f000 fe14 	bl	8014182 <k_work_submit_to_queue>
		eswifi_unlock(eswifi);
 801355a:	4630      	mov	r0, r6
 801355c:	f7ff febc 	bl	80132d8 <eswifi_unlock>
		return 0;
 8013560:	464d      	mov	r5, r9
 8013562:	e7d5      	b.n	8013510 <eswifi_off_sendto+0x32>
	err = __eswifi_off_send_pkt(eswifi, socket);
 8013564:	4621      	mov	r1, r4
 8013566:	4630      	mov	r0, r6
 8013568:	f7f6 fc4a 	bl	8009e00 <__eswifi_off_send_pkt>
	socket->tx_pkt = NULL;
 801356c:	2300      	movs	r3, #0
	err = __eswifi_off_send_pkt(eswifi, socket);
 801356e:	4605      	mov	r5, r0
	socket->tx_pkt = NULL;
 8013570:	62a3      	str	r3, [r4, #40]	; 0x28
	eswifi_unlock(eswifi);
 8013572:	4630      	mov	r0, r6
 8013574:	f7ff feb0 	bl	80132d8 <eswifi_unlock>
	if (cb) {
 8013578:	2f00      	cmp	r7, #0
 801357a:	d0c9      	beq.n	8013510 <eswifi_off_sendto+0x32>
		cb(socket->context, err, user_data);
 801357c:	6860      	ldr	r0, [r4, #4]
 801357e:	4642      	mov	r2, r8
 8013580:	4629      	mov	r1, r5
 8013582:	47b8      	blx	r7
 8013584:	e7c4      	b.n	8013510 <eswifi_off_sendto+0x32>

08013586 <eswifi_off_send>:
{
 8013586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801358a:	461f      	mov	r7, r3
	struct eswifi_off_socket *socket = pkt->context->offload_context;
 801358c:	6943      	ldr	r3, [r0, #20]
 801358e:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(socket->context->iface);
 8013592:	686b      	ldr	r3, [r5, #4]
{
 8013594:	4682      	mov	sl, r0
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(socket->context->iface);
 8013596:	f893 0088 	ldrb.w	r0, [r3, #136]	; 0x88
{
 801359a:	4689      	mov	r9, r1
 801359c:	4614      	mov	r4, r2
	struct eswifi_dev *eswifi = eswifi_by_iface_idx(socket->context->iface);
 801359e:	f7f6 fb3f 	bl	8009c20 <eswifi_by_iface_idx>
 80135a2:	4606      	mov	r6, r0
	eswifi_lock(eswifi);
 80135a4:	f7f6 fb40 	bl	8009c28 <eswifi_lock>
	if (socket->state != ESWIFI_SOCKET_STATE_CONNECTED) {
 80135a8:	78ab      	ldrb	r3, [r5, #2]
 80135aa:	2b02      	cmp	r3, #2
 80135ac:	d007      	beq.n	80135be <eswifi_off_send+0x38>
		eswifi_unlock(eswifi);
 80135ae:	4630      	mov	r0, r6
 80135b0:	f7ff fe92 	bl	80132d8 <eswifi_unlock>
		return -ENOTCONN;
 80135b4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
}
 80135b8:	4620      	mov	r0, r4
 80135ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (socket->tx_pkt) {
 80135be:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
 80135c2:	f1b8 0f00 	cmp.w	r8, #0
 80135c6:	d005      	beq.n	80135d4 <eswifi_off_send+0x4e>
		eswifi_unlock(eswifi);
 80135c8:	4630      	mov	r0, r6
 80135ca:	f7ff fe85 	bl	80132d8 <eswifi_unlock>
		return -EBUSY;
 80135ce:	f06f 040f 	mvn.w	r4, #15
 80135d2:	e7f1      	b.n	80135b8 <eswifi_off_send+0x32>
	socket->tx_pkt = pkt;
 80135d4:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
	if (timeout == 0) {
 80135d8:	b964      	cbnz	r4, 80135f4 <eswifi_off_send+0x6e>
		socket->send_data = user_data;
 80135da:	622f      	str	r7, [r5, #32]
		socket->send_cb = cb;
 80135dc:	f8c5 9010 	str.w	r9, [r5, #16]
		k_work_submit_to_queue(&eswifi->work_q, &socket->send_work);
 80135e0:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80135e4:	f106 0020 	add.w	r0, r6, #32
 80135e8:	f000 fdcb 	bl	8014182 <k_work_submit_to_queue>
		eswifi_unlock(eswifi);
 80135ec:	4630      	mov	r0, r6
 80135ee:	f7ff fe73 	bl	80132d8 <eswifi_unlock>
		return 0;
 80135f2:	e7e1      	b.n	80135b8 <eswifi_off_send+0x32>
	err = __eswifi_off_send_pkt(eswifi, socket);
 80135f4:	4629      	mov	r1, r5
 80135f6:	4630      	mov	r0, r6
 80135f8:	f7f6 fc02 	bl	8009e00 <__eswifi_off_send_pkt>
	socket->tx_pkt = NULL;
 80135fc:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	err = __eswifi_off_send_pkt(eswifi, socket);
 8013600:	4604      	mov	r4, r0
	eswifi_unlock(eswifi);
 8013602:	4630      	mov	r0, r6
 8013604:	f7ff fe68 	bl	80132d8 <eswifi_unlock>
	if (cb) {
 8013608:	f1b9 0f00 	cmp.w	r9, #0
 801360c:	d0d4      	beq.n	80135b8 <eswifi_off_send+0x32>
		cb(socket->context, err, user_data);
 801360e:	6868      	ldr	r0, [r5, #4]
 8013610:	463a      	mov	r2, r7
 8013612:	4621      	mov	r1, r4
 8013614:	47c8      	blx	r9
 8013616:	e7cf      	b.n	80135b8 <eswifi_off_send+0x32>

08013618 <eswifi_unlock>:
	if (!--eswifi->mutex_depth) {
 8013618:	f8d0 37d0 	ldr.w	r3, [r0, #2000]	; 0x7d0
 801361c:	3b01      	subs	r3, #1
 801361e:	f8c0 37d0 	str.w	r3, [r0, #2000]	; 0x7d0
 8013622:	b993      	cbnz	r3, 801364a <eswifi_unlock+0x32>
 8013624:	f3bf 8f5b 	dmb	ish
 8013628:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 801362c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013630:	e853 1f00 	ldrex	r1, [r3]
 8013634:	e843 2c00 	strex	ip, r2, [r3]
 8013638:	f1bc 0f00 	cmp.w	ip, #0
 801363c:	d1f8      	bne.n	8013630 <eswifi_unlock+0x18>
 801363e:	f3bf 8f5b 	dmb	ish
	return z_impl_k_mutex_unlock(mutex);
 8013642:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8013646:	f7f8 bf33 	b.w	800c4b0 <z_impl_k_mutex_unlock>
}
 801364a:	4770      	bx	lr

0801364c <__eswifi_socket_free>:
{
 801364c:	b570      	push	{r4, r5, r6, lr}
	__select_socket(eswifi, socket->index);
 801364e:	460e      	mov	r6, r1
{
 8013650:	460c      	mov	r4, r1
	__select_socket(eswifi, socket->index);
 8013652:	f816 1b50 	ldrb.w	r1, [r6], #80
{
 8013656:	4605      	mov	r5, r0
	__select_socket(eswifi, socket->index);
 8013658:	f7f6 fcfc 	bl	800a054 <__select_socket>
	k_work_cancel_delayable(&socket->read_work);
 801365c:	4630      	mov	r0, r6
 801365e:	f000 fdbb 	bl	80141d8 <k_work_cancel_delayable>
	__select_socket(eswifi, socket->index);
 8013662:	7821      	ldrb	r1, [r4, #0]
 8013664:	4628      	mov	r0, r5
 8013666:	f7f6 fcf5 	bl	800a054 <__select_socket>
	__stop_socket(eswifi, socket);
 801366a:	4628      	mov	r0, r5
 801366c:	4621      	mov	r1, r4
 801366e:	f7f6 fd05 	bl	800a07c <__stop_socket.isra.0>
}
 8013672:	2000      	movs	r0, #0
 8013674:	bd70      	pop	{r4, r5, r6, pc}

08013676 <eswifi_spi_cmddata_ready>:
{
 8013676:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return gpio_pin_get(spi->dr.dev, spi->dr.pin) > 0;
 8013678:	e9d0 0406 	ldrd	r0, r4, [r0, #24]
	const struct gpio_driver_data *const data =
 801367c:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
 801367e:	6883      	ldr	r3, [r0, #8]
 8013680:	a901      	add	r1, sp, #4
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	4798      	blx	r3
	if (ret == 0) {
 8013686:	b948      	cbnz	r0, 801369c <eswifi_spi_cmddata_ready+0x26>
		*value ^= data->invert;
 8013688:	682b      	ldr	r3, [r5, #0]
 801368a:	9a01      	ldr	r2, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 801368c:	b2e4      	uxtb	r4, r4
		*value ^= data->invert;
 801368e:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8013690:	2301      	movs	r3, #1
 8013692:	40a3      	lsls	r3, r4
 8013694:	421a      	tst	r2, r3
 8013696:	bf14      	ite	ne
 8013698:	2001      	movne	r0, #1
 801369a:	2000      	moveq	r0, #0
}
 801369c:	2800      	cmp	r0, #0
 801369e:	bfd4      	ite	le
 80136a0:	2000      	movle	r0, #0
 80136a2:	2001      	movgt	r0, #1
 80136a4:	b003      	add	sp, #12
 80136a6:	bd30      	pop	{r4, r5, pc}

080136a8 <eswifi_spi_read.isra.0>:
static int eswifi_spi_read(struct eswifi_dev *eswifi, char *data, size_t dlen)
 80136a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	spi_rx_buf[0].buf = data;
 80136aa:	9100      	str	r1, [sp, #0]
 * @return a value from spi_read().
 */
static inline int spi_read_dt(const struct spi_dt_spec *spec,
			      const struct spi_buf_set *rx_bufs)
{
	return spi_read(spec->bus, &spec->config, rx_bufs);
 80136ac:	4601      	mov	r1, r0
	spi_rx_buf[0].len = dlen / 2; /* 16-bit words */
 80136ae:	0852      	lsrs	r2, r2, #1
	spi_rx.count = ARRAY_SIZE(spi_rx_buf);
 80136b0:	2301      	movs	r3, #1
 80136b2:	f851 0b04 	ldr.w	r0, [r1], #4
	spi_rx_buf[0].len = dlen / 2; /* 16-bit words */
 80136b6:	9201      	str	r2, [sp, #4]
	spi_rx.buffers = spi_rx_buf;
 80136b8:	f8cd d008 	str.w	sp, [sp, #8]
	spi_rx.count = ARRAY_SIZE(spi_rx_buf);
 80136bc:	9303      	str	r3, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80136be:	6883      	ldr	r3, [r0, #8]
 80136c0:	2200      	movs	r2, #0
 80136c2:	681c      	ldr	r4, [r3, #0]
 80136c4:	ab02      	add	r3, sp, #8
 80136c6:	47a0      	blx	r4
}
 80136c8:	b004      	add	sp, #16
 80136ca:	bd10      	pop	{r4, pc}

080136cc <spi_release_dt.isra.0>:
 *
 * @return a value from spi_release().
 */
static inline int spi_release_dt(const struct spi_dt_spec *spec)
{
	return spi_release(spec->bus, &spec->config);
 80136cc:	4601      	mov	r1, r0
 80136ce:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->release(dev, config);
 80136d2:	6883      	ldr	r3, [r0, #8]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	4718      	bx	r3

080136d8 <eswifi_unlock>:
	if (!--eswifi->mutex_depth) {
 80136d8:	f8d0 37d0 	ldr.w	r3, [r0, #2000]	; 0x7d0
 80136dc:	3b01      	subs	r3, #1
 80136de:	f8c0 37d0 	str.w	r3, [r0, #2000]	; 0x7d0
 80136e2:	b993      	cbnz	r3, 801370a <eswifi_unlock+0x32>
 80136e4:	f3bf 8f5b 	dmb	ish
 80136e8:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 80136ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136f0:	e853 1f00 	ldrex	r1, [r3]
 80136f4:	e843 2c00 	strex	ip, r2, [r3]
 80136f8:	f1bc 0f00 	cmp.w	ip, #0
 80136fc:	d1f8      	bne.n	80136f0 <eswifi_unlock+0x18>
 80136fe:	f3bf 8f5b 	dmb	ish
 8013702:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8013706:	f7f8 bed3 	b.w	800c4b0 <z_impl_k_mutex_unlock>
}
 801370a:	4770      	bx	lr

0801370c <eswifi_spi_wait_cmddata_ready>:
{
 801370c:	b538      	push	{r3, r4, r5, lr}
 801370e:	4605      	mov	r5, r0
 8013710:	f64e 2460 	movw	r4, #60000	; 0xea60
	return z_impl_k_sleep(timeout);
 8013714:	200a      	movs	r0, #10
 8013716:	2100      	movs	r1, #0
 8013718:	f7f9 fbfe 	bl	800cf18 <z_impl_k_sleep>
	} while (!eswifi_spi_cmddata_ready(spi) && --max_retries);
 801371c:	4628      	mov	r0, r5
 801371e:	f7ff ffaa 	bl	8013676 <eswifi_spi_cmddata_ready>
 8013722:	b920      	cbnz	r0, 801372e <eswifi_spi_wait_cmddata_ready+0x22>
 8013724:	3c01      	subs	r4, #1
 8013726:	d1f5      	bne.n	8013714 <eswifi_spi_wait_cmddata_ready+0x8>
	return max_retries ? 0 : -ETIMEDOUT;
 8013728:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
 801372c:	bd38      	pop	{r3, r4, r5, pc}
	return max_retries ? 0 : -ETIMEDOUT;
 801372e:	2000      	movs	r0, #0
 8013730:	e7fc      	b.n	801372c <eswifi_spi_wait_cmddata_ready+0x20>

08013732 <eswifi_spi_request>:
{
 8013732:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct eswifi_spi_data *spi = eswifi->bus_data;
 8013736:	f8d0 67d4 	ldr.w	r6, [r0, #2004]	; 0x7d4
{
 801373a:	4607      	mov	r7, r0
 801373c:	4614      	mov	r4, r2
 801373e:	4698      	mov	r8, r3
	if (!cmd) {
 8013740:	460d      	mov	r5, r1
 8013742:	b1d9      	cbz	r1, 801377c <eswifi_spi_request+0x4a>
	err = eswifi_spi_wait_cmddata_ready(spi);
 8013744:	4630      	mov	r0, r6
 8013746:	f7ff ffe1 	bl	801370c <eswifi_spi_wait_cmddata_ready>
	if (err) {
 801374a:	bb50      	cbnz	r0, 80137a2 <eswifi_spi_request+0x70>
	if (clen % 2) { /* Add post-padding if necessary */
 801374c:	07e3      	lsls	r3, r4, #31
		cmd[clen] = 0x0a;
 801374e:	bf42      	ittt	mi
 8013750:	230a      	movmi	r3, #10
 8013752:	552b      	strbmi	r3, [r5, r4]
		clen++;
 8013754:	3401      	addmi	r4, #1
	return spi_write(spec->bus, &spec->config, tx_bufs);
 8013756:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
	spi_tx_buf[0].buf = data;
 801375a:	9500      	str	r5, [sp, #0]
	spi_tx_buf[0].len = dlen / 2; /* 16-bit words */
 801375c:	0864      	lsrs	r4, r4, #1
	spi_tx.count = ARRAY_SIZE(spi_tx_buf);
 801375e:	2301      	movs	r3, #1
 8013760:	f851 0b04 	ldr.w	r0, [r1], #4
	spi_tx_buf[0].len = dlen / 2; /* 16-bit words */
 8013764:	9401      	str	r4, [sp, #4]
	spi_tx.buffers = spi_tx_buf;
 8013766:	f8cd d008 	str.w	sp, [sp, #8]
	spi_tx.count = ARRAY_SIZE(spi_tx_buf);
 801376a:	9303      	str	r3, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 801376c:	6883      	ldr	r3, [r0, #8]
 801376e:	aa02      	add	r2, sp, #8
 8013770:	681c      	ldr	r4, [r3, #0]
 8013772:	2300      	movs	r3, #0
 8013774:	47a0      	blx	r4
	spi_release_dt(&spi->bus);
 8013776:	4630      	mov	r0, r6
 8013778:	f7ff ffa8 	bl	80136cc <spi_release_dt.isra.0>
	err = eswifi_spi_wait_cmddata_ready(spi);
 801377c:	4630      	mov	r0, r6
 801377e:	f7ff ffc5 	bl	801370c <eswifi_spi_wait_cmddata_ready>
	if (err) {
 8013782:	b970      	cbnz	r0, 80137a2 <eswifi_spi_request+0x70>
	unsigned int offset = 0U, to_read = SPI_READ_CHUNK_SIZE;
 8013784:	2520      	movs	r5, #32
 8013786:	4604      	mov	r4, r0
	while (eswifi_spi_cmddata_ready(spi) && to_read) {
 8013788:	4630      	mov	r0, r6
 801378a:	f7ff ff74 	bl	8013676 <eswifi_spi_cmddata_ready>
 801378e:	b100      	cbz	r0, 8013792 <eswifi_spi_request+0x60>
 8013790:	b955      	cbnz	r5, 80137a8 <eswifi_spi_request+0x76>
	while (eswifi_spi_cmddata_ready(spi)) {
 8013792:	4630      	mov	r0, r6
 8013794:	f7ff ff6f 	bl	8013676 <eswifi_spi_cmddata_ready>
 8013798:	b9e0      	cbnz	r0, 80137d4 <eswifi_spi_request+0xa2>
	spi_release_dt(&spi->bus);
 801379a:	4630      	mov	r0, r6
 801379c:	f7ff ff96 	bl	80136cc <spi_release_dt.isra.0>
	return offset;
 80137a0:	4620      	mov	r0, r4
}
 80137a2:	b004      	add	sp, #16
 80137a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		to_read = MIN(rlen - offset, to_read);
 80137a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137aa:	1b1b      	subs	r3, r3, r4
 80137ac:	429d      	cmp	r5, r3
 80137ae:	bf28      	it	cs
 80137b0:	461d      	movcs	r5, r3
		memset(rsp + offset, 0, to_read);
 80137b2:	eb08 0304 	add.w	r3, r8, r4
 80137b6:	462a      	mov	r2, r5
 80137b8:	4618      	mov	r0, r3
 80137ba:	2100      	movs	r1, #0
 80137bc:	f001 f831 	bl	8014822 <memset>
		eswifi_spi_read(eswifi, rsp + offset, to_read);
 80137c0:	462a      	mov	r2, r5
 80137c2:	4601      	mov	r1, r0
 80137c4:	f8d7 07d4 	ldr.w	r0, [r7, #2004]	; 0x7d4
 80137c8:	f7ff ff6e 	bl	80136a8 <eswifi_spi_read.isra.0>
		offset += to_read;
 80137cc:	442c      	add	r4, r5
	z_impl_k_yield();
 80137ce:	f7f9 fb1b 	bl	800ce08 <z_impl_k_yield>
}
 80137d2:	e7d9      	b.n	8013788 <eswifi_spi_request+0x56>
		eswifi_spi_read(eswifi, tmp, 2);
 80137d4:	f8d7 07d4 	ldr.w	r0, [r7, #2004]	; 0x7d4
 80137d8:	2202      	movs	r2, #2
 80137da:	a902      	add	r1, sp, #8
 80137dc:	f7ff ff64 	bl	80136a8 <eswifi_spi_read.isra.0>
	return z_impl_k_sleep(timeout);
 80137e0:	2100      	movs	r1, #0
 80137e2:	200a      	movs	r0, #10
 80137e4:	f7f9 fb98 	bl	800cf18 <z_impl_k_sleep>
 80137e8:	e7d3      	b.n	8013792 <eswifi_spi_request+0x60>

080137ea <eswifi_socket_setsockopt>:
}
 80137ea:	f06f 0015 	mvn.w	r0, #21
 80137ee:	4770      	bx	lr

080137f0 <eswifi_socket_is_supported>:
}
 80137f0:	2001      	movs	r0, #1
 80137f2:	4770      	bx	lr

080137f4 <eswifi_off_freeaddrinfo>:
{
 80137f4:	b510      	push	{r4, lr}
 80137f6:	4604      	mov	r4, r0
	free(res->ai_addr);
 80137f8:	6980      	ldr	r0, [r0, #24]
 80137fa:	f7f9 fee7 	bl	800d5cc <free>
	free(res);
 80137fe:	4620      	mov	r0, r4
}
 8013800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free(res);
 8013804:	f7f9 bee2 	b.w	800d5cc <free>

08013808 <eswifi_unlock>:
	if (!--eswifi->mutex_depth) {
 8013808:	f8d0 37d0 	ldr.w	r3, [r0, #2000]	; 0x7d0
 801380c:	3b01      	subs	r3, #1
 801380e:	f8c0 37d0 	str.w	r3, [r0, #2000]	; 0x7d0
 8013812:	b993      	cbnz	r3, 801383a <eswifi_unlock+0x32>
 8013814:	f3bf 8f5b 	dmb	ish
 8013818:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 801381c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013820:	e853 1f00 	ldrex	r1, [r3]
 8013824:	e843 2c00 	strex	ip, r2, [r3]
 8013828:	f1bc 0f00 	cmp.w	ip, #0
 801382c:	d1f8      	bne.n	8013820 <eswifi_unlock+0x18>
 801382e:	f3bf 8f5b 	dmb	ish
	return z_impl_k_mutex_unlock(mutex);
 8013832:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8013836:	f7f8 be3b 	b.w	800c4b0 <z_impl_k_mutex_unlock>
}
 801383a:	4770      	bx	lr

0801383c <eswifi_socket_read>:
	return eswifi_socket_recv(obj, buf, len, flags);
 801383c:	f7f7 b8f0 	b.w	800aa20 <eswifi_socket_recv.constprop.0>

08013840 <eswifi_socket_recvfrom>:
{
 8013840:	b508      	push	{r3, lr}
 8013842:	9b03      	ldr	r3, [sp, #12]
	if (fromlen != NULL) {
 8013844:	b91b      	cbnz	r3, 801384e <eswifi_socket_recvfrom+0xe>
}
 8013846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return eswifi_socket_recv(obj, buf, len, flags);
 801384a:	f7f7 b8e9 	b.w	800aa20 <eswifi_socket_recv.constprop.0>
		errno = EOPNOTSUPP;
 801384e:	f7fc fe80 	bl	8010552 <__errno>
 8013852:	235f      	movs	r3, #95	; 0x5f
 8013854:	6003      	str	r3, [r0, #0]
}
 8013856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801385a:	bd08      	pop	{r3, pc}

0801385c <eswifi_socket_write>:
	return eswifi_socket_send(obj, buf, len, flags);
 801385c:	f7f7 b938 	b.w	800aad0 <eswifi_socket_send.constprop.0>

08013860 <eswifi_socket_sendto>:
{
 8013860:	b508      	push	{r3, lr}
 8013862:	9b02      	ldr	r3, [sp, #8]
	if (to != NULL) {
 8013864:	b91b      	cbnz	r3, 801386e <eswifi_socket_sendto+0xe>
}
 8013866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return eswifi_socket_send(obj, buf, len, flags);
 801386a:	f7f7 b931 	b.w	800aad0 <eswifi_socket_send.constprop.0>
		errno = EOPNOTSUPP;
 801386e:	f7fc fe70 	bl	8010552 <__errno>
 8013872:	235f      	movs	r3, #95	; 0x5f
 8013874:	6003      	str	r3, [r0, #0]
}
 8013876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801387a:	bd08      	pop	{r3, pc}

0801387c <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801387c:	6843      	ldr	r3, [r0, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8013880:	69da      	ldr	r2, [r3, #28]
 8013882:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8013884:	bf44      	itt	mi
 8013886:	2208      	movmi	r2, #8
 8013888:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 801388a:	69da      	ldr	r2, [r3, #28]
 801388c:	0692      	lsls	r2, r2, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 801388e:	bf43      	ittte	mi
 8013890:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 8013892:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8013894:	2000      	movmi	r0, #0
		return -1;
 8013896:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 801389a:	4770      	bx	lr

0801389c <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801389c:	6843      	ldr	r3, [r0, #4]
 801389e:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80138a0:	6813      	ldr	r3, [r2, #0]
 80138a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138a6:	6013      	str	r3, [r2, #0]
}
 80138a8:	4770      	bx	lr

080138aa <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80138aa:	6843      	ldr	r3, [r0, #4]
 80138ac:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80138ae:	6813      	ldr	r3, [r2, #0]
 80138b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80138b4:	6013      	str	r3, [r2, #0]
}
 80138b6:	4770      	bx	lr

080138b8 <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80138b8:	6843      	ldr	r3, [r0, #4]
 80138ba:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80138bc:	6813      	ldr	r3, [r2, #0]
 80138be:	f043 0320 	orr.w	r3, r3, #32
 80138c2:	6013      	str	r3, [r2, #0]
}
 80138c4:	4770      	bx	lr

080138c6 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80138c6:	6843      	ldr	r3, [r0, #4]
 80138c8:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80138ca:	6813      	ldr	r3, [r2, #0]
 80138cc:	f023 0320 	bic.w	r3, r3, #32
 80138d0:	6013      	str	r3, [r2, #0]
}
 80138d2:	4770      	bx	lr

080138d4 <uart_stm32_irq_update>:
}
 80138d4:	2001      	movs	r0, #1
 80138d6:	4770      	bx	lr

080138d8 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = dev->data;
 80138d8:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 80138da:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 80138de:	4770      	bx	lr

080138e0 <uart_stm32_isr>:
	struct uart_stm32_data *data = dev->data;
 80138e0:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 80138e2:	6893      	ldr	r3, [r2, #8]
 80138e4:	b10b      	cbz	r3, 80138ea <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 80138e6:	68d1      	ldr	r1, [r2, #12]
 80138e8:	4718      	bx	r3
}
 80138ea:	4770      	bx	lr

080138ec <uart_stm32_set_baudrate>:
{
 80138ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (clock_control_get_rate(data->clock,
 80138ee:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80138f0:	6847      	ldr	r7, [r0, #4]
	if (clock_control_get_rate(data->clock,
 80138f2:	685e      	ldr	r6, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80138f4:	f857 5b0c 	ldr.w	r5, [r7], #12
{
 80138f8:	460c      	mov	r4, r1
	return z_device_is_ready(dev);
 80138fa:	4630      	mov	r0, r6
 80138fc:	f000 f9de 	bl	8013cbc <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8013900:	b198      	cbz	r0, 801392a <uart_stm32_set_baudrate+0x3e>
	if (api->get_rate == NULL) {
 8013902:	68b3      	ldr	r3, [r6, #8]
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	b183      	cbz	r3, 801392a <uart_stm32_set_baudrate+0x3e>
	return api->get_rate(dev, sys, rate);
 8013908:	aa01      	add	r2, sp, #4
 801390a:	4639      	mov	r1, r7
 801390c:	4630      	mov	r0, r6
 801390e:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8013910:	2800      	cmp	r0, #0
 8013912:	db0a      	blt.n	801392a <uart_stm32_set_baudrate+0x3e>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8013914:	682b      	ldr	r3, [r5, #0]
 8013916:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801391a:	602b      	str	r3, [r5, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 801391c:	9b01      	ldr	r3, [sp, #4]
 801391e:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8013922:	fbb3 f3f4 	udiv	r3, r3, r4
 8013926:	b29b      	uxth	r3, r3
 8013928:	60eb      	str	r3, [r5, #12]
}
 801392a:	b003      	add	sp, #12
 801392c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801392e <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 801392e:	b508      	push	{r3, lr}
 8013930:	2200      	movs	r2, #0
 8013932:	2025      	movs	r0, #37	; 0x25
 8013934:	4611      	mov	r1, r2
 8013936:	f7ef ff51 	bl	80037dc <z_arm_irq_priority_set>
 801393a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801393e:	2025      	movs	r0, #37	; 0x25
 8013940:	f7ef bf1a 	b.w	8003778 <arch_irq_enable>

08013944 <uart_stm32_irq_config_func_1>:
 8013944:	b508      	push	{r3, lr}
 8013946:	2200      	movs	r2, #0
 8013948:	2034      	movs	r0, #52	; 0x34
 801394a:	4611      	mov	r1, r2
 801394c:	f7ef ff46 	bl	80037dc <z_arm_irq_priority_set>
 8013950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013954:	2034      	movs	r0, #52	; 0x34
 8013956:	f7ef bf0f 	b.w	8003778 <arch_irq_enable>

0801395a <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801395a:	6843      	ldr	r3, [r0, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 801395e:	69d8      	ldr	r0, [r3, #28]
}
 8013960:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8013964:	4770      	bx	lr

08013966 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8013966:	6903      	ldr	r3, [r0, #16]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801396c:	6843      	ldr	r3, [r0, #4]
 801396e:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8013970:	6813      	ldr	r3, [r2, #0]
 8013972:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8013976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801397a:	d02d      	beq.n	80139d8 <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 801397c:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8013980:	4243      	negs	r3, r0
 8013982:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8013984:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8013986:	6853      	ldr	r3, [r2, #4]
 8013988:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 801398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013990:	d024      	beq.n	80139dc <uart_stm32_config_get+0x76>
 8013992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013996:	d023      	beq.n	80139e0 <uart_stm32_config_get+0x7a>
 8013998:	2b00      	cmp	r3, #0
 801399a:	bf14      	ite	ne
 801399c:	2303      	movne	r3, #3
 801399e:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80139a0:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80139a2:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80139a4:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80139a6:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
	switch (db) {
 80139aa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80139ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80139b2:	d017      	beq.n	80139e4 <uart_stm32_config_get+0x7e>
 80139b4:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80139b8:	d119      	bne.n	80139ee <uart_stm32_config_get+0x88>
			return UART_CFG_DATA_BITS_6;
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	bf0c      	ite	eq
 80139be:	2302      	moveq	r3, #2
 80139c0:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80139c2:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80139c4:	6893      	ldr	r3, [r2, #8]
 80139c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80139ca:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80139ce:	4253      	negs	r3, r2
 80139d0:	4153      	adcs	r3, r2
 80139d2:	71cb      	strb	r3, [r1, #7]
}
 80139d4:	2000      	movs	r0, #0
 80139d6:	4770      	bx	lr
	switch (parity) {
 80139d8:	2302      	movs	r3, #2
 80139da:	e7d3      	b.n	8013984 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 80139dc:	2300      	movs	r3, #0
 80139de:	e7df      	b.n	80139a0 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 80139e0:	2302      	movs	r3, #2
 80139e2:	e7dd      	b.n	80139a0 <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_9;
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	bf14      	ite	ne
 80139e8:	2303      	movne	r3, #3
 80139ea:	2304      	moveq	r3, #4
 80139ec:	e7e9      	b.n	80139c2 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	bf14      	ite	ne
 80139f2:	2302      	movne	r3, #2
 80139f4:	2303      	moveq	r3, #3
 80139f6:	e7e4      	b.n	80139c2 <uart_stm32_config_get+0x5c>

080139f8 <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80139f8:	6843      	ldr	r3, [r0, #4]
 80139fa:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80139fc:	69d8      	ldr	r0, [r3, #28]
 80139fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8013a02:	bf1c      	itt	ne
 8013a04:	6818      	ldrne	r0, [r3, #0]
 8013a06:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 8013a0a:	4770      	bx	lr

08013a0c <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8013a0c:	6843      	ldr	r3, [r0, #4]
{
 8013a0e:	b570      	push	{r4, r5, r6, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8013a10:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8013a12:	69e0      	ldr	r0, [r4, #28]
 8013a14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013a18:	d018      	beq.n	8013a4c <uart_stm32_fifo_fill+0x40>
	__asm__ volatile(
 8013a1a:	f04f 0310 	mov.w	r3, #16
 8013a1e:	f3ef 8511 	mrs	r5, BASEPRI
 8013a22:	f383 8812 	msr	BASEPRI_MAX, r3
 8013a26:	f3bf 8f6f 	isb	sy
	while ((size - num_tx > 0) &&
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	b2d8      	uxtb	r0, r3
 8013a2e:	1a16      	subs	r6, r2, r0
 8013a30:	2e00      	cmp	r6, #0
 8013a32:	dd07      	ble.n	8013a44 <uart_stm32_fifo_fill+0x38>
 8013a34:	69e6      	ldr	r6, [r4, #28]
 8013a36:	0636      	lsls	r6, r6, #24
 8013a38:	f103 0301 	add.w	r3, r3, #1
 8013a3c:	d502      	bpl.n	8013a44 <uart_stm32_fifo_fill+0x38>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8013a3e:	5c08      	ldrb	r0, [r1, r0]
 8013a40:	8520      	strh	r0, [r4, #40]	; 0x28
}
 8013a42:	e7f3      	b.n	8013a2c <uart_stm32_fifo_fill+0x20>
	__asm__ volatile(
 8013a44:	f385 8811 	msr	BASEPRI, r5
 8013a48:	f3bf 8f6f 	isb	sy
}
 8013a4c:	bd70      	pop	{r4, r5, r6, pc}

08013a4e <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8013a4e:	6843      	ldr	r3, [r0, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8013a52:	69da      	ldr	r2, [r3, #28]
 8013a54:	0612      	lsls	r2, r2, #24
 8013a56:	d5fc      	bpl.n	8013a52 <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 8013a58:	f04f 0010 	mov.w	r0, #16
 8013a5c:	f3ef 8211 	mrs	r2, BASEPRI
 8013a60:	f380 8812 	msr	BASEPRI_MAX, r0
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	69d8      	ldr	r0, [r3, #28]
 8013a6a:	0600      	lsls	r0, r0, #24
 8013a6c:	d404      	bmi.n	8013a78 <uart_stm32_poll_out+0x2a>
	__asm__ volatile(
 8013a6e:	f382 8811 	msr	BASEPRI, r2
 8013a72:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8013a76:	e7ec      	b.n	8013a52 <uart_stm32_poll_out+0x4>
  USARTx->TDR = Value;
 8013a78:	b289      	uxth	r1, r1
 8013a7a:	8519      	strh	r1, [r3, #40]	; 0x28
	__asm__ volatile(
 8013a7c:	f382 8811 	msr	BASEPRI, r2
 8013a80:	f3bf 8f6f 	isb	sy
}
 8013a84:	4770      	bx	lr

08013a86 <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8013a86:	6843      	ldr	r3, [r0, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8013a8a:	69da      	ldr	r2, [r3, #28]
 8013a8c:	0691      	lsls	r1, r2, #26
 8013a8e:	d502      	bpl.n	8013a96 <uart_stm32_irq_is_pending+0x10>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8013a90:	681a      	ldr	r2, [r3, #0]
 8013a92:	0692      	lsls	r2, r2, #26
 8013a94:	d407      	bmi.n	8013aa6 <uart_stm32_irq_is_pending+0x20>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8013a96:	69d8      	ldr	r0, [r3, #28]
 8013a98:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8013a9c:	d004      	beq.n	8013aa8 <uart_stm32_irq_is_pending+0x22>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8013a9e:	6818      	ldr	r0, [r3, #0]
 8013aa0:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8013aa4:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8013aa6:	2001      	movs	r0, #1
}
 8013aa8:	4770      	bx	lr

08013aaa <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8013aaa:	6843      	ldr	r3, [r0, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8013aae:	69d8      	ldr	r0, [r3, #28]
}
 8013ab0:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8013ab4:	4770      	bx	lr

08013ab6 <uart_stm32_fifo_read>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8013ab6:	6843      	ldr	r3, [r0, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
{
 8013aba:	b570      	push	{r4, r5, r6, lr}
	while ((size - num_rx > 0) &&
 8013abc:	2400      	movs	r4, #0
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8013abe:	2508      	movs	r5, #8
 8013ac0:	b2e0      	uxtb	r0, r4
 8013ac2:	1a16      	subs	r6, r2, r0
 8013ac4:	2e00      	cmp	r6, #0
 8013ac6:	dd0a      	ble.n	8013ade <uart_stm32_fifo_read+0x28>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8013ac8:	69de      	ldr	r6, [r3, #28]
 8013aca:	06b6      	lsls	r6, r6, #26
 8013acc:	d507      	bpl.n	8013ade <uart_stm32_fifo_read+0x28>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8013ace:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 8013ad0:	540e      	strb	r6, [r1, r0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8013ad2:	69d8      	ldr	r0, [r3, #28]
 8013ad4:	0700      	lsls	r0, r0, #28
 8013ad6:	d500      	bpl.n	8013ada <uart_stm32_fifo_read+0x24>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8013ad8:	621d      	str	r5, [r3, #32]
 8013ada:	3401      	adds	r4, #1
 8013adc:	e7f0      	b.n	8013ac0 <uart_stm32_fifo_read+0xa>
}
 8013ade:	bd70      	pop	{r4, r5, r6, pc}

08013ae0 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8013ae0:	6843      	ldr	r3, [r0, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8013ae4:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8013ae6:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8013ae8:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8013aea:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8013aec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8013af0:	bf48      	it	mi
 8013af2:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8013af6:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8013af8:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8013afa:	bf48      	it	mi
 8013afc:	f040 0004 	orrmi.w	r0, r0, #4
 8013b00:	05d1      	lsls	r1, r2, #23
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8013b02:	bf42      	ittt	mi
 8013b04:	f44f 7280 	movmi.w	r2, #256	; 0x100
		err |= UART_BREAK;
 8013b08:	f040 0008 	orrmi.w	r0, r0, #8
 8013b0c:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8013b0e:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8013b10:	bf44      	itt	mi
 8013b12:	2208      	movmi	r2, #8
 8013b14:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8013b16:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8013b18:	bf44      	itt	mi
 8013b1a:	2201      	movmi	r2, #1
 8013b1c:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8013b1e:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8013b20:	bf44      	itt	mi
 8013b22:	2202      	movmi	r2, #2
 8013b24:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8013b26:	2204      	movs	r2, #4
 8013b28:	621a      	str	r2, [r3, #32]
}
 8013b2a:	4770      	bx	lr

08013b2c <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8013b2c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8013b2e:	6803      	ldr	r3, [r0, #0]
 8013b30:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8013b32:	7903      	ldrb	r3, [r0, #4]
 8013b34:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	00db      	lsls	r3, r3, #3
 8013b3c:	6805      	ldr	r5, [r0, #0]
 8013b3e:	6814      	ldr	r4, [r2, #0]
 8013b40:	441d      	add	r5, r3
 8013b42:	42ac      	cmp	r4, r5
 8013b44:	d902      	bls.n	8013b4c <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 8013b46:	f06f 0001 	mvn.w	r0, #1
}
 8013b4a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8013b4c:	7965      	ldrb	r5, [r4, #5]
 8013b4e:	428d      	cmp	r5, r1
 8013b50:	d002      	beq.n	8013b58 <pinctrl_lookup_state+0x2c>
		(*state)++;
 8013b52:	3408      	adds	r4, #8
 8013b54:	6014      	str	r4, [r2, #0]
 8013b56:	e7f1      	b.n	8013b3c <pinctrl_lookup_state+0x10>
			return 0;
 8013b58:	2000      	movs	r0, #0
 8013b5a:	e7f6      	b.n	8013b4a <pinctrl_lookup_state+0x1e>

08013b5c <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8013b5c:	680a      	ldr	r2, [r1, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8013b5e:	684b      	ldr	r3, [r1, #4]
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8013b60:	0912      	lsrs	r2, r2, #4
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8013b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8013b66:	3201      	adds	r2, #1
 8013b68:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8013b6c:	4358      	muls	r0, r3
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 8013b6e:	688b      	ldr	r3, [r1, #8]
 8013b70:	0e5b      	lsrs	r3, r3, #25
 8013b72:	3301      	adds	r3, #1
 8013b74:	005b      	lsls	r3, r3, #1
}
 8013b76:	fbb0 f0f3 	udiv	r0, r0, r3
 8013b7a:	4770      	bx	lr

08013b7c <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	4770      	bx	lr

08013b80 <mbedtls_md5_init>:
 8013b80:	2258      	movs	r2, #88	; 0x58
 8013b82:	2100      	movs	r1, #0
 8013b84:	f000 be4d 	b.w	8014822 <memset>

08013b88 <mbedtls_md5_free>:
    if( ctx == NULL )
 8013b88:	b110      	cbz	r0, 8013b90 <mbedtls_md5_free+0x8>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 8013b8a:	2158      	movs	r1, #88	; 0x58
 8013b8c:	f7f8 b8f4 	b.w	800bd78 <mbedtls_platform_zeroize>
}
 8013b90:	4770      	bx	lr

08013b92 <mbedtls_md5_update>:
{
 8013b92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b96:	4605      	mov	r5, r0
 8013b98:	460e      	mov	r6, r1
    if( ilen == 0 )
 8013b9a:	4614      	mov	r4, r2
 8013b9c:	b912      	cbnz	r2, 8013ba4 <mbedtls_md5_update+0x12>
    return( 0 );
 8013b9e:	2000      	movs	r0, #0
}
 8013ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
 8013ba4:	6803      	ldr	r3, [r0, #0]
 8013ba6:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
 8013baa:	18d3      	adds	r3, r2, r3
 8013bac:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
 8013bae:	bf22      	ittt	cs
 8013bb0:	6843      	ldrcs	r3, [r0, #4]
 8013bb2:	3301      	addcs	r3, #1
 8013bb4:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
 8013bb6:	b1a7      	cbz	r7, 8013be2 <mbedtls_md5_update+0x50>
    fill = 64 - left;
 8013bb8:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 8013bbc:	454a      	cmp	r2, r9
 8013bbe:	d310      	bcc.n	8013be2 <mbedtls_md5_update+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8013bc0:	f100 0818 	add.w	r8, r0, #24
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8013bc4:	464a      	mov	r2, r9
 8013bc6:	eb08 0007 	add.w	r0, r8, r7
 8013bca:	f000 fdef 	bl	80147ac <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8013bce:	4641      	mov	r1, r8
 8013bd0:	4628      	mov	r0, r5
 8013bd2:	f7f7 fcfd 	bl	800b5d0 <mbedtls_internal_md5_process>
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	d1e2      	bne.n	8013ba0 <mbedtls_md5_update+0xe>
        ilen  -= fill;
 8013bda:	443c      	add	r4, r7
        input += fill;
 8013bdc:	444e      	add	r6, r9
        ilen  -= fill;
 8013bde:	3c40      	subs	r4, #64	; 0x40
        left = 0;
 8013be0:	4607      	mov	r7, r0
 8013be2:	4426      	add	r6, r4
 8013be4:	e005      	b.n	8013bf2 <mbedtls_md5_update+0x60>
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 8013be6:	4628      	mov	r0, r5
 8013be8:	f7f7 fcf2 	bl	800b5d0 <mbedtls_internal_md5_process>
 8013bec:	2800      	cmp	r0, #0
 8013bee:	d1d7      	bne.n	8013ba0 <mbedtls_md5_update+0xe>
        ilen  -= 64;
 8013bf0:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 8013bf2:	2c3f      	cmp	r4, #63	; 0x3f
 8013bf4:	eba6 0104 	sub.w	r1, r6, r4
 8013bf8:	d8f5      	bhi.n	8013be6 <mbedtls_md5_update+0x54>
    if( ilen > 0 )
 8013bfa:	2c00      	cmp	r4, #0
 8013bfc:	d0cf      	beq.n	8013b9e <mbedtls_md5_update+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8013bfe:	f105 0018 	add.w	r0, r5, #24
 8013c02:	4622      	mov	r2, r4
 8013c04:	4438      	add	r0, r7
 8013c06:	f000 fdd1 	bl	80147ac <memcpy>
 8013c0a:	e7c8      	b.n	8013b9e <mbedtls_md5_update+0xc>

08013c0c <mbedtls_md5_finish>:
    used = ctx->total[0] & 0x3F;
 8013c0c:	6803      	ldr	r3, [r0, #0]
 8013c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
 8013c12:	1c5a      	adds	r2, r3, #1
 8013c14:	4403      	add	r3, r0
{
 8013c16:	b570      	push	{r4, r5, r6, lr}
    if( used <= 56 )
 8013c18:	2a38      	cmp	r2, #56	; 0x38
{
 8013c1a:	460d      	mov	r5, r1
        memset( ctx->buffer + used, 0, 56 - used );
 8013c1c:	f100 0618 	add.w	r6, r0, #24
    ctx->buffer[used++] = 0x80;
 8013c20:	f04f 0180 	mov.w	r1, #128	; 0x80
{
 8013c24:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 8013c26:	7619      	strb	r1, [r3, #24]
        memset( ctx->buffer + used, 0, 56 - used );
 8013c28:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
 8013c2c:	d836      	bhi.n	8013c9c <mbedtls_md5_finish+0x90>
__ssp_bos_icheck3(memset, void *, int)
 8013c2e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013c32:	2100      	movs	r1, #0
 8013c34:	f000 fdf5 	bl	8014822 <memset>
         | ( ctx->total[1] <<  3 );
 8013c38:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 8013c3c:	0f5a      	lsrs	r2, r3, #29
 8013c3e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 8013c42:	00db      	lsls	r3, r3, #3
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 8013c44:	e9c4 3214 	strd	r3, r2, [r4, #80]	; 0x50
    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8013c48:	4631      	mov	r1, r6
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	f7f7 fcc0 	bl	800b5d0 <mbedtls_internal_md5_process>
 8013c50:	bb18      	cbnz	r0, 8013c9a <mbedtls_md5_finish+0x8e>
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 8013c52:	68a3      	ldr	r3, [r4, #8]
 8013c54:	702b      	strb	r3, [r5, #0]
 8013c56:	68a3      	ldr	r3, [r4, #8]
 8013c58:	0a1b      	lsrs	r3, r3, #8
 8013c5a:	706b      	strb	r3, [r5, #1]
 8013c5c:	8963      	ldrh	r3, [r4, #10]
 8013c5e:	70ab      	strb	r3, [r5, #2]
 8013c60:	7ae3      	ldrb	r3, [r4, #11]
 8013c62:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 8013c64:	68e3      	ldr	r3, [r4, #12]
 8013c66:	712b      	strb	r3, [r5, #4]
 8013c68:	68e3      	ldr	r3, [r4, #12]
 8013c6a:	0a1b      	lsrs	r3, r3, #8
 8013c6c:	716b      	strb	r3, [r5, #5]
 8013c6e:	89e3      	ldrh	r3, [r4, #14]
 8013c70:	71ab      	strb	r3, [r5, #6]
 8013c72:	7be3      	ldrb	r3, [r4, #15]
 8013c74:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 8013c76:	6923      	ldr	r3, [r4, #16]
 8013c78:	722b      	strb	r3, [r5, #8]
 8013c7a:	6923      	ldr	r3, [r4, #16]
 8013c7c:	0a1b      	lsrs	r3, r3, #8
 8013c7e:	726b      	strb	r3, [r5, #9]
 8013c80:	8a63      	ldrh	r3, [r4, #18]
 8013c82:	72ab      	strb	r3, [r5, #10]
 8013c84:	7ce3      	ldrb	r3, [r4, #19]
 8013c86:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 8013c88:	6963      	ldr	r3, [r4, #20]
 8013c8a:	732b      	strb	r3, [r5, #12]
 8013c8c:	6963      	ldr	r3, [r4, #20]
 8013c8e:	0a1b      	lsrs	r3, r3, #8
 8013c90:	736b      	strb	r3, [r5, #13]
 8013c92:	8ae3      	ldrh	r3, [r4, #22]
 8013c94:	73ab      	strb	r3, [r5, #14]
 8013c96:	7de3      	ldrb	r3, [r4, #23]
 8013c98:	73eb      	strb	r3, [r5, #15]
}
 8013c9a:	bd70      	pop	{r4, r5, r6, pc}
 8013c9c:	2100      	movs	r1, #0
 8013c9e:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8013ca2:	f000 fdbe 	bl	8014822 <memset>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8013ca6:	4631      	mov	r1, r6
 8013ca8:	4620      	mov	r0, r4
 8013caa:	f7f7 fc91 	bl	800b5d0 <mbedtls_internal_md5_process>
 8013cae:	2800      	cmp	r0, #0
 8013cb0:	d1f3      	bne.n	8013c9a <mbedtls_md5_finish+0x8e>
 8013cb2:	4601      	mov	r1, r0
 8013cb4:	2238      	movs	r2, #56	; 0x38
 8013cb6:	4630      	mov	r0, r6
 8013cb8:	e7bc      	b.n	8013c34 <mbedtls_md5_finish+0x28>

08013cba <z_device_state_init>:
}
 8013cba:	4770      	bx	lr

08013cbc <z_device_is_ready>:
	if (dev == NULL) {
 8013cbc:	b138      	cbz	r0, 8013cce <z_device_is_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
 8013cbe:	68c3      	ldr	r3, [r0, #12]
 8013cc0:	8818      	ldrh	r0, [r3, #0]
 8013cc2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8013cc6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8013cca:	4258      	negs	r0, r3
 8013ccc:	4158      	adcs	r0, r3
}
 8013cce:	4770      	bx	lr

08013cd0 <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
 8013cd0:	6940      	ldr	r0, [r0, #20]
{
 8013cd2:	b470      	push	{r4, r5, r6}
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	460d      	mov	r5, r1
	if (rv != NULL) {
 8013cd8:	b960      	cbnz	r0, 8013cf4 <device_required_foreach+0x24>
	size_t handle_count = 0;
 8013cda:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
 8013cdc:	462a      	mov	r2, r5
}
 8013cde:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
 8013ce0:	f7f8 b854 	b.w	800bd8c <device_visitor>
			++i;
 8013ce4:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
 8013ce6:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
 8013cea:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
 8013cec:	b2a4      	uxth	r4, r4
 8013cee:	4294      	cmp	r4, r2
 8013cf0:	d9f8      	bls.n	8013ce4 <device_required_foreach+0x14>
 8013cf2:	e7f3      	b.n	8013cdc <device_required_foreach+0xc>
		size_t i = 0;
 8013cf4:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
 8013cf6:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
 8013cfa:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013cfe:	e7f2      	b.n	8013ce6 <device_required_foreach+0x16>

08013d00 <arch_system_halt>:
	__asm__ volatile(
 8013d00:	f04f 0210 	mov.w	r2, #16
 8013d04:	f3ef 8311 	mrs	r3, BASEPRI
 8013d08:	f382 8812 	msr	BASEPRI_MAX, r2
 8013d0c:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8013d10:	e7fe      	b.n	8013d10 <arch_system_halt+0x10>

08013d12 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8013d12:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8013d14:	f7ff fff4 	bl	8013d00 <arch_system_halt>

08013d18 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8013d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d1a:	4605      	mov	r5, r0
 8013d1c:	460e      	mov	r6, r1
 8013d1e:	f04f 0310 	mov.w	r3, #16
 8013d22:	f3ef 8711 	mrs	r7, BASEPRI
 8013d26:	f383 8812 	msr	BASEPRI_MAX, r3
 8013d2a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8013d2e:	f7f9 f90b 	bl	800cf48 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8013d32:	4631      	mov	r1, r6
 8013d34:	4604      	mov	r4, r0
 8013d36:	4628      	mov	r0, r5
 8013d38:	f7ff ffeb 	bl	8013d12 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8013d3c:	f387 8811 	msr	BASEPRI, r7
 8013d40:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8013d44:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8013d46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013d4a:	f7ef bf73 	b.w	8003c34 <z_impl_k_thread_abort>

08013d4e <k_heap_init>:
{
 8013d4e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 8013d50:	f100 040c 	add.w	r4, r0, #12
 8013d54:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8013d58:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8013d5a:	f7fa beb1 	b.w	800eac0 <sys_heap_init>

08013d5e <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 8013d5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d62:	b085      	sub	sp, #20
 8013d64:	4606      	mov	r6, r0
 8013d66:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 8013d68:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
 8013d6c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 8013d6e:	f000 fb7e 	bl	801446e <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 8013d72:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 8013d76:	4605      	mov	r5, r0
 8013d78:	460f      	mov	r7, r1
	__asm__ volatile(
 8013d7a:	f04f 0310 	mov.w	r3, #16
 8013d7e:	f3ef 8411 	mrs	r4, BASEPRI
 8013d82:	f383 8812 	msr	BASEPRI_MAX, r3
 8013d86:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 8013d8a:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 8013d8e:	464a      	mov	r2, r9
 8013d90:	4641      	mov	r1, r8
 8013d92:	4630      	mov	r0, r6
 8013d94:	f7fa fe2c 	bl	800e9f0 <sys_heap_aligned_alloc>
 8013d98:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
 8013d9a:	f7f9 faf9 	bl	800d390 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 8013d9e:	9b03      	ldr	r3, [sp, #12]
 8013da0:	b13b      	cbz	r3, 8013db2 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
 8013da2:	f384 8811 	msr	BASEPRI, r4
 8013da6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	b005      	add	sp, #20
 8013dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
 8013db2:	1a28      	subs	r0, r5, r0
 8013db4:	eb67 0101 	sbc.w	r1, r7, r1
 8013db8:	2801      	cmp	r0, #1
 8013dba:	f171 0200 	sbcs.w	r2, r1, #0
 8013dbe:	dbf0      	blt.n	8013da2 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 8013dc0:	e9cd 0100 	strd	r0, r1, [sp]
 8013dc4:	465a      	mov	r2, fp
 8013dc6:	4621      	mov	r1, r4
 8013dc8:	4650      	mov	r0, sl
 8013dca:	f7f8 ff67 	bl	800cc9c <z_pend_curr>
	__asm__ volatile(
 8013dce:	f04f 0310 	mov.w	r3, #16
 8013dd2:	f3ef 8411 	mrs	r4, BASEPRI
 8013dd6:	f383 8812 	msr	BASEPRI_MAX, r3
 8013dda:	f3bf 8f6f 	isb	sy
 8013dde:	e7d6      	b.n	8013d8e <k_heap_aligned_alloc+0x30>

08013de0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 8013de0:	b538      	push	{r3, r4, r5, lr}
 8013de2:	4604      	mov	r4, r0
 8013de4:	f04f 0310 	mov.w	r3, #16
 8013de8:	f3ef 8511 	mrs	r5, BASEPRI
 8013dec:	f383 8812 	msr	BASEPRI_MAX, r3
 8013df0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
 8013df4:	f7fa fdc4 	bl	800e980 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 8013df8:	f104 000c 	add.w	r0, r4, #12
 8013dfc:	f000 fabf 	bl	801437e <z_unpend_all>
 8013e00:	b130      	cbz	r0, 8013e10 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
 8013e02:	4629      	mov	r1, r5
 8013e04:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 8013e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
 8013e0c:	f7f8 bdf4 	b.w	800c9f8 <z_reschedule>
	__asm__ volatile(
 8013e10:	f385 8811 	msr	BASEPRI, r5
 8013e14:	f3bf 8f6f 	isb	sy
}
 8013e18:	bd38      	pop	{r3, r4, r5, pc}

08013e1a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8013e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	460d      	mov	r5, r1
	__asm__ volatile(
 8013e20:	f04f 0310 	mov.w	r3, #16
 8013e24:	f3ef 8611 	mrs	r6, BASEPRI
 8013e28:	f383 8812 	msr	BASEPRI_MAX, r3
 8013e2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 8013e30:	6947      	ldr	r7, [r0, #20]
 8013e32:	b97f      	cbnz	r7, 8013e54 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8013e34:	f000 fa8b 	bl	801434e <z_unpend_first_thread>

		if (pending_thread != NULL) {
 8013e38:	b160      	cbz	r0, 8013e54 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8013e3a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8013e3c:	6142      	str	r2, [r0, #20]
 8013e3e:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
 8013e42:	f000 fa28 	bl	8014296 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 8013e46:	4631      	mov	r1, r6
 8013e48:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 8013e4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 8013e50:	f7f8 bdd2 	b.w	800c9f8 <z_reschedule>
	**(char ***) mem = slab->free_list;
 8013e54:	682b      	ldr	r3, [r5, #0]
 8013e56:	6962      	ldr	r2, [r4, #20]
 8013e58:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 8013e5a:	682b      	ldr	r3, [r5, #0]
 8013e5c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
 8013e5e:	69a3      	ldr	r3, [r4, #24]
 8013e60:	3b01      	subs	r3, #1
 8013e62:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 8013e64:	f386 8811 	msr	BASEPRI, r6
 8013e68:	f3bf 8f6f 	isb	sy
}
 8013e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e6e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013e6e:	f3ef 8005 	mrs	r0, IPSR
}
 8013e72:	3800      	subs	r0, #0
 8013e74:	bf18      	it	ne
 8013e76:	2001      	movne	r0, #1
 8013e78:	4770      	bx	lr

08013e7a <k_thread_name_get>:
}
 8013e7a:	3078      	adds	r0, #120	; 0x78
 8013e7c:	4770      	bx	lr

08013e7e <z_impl_k_thread_start>:
	z_sched_start(thread);
 8013e7e:	f7f8 beb1 	b.w	800cbe4 <z_sched_start>

08013e82 <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
 8013e82:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
 8013e84:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
 8013e88:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d102      	bne.n	8013e94 <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
 8013e8e:	600b      	str	r3, [r1, #0]

	return 0;
}
 8013e90:	2000      	movs	r0, #0
 8013e92:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
 8013e94:	5ce0      	ldrb	r0, [r4, r3]
 8013e96:	28aa      	cmp	r0, #170	; 0xaa
 8013e98:	d1f9      	bne.n	8013e8e <z_impl_k_thread_stack_space_get+0xc>
			unused++;
 8013e9a:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
 8013e9c:	e7f5      	b.n	8013e8a <z_impl_k_thread_stack_space_get+0x8>

08013e9e <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
 8013e9e:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 8013ea2:	4770      	bx	lr

08013ea4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8013ea4:	b508      	push	{r3, lr}
	__asm__ volatile(
 8013ea6:	f04f 0210 	mov.w	r2, #16
 8013eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8013eae:	f382 8812 	msr	BASEPRI_MAX, r2
 8013eb2:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8013eb6:	f7ef fc51 	bl	800375c <arch_cpu_idle>
 8013eba:	e7f4      	b.n	8013ea6 <idle+0x2>

08013ebc <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 8013ebc:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8013ec0:	428b      	cmp	r3, r1
 8013ec2:	d001      	beq.n	8013ec8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 8013ec4:	f7f8 befe 	b.w	800ccc4 <z_set_prio>
}
 8013ec8:	2000      	movs	r0, #0
 8013eca:	4770      	bx	lr

08013ecc <z_impl_k_mutex_init>:
{
 8013ecc:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8013ece:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 8013ed0:	e9c3 0002 	strd	r0, r0, [r3, #8]
 8013ed4:	e9c3 3300 	strd	r3, r3, [r3]
}
 8013ed8:	4770      	bx	lr

08013eda <queue_insert>:
{
 8013eda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ede:	4699      	mov	r9, r3
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8013ee6:	460d      	mov	r5, r1
 8013ee8:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8013eea:	f100 0608 	add.w	r6, r0, #8
 8013eee:	f04f 0210 	mov.w	r2, #16
 8013ef2:	f3ef 8711 	mrs	r7, BASEPRI
 8013ef6:	f382 8812 	msr	BASEPRI_MAX, r2
 8013efa:	f3bf 8f6f 	isb	sy
	if (is_append) {
 8013efe:	b103      	cbz	r3, 8013f02 <queue_insert+0x28>
	return list->tail;
 8013f00:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 8013f02:	4630      	mov	r0, r6
 8013f04:	f000 fa23 	bl	801434e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 8013f08:	b160      	cbz	r0, 8013f24 <queue_insert+0x4a>
 8013f0a:	2400      	movs	r4, #0
 8013f0c:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
 8013f10:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
 8013f14:	f000 f9bf 	bl	8014296 <z_ready_thread>
	z_reschedule(&queue->lock, key);
 8013f18:	4630      	mov	r0, r6
 8013f1a:	4639      	mov	r1, r7
 8013f1c:	f7f8 fd6c 	bl	800c9f8 <z_reschedule>
	return 0;
 8013f20:	2000      	movs	r0, #0
 8013f22:	e00c      	b.n	8013f3e <queue_insert+0x64>
	if (alloc) {
 8013f24:	f1b9 0f00 	cmp.w	r9, #0
 8013f28:	d01b      	beq.n	8013f62 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
 8013f2a:	2108      	movs	r1, #8
 8013f2c:	f7f9 fae4 	bl	800d4f8 <z_thread_aligned_alloc>
		if (anode == NULL) {
 8013f30:	b938      	cbnz	r0, 8013f42 <queue_insert+0x68>
	__asm__ volatile(
 8013f32:	f387 8811 	msr	BASEPRI, r7
 8013f36:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 8013f3a:	f06f 000b 	mvn.w	r0, #11
}
 8013f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
 8013f42:	2301      	movs	r3, #1
		anode->data = data;
 8013f44:	f8c0 8004 	str.w	r8, [r0, #4]
 8013f48:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8013f4a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8013f4c:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
 8013f50:	b95d      	cbnz	r5, 8013f6a <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8013f52:	6823      	ldr	r3, [r4, #0]
 8013f54:	4313      	orrs	r3, r2
 8013f56:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 8013f58:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 8013f5a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 8013f5c:	b973      	cbnz	r3, 8013f7c <queue_insert+0xa2>
	list->tail = node;
 8013f5e:	6060      	str	r0, [r4, #4]
}
 8013f60:	e00c      	b.n	8013f7c <queue_insert+0xa2>
	node->next_and_flags = flags;
 8013f62:	f8c8 9000 	str.w	r9, [r8]
}
 8013f66:	4640      	mov	r0, r8
 8013f68:	e7ef      	b.n	8013f4a <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8013f6a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 8013f6c:	f033 0303 	bics.w	r3, r3, #3
 8013f70:	d110      	bne.n	8013f94 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
 8013f72:	6002      	str	r2, [r0, #0]
	return list->tail;
 8013f74:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 8013f76:	b93a      	cbnz	r2, 8013f88 <queue_insert+0xae>
	list->head = node;
 8013f78:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
 8013f7c:	2104      	movs	r1, #4
 8013f7e:	f104 0010 	add.w	r0, r4, #16
 8013f82:	f000 fbdd 	bl	8014740 <z_handle_obj_poll_events>
 8013f86:	e7c7      	b.n	8013f18 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8013f88:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8013f8a:	f003 0303 	and.w	r3, r3, #3
 8013f8e:	4303      	orrs	r3, r0
 8013f90:	6013      	str	r3, [r2, #0]
 8013f92:	e7e4      	b.n	8013f5e <queue_insert+0x84>
 8013f94:	4313      	orrs	r3, r2
 8013f96:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8013f98:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 8013f9a:	f003 0303 	and.w	r3, r3, #3
 8013f9e:	4303      	orrs	r3, r0
 8013fa0:	602b      	str	r3, [r5, #0]
}
 8013fa2:	e7eb      	b.n	8013f7c <queue_insert+0xa2>

08013fa4 <z_queue_node_peek>:
{
 8013fa4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 8013fa6:	4604      	mov	r4, r0
 8013fa8:	b130      	cbz	r0, 8013fb8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 8013faa:	6802      	ldr	r2, [r0, #0]
 8013fac:	0793      	lsls	r3, r2, #30
 8013fae:	d003      	beq.n	8013fb8 <z_queue_node_peek+0x14>
		ret = anode->data;
 8013fb0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 8013fb2:	b109      	cbz	r1, 8013fb8 <z_queue_node_peek+0x14>
			k_free(anode);
 8013fb4:	f000 fbdf 	bl	8014776 <k_free>
}
 8013fb8:	4620      	mov	r0, r4
 8013fba:	bd10      	pop	{r4, pc}

08013fbc <z_impl_k_queue_init>:
	list->head = NULL;
 8013fbc:	2300      	movs	r3, #0
	list->tail = NULL;
 8013fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8013fc2:	f100 0308 	add.w	r3, r0, #8
 8013fc6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
 8013fca:	f100 0310 	add.w	r3, r0, #16
 8013fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 8013fd2:	4770      	bx	lr

08013fd4 <z_impl_k_queue_cancel_wait>:
{
 8013fd4:	b570      	push	{r4, r5, r6, lr}
 8013fd6:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8013fd8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
 8013fdc:	f04f 0310 	mov.w	r3, #16
 8013fe0:	f3ef 8611 	mrs	r6, BASEPRI
 8013fe4:	f383 8812 	msr	BASEPRI_MAX, r3
 8013fe8:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 8013fec:	4628      	mov	r0, r5
 8013fee:	f000 f9ae 	bl	801434e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 8013ff2:	b128      	cbz	r0, 8014000 <z_impl_k_queue_cancel_wait+0x2c>
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
 8013ffa:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
 8013ffc:	f000 f94b 	bl	8014296 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
 8014000:	f104 0010 	add.w	r0, r4, #16
 8014004:	2108      	movs	r1, #8
 8014006:	f000 fb9b 	bl	8014740 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 801400a:	4631      	mov	r1, r6
 801400c:	4628      	mov	r0, r5
}
 801400e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
 8014012:	f7f8 bcf1 	b.w	800c9f8 <z_reschedule>

08014016 <k_queue_append>:
{
 8014016:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
 8014018:	2301      	movs	r3, #1
 801401a:	9300      	str	r3, [sp, #0]
 801401c:	2300      	movs	r3, #0
{
 801401e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
 8014020:	4619      	mov	r1, r3
 8014022:	f7ff ff5a 	bl	8013eda <queue_insert>
}
 8014026:	b003      	add	sp, #12
 8014028:	f85d fb04 	ldr.w	pc, [sp], #4

0801402c <k_queue_prepend>:
{
 801402c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
 801402e:	2300      	movs	r3, #0
{
 8014030:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	4619      	mov	r1, r3
 8014036:	f7ff ff50 	bl	8013eda <queue_insert>
}
 801403a:	b003      	add	sp, #12
 801403c:	f85d fb04 	ldr.w	pc, [sp], #4

08014040 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
 8014040:	6800      	ldr	r0, [r0, #0]
 8014042:	2100      	movs	r1, #0
 8014044:	f7ff bfae 	b.w	8013fa4 <z_queue_node_peek>

08014048 <z_impl_k_queue_peek_tail>:
	return ret;
}

void *z_impl_k_queue_peek_tail(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_tail(&queue->data_q), false);
 8014048:	6840      	ldr	r0, [r0, #4]
 801404a:	2100      	movs	r1, #0
 801404c:	f7ff bfaa 	b.w	8013fa4 <z_queue_node_peek>

08014050 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8014050:	b15a      	cbz	r2, 801406a <z_impl_k_sem_init+0x1a>
 8014052:	428a      	cmp	r2, r1
 8014054:	d309      	bcc.n	801406a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
 8014056:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 801405a:	e9c0 1202 	strd	r1, r2, [r0, #8]
 801405e:	e9c0 0000 	strd	r0, r0, [r0]
 8014062:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
 8014066:	2000      	movs	r0, #0
 8014068:	4770      	bx	lr
		return -EINVAL;
 801406a:	f06f 0015 	mvn.w	r0, #21
}
 801406e:	4770      	bx	lr

08014070 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
 8014070:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 8014072:	2301      	movs	r3, #1
 8014074:	408b      	lsls	r3, r1
 8014076:	ea22 0303 	bic.w	r3, r2, r3
 801407a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 801407c:	fa22 f001 	lsr.w	r0, r2, r1
}
 8014080:	f000 0001 	and.w	r0, r0, #1
 8014084:	4770      	bx	lr

08014086 <unschedule_locked>:
{
 8014086:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 8014088:	2103      	movs	r1, #3
{
 801408a:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 801408c:	300c      	adds	r0, #12
 801408e:	f7ff ffef 	bl	8014070 <flag_test_and_clear>
 8014092:	4604      	mov	r4, r0
 8014094:	b118      	cbz	r0, 801409e <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
 8014096:	f105 0010 	add.w	r0, r5, #16
 801409a:	f000 f9a2 	bl	80143e2 <z_abort_timeout>
}
 801409e:	4620      	mov	r0, r4
 80140a0:	bd38      	pop	{r3, r4, r5, pc}

080140a2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 80140a2:	b120      	cbz	r0, 80140ae <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 80140a4:	2200      	movs	r2, #0
 80140a6:	4611      	mov	r1, r2
 80140a8:	30c0      	adds	r0, #192	; 0xc0
 80140aa:	f000 b978 	b.w	801439e <z_sched_wake>
}
 80140ae:	4770      	bx	lr

080140b0 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
 80140b0:	68c3      	ldr	r3, [r0, #12]
{
 80140b2:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80140b4:	f3c3 0540 	ubfx	r5, r3, #1, #1
 80140b8:	079b      	lsls	r3, r3, #30
{
 80140ba:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80140bc:	d416      	bmi.n	80140ec <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
 80140be:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 80140c0:	2102      	movs	r1, #2
 80140c2:	300c      	adds	r0, #12
 80140c4:	f7ff ffd4 	bl	8014070 <flag_test_and_clear>
 80140c8:	b180      	cbz	r0, 80140ec <cancel_async_locked+0x3c>
	return list->head;
 80140ca:	f8d6 20b8 	ldr.w	r2, [r6, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80140ce:	b16a      	cbz	r2, 80140ec <cancel_async_locked+0x3c>
 80140d0:	4294      	cmp	r4, r2
 80140d2:	d11b      	bne.n	801410c <cancel_async_locked+0x5c>
	return node->next;
 80140d4:	6822      	ldr	r2, [r4, #0]
	return list->tail;
 80140d6:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
 80140da:	b98d      	cbnz	r5, 8014100 <cancel_async_locked+0x50>
 80140dc:	428c      	cmp	r4, r1
	list->head = node;
 80140de:	f8c6 20b8 	str.w	r2, [r6, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
 80140e2:	d101      	bne.n	80140e8 <cancel_async_locked+0x38>
	list->tail = node;
 80140e4:	f8c6 20bc 	str.w	r2, [r6, #188]	; 0xbc
	parent->next = child;
 80140e8:	2300      	movs	r3, #0
 80140ea:	6023      	str	r3, [r4, #0]
	return *flagp;
 80140ec:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
 80140ee:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
 80140f2:	bf1e      	ittt	ne
 80140f4:	f043 0302 	orrne.w	r3, r3, #2
 80140f8:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 80140fa:	f003 000f 	andne.w	r0, r3, #15
}
 80140fe:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
 8014100:	428c      	cmp	r4, r1
	parent->next = child;
 8014102:	602a      	str	r2, [r5, #0]
	list->tail = node;
 8014104:	bf08      	it	eq
 8014106:	f8c6 50bc 	streq.w	r5, [r6, #188]	; 0xbc
}
 801410a:	e7ed      	b.n	80140e8 <cancel_async_locked+0x38>
	return node->next;
 801410c:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801410e:	6812      	ldr	r2, [r2, #0]
 8014110:	e7dd      	b.n	80140ce <cancel_async_locked+0x1e>

08014112 <work_timeout>:
{
 8014112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014114:	4604      	mov	r4, r0
 8014116:	f04f 0310 	mov.w	r3, #16
 801411a:	f3ef 8511 	mrs	r5, BASEPRI
 801411e:	f383 8812 	msr	BASEPRI_MAX, r3
 8014122:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 8014126:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 8014128:	f1a0 0610 	sub.w	r6, r0, #16
 801412c:	2103      	movs	r1, #3
 801412e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
 8014130:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 8014132:	f7ff ff9d 	bl	8014070 <flag_test_and_clear>
 8014136:	b128      	cbz	r0, 8014144 <work_timeout+0x32>
		queue = dw->queue;
 8014138:	69a3      	ldr	r3, [r4, #24]
 801413a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 801413c:	a901      	add	r1, sp, #4
 801413e:	4630      	mov	r0, r6
 8014140:	f7f8 fb36 	bl	800c7b0 <submit_to_queue_locked>
	__asm__ volatile(
 8014144:	f385 8811 	msr	BASEPRI, r5
 8014148:	f3bf 8f6f 	isb	sy
}
 801414c:	b002      	add	sp, #8
 801414e:	bd70      	pop	{r4, r5, r6, pc}

08014150 <k_work_init>:
{
 8014150:	b538      	push	{r3, r4, r5, lr}
 8014152:	4604      	mov	r4, r0
 8014154:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8014156:	2210      	movs	r2, #16
 8014158:	2100      	movs	r1, #0
 801415a:	f000 fb62 	bl	8014822 <memset>
 801415e:	6065      	str	r5, [r4, #4]
}
 8014160:	bd38      	pop	{r3, r4, r5, pc}

08014162 <k_work_busy_get>:
	__asm__ volatile(
 8014162:	f04f 0210 	mov.w	r2, #16
 8014166:	f3ef 8311 	mrs	r3, BASEPRI
 801416a:	f382 8812 	msr	BASEPRI_MAX, r2
 801416e:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
 8014172:	68c0      	ldr	r0, [r0, #12]
 8014174:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
 8014178:	f383 8811 	msr	BASEPRI, r3
 801417c:	f3bf 8f6f 	isb	sy
}
 8014180:	4770      	bx	lr

08014182 <k_work_submit_to_queue>:
{
 8014182:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014184:	9001      	str	r0, [sp, #4]
 8014186:	4608      	mov	r0, r1
	__asm__ volatile(
 8014188:	f04f 0310 	mov.w	r3, #16
 801418c:	f3ef 8511 	mrs	r5, BASEPRI
 8014190:	f383 8812 	msr	BASEPRI_MAX, r3
 8014194:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 8014198:	a901      	add	r1, sp, #4
 801419a:	f7f8 fb09 	bl	800c7b0 <submit_to_queue_locked>
 801419e:	4604      	mov	r4, r0
	__asm__ volatile(
 80141a0:	f385 8811 	msr	BASEPRI, r5
 80141a4:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 80141a8:	2800      	cmp	r0, #0
 80141aa:	dd04      	ble.n	80141b6 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
 80141ac:	f7f8 fed2 	bl	800cf54 <z_impl_k_is_preempt_thread>
 80141b0:	b108      	cbz	r0, 80141b6 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
 80141b2:	f7f8 fe29 	bl	800ce08 <z_impl_k_yield>
}
 80141b6:	4620      	mov	r0, r4
 80141b8:	b003      	add	sp, #12
 80141ba:	bd30      	pop	{r4, r5, pc}

080141bc <k_work_init_delayable>:
{
 80141bc:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
 80141be:	2230      	movs	r2, #48	; 0x30
{
 80141c0:	4604      	mov	r4, r0
 80141c2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 80141c4:	2100      	movs	r1, #0
 80141c6:	f000 fb2c 	bl	8014822 <memset>
 80141ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80141ce:	6065      	str	r5, [r4, #4]
 80141d0:	60e3      	str	r3, [r4, #12]
}
 80141d2:	bd38      	pop	{r3, r4, r5, pc}

080141d4 <k_work_delayable_busy_get>:
 80141d4:	f7ff bfc5 	b.w	8014162 <k_work_busy_get>

080141d8 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
 80141d8:	b538      	push	{r3, r4, r5, lr}
 80141da:	4604      	mov	r4, r0
	__asm__ volatile(
 80141dc:	f04f 0310 	mov.w	r3, #16
 80141e0:	f3ef 8511 	mrs	r5, BASEPRI
 80141e4:	f383 8812 	msr	BASEPRI_MAX, r3
 80141e8:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
 80141ec:	f7ff ff4b 	bl	8014086 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
 80141f0:	4620      	mov	r0, r4
 80141f2:	f7ff ff5d 	bl	80140b0 <cancel_async_locked>
	__asm__ volatile(
 80141f6:	f385 8811 	msr	BASEPRI, r5
 80141fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
 80141fe:	bd38      	pop	{r3, r4, r5, pc}

08014200 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8014200:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8014204:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8014206:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8014208:	2300      	movs	r3, #0
	node->prev = NULL;
 801420a:	e9c0 3300 	strd	r3, r3, [r0]
}
 801420e:	4770      	bx	lr

08014210 <unpend_thread_no_timeout>:
{
 8014210:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8014212:	f7ff fff5 	bl	8014200 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8014216:	7b43      	ldrb	r3, [r0, #13]
 8014218:	f023 0302 	bic.w	r3, r3, #2
 801421c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 801421e:	2300      	movs	r3, #0
 8014220:	6083      	str	r3, [r0, #8]
}
 8014222:	bd08      	pop	{r3, pc}

08014224 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 8014224:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8014228:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 801422c:	4283      	cmp	r3, r0
		return b2 - b1;
 801422e:	bf14      	ite	ne
 8014230:	1ac0      	subne	r0, r0, r3
	return 0;
 8014232:	2000      	moveq	r0, #0
}
 8014234:	4770      	bx	lr

08014236 <z_unpend_thread>:
{
 8014236:	b510      	push	{r4, lr}
	__asm__ volatile(
 8014238:	f04f 0310 	mov.w	r3, #16
 801423c:	f3ef 8411 	mrs	r4, BASEPRI
 8014240:	f383 8812 	msr	BASEPRI_MAX, r3
 8014244:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8014248:	f7ff ffe2 	bl	8014210 <unpend_thread_no_timeout>
	__asm__ volatile(
 801424c:	f384 8811 	msr	BASEPRI, r4
 8014250:	f3bf 8f6f 	isb	sy
}
 8014254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014258:	3018      	adds	r0, #24
 801425a:	f000 b8c2 	b.w	80143e2 <z_abort_timeout>

0801425e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801425e:	4603      	mov	r3, r0
 8014260:	b920      	cbnz	r0, 801426c <z_reschedule_irqlock+0xe>
 8014262:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8014266:	b90a      	cbnz	r2, 801426c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8014268:	f7ef baf8 	b.w	800385c <arch_swap>
 801426c:	f383 8811 	msr	BASEPRI, r3
 8014270:	f3bf 8f6f 	isb	sy
}
 8014274:	4770      	bx	lr

08014276 <z_reschedule_unlocked>:
	__asm__ volatile(
 8014276:	f04f 0310 	mov.w	r3, #16
 801427a:	f3ef 8011 	mrs	r0, BASEPRI
 801427e:	f383 8812 	msr	BASEPRI_MAX, r3
 8014282:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8014286:	f7ff bfea 	b.w	801425e <z_reschedule_irqlock>

0801428a <z_priq_dumb_best>:
{
 801428a:	4603      	mov	r3, r0
	return list->head == list;
 801428c:	6800      	ldr	r0, [r0, #0]
}
 801428e:	4283      	cmp	r3, r0
 8014290:	bf08      	it	eq
 8014292:	2000      	moveq	r0, #0
 8014294:	4770      	bx	lr

08014296 <z_ready_thread>:
{
 8014296:	b510      	push	{r4, lr}
 8014298:	f04f 0310 	mov.w	r3, #16
 801429c:	f3ef 8411 	mrs	r4, BASEPRI
 80142a0:	f383 8812 	msr	BASEPRI_MAX, r3
 80142a4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 80142a8:	f7f8 fc66 	bl	800cb78 <ready_thread>
	__asm__ volatile(
 80142ac:	f384 8811 	msr	BASEPRI, r4
 80142b0:	f3bf 8f6f 	isb	sy
}
 80142b4:	bd10      	pop	{r4, pc}

080142b6 <z_thread_timeout>:
{
 80142b6:	b510      	push	{r4, lr}
 80142b8:	4601      	mov	r1, r0
	__asm__ volatile(
 80142ba:	f04f 0310 	mov.w	r3, #16
 80142be:	f3ef 8411 	mrs	r4, BASEPRI
 80142c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80142c6:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80142ca:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 80142ce:	f013 0f28 	tst.w	r3, #40	; 0x28
 80142d2:	d10d      	bne.n	80142f0 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 80142d4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 80142d8:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 80142da:	b10b      	cbz	r3, 80142e0 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 80142dc:	f7ff ff98 	bl	8014210 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80142e0:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80142e4:	f023 0314 	bic.w	r3, r3, #20
 80142e8:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80142ec:	f7f8 fc44 	bl	800cb78 <ready_thread>
	__asm__ volatile(
 80142f0:	f384 8811 	msr	BASEPRI, r4
 80142f4:	f3bf 8f6f 	isb	sy
}
 80142f8:	bd10      	pop	{r4, pc}

080142fa <add_to_waitq_locked>:
{
 80142fa:	b538      	push	{r3, r4, r5, lr}
 80142fc:	4604      	mov	r4, r0
 80142fe:	460d      	mov	r5, r1
	unready_thread(thread);
 8014300:	f7f8 fc8e 	bl	800cc20 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8014304:	7b63      	ldrb	r3, [r4, #13]
 8014306:	f043 0302 	orr.w	r3, r3, #2
 801430a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 801430c:	b195      	cbz	r5, 8014334 <add_to_waitq_locked+0x3a>
 801430e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8014310:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8014312:	429d      	cmp	r5, r3
 8014314:	d015      	beq.n	8014342 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8014316:	b1a3      	cbz	r3, 8014342 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 8014318:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 801431c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8014320:	4291      	cmp	r1, r2
 8014322:	d008      	beq.n	8014336 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 8014324:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8014326:	2a00      	cmp	r2, #0
 8014328:	dd05      	ble.n	8014336 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 801432a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 801432c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8014330:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8014332:	605c      	str	r4, [r3, #4]
}
 8014334:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 8014336:	686a      	ldr	r2, [r5, #4]
 8014338:	4293      	cmp	r3, r2
 801433a:	d002      	beq.n	8014342 <add_to_waitq_locked+0x48>
 801433c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801433e:	2b00      	cmp	r3, #0
 8014340:	d1ec      	bne.n	801431c <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 8014342:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8014344:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8014348:	601c      	str	r4, [r3, #0]
	list->tail = node;
 801434a:	606c      	str	r4, [r5, #4]
}
 801434c:	e7f2      	b.n	8014334 <add_to_waitq_locked+0x3a>

0801434e <z_unpend_first_thread>:
{
 801434e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8014350:	f04f 0310 	mov.w	r3, #16
 8014354:	f3ef 8511 	mrs	r5, BASEPRI
 8014358:	f383 8812 	msr	BASEPRI_MAX, r3
 801435c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8014360:	f7ff ff93 	bl	801428a <z_priq_dumb_best>
		if (thread != NULL) {
 8014364:	4604      	mov	r4, r0
 8014366:	b120      	cbz	r0, 8014372 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 8014368:	f7ff ff52 	bl	8014210 <unpend_thread_no_timeout>
 801436c:	3018      	adds	r0, #24
 801436e:	f000 f838 	bl	80143e2 <z_abort_timeout>
	__asm__ volatile(
 8014372:	f385 8811 	msr	BASEPRI, r5
 8014376:	f3bf 8f6f 	isb	sy
}
 801437a:	4620      	mov	r0, r4
 801437c:	bd38      	pop	{r3, r4, r5, pc}

0801437e <z_unpend_all>:
{
 801437e:	b538      	push	{r3, r4, r5, lr}
 8014380:	4605      	mov	r5, r0
	int need_sched = 0;
 8014382:	2000      	movs	r0, #0
	return list->head == list;
 8014384:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8014386:	42a5      	cmp	r5, r4
 8014388:	d000      	beq.n	801438c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 801438a:	b904      	cbnz	r4, 801438e <z_unpend_all+0x10>
}
 801438c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
 801438e:	4620      	mov	r0, r4
 8014390:	f7ff ff51 	bl	8014236 <z_unpend_thread>
		z_ready_thread(thread);
 8014394:	4620      	mov	r0, r4
 8014396:	f7ff ff7e 	bl	8014296 <z_ready_thread>
		need_sched = 1;
 801439a:	2001      	movs	r0, #1
 801439c:	e7f2      	b.n	8014384 <z_unpend_all+0x6>

0801439e <z_sched_wake>:
{
 801439e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80143a0:	f04f 0310 	mov.w	r3, #16
 80143a4:	f3ef 8511 	mrs	r5, BASEPRI
 80143a8:	f383 8812 	msr	BASEPRI_MAX, r3
 80143ac:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 80143b0:	f7ff ff6b 	bl	801428a <z_priq_dumb_best>
		if (thread != NULL) {
 80143b4:	4604      	mov	r4, r0
 80143b6:	b158      	cbz	r0, 80143d0 <z_sched_wake+0x32>
 80143b8:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
 80143bc:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 80143be:	f7ff ff27 	bl	8014210 <unpend_thread_no_timeout>
 80143c2:	3018      	adds	r0, #24
 80143c4:	f000 f80d 	bl	80143e2 <z_abort_timeout>
			ready_thread(thread);
 80143c8:	4620      	mov	r0, r4
 80143ca:	f7f8 fbd5 	bl	800cb78 <ready_thread>
			ret = true;
 80143ce:	2001      	movs	r0, #1
	__asm__ volatile(
 80143d0:	f385 8811 	msr	BASEPRI, r5
 80143d4:	f3bf 8f6f 	isb	sy
}
 80143d8:	bd38      	pop	{r3, r4, r5, pc}

080143da <z_impl_k_condvar_init>:
	list->tail = (sys_dnode_t *)list;
 80143da:	e9c0 0000 	strd	r0, r0, [r0]
}
 80143de:	2000      	movs	r0, #0
 80143e0:	4770      	bx	lr

080143e2 <z_abort_timeout>:
{
 80143e2:	b510      	push	{r4, lr}
	__asm__ volatile(
 80143e4:	f04f 0210 	mov.w	r2, #16
 80143e8:	f3ef 8411 	mrs	r4, BASEPRI
 80143ec:	f382 8812 	msr	BASEPRI_MAX, r2
 80143f0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80143f4:	6803      	ldr	r3, [r0, #0]
 80143f6:	b13b      	cbz	r3, 8014408 <z_abort_timeout+0x26>
			remove_timeout(to);
 80143f8:	f7f8 feb4 	bl	800d164 <remove_timeout>
			ret = 0;
 80143fc:	2000      	movs	r0, #0
	__asm__ volatile(
 80143fe:	f384 8811 	msr	BASEPRI, r4
 8014402:	f3bf 8f6f 	isb	sy
}
 8014406:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8014408:	f06f 0015 	mvn.w	r0, #21
 801440c:	e7f7      	b.n	80143fe <z_abort_timeout+0x1c>

0801440e <z_timeout_remaining>:
{
 801440e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8014410:	f04f 0310 	mov.w	r3, #16
 8014414:	f3ef 8411 	mrs	r4, BASEPRI
 8014418:	f383 8812 	msr	BASEPRI_MAX, r3
 801441c:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
 8014420:	f7f8 feba 	bl	800d198 <timeout_rem>
	__asm__ volatile(
 8014424:	f384 8811 	msr	BASEPRI, r4
 8014428:	f3bf 8f6f 	isb	sy
}
 801442c:	bd10      	pop	{r4, pc}

0801442e <z_set_timeout_expiry>:
{
 801442e:	b570      	push	{r4, r5, r6, lr}
 8014430:	4604      	mov	r4, r0
 8014432:	460d      	mov	r5, r1
	__asm__ volatile(
 8014434:	f04f 0310 	mov.w	r3, #16
 8014438:	f3ef 8611 	mrs	r6, BASEPRI
 801443c:	f383 8812 	msr	BASEPRI_MAX, r3
 8014440:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8014444:	f7f8 fe66 	bl	800d114 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8014448:	2801      	cmp	r0, #1
 801444a:	dd05      	ble.n	8014458 <z_set_timeout_expiry+0x2a>
 801444c:	42a0      	cmp	r0, r4
 801444e:	db03      	blt.n	8014458 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8014450:	4629      	mov	r1, r5
 8014452:	4620      	mov	r0, r4
 8014454:	f7f6 fefc 	bl	800b250 <sys_clock_set_timeout>
	__asm__ volatile(
 8014458:	f386 8811 	msr	BASEPRI, r6
 801445c:	f3bf 8f6f 	isb	sy
}
 8014460:	bd70      	pop	{r4, r5, r6, pc}

08014462 <sys_clock_tick_get_32>:
{
 8014462:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 8014464:	f7f8 ff94 	bl	800d390 <sys_clock_tick_get>
}
 8014468:	bd08      	pop	{r3, pc}

0801446a <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 801446a:	f7f8 bf91 	b.w	800d390 <sys_clock_tick_get>

0801446e <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801446e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8014472:	bf08      	it	eq
 8014474:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8014478:	b538      	push	{r3, r4, r5, lr}
 801447a:	4605      	mov	r5, r0
 801447c:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801447e:	d01d      	beq.n	80144bc <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8014480:	ea51 0300 	orrs.w	r3, r1, r0
 8014484:	d103      	bne.n	801448e <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 8014486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 801448a:	f7f8 bf81 	b.w	800d390 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 801448e:	f06f 0301 	mvn.w	r3, #1
 8014492:	1a18      	subs	r0, r3, r0
 8014494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014498:	eb63 0101 	sbc.w	r1, r3, r1
 801449c:	2900      	cmp	r1, #0
 801449e:	da0c      	bge.n	80144ba <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
 80144a0:	f7f8 ff76 	bl	800d390 <sys_clock_tick_get>
 80144a4:	2d01      	cmp	r5, #1
 80144a6:	4622      	mov	r2, r4
 80144a8:	f174 0400 	sbcs.w	r4, r4, #0
 80144ac:	462b      	mov	r3, r5
 80144ae:	bfbc      	itt	lt
 80144b0:	2301      	movlt	r3, #1
 80144b2:	2200      	movlt	r2, #0
 80144b4:	1818      	adds	r0, r3, r0
 80144b6:	eb41 0102 	adc.w	r1, r1, r2
}
 80144ba:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
 80144bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144c0:	4601      	mov	r1, r0
 80144c2:	e7fa      	b.n	80144ba <sys_clock_timeout_end_calc+0x4c>

080144c4 <add_event>:
{
 80144c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144c6:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80144c8:	e9d0 1300 	ldrd	r1, r3, [r0]
 80144cc:	4288      	cmp	r0, r1
 80144ce:	4604      	mov	r4, r0
 80144d0:	d00d      	beq.n	80144ee <add_event+0x2a>
	if ((pending == NULL) ||
 80144d2:	b163      	cbz	r3, 80144ee <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80144d4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 80144d6:	b100      	cbz	r0, 80144da <add_event+0x16>
 80144d8:	3860      	subs	r0, #96	; 0x60
 80144da:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80144de:	4639      	mov	r1, r7
 80144e0:	f7ff fea0 	bl	8014224 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80144e4:	2800      	cmp	r0, #0
 80144e6:	dc02      	bgt.n	80144ee <add_event+0x2a>
	return list->head == list;
 80144e8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80144ea:	42b4      	cmp	r4, r6
 80144ec:	d109      	bne.n	8014502 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
 80144ee:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
 80144f0:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
 80144f4:	601d      	str	r5, [r3, #0]
	list->tail = node;
 80144f6:	6065      	str	r5, [r4, #4]
}
 80144f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 80144fa:	6863      	ldr	r3, [r4, #4]
 80144fc:	42b3      	cmp	r3, r6
 80144fe:	d0f6      	beq.n	80144ee <add_event+0x2a>
 8014500:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8014502:	2e00      	cmp	r6, #0
 8014504:	d0f3      	beq.n	80144ee <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
 8014506:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8014508:	b101      	cbz	r1, 801450c <add_event+0x48>
 801450a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 801450c:	4638      	mov	r0, r7
 801450e:	f7ff fe89 	bl	8014224 <z_sched_prio_cmp>
 8014512:	2800      	cmp	r0, #0
 8014514:	ddf1      	ble.n	80144fa <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
 8014516:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 8014518:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
 801451c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 801451e:	6075      	str	r5, [r6, #4]
			return;
 8014520:	e7ea      	b.n	80144f8 <add_event+0x34>

08014522 <register_events>:
{
 8014522:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 8014526:	2500      	movs	r5, #0
{
 8014528:	468b      	mov	fp, r1
 801452a:	4614      	mov	r4, r2
 801452c:	461f      	mov	r7, r3
 801452e:	4682      	mov	sl, r0
	int events_registered = 0;
 8014530:	462e      	mov	r6, r5
	event->poller = NULL;
 8014532:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
 8014534:	455d      	cmp	r5, fp
 8014536:	db02      	blt.n	801453e <register_events+0x1c>
}
 8014538:	4630      	mov	r0, r6
 801453a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
 801453e:	f04f 0310 	mov.w	r3, #16
 8014542:	f3ef 8911 	mrs	r9, BASEPRI
 8014546:	f383 8812 	msr	BASEPRI_MAX, r3
 801454a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 801454e:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8014552:	f003 031f 	and.w	r3, r3, #31
 8014556:	3b01      	subs	r3, #1
 8014558:	2b07      	cmp	r3, #7
 801455a:	d80f      	bhi.n	801457c <register_events+0x5a>
 801455c:	e8df f003 	tbb	[pc, r3]
 8014560:	0a0e041e 	.word	0x0a0e041e
 8014564:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
 8014568:	f8da 3010 	ldr.w	r3, [sl, #16]
 801456c:	689b      	ldr	r3, [r3, #8]
 801456e:	b12b      	cbz	r3, 801457c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 8014570:	2302      	movs	r3, #2
 8014572:	e020      	b.n	80145b6 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 8014574:	f8da 3010 	ldr.w	r3, [sl, #16]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	bb8b      	cbnz	r3, 80145e0 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
 801457c:	bb47      	cbnz	r7, 80145d0 <register_events+0xae>
 801457e:	7823      	ldrb	r3, [r4, #0]
 8014580:	b333      	cbz	r3, 80145d0 <register_events+0xae>
	switch (event->type) {
 8014582:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8014586:	f003 031f 	and.w	r3, r3, #31
 801458a:	3b01      	subs	r3, #1
 801458c:	2b07      	cmp	r3, #7
 801458e:	d830      	bhi.n	80145f2 <register_events+0xd0>
 8014590:	e8df f003 	tbb	[pc, r3]
 8014594:	282f2833 	.word	0x282f2833
 8014598:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
 801459c:	f8da 3010 	ldr.w	r3, [sl, #16]
 80145a0:	689b      	ldr	r3, [r3, #8]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d0ea      	beq.n	801457c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
 80145a6:	2301      	movs	r3, #1
 80145a8:	e005      	b.n	80145b6 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
 80145aa:	f8da 3010 	ldr.w	r3, [sl, #16]
 80145ae:	6a1b      	ldr	r3, [r3, #32]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d0e3      	beq.n	801457c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 80145b4:	2310      	movs	r3, #16
	event->state |= state;
 80145b6:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
 80145ba:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
 80145be:	f3c2 3145 	ubfx	r1, r2, #13, #6
 80145c2:	430b      	orrs	r3, r1
 80145c4:	f363 3252 	bfi	r2, r3, #13, #6
 80145c8:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
 80145cc:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
 80145d0:	f389 8811 	msr	BASEPRI, r9
 80145d4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 80145d8:	3501      	adds	r5, #1
 80145da:	f10a 0a14 	add.w	sl, sl, #20
 80145de:	e7a9      	b.n	8014534 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 80145e0:	2304      	movs	r3, #4
 80145e2:	e7e8      	b.n	80145b6 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
 80145e4:	f8da 0010 	ldr.w	r0, [sl, #16]
 80145e8:	4622      	mov	r2, r4
 80145ea:	4651      	mov	r1, sl
 80145ec:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
 80145ee:	f7ff ff69 	bl	80144c4 <add_event>
	event->poller = poller;
 80145f2:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
 80145f6:	3601      	adds	r6, #1
 80145f8:	e7ea      	b.n	80145d0 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
 80145fa:	f8da 0010 	ldr.w	r0, [sl, #16]
 80145fe:	4622      	mov	r2, r4
 8014600:	4651      	mov	r1, sl
 8014602:	e7f4      	b.n	80145ee <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
 8014604:	f8da 0010 	ldr.w	r0, [sl, #16]
 8014608:	4622      	mov	r2, r4
 801460a:	4651      	mov	r1, sl
 801460c:	3024      	adds	r0, #36	; 0x24
 801460e:	e7ee      	b.n	80145ee <register_events+0xcc>

08014610 <signal_poll_event>:
{
 8014610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
 8014614:	6884      	ldr	r4, [r0, #8]
{
 8014616:	4605      	mov	r5, r0
 8014618:	460e      	mov	r6, r1
	if (poller != NULL) {
 801461a:	b144      	cbz	r4, 801462e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
 801461c:	7863      	ldrb	r3, [r4, #1]
 801461e:	2b01      	cmp	r3, #1
 8014620:	d136      	bne.n	8014690 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
 8014622:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 8014626:	f013 0302 	ands.w	r3, r3, #2
 801462a:	d10a      	bne.n	8014642 <signal_poll_event+0x32>
		poller->is_polling = false;
 801462c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
 801462e:	68eb      	ldr	r3, [r5, #12]
 8014630:	f3c3 3145 	ubfx	r1, r3, #13, #6
 8014634:	430e      	orrs	r6, r1
	event->poller = NULL;
 8014636:	2000      	movs	r0, #0
	event->state |= state;
 8014638:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
 801463c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
 801463e:	60eb      	str	r3, [r5, #12]
	return retcode;
 8014640:	e00b      	b.n	801465a <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
 8014642:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 8014646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801464a:	bf08      	it	eq
 801464c:	f112 0f02 	cmneq.w	r2, #2
 8014650:	d105      	bne.n	801465e <signal_poll_event+0x4e>
		poller->is_polling = false;
 8014652:	2300      	movs	r3, #0
 8014654:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
 8014656:	f06f 000a 	mvn.w	r0, #10
}
 801465a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 801465e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
 8014662:	4640      	mov	r0, r8
 8014664:	f7ff fde7 	bl	8014236 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8014668:	2e08      	cmp	r6, #8
 801466a:	bf0c      	ite	eq
 801466c:	f06f 0303 	mvneq.w	r3, #3
 8014670:	2300      	movne	r3, #0
 8014672:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8014674:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 8014678:	06db      	lsls	r3, r3, #27
 801467a:	d102      	bne.n	8014682 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
 801467c:	f854 7c48 	ldr.w	r7, [r4, #-72]
 8014680:	b10f      	cbz	r7, 8014686 <signal_poll_event+0x76>
		poller->is_polling = false;
 8014682:	2300      	movs	r3, #0
 8014684:	e7d2      	b.n	801462c <signal_poll_event+0x1c>
	z_ready_thread(thread);
 8014686:	4640      	mov	r0, r8
 8014688:	f7ff fe05 	bl	8014296 <z_ready_thread>
		poller->is_polling = false;
 801468c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
 801468e:	e7ce      	b.n	801462e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
 8014690:	2b02      	cmp	r3, #2
 8014692:	d1f6      	bne.n	8014682 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 8014694:	7823      	ldrb	r3, [r4, #0]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d0c9      	beq.n	801462e <signal_poll_event+0x1e>
 801469a:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801469e:	2f00      	cmp	r7, #0
 80146a0:	d0f4      	beq.n	801468c <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
 80146a2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 80146a6:	f1a4 0914 	sub.w	r9, r4, #20
 80146aa:	f104 0014 	add.w	r0, r4, #20
 80146ae:	f7ff fe98 	bl	80143e2 <z_abort_timeout>
		twork->poll_result = 0;
 80146b2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 80146b6:	4649      	mov	r1, r9
 80146b8:	4638      	mov	r0, r7
 80146ba:	f7ff fd62 	bl	8014182 <k_work_submit_to_queue>
		poller->is_polling = false;
 80146be:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
 80146c2:	e7b4      	b.n	801462e <signal_poll_event+0x1e>

080146c4 <clear_event_registrations>:
	while (num_events--) {
 80146c4:	2314      	movs	r3, #20
{
 80146c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146c8:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
 80146cc:	2400      	movs	r4, #0
 80146ce:	2601      	movs	r6, #1
	while (num_events--) {
 80146d0:	b901      	cbnz	r1, 80146d4 <clear_event_registrations+0x10>
}
 80146d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
 80146d4:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
 80146d8:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
 80146dc:	f003 031f 	and.w	r3, r3, #31
 80146e0:	2b08      	cmp	r3, #8
 80146e2:	f1a0 0714 	sub.w	r7, r0, #20
 80146e6:	d80d      	bhi.n	8014704 <clear_event_registrations+0x40>
 80146e8:	fa06 f303 	lsl.w	r3, r6, r3
 80146ec:	f413 7f8b 	tst.w	r3, #278	; 0x116
 80146f0:	d008      	beq.n	8014704 <clear_event_registrations+0x40>
	return node->next != NULL;
 80146f2:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 80146f6:	b12b      	cbz	r3, 8014704 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
 80146f8:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
 80146fc:	602b      	str	r3, [r5, #0]
	next->prev = prev;
 80146fe:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 8014700:	e940 4405 	strd	r4, r4, [r0, #-20]
 8014704:	f382 8811 	msr	BASEPRI, r2
 8014708:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 801470c:	f04f 0310 	mov.w	r3, #16
 8014710:	f3ef 8211 	mrs	r2, BASEPRI
 8014714:	f383 8812 	msr	BASEPRI_MAX, r3
 8014718:	f3bf 8f6f 	isb	sy
 801471c:	3901      	subs	r1, #1
 801471e:	4638      	mov	r0, r7
 8014720:	e7d6      	b.n	80146d0 <clear_event_registrations+0xc>

08014722 <k_poll_event_init>:
{
 8014722:	b510      	push	{r4, lr}
	event->type = type;
 8014724:	04d2      	lsls	r2, r2, #19
 8014726:	0209      	lsls	r1, r1, #8
 8014728:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
 801472c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8014730:	430a      	orrs	r2, r1
 8014732:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
 8014734:	2400      	movs	r4, #0
	event->type = type;
 8014736:	430a      	orrs	r2, r1
	event->obj = obj;
 8014738:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
 801473c:	6084      	str	r4, [r0, #8]
}
 801473e:	bd10      	pop	{r4, pc}

08014740 <z_handle_obj_poll_events>:
{
 8014740:	4603      	mov	r3, r0
	return list->head == list;
 8014742:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8014744:	4283      	cmp	r3, r0
 8014746:	d008      	beq.n	801475a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
 8014748:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 801474c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801474e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8014750:	2300      	movs	r3, #0
	node->prev = NULL;
 8014752:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
 8014756:	f7ff bf5b 	b.w	8014610 <signal_poll_event>
}
 801475a:	4770      	bx	lr

0801475c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
 801475c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 801475e:	e9c0 0000 	strd	r0, r0, [r0]
 8014762:	6083      	str	r3, [r0, #8]
}
 8014764:	4770      	bx	lr

08014766 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
 8014766:	2300      	movs	r3, #0
 8014768:	6083      	str	r3, [r0, #8]
}
 801476a:	4770      	bx	lr

0801476c <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
 801476c:	6883      	ldr	r3, [r0, #8]
 801476e:	600b      	str	r3, [r1, #0]
	*result = sig->result;
 8014770:	68c3      	ldr	r3, [r0, #12]
 8014772:	6013      	str	r3, [r2, #0]
}
 8014774:	4770      	bx	lr

08014776 <k_free>:
	if (ptr != NULL) {
 8014776:	b120      	cbz	r0, 8014782 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
 8014778:	1f01      	subs	r1, r0, #4
 801477a:	f850 0c04 	ldr.w	r0, [r0, #-4]
 801477e:	f7ff bb2f 	b.w	8013de0 <k_heap_free>
}
 8014782:	4770      	bx	lr

08014784 <atoi>:
 8014784:	220a      	movs	r2, #10
 8014786:	2100      	movs	r1, #0
 8014788:	f7f9 b8a4 	b.w	800d8d4 <strtol>

0801478c <memcmp>:
 801478c:	b510      	push	{r4, lr}
 801478e:	3901      	subs	r1, #1
 8014790:	4402      	add	r2, r0
 8014792:	4290      	cmp	r0, r2
 8014794:	d101      	bne.n	801479a <memcmp+0xe>
 8014796:	2000      	movs	r0, #0
 8014798:	e005      	b.n	80147a6 <memcmp+0x1a>
 801479a:	7803      	ldrb	r3, [r0, #0]
 801479c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80147a0:	42a3      	cmp	r3, r4
 80147a2:	d001      	beq.n	80147a8 <memcmp+0x1c>
 80147a4:	1b18      	subs	r0, r3, r4
 80147a6:	bd10      	pop	{r4, pc}
 80147a8:	3001      	adds	r0, #1
 80147aa:	e7f2      	b.n	8014792 <memcmp+0x6>

080147ac <memcpy>:
 80147ac:	440a      	add	r2, r1
 80147ae:	4291      	cmp	r1, r2
 80147b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80147b4:	d100      	bne.n	80147b8 <memcpy+0xc>
 80147b6:	4770      	bx	lr
 80147b8:	b510      	push	{r4, lr}
 80147ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147c2:	4291      	cmp	r1, r2
 80147c4:	d1f9      	bne.n	80147ba <memcpy+0xe>
 80147c6:	bd10      	pop	{r4, pc}

080147c8 <__memcpy_chk>:
 80147c8:	429a      	cmp	r2, r3
 80147ca:	b508      	push	{r3, lr}
 80147cc:	d901      	bls.n	80147d2 <__memcpy_chk+0xa>
 80147ce:	f7ef fb59 	bl	8003e84 <__chk_fail>
 80147d2:	4281      	cmp	r1, r0
 80147d4:	d804      	bhi.n	80147e0 <__memcpy_chk+0x18>
 80147d6:	188b      	adds	r3, r1, r2
 80147d8:	4298      	cmp	r0, r3
 80147da:	d3f8      	bcc.n	80147ce <__memcpy_chk+0x6>
 80147dc:	4281      	cmp	r1, r0
 80147de:	d102      	bne.n	80147e6 <__memcpy_chk+0x1e>
 80147e0:	1883      	adds	r3, r0, r2
 80147e2:	4299      	cmp	r1, r3
 80147e4:	d3f3      	bcc.n	80147ce <__memcpy_chk+0x6>
 80147e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80147ea:	f7ff bfdf 	b.w	80147ac <memcpy>

080147ee <memmove>:
 80147ee:	4288      	cmp	r0, r1
 80147f0:	b510      	push	{r4, lr}
 80147f2:	eb01 0402 	add.w	r4, r1, r2
 80147f6:	d902      	bls.n	80147fe <memmove+0x10>
 80147f8:	4284      	cmp	r4, r0
 80147fa:	4623      	mov	r3, r4
 80147fc:	d807      	bhi.n	801480e <memmove+0x20>
 80147fe:	1e43      	subs	r3, r0, #1
 8014800:	42a1      	cmp	r1, r4
 8014802:	d008      	beq.n	8014816 <memmove+0x28>
 8014804:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014808:	f803 2f01 	strb.w	r2, [r3, #1]!
 801480c:	e7f8      	b.n	8014800 <memmove+0x12>
 801480e:	4402      	add	r2, r0
 8014810:	4601      	mov	r1, r0
 8014812:	428a      	cmp	r2, r1
 8014814:	d100      	bne.n	8014818 <memmove+0x2a>
 8014816:	bd10      	pop	{r4, pc}
 8014818:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801481c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014820:	e7f7      	b.n	8014812 <memmove+0x24>

08014822 <memset>:
 8014822:	4402      	add	r2, r0
 8014824:	4603      	mov	r3, r0
 8014826:	4293      	cmp	r3, r2
 8014828:	d100      	bne.n	801482c <memset+0xa>
 801482a:	4770      	bx	lr
 801482c:	f803 1b01 	strb.w	r1, [r3], #1
 8014830:	e7f9      	b.n	8014826 <memset+0x4>

08014832 <_calloc_r>:
 8014832:	b538      	push	{r3, r4, r5, lr}
 8014834:	fb02 f501 	mul.w	r5, r2, r1
 8014838:	4629      	mov	r1, r5
 801483a:	f7f8 ff19 	bl	800d670 <_malloc_r>
 801483e:	4604      	mov	r4, r0
 8014840:	b118      	cbz	r0, 801484a <_calloc_r+0x18>
 8014842:	462a      	mov	r2, r5
 8014844:	2100      	movs	r1, #0
 8014846:	f7ff ffec 	bl	8014822 <memset>
 801484a:	4620      	mov	r0, r4
 801484c:	bd38      	pop	{r3, r4, r5, pc}

0801484e <strchr>:
 801484e:	b2c9      	uxtb	r1, r1
 8014850:	4603      	mov	r3, r0
 8014852:	4618      	mov	r0, r3
 8014854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014858:	b112      	cbz	r2, 8014860 <strchr+0x12>
 801485a:	428a      	cmp	r2, r1
 801485c:	d1f9      	bne.n	8014852 <strchr+0x4>
 801485e:	4770      	bx	lr
 8014860:	2900      	cmp	r1, #0
 8014862:	bf18      	it	ne
 8014864:	2000      	movne	r0, #0
 8014866:	4770      	bx	lr

08014868 <strcpy>:
 8014868:	4603      	mov	r3, r0
 801486a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801486e:	f803 2b01 	strb.w	r2, [r3], #1
 8014872:	2a00      	cmp	r2, #0
 8014874:	d1f9      	bne.n	801486a <strcpy+0x2>
 8014876:	4770      	bx	lr

08014878 <strncmp>:
 8014878:	b510      	push	{r4, lr}
 801487a:	4603      	mov	r3, r0
 801487c:	b172      	cbz	r2, 801489c <strncmp+0x24>
 801487e:	3901      	subs	r1, #1
 8014880:	1884      	adds	r4, r0, r2
 8014882:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014886:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801488a:	4290      	cmp	r0, r2
 801488c:	d101      	bne.n	8014892 <strncmp+0x1a>
 801488e:	42a3      	cmp	r3, r4
 8014890:	d101      	bne.n	8014896 <strncmp+0x1e>
 8014892:	1a80      	subs	r0, r0, r2
 8014894:	bd10      	pop	{r4, pc}
 8014896:	2800      	cmp	r0, #0
 8014898:	d1f3      	bne.n	8014882 <strncmp+0xa>
 801489a:	e7fa      	b.n	8014892 <strncmp+0x1a>
 801489c:	4610      	mov	r0, r2
 801489e:	e7f9      	b.n	8014894 <strncmp+0x1c>

080148a0 <strncpy>:
 80148a0:	b510      	push	{r4, lr}
 80148a2:	3901      	subs	r1, #1
 80148a4:	4603      	mov	r3, r0
 80148a6:	b132      	cbz	r2, 80148b6 <strncpy+0x16>
 80148a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80148ac:	f803 4b01 	strb.w	r4, [r3], #1
 80148b0:	3a01      	subs	r2, #1
 80148b2:	2c00      	cmp	r4, #0
 80148b4:	d1f7      	bne.n	80148a6 <strncpy+0x6>
 80148b6:	441a      	add	r2, r3
 80148b8:	2100      	movs	r1, #0
 80148ba:	4293      	cmp	r3, r2
 80148bc:	d100      	bne.n	80148c0 <strncpy+0x20>
 80148be:	bd10      	pop	{r4, pc}
 80148c0:	f803 1b01 	strb.w	r1, [r3], #1
 80148c4:	e7f9      	b.n	80148ba <strncpy+0x1a>

080148c6 <strnlen>:
 80148c6:	b510      	push	{r4, lr}
 80148c8:	4602      	mov	r2, r0
 80148ca:	4401      	add	r1, r0
 80148cc:	428a      	cmp	r2, r1
 80148ce:	4613      	mov	r3, r2
 80148d0:	d003      	beq.n	80148da <strnlen+0x14>
 80148d2:	781c      	ldrb	r4, [r3, #0]
 80148d4:	3201      	adds	r2, #1
 80148d6:	2c00      	cmp	r4, #0
 80148d8:	d1f8      	bne.n	80148cc <strnlen+0x6>
 80148da:	1a18      	subs	r0, r3, r0
 80148dc:	bd10      	pop	{r4, pc}

080148de <strrchr>:
 80148de:	b538      	push	{r3, r4, r5, lr}
 80148e0:	4603      	mov	r3, r0
 80148e2:	460c      	mov	r4, r1
 80148e4:	b969      	cbnz	r1, 8014902 <strrchr+0x24>
 80148e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148ea:	f7ff bfb0 	b.w	801484e <strchr>
 80148ee:	1c43      	adds	r3, r0, #1
 80148f0:	4605      	mov	r5, r0
 80148f2:	4621      	mov	r1, r4
 80148f4:	4618      	mov	r0, r3
 80148f6:	f7ff ffaa 	bl	801484e <strchr>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d1f7      	bne.n	80148ee <strrchr+0x10>
 80148fe:	4628      	mov	r0, r5
 8014900:	bd38      	pop	{r3, r4, r5, pc}
 8014902:	2500      	movs	r5, #0
 8014904:	e7f5      	b.n	80148f2 <strrchr+0x14>

08014906 <strstr>:
 8014906:	780a      	ldrb	r2, [r1, #0]
 8014908:	b570      	push	{r4, r5, r6, lr}
 801490a:	b96a      	cbnz	r2, 8014928 <strstr+0x22>
 801490c:	bd70      	pop	{r4, r5, r6, pc}
 801490e:	429a      	cmp	r2, r3
 8014910:	d109      	bne.n	8014926 <strstr+0x20>
 8014912:	460c      	mov	r4, r1
 8014914:	4605      	mov	r5, r0
 8014916:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801491a:	2b00      	cmp	r3, #0
 801491c:	d0f6      	beq.n	801490c <strstr+0x6>
 801491e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014922:	429e      	cmp	r6, r3
 8014924:	d0f7      	beq.n	8014916 <strstr+0x10>
 8014926:	3001      	adds	r0, #1
 8014928:	7803      	ldrb	r3, [r0, #0]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d1ef      	bne.n	801490e <strstr+0x8>
 801492e:	4618      	mov	r0, r3
 8014930:	e7ec      	b.n	801490c <strstr+0x6>

08014932 <__sfmoreglue>:
 8014932:	b570      	push	{r4, r5, r6, lr}
 8014934:	2268      	movs	r2, #104	; 0x68
 8014936:	1e4d      	subs	r5, r1, #1
 8014938:	4355      	muls	r5, r2
 801493a:	460e      	mov	r6, r1
 801493c:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014940:	f7f8 fe96 	bl	800d670 <_malloc_r>
 8014944:	4604      	mov	r4, r0
 8014946:	b140      	cbz	r0, 801495a <__sfmoreglue+0x28>
 8014948:	2100      	movs	r1, #0
 801494a:	e9c0 1600 	strd	r1, r6, [r0]
 801494e:	300c      	adds	r0, #12
 8014950:	60a0      	str	r0, [r4, #8]
 8014952:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014956:	f7ff ff64 	bl	8014822 <memset>
 801495a:	4620      	mov	r0, r4
 801495c:	bd70      	pop	{r4, r5, r6, pc}

0801495e <_fwalk_reent>:
 801495e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014962:	4606      	mov	r6, r0
 8014964:	4688      	mov	r8, r1
 8014966:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801496a:	2700      	movs	r7, #0
 801496c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014970:	f1b9 0901 	subs.w	r9, r9, #1
 8014974:	d505      	bpl.n	8014982 <_fwalk_reent+0x24>
 8014976:	6824      	ldr	r4, [r4, #0]
 8014978:	2c00      	cmp	r4, #0
 801497a:	d1f7      	bne.n	801496c <_fwalk_reent+0xe>
 801497c:	4638      	mov	r0, r7
 801497e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014982:	89ab      	ldrh	r3, [r5, #12]
 8014984:	2b01      	cmp	r3, #1
 8014986:	d907      	bls.n	8014998 <_fwalk_reent+0x3a>
 8014988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801498c:	3301      	adds	r3, #1
 801498e:	d003      	beq.n	8014998 <_fwalk_reent+0x3a>
 8014990:	4629      	mov	r1, r5
 8014992:	4630      	mov	r0, r6
 8014994:	47c0      	blx	r8
 8014996:	4307      	orrs	r7, r0
 8014998:	3568      	adds	r5, #104	; 0x68
 801499a:	e7e9      	b.n	8014970 <_fwalk_reent+0x12>

0801499c <__ssputs_r>:
 801499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149a0:	688e      	ldr	r6, [r1, #8]
 80149a2:	429e      	cmp	r6, r3
 80149a4:	4682      	mov	sl, r0
 80149a6:	460c      	mov	r4, r1
 80149a8:	4690      	mov	r8, r2
 80149aa:	461f      	mov	r7, r3
 80149ac:	d838      	bhi.n	8014a20 <__ssputs_r+0x84>
 80149ae:	898a      	ldrh	r2, [r1, #12]
 80149b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80149b4:	d032      	beq.n	8014a1c <__ssputs_r+0x80>
 80149b6:	6825      	ldr	r5, [r4, #0]
 80149b8:	6909      	ldr	r1, [r1, #16]
 80149ba:	eba5 0901 	sub.w	r9, r5, r1
 80149be:	6965      	ldr	r5, [r4, #20]
 80149c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80149c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80149c8:	3301      	adds	r3, #1
 80149ca:	444b      	add	r3, r9
 80149cc:	106d      	asrs	r5, r5, #1
 80149ce:	429d      	cmp	r5, r3
 80149d0:	bf38      	it	cc
 80149d2:	461d      	movcc	r5, r3
 80149d4:	0553      	lsls	r3, r2, #21
 80149d6:	d531      	bpl.n	8014a3c <__ssputs_r+0xa0>
 80149d8:	4629      	mov	r1, r5
 80149da:	f7f8 fe49 	bl	800d670 <_malloc_r>
 80149de:	4606      	mov	r6, r0
 80149e0:	b950      	cbnz	r0, 80149f8 <__ssputs_r+0x5c>
 80149e2:	230c      	movs	r3, #12
 80149e4:	f8ca 3000 	str.w	r3, [sl]
 80149e8:	89a3      	ldrh	r3, [r4, #12]
 80149ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149ee:	81a3      	strh	r3, [r4, #12]
 80149f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149f8:	6921      	ldr	r1, [r4, #16]
 80149fa:	464a      	mov	r2, r9
 80149fc:	f7ff fed6 	bl	80147ac <memcpy>
 8014a00:	89a3      	ldrh	r3, [r4, #12]
 8014a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a0a:	81a3      	strh	r3, [r4, #12]
 8014a0c:	6126      	str	r6, [r4, #16]
 8014a0e:	6165      	str	r5, [r4, #20]
 8014a10:	444e      	add	r6, r9
 8014a12:	eba5 0509 	sub.w	r5, r5, r9
 8014a16:	6026      	str	r6, [r4, #0]
 8014a18:	60a5      	str	r5, [r4, #8]
 8014a1a:	463e      	mov	r6, r7
 8014a1c:	42be      	cmp	r6, r7
 8014a1e:	d900      	bls.n	8014a22 <__ssputs_r+0x86>
 8014a20:	463e      	mov	r6, r7
 8014a22:	6820      	ldr	r0, [r4, #0]
 8014a24:	4632      	mov	r2, r6
 8014a26:	4641      	mov	r1, r8
 8014a28:	f7ff fee1 	bl	80147ee <memmove>
 8014a2c:	68a3      	ldr	r3, [r4, #8]
 8014a2e:	1b9b      	subs	r3, r3, r6
 8014a30:	60a3      	str	r3, [r4, #8]
 8014a32:	6823      	ldr	r3, [r4, #0]
 8014a34:	4433      	add	r3, r6
 8014a36:	6023      	str	r3, [r4, #0]
 8014a38:	2000      	movs	r0, #0
 8014a3a:	e7db      	b.n	80149f4 <__ssputs_r+0x58>
 8014a3c:	462a      	mov	r2, r5
 8014a3e:	f000 f904 	bl	8014c4a <_realloc_r>
 8014a42:	4606      	mov	r6, r0
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d1e1      	bne.n	8014a0c <__ssputs_r+0x70>
 8014a48:	6921      	ldr	r1, [r4, #16]
 8014a4a:	4650      	mov	r0, sl
 8014a4c:	f7f8 fdc6 	bl	800d5dc <_free_r>
 8014a50:	e7c7      	b.n	80149e2 <__ssputs_r+0x46>

08014a52 <__sfputc_r>:
 8014a52:	6893      	ldr	r3, [r2, #8]
 8014a54:	3b01      	subs	r3, #1
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	b410      	push	{r4}
 8014a5a:	6093      	str	r3, [r2, #8]
 8014a5c:	da07      	bge.n	8014a6e <__sfputc_r+0x1c>
 8014a5e:	6994      	ldr	r4, [r2, #24]
 8014a60:	42a3      	cmp	r3, r4
 8014a62:	db01      	blt.n	8014a68 <__sfputc_r+0x16>
 8014a64:	290a      	cmp	r1, #10
 8014a66:	d102      	bne.n	8014a6e <__sfputc_r+0x1c>
 8014a68:	bc10      	pop	{r4}
 8014a6a:	f7f9 bbdb 	b.w	800e224 <__swbuf_r>
 8014a6e:	6813      	ldr	r3, [r2, #0]
 8014a70:	1c58      	adds	r0, r3, #1
 8014a72:	6010      	str	r0, [r2, #0]
 8014a74:	7019      	strb	r1, [r3, #0]
 8014a76:	4608      	mov	r0, r1
 8014a78:	bc10      	pop	{r4}
 8014a7a:	4770      	bx	lr

08014a7c <__sfputs_r>:
 8014a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a7e:	4606      	mov	r6, r0
 8014a80:	460f      	mov	r7, r1
 8014a82:	4614      	mov	r4, r2
 8014a84:	18d5      	adds	r5, r2, r3
 8014a86:	42ac      	cmp	r4, r5
 8014a88:	d101      	bne.n	8014a8e <__sfputs_r+0x12>
 8014a8a:	2000      	movs	r0, #0
 8014a8c:	e007      	b.n	8014a9e <__sfputs_r+0x22>
 8014a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a92:	463a      	mov	r2, r7
 8014a94:	4630      	mov	r0, r6
 8014a96:	f7ff ffdc 	bl	8014a52 <__sfputc_r>
 8014a9a:	1c43      	adds	r3, r0, #1
 8014a9c:	d1f3      	bne.n	8014a86 <__sfputs_r+0xa>
 8014a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014aa0 <_printf_common>:
 8014aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014aa4:	4616      	mov	r6, r2
 8014aa6:	4699      	mov	r9, r3
 8014aa8:	688a      	ldr	r2, [r1, #8]
 8014aaa:	690b      	ldr	r3, [r1, #16]
 8014aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ab0:	4293      	cmp	r3, r2
 8014ab2:	bfb8      	it	lt
 8014ab4:	4613      	movlt	r3, r2
 8014ab6:	6033      	str	r3, [r6, #0]
 8014ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014abc:	4607      	mov	r7, r0
 8014abe:	460c      	mov	r4, r1
 8014ac0:	b10a      	cbz	r2, 8014ac6 <_printf_common+0x26>
 8014ac2:	3301      	adds	r3, #1
 8014ac4:	6033      	str	r3, [r6, #0]
 8014ac6:	6823      	ldr	r3, [r4, #0]
 8014ac8:	0699      	lsls	r1, r3, #26
 8014aca:	bf42      	ittt	mi
 8014acc:	6833      	ldrmi	r3, [r6, #0]
 8014ace:	3302      	addmi	r3, #2
 8014ad0:	6033      	strmi	r3, [r6, #0]
 8014ad2:	6825      	ldr	r5, [r4, #0]
 8014ad4:	f015 0506 	ands.w	r5, r5, #6
 8014ad8:	d106      	bne.n	8014ae8 <_printf_common+0x48>
 8014ada:	f104 0a19 	add.w	sl, r4, #25
 8014ade:	68e3      	ldr	r3, [r4, #12]
 8014ae0:	6832      	ldr	r2, [r6, #0]
 8014ae2:	1a9b      	subs	r3, r3, r2
 8014ae4:	42ab      	cmp	r3, r5
 8014ae6:	dc26      	bgt.n	8014b36 <_printf_common+0x96>
 8014ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014aec:	1e13      	subs	r3, r2, #0
 8014aee:	6822      	ldr	r2, [r4, #0]
 8014af0:	bf18      	it	ne
 8014af2:	2301      	movne	r3, #1
 8014af4:	0692      	lsls	r2, r2, #26
 8014af6:	d42b      	bmi.n	8014b50 <_printf_common+0xb0>
 8014af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014afc:	4649      	mov	r1, r9
 8014afe:	4638      	mov	r0, r7
 8014b00:	47c0      	blx	r8
 8014b02:	3001      	adds	r0, #1
 8014b04:	d01e      	beq.n	8014b44 <_printf_common+0xa4>
 8014b06:	6823      	ldr	r3, [r4, #0]
 8014b08:	68e5      	ldr	r5, [r4, #12]
 8014b0a:	6832      	ldr	r2, [r6, #0]
 8014b0c:	f003 0306 	and.w	r3, r3, #6
 8014b10:	2b04      	cmp	r3, #4
 8014b12:	bf08      	it	eq
 8014b14:	1aad      	subeq	r5, r5, r2
 8014b16:	68a3      	ldr	r3, [r4, #8]
 8014b18:	6922      	ldr	r2, [r4, #16]
 8014b1a:	bf0c      	ite	eq
 8014b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b20:	2500      	movne	r5, #0
 8014b22:	4293      	cmp	r3, r2
 8014b24:	bfc4      	itt	gt
 8014b26:	1a9b      	subgt	r3, r3, r2
 8014b28:	18ed      	addgt	r5, r5, r3
 8014b2a:	2600      	movs	r6, #0
 8014b2c:	341a      	adds	r4, #26
 8014b2e:	42b5      	cmp	r5, r6
 8014b30:	d11a      	bne.n	8014b68 <_printf_common+0xc8>
 8014b32:	2000      	movs	r0, #0
 8014b34:	e008      	b.n	8014b48 <_printf_common+0xa8>
 8014b36:	2301      	movs	r3, #1
 8014b38:	4652      	mov	r2, sl
 8014b3a:	4649      	mov	r1, r9
 8014b3c:	4638      	mov	r0, r7
 8014b3e:	47c0      	blx	r8
 8014b40:	3001      	adds	r0, #1
 8014b42:	d103      	bne.n	8014b4c <_printf_common+0xac>
 8014b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b4c:	3501      	adds	r5, #1
 8014b4e:	e7c6      	b.n	8014ade <_printf_common+0x3e>
 8014b50:	18e1      	adds	r1, r4, r3
 8014b52:	1c5a      	adds	r2, r3, #1
 8014b54:	2030      	movs	r0, #48	; 0x30
 8014b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014b5a:	4422      	add	r2, r4
 8014b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014b64:	3302      	adds	r3, #2
 8014b66:	e7c7      	b.n	8014af8 <_printf_common+0x58>
 8014b68:	2301      	movs	r3, #1
 8014b6a:	4622      	mov	r2, r4
 8014b6c:	4649      	mov	r1, r9
 8014b6e:	4638      	mov	r0, r7
 8014b70:	47c0      	blx	r8
 8014b72:	3001      	adds	r0, #1
 8014b74:	d0e6      	beq.n	8014b44 <_printf_common+0xa4>
 8014b76:	3601      	adds	r6, #1
 8014b78:	e7d9      	b.n	8014b2e <_printf_common+0x8e>

08014b7a <__sread>:
 8014b7a:	b510      	push	{r4, lr}
 8014b7c:	460c      	mov	r4, r1
 8014b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b82:	f7f9 fd41 	bl	800e608 <_read_r>
 8014b86:	2800      	cmp	r0, #0
 8014b88:	bfab      	itete	ge
 8014b8a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b8c:	89a3      	ldrhlt	r3, [r4, #12]
 8014b8e:	181b      	addge	r3, r3, r0
 8014b90:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b94:	bfac      	ite	ge
 8014b96:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b98:	81a3      	strhlt	r3, [r4, #12]
 8014b9a:	bd10      	pop	{r4, pc}

08014b9c <__swrite>:
 8014b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba0:	461f      	mov	r7, r3
 8014ba2:	898b      	ldrh	r3, [r1, #12]
 8014ba4:	05db      	lsls	r3, r3, #23
 8014ba6:	4605      	mov	r5, r0
 8014ba8:	460c      	mov	r4, r1
 8014baa:	4616      	mov	r6, r2
 8014bac:	d505      	bpl.n	8014bba <__swrite+0x1e>
 8014bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bb2:	2302      	movs	r3, #2
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	f7f9 fcd5 	bl	800e564 <_lseek_r>
 8014bba:	89a3      	ldrh	r3, [r4, #12]
 8014bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bc4:	81a3      	strh	r3, [r4, #12]
 8014bc6:	4632      	mov	r2, r6
 8014bc8:	463b      	mov	r3, r7
 8014bca:	4628      	mov	r0, r5
 8014bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd0:	f7f9 bb7a 	b.w	800e2c8 <_write_r>

08014bd4 <__sseek>:
 8014bd4:	b510      	push	{r4, lr}
 8014bd6:	460c      	mov	r4, r1
 8014bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bdc:	f7f9 fcc2 	bl	800e564 <_lseek_r>
 8014be0:	1c43      	adds	r3, r0, #1
 8014be2:	89a3      	ldrh	r3, [r4, #12]
 8014be4:	bf15      	itete	ne
 8014be6:	6560      	strne	r0, [r4, #84]	; 0x54
 8014be8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014bec:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014bf0:	81a3      	strheq	r3, [r4, #12]
 8014bf2:	bf18      	it	ne
 8014bf4:	81a3      	strhne	r3, [r4, #12]
 8014bf6:	bd10      	pop	{r4, pc}

08014bf8 <__sclose>:
 8014bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bfc:	f7f9 bbe4 	b.w	800e3c8 <_close_r>

08014c00 <__swhatbuf_r>:
 8014c00:	b570      	push	{r4, r5, r6, lr}
 8014c02:	460e      	mov	r6, r1
 8014c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c08:	2900      	cmp	r1, #0
 8014c0a:	b096      	sub	sp, #88	; 0x58
 8014c0c:	4614      	mov	r4, r2
 8014c0e:	461d      	mov	r5, r3
 8014c10:	da08      	bge.n	8014c24 <__swhatbuf_r+0x24>
 8014c12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014c16:	2200      	movs	r2, #0
 8014c18:	602a      	str	r2, [r5, #0]
 8014c1a:	061a      	lsls	r2, r3, #24
 8014c1c:	d410      	bmi.n	8014c40 <__swhatbuf_r+0x40>
 8014c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c22:	e00e      	b.n	8014c42 <__swhatbuf_r+0x42>
 8014c24:	466a      	mov	r2, sp
 8014c26:	f7f9 fd01 	bl	800e62c <_fstat_r>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	dbf1      	blt.n	8014c12 <__swhatbuf_r+0x12>
 8014c2e:	9a01      	ldr	r2, [sp, #4]
 8014c30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014c34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014c38:	425a      	negs	r2, r3
 8014c3a:	415a      	adcs	r2, r3
 8014c3c:	602a      	str	r2, [r5, #0]
 8014c3e:	e7ee      	b.n	8014c1e <__swhatbuf_r+0x1e>
 8014c40:	2340      	movs	r3, #64	; 0x40
 8014c42:	2000      	movs	r0, #0
 8014c44:	6023      	str	r3, [r4, #0]
 8014c46:	b016      	add	sp, #88	; 0x58
 8014c48:	bd70      	pop	{r4, r5, r6, pc}

08014c4a <_realloc_r>:
 8014c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c4c:	4607      	mov	r7, r0
 8014c4e:	4614      	mov	r4, r2
 8014c50:	460e      	mov	r6, r1
 8014c52:	b921      	cbnz	r1, 8014c5e <_realloc_r+0x14>
 8014c54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014c58:	4611      	mov	r1, r2
 8014c5a:	f7f8 bd09 	b.w	800d670 <_malloc_r>
 8014c5e:	b922      	cbnz	r2, 8014c6a <_realloc_r+0x20>
 8014c60:	f7f8 fcbc 	bl	800d5dc <_free_r>
 8014c64:	4625      	mov	r5, r4
 8014c66:	4628      	mov	r0, r5
 8014c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c6a:	f000 f814 	bl	8014c96 <_malloc_usable_size_r>
 8014c6e:	42a0      	cmp	r0, r4
 8014c70:	d20f      	bcs.n	8014c92 <_realloc_r+0x48>
 8014c72:	4621      	mov	r1, r4
 8014c74:	4638      	mov	r0, r7
 8014c76:	f7f8 fcfb 	bl	800d670 <_malloc_r>
 8014c7a:	4605      	mov	r5, r0
 8014c7c:	2800      	cmp	r0, #0
 8014c7e:	d0f2      	beq.n	8014c66 <_realloc_r+0x1c>
 8014c80:	4631      	mov	r1, r6
 8014c82:	4622      	mov	r2, r4
 8014c84:	f7ff fd92 	bl	80147ac <memcpy>
 8014c88:	4631      	mov	r1, r6
 8014c8a:	4638      	mov	r0, r7
 8014c8c:	f7f8 fca6 	bl	800d5dc <_free_r>
 8014c90:	e7e9      	b.n	8014c66 <_realloc_r+0x1c>
 8014c92:	4635      	mov	r5, r6
 8014c94:	e7e7      	b.n	8014c66 <_realloc_r+0x1c>

08014c96 <_malloc_usable_size_r>:
 8014c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c9a:	1f18      	subs	r0, r3, #4
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	bfbc      	itt	lt
 8014ca0:	580b      	ldrlt	r3, [r1, r0]
 8014ca2:	18c0      	addlt	r0, r0, r3
 8014ca4:	4770      	bx	lr
